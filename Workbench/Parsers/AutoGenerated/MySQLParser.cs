//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MySQLParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Workbench.Parsers {
/*
 * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2.0,
 * as published by the Free Software Foundation.
 *
 * This program is also distributed with certain software (including
 * but not limited to OpenSSL) that is licensed under separate terms, as
 * designated in a particular file or component or in included license
 * documentation. The authors of MySQL hereby grant you an additional
 * permission to link the program and your derivative works with the
 * separately licensed software that they have included with MySQL.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 * the GNU General Public License, version 2.0, for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class MySQLParser : MySQLBaseRecognizer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ACCOUNT_SYMBOL=1, ASCII_SYMBOL=2, ALWAYS_SYMBOL=3, BACKUP_SYMBOL=4, BEGIN_SYMBOL=5, 
		BYTE_SYMBOL=6, CACHE_SYMBOL=7, CHARSET_SYMBOL=8, CHECKSUM_SYMBOL=9, CLOSE_SYMBOL=10, 
		COMMENT_SYMBOL=11, COMMIT_SYMBOL=12, CONTAINS_SYMBOL=13, DEALLOCATE_SYMBOL=14, 
		DO_SYMBOL=15, END_SYMBOL=16, EXECUTE_SYMBOL=17, FLUSH_SYMBOL=18, FOLLOWS_SYMBOL=19, 
		FORMAT_SYMBOL=20, GROUP_REPLICATION_SYMBOL=21, HANDLER_SYMBOL=22, HELP_SYMBOL=23, 
		HOST_SYMBOL=24, INSTALL_SYMBOL=25, LANGUAGE_SYMBOL=26, NO_SYMBOL=27, OPEN_SYMBOL=28, 
		OPTIONS_SYMBOL=29, OWNER_SYMBOL=30, PARSER_SYMBOL=31, PARTITION_SYMBOL=32, 
		PORT_SYMBOL=33, PRECEDES_SYMBOL=34, PREPARE_SYMBOL=35, REMOVE_SYMBOL=36, 
		REPAIR_SYMBOL=37, RESET_SYMBOL=38, RESTORE_SYMBOL=39, ROLLBACK_SYMBOL=40, 
		SAVEPOINT_SYMBOL=41, SECURITY_SYMBOL=42, SERVER_SYMBOL=43, SIGNED_SYMBOL=44, 
		SLAVE_SYMBOL=45, SOCKET_SYMBOL=46, SONAME_SYMBOL=47, START_SYMBOL=48, 
		STOP_SYMBOL=49, TRUNCATE_SYMBOL=50, UNICODE_SYMBOL=51, UNINSTALL_SYMBOL=52, 
		UPGRADE_SYMBOL=53, WRAPPER_SYMBOL=54, XA_SYMBOL=55, SHUTDOWN_SYMBOL=56, 
		ACTION_SYMBOL=57, ADDDATE_SYMBOL=58, AFTER_SYMBOL=59, AGAINST_SYMBOL=60, 
		AGGREGATE_SYMBOL=61, ALGORITHM_SYMBOL=62, ANALYZE_SYMBOL=63, ANY_SYMBOL=64, 
		AT_SYMBOL=65, AUTHORS_SYMBOL=66, AUTO_INCREMENT_SYMBOL=67, AUTOEXTEND_SIZE_SYMBOL=68, 
		AVG_ROW_LENGTH_SYMBOL=69, AVG_SYMBOL=70, BINLOG_SYMBOL=71, BIT_SYMBOL=72, 
		BLOCK_SYMBOL=73, BOOL_SYMBOL=74, BOOLEAN_SYMBOL=75, BTREE_SYMBOL=76, CASCADED_SYMBOL=77, 
		CATALOG_NAME_SYMBOL=78, CHAIN_SYMBOL=79, CHANGED_SYMBOL=80, CHANNEL_SYMBOL=81, 
		CIPHER_SYMBOL=82, CLIENT_SYMBOL=83, CLASS_ORIGIN_SYMBOL=84, COALESCE_SYMBOL=85, 
		CODE_SYMBOL=86, COLLATION_SYMBOL=87, COLUMN_NAME_SYMBOL=88, COLUMN_FORMAT_SYMBOL=89, 
		COLUMNS_SYMBOL=90, COMMITTED_SYMBOL=91, COMPACT_SYMBOL=92, COMPLETION_SYMBOL=93, 
		COMPRESSED_SYMBOL=94, COMPRESSION_SYMBOL=95, ENCRYPTION_SYMBOL=96, CONCURRENT_SYMBOL=97, 
		CONNECTION_SYMBOL=98, CONSISTENT_SYMBOL=99, CONSTRAINT_CATALOG_SYMBOL=100, 
		CONSTRAINT_SCHEMA_SYMBOL=101, CONSTRAINT_NAME_SYMBOL=102, CONTEXT_SYMBOL=103, 
		CONTRIBUTORS_SYMBOL=104, CPU_SYMBOL=105, CUBE_SYMBOL=106, CURRENT_SYMBOL=107, 
		CURSOR_NAME_SYMBOL=108, DATA_SYMBOL=109, DATAFILE_SYMBOL=110, DATETIME_SYMBOL=111, 
		DATE_SYMBOL=112, DAY_SYMBOL=113, DEFAULT_AUTH_SYMBOL=114, DEFINER_SYMBOL=115, 
		DELAY_KEY_WRITE_SYMBOL=116, DES_KEY_FILE_SYMBOL=117, DIAGNOSTICS_SYMBOL=118, 
		DIRECTORY_SYMBOL=119, DISABLE_SYMBOL=120, DISCARD_SYMBOL=121, DISK_SYMBOL=122, 
		DUMPFILE_SYMBOL=123, DUPLICATE_SYMBOL=124, DYNAMIC_SYMBOL=125, ENDS_SYMBOL=126, 
		ENUM_SYMBOL=127, ENGINE_SYMBOL=128, ENGINES_SYMBOL=129, ERROR_SYMBOL=130, 
		ERRORS_SYMBOL=131, ESCAPE_SYMBOL=132, EVENT_SYMBOL=133, EVENTS_SYMBOL=134, 
		EVERY_SYMBOL=135, EXPANSION_SYMBOL=136, EXPORT_SYMBOL=137, EXTENDED_SYMBOL=138, 
		EXTENT_SIZE_SYMBOL=139, FAULTS_SYMBOL=140, FAST_SYMBOL=141, FOUND_SYMBOL=142, 
		ENABLE_SYMBOL=143, FULL_SYMBOL=144, FILE_SYMBOL=145, FILE_BLOCK_SIZE_SYMBOL=146, 
		FILTER_SYMBOL=147, FIRST_SYMBOL=148, FIXED_SYMBOL=149, GENERAL_SYMBOL=150, 
		GEOMETRY_SYMBOL=151, GEOMETRYCOLLECTION_SYMBOL=152, GET_FORMAT_SYMBOL=153, 
		GRANTS_SYMBOL=154, GLOBAL_SYMBOL=155, HASH_SYMBOL=156, HOSTS_SYMBOL=157, 
		HOUR_SYMBOL=158, IDENTIFIED_SYMBOL=159, IGNORE_SERVER_IDS_SYMBOL=160, 
		INVOKER_SYMBOL=161, IMPORT_SYMBOL=162, INDEXES_SYMBOL=163, INITIAL_SIZE_SYMBOL=164, 
		INSTANCE_SYMBOL=165, INNODB_SYMBOL=166, IO_SYMBOL=167, IPC_SYMBOL=168, 
		ISOLATION_SYMBOL=169, ISSUER_SYMBOL=170, INSERT_METHOD_SYMBOL=171, JSON_SYMBOL=172, 
		KEY_BLOCK_SIZE_SYMBOL=173, LAST_SYMBOL=174, LEAVES_SYMBOL=175, LESS_SYMBOL=176, 
		LEVEL_SYMBOL=177, LINESTRING_SYMBOL=178, LIST_SYMBOL=179, LOCAL_SYMBOL=180, 
		LOCKS_SYMBOL=181, LOGFILE_SYMBOL=182, LOGS_SYMBOL=183, MAX_ROWS_SYMBOL=184, 
		MASTER_SYMBOL=185, MASTER_HEARTBEAT_PERIOD_SYMBOL=186, MASTER_HOST_SYMBOL=187, 
		MASTER_PORT_SYMBOL=188, MASTER_LOG_FILE_SYMBOL=189, MASTER_LOG_POS_SYMBOL=190, 
		MASTER_USER_SYMBOL=191, MASTER_PASSWORD_SYMBOL=192, MASTER_SERVER_ID_SYMBOL=193, 
		MASTER_CONNECT_RETRY_SYMBOL=194, MASTER_RETRY_COUNT_SYMBOL=195, MASTER_DELAY_SYMBOL=196, 
		MASTER_SSL_SYMBOL=197, MASTER_SSL_CA_SYMBOL=198, MASTER_SSL_CAPATH_SYMBOL=199, 
		MASTER_TLS_VERSION_SYMBOL=200, MASTER_SSL_CERT_SYMBOL=201, MASTER_SSL_CIPHER_SYMBOL=202, 
		MASTER_SSL_CRL_SYMBOL=203, MASTER_SSL_CRLPATH_SYMBOL=204, MASTER_SSL_KEY_SYMBOL=205, 
		MASTER_AUTO_POSITION_SYMBOL=206, MAX_CONNECTIONS_PER_HOUR_SYMBOL=207, 
		MAX_QUERIES_PER_HOUR_SYMBOL=208, MAX_STATEMENT_TIME_SYMBOL=209, MAX_SIZE_SYMBOL=210, 
		MAX_UPDATES_PER_HOUR_SYMBOL=211, MAX_USER_CONNECTIONS_SYMBOL=212, MEDIUM_SYMBOL=213, 
		MEMORY_SYMBOL=214, MERGE_SYMBOL=215, MESSAGE_TEXT_SYMBOL=216, MICROSECOND_SYMBOL=217, 
		MIGRATE_SYMBOL=218, MINUTE_SYMBOL=219, MIN_ROWS_SYMBOL=220, MODIFY_SYMBOL=221, 
		MODE_SYMBOL=222, MONTH_SYMBOL=223, MULTILINESTRING_SYMBOL=224, MULTIPOINT_SYMBOL=225, 
		MULTIPOLYGON_SYMBOL=226, MUTEX_SYMBOL=227, MYSQL_ERRNO_SYMBOL=228, NAME_SYMBOL=229, 
		NAMES_SYMBOL=230, NATIONAL_SYMBOL=231, NCHAR_SYMBOL=232, NDBCLUSTER_SYMBOL=233, 
		NEVER_SYMBOL=234, NEXT_SYMBOL=235, NEW_SYMBOL=236, NO_WAIT_SYMBOL=237, 
		NODEGROUP_SYMBOL=238, NONE_SYMBOL=239, NUMBER_SYMBOL=240, NVARCHAR_SYMBOL=241, 
		OFFSET_SYMBOL=242, OLD_PASSWORD_SYMBOL=243, ONE_SHOT_SYMBOL=244, ONE_SYMBOL=245, 
		PACK_KEYS_SYMBOL=246, PAGE_SYMBOL=247, PARTIAL_SYMBOL=248, PARTITIONING_SYMBOL=249, 
		PARTITIONS_SYMBOL=250, PASSWORD_SYMBOL=251, PHASE_SYMBOL=252, PLUGIN_DIR_SYMBOL=253, 
		PLUGIN_SYMBOL=254, PLUGINS_SYMBOL=255, POINT_SYMBOL=256, POLYGON_SYMBOL=257, 
		PRESERVE_SYMBOL=258, PREV_SYMBOL=259, PRIVILEGES_SYMBOL=260, PROCESS_SYMBOL=261, 
		PROCESSLIST_SYMBOL=262, PROFILE_SYMBOL=263, PROFILES_SYMBOL=264, PROXY_SYMBOL=265, 
		QUARTER_SYMBOL=266, QUERY_SYMBOL=267, QUICK_SYMBOL=268, READ_ONLY_SYMBOL=269, 
		REBUILD_SYMBOL=270, RECOVER_SYMBOL=271, REDO_BUFFER_SIZE_SYMBOL=272, REDOFILE_SYMBOL=273, 
		REDUNDANT_SYMBOL=274, RELAY_SYMBOL=275, RELAYLOG_SYMBOL=276, RELAY_LOG_FILE_SYMBOL=277, 
		RELAY_LOG_POS_SYMBOL=278, RELAY_THREAD_SYMBOL=279, RELOAD_SYMBOL=280, 
		REORGANIZE_SYMBOL=281, REPEATABLE_SYMBOL=282, REPLICATION_SYMBOL=283, 
		REPLICATE_DO_DB_SYMBOL=284, REPLICATE_IGNORE_DB_SYMBOL=285, REPLICATE_DO_TABLE_SYMBOL=286, 
		REPLICATE_IGNORE_TABLE_SYMBOL=287, REPLICATE_WILD_DO_TABLE_SYMBOL=288, 
		REPLICATE_WILD_IGNORE_TABLE_SYMBOL=289, REPLICATE_REWRITE_DB_SYMBOL=290, 
		RESUME_SYMBOL=291, RETURNED_SQLSTATE_SYMBOL=292, RETURNS_SYMBOL=293, REVERSE_SYMBOL=294, 
		ROLLUP_SYMBOL=295, ROTATE_SYMBOL=296, ROUTINE_SYMBOL=297, ROWS_SYMBOL=298, 
		ROW_COUNT_SYMBOL=299, ROW_FORMAT_SYMBOL=300, ROW_SYMBOL=301, RTREE_SYMBOL=302, 
		SCHEDULE_SYMBOL=303, SCHEMA_NAME_SYMBOL=304, SECOND_SYMBOL=305, SERIAL_SYMBOL=306, 
		SERIALIZABLE_SYMBOL=307, SESSION_SYMBOL=308, SIMPLE_SYMBOL=309, SHARE_SYMBOL=310, 
		SLOW_SYMBOL=311, SNAPSHOT_SYMBOL=312, SOUNDS_SYMBOL=313, SOURCE_SYMBOL=314, 
		SQL_AFTER_GTIDS_SYMBOL=315, SQL_AFTER_MTS_GAPS_SYMBOL=316, SQL_BEFORE_GTIDS_SYMBOL=317, 
		SQL_CACHE_SYMBOL=318, SQL_BUFFER_RESULT_SYMBOL=319, SQL_NO_CACHE_SYMBOL=320, 
		SQL_THREAD_SYMBOL=321, STACKED_SYMBOL=322, STARTS_SYMBOL=323, STATS_AUTO_RECALC_SYMBOL=324, 
		STATS_PERSISTENT_SYMBOL=325, STATS_SAMPLE_PAGES_SYMBOL=326, STATUS_SYMBOL=327, 
		STORAGE_SYMBOL=328, STRING_SYMBOL=329, SUBCLASS_ORIGIN_SYMBOL=330, SUBDATE_SYMBOL=331, 
		SUBJECT_SYMBOL=332, SUBPARTITION_SYMBOL=333, SUBPARTITIONS_SYMBOL=334, 
		SUPER_SYMBOL=335, SUSPEND_SYMBOL=336, SWAPS_SYMBOL=337, SWITCHES_SYMBOL=338, 
		TABLE_NAME_SYMBOL=339, TABLES_SYMBOL=340, TABLE_CHECKSUM_SYMBOL=341, TABLESPACE_SYMBOL=342, 
		TEMPORARY_SYMBOL=343, TEMPTABLE_SYMBOL=344, TEXT_SYMBOL=345, THAN_SYMBOL=346, 
		TRANSACTION_SYMBOL=347, TRIGGERS_SYMBOL=348, TIMESTAMP_SYMBOL=349, TIMESTAMP_ADD_SYMBOL=350, 
		TIMESTAMP_DIFF_SYMBOL=351, TIME_SYMBOL=352, TYPES_SYMBOL=353, TYPE_SYMBOL=354, 
		UDF_RETURNS_SYMBOL=355, FUNCTION_SYMBOL=356, UNCOMMITTED_SYMBOL=357, UNDEFINED_SYMBOL=358, 
		UNDO_BUFFER_SIZE_SYMBOL=359, UNDOFILE_SYMBOL=360, UNKNOWN_SYMBOL=361, 
		UNTIL_SYMBOL=362, USER_RESOURCES_SYMBOL=363, USER_SYMBOL=364, USE_FRM_SYMBOL=365, 
		VARIABLES_SYMBOL=366, VIEW_SYMBOL=367, VALUE_SYMBOL=368, WARNINGS_SYMBOL=369, 
		WAIT_SYMBOL=370, WEEK_SYMBOL=371, WORK_SYMBOL=372, WEIGHT_STRING_SYMBOL=373, 
		X509_SYMBOL=374, XID_SYMBOL=375, XML_SYMBOL=376, YEAR_SYMBOL=377, NOT2_SYMBOL=378, 
		CONCAT_PIPES_SYMBOL=379, INT_NUMBER=380, LONG_NUMBER=381, ULONGLONG_NUMBER=382, 
		EQUAL_OPERATOR=383, ASSIGN_OPERATOR=384, NULL_SAFE_EQUAL_OPERATOR=385, 
		GREATER_OR_EQUAL_OPERATOR=386, GREATER_THAN_OPERATOR=387, LESS_OR_EQUAL_OPERATOR=388, 
		LESS_THAN_OPERATOR=389, NOT_EQUAL_OPERATOR=390, PLUS_OPERATOR=391, MINUS_OPERATOR=392, 
		MULT_OPERATOR=393, DIV_OPERATOR=394, MOD_OPERATOR=395, LOGICAL_NOT_OPERATOR=396, 
		BITWISE_NOT_OPERATOR=397, SHIFT_LEFT_OPERATOR=398, SHIFT_RIGHT_OPERATOR=399, 
		LOGICAL_AND_OPERATOR=400, BITWISE_AND_OPERATOR=401, BITWISE_XOR_OPERATOR=402, 
		LOGICAL_OR_OPERATOR=403, BITWISE_OR_OPERATOR=404, DOT_SYMBOL=405, COMMA_SYMBOL=406, 
		SEMICOLON_SYMBOL=407, COLON_SYMBOL=408, OPEN_PAR_SYMBOL=409, CLOSE_PAR_SYMBOL=410, 
		OPEN_CURLY_SYMBOL=411, CLOSE_CURLY_SYMBOL=412, UNDERLINE_SYMBOL=413, JSON_SEPARATOR_SYMBOL=414, 
		JSON_UNQUOTED_SEPARATOR_SYMBOL=415, AT_SIGN_SYMBOL=416, AT_TEXT_SUFFIX=417, 
		AT_AT_SIGN_SYMBOL=418, NULL2_SYMBOL=419, PARAM_MARKER=420, HEX_NUMBER=421, 
		BIN_NUMBER=422, DECIMAL_NUMBER=423, FLOAT_NUMBER=424, ACCESSIBLE_SYMBOL=425, 
		ADD_SYMBOL=426, ALL_SYMBOL=427, ALTER_SYMBOL=428, ANALYSE_SYMBOL=429, 
		AND_SYMBOL=430, AS_SYMBOL=431, ASC_SYMBOL=432, ASENSITIVE_SYMBOL=433, 
		BEFORE_SYMBOL=434, BETWEEN_SYMBOL=435, BIGINT_SYMBOL=436, BINARY_SYMBOL=437, 
		BIN_NUM_SYMBOL=438, BIT_AND_SYMBOL=439, BIT_OR_SYMBOL=440, BIT_XOR_SYMBOL=441, 
		BLOB_SYMBOL=442, BOTH_SYMBOL=443, BY_SYMBOL=444, CALL_SYMBOL=445, CASCADE_SYMBOL=446, 
		CASE_SYMBOL=447, CAST_SYMBOL=448, CHANGE_SYMBOL=449, CHAR_SYMBOL=450, 
		CHECK_SYMBOL=451, COLLATE_SYMBOL=452, COLUMN_SYMBOL=453, CONDITION_SYMBOL=454, 
		CONSTRAINT_SYMBOL=455, CONTINUE_SYMBOL=456, CONVERT_SYMBOL=457, COUNT_SYMBOL=458, 
		CREATE_SYMBOL=459, CROSS_SYMBOL=460, CURDATE_SYMBOL=461, CURRENT_DATE_SYMBOL=462, 
		CURRENT_TIME_SYMBOL=463, CURRENT_USER_SYMBOL=464, CURSOR_SYMBOL=465, CURTIME_SYMBOL=466, 
		DATABASE_SYMBOL=467, DATABASES_SYMBOL=468, DATE_ADD_SYMBOL=469, DATE_SUB_SYMBOL=470, 
		DAY_HOUR_SYMBOL=471, DAY_MICROSECOND_SYMBOL=472, DAY_MINUTE_SYMBOL=473, 
		DAY_SECOND_SYMBOL=474, DECIMAL_NUM_SYMBOL=475, DECIMAL_SYMBOL=476, DECLARE_SYMBOL=477, 
		DEFAULT_SYMBOL=478, DELAYED_SYMBOL=479, DELETE_SYMBOL=480, DESC_SYMBOL=481, 
		DESCRIBE_SYMBOL=482, DETERMINISTIC_SYMBOL=483, DISTINCT_SYMBOL=484, DIV_SYMBOL=485, 
		DOUBLE_SYMBOL=486, DROP_SYMBOL=487, DUAL_SYMBOL=488, EACH_SYMBOL=489, 
		ELSE_SYMBOL=490, ELSEIF_SYMBOL=491, ENCLOSED_SYMBOL=492, END_OF_INPUT_SYMBOL=493, 
		ESCAPED_SYMBOL=494, EXCHANGE_SYMBOL=495, EXISTS_SYMBOL=496, EXIT_SYMBOL=497, 
		EXPIRE_SYMBOL=498, EXTRACT_SYMBOL=499, FALSE_SYMBOL=500, FETCH_SYMBOL=501, 
		FLOAT_SYMBOL=502, FORCE_SYMBOL=503, FOREIGN_SYMBOL=504, FOR_SYMBOL=505, 
		FROM_SYMBOL=506, FULLTEXT_SYMBOL=507, GET_SYMBOL=508, GENERATED_SYMBOL=509, 
		GRANT_SYMBOL=510, GROUP_SYMBOL=511, GROUP_CONCAT_SYMBOL=512, HAVING_SYMBOL=513, 
		HIGH_PRIORITY_SYMBOL=514, HOUR_MICROSECOND_SYMBOL=515, HOUR_MINUTE_SYMBOL=516, 
		HOUR_SECOND_SYMBOL=517, IF_SYMBOL=518, IGNORE_SYMBOL=519, INDEX_SYMBOL=520, 
		INFILE_SYMBOL=521, INNER_SYMBOL=522, INOUT_SYMBOL=523, INSENSITIVE_SYMBOL=524, 
		INSERT_SYMBOL=525, INTERVAL_SYMBOL=526, INTO_SYMBOL=527, INT_SYMBOL=528, 
		IN_SYMBOL=529, IO_AFTER_GTIDS_SYMBOL=530, IO_BEFORE_GTIDS_SYMBOL=531, 
		IS_SYMBOL=532, ITERATE_SYMBOL=533, JOIN_SYMBOL=534, KEYS_SYMBOL=535, KEY_SYMBOL=536, 
		KILL_SYMBOL=537, LEADING_SYMBOL=538, LEAVE_SYMBOL=539, LEFT_SYMBOL=540, 
		LIKE_SYMBOL=541, LIMIT_SYMBOL=542, LINEAR_SYMBOL=543, LINES_SYMBOL=544, 
		LOAD_SYMBOL=545, LOCATOR_SYMBOL=546, LOCK_SYMBOL=547, LONGBLOB_SYMBOL=548, 
		LONGTEXT_SYMBOL=549, LONG_NUM_SYMBOL=550, LONG_SYMBOL=551, LOOP_SYMBOL=552, 
		LOW_PRIORITY_SYMBOL=553, MASTER_BIND_SYMBOL=554, MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL=555, 
		MATCH_SYMBOL=556, MAX_SYMBOL=557, MAXVALUE_SYMBOL=558, MEDIUMBLOB_SYMBOL=559, 
		MEDIUMINT_SYMBOL=560, MEDIUMTEXT_SYMBOL=561, MID_SYMBOL=562, MINUTE_MICROSECOND_SYMBOL=563, 
		MINUTE_SECOND_SYMBOL=564, MIN_SYMBOL=565, MODIFIES_SYMBOL=566, MOD_SYMBOL=567, 
		NATURAL_SYMBOL=568, NCHAR_STRING_SYMBOL=569, NEG_SYMBOL=570, NONBLOCKING_SYMBOL=571, 
		NOT_SYMBOL=572, NOW_SYMBOL=573, NO_WRITE_TO_BINLOG_SYMBOL=574, NULL_SYMBOL=575, 
		NUMERIC_SYMBOL=576, OFFLINE_SYMBOL=577, ON_SYMBOL=578, ONLINE_SYMBOL=579, 
		ONLY_SYMBOL=580, OPTIMIZE_SYMBOL=581, OPTIMIZER_COSTS_SYMBOL=582, OPTION_SYMBOL=583, 
		OPTIONALLY_SYMBOL=584, ORDER_SYMBOL=585, OR_SYMBOL=586, OUTER_SYMBOL=587, 
		OUTFILE_SYMBOL=588, OUT_SYMBOL=589, POSITION_SYMBOL=590, PRECISION_SYMBOL=591, 
		PRIMARY_SYMBOL=592, PROCEDURE_SYMBOL=593, PURGE_SYMBOL=594, RANGE_SYMBOL=595, 
		READS_SYMBOL=596, READ_SYMBOL=597, READ_WRITE_SYMBOL=598, REAL_SYMBOL=599, 
		REFERENCES_SYMBOL=600, REGEXP_SYMBOL=601, RELEASE_SYMBOL=602, RENAME_SYMBOL=603, 
		REPEAT_SYMBOL=604, REPLACE_SYMBOL=605, REQUIRE_SYMBOL=606, RESIGNAL_SYMBOL=607, 
		RESTRICT_SYMBOL=608, RETURN_SYMBOL=609, REVOKE_SYMBOL=610, RIGHT_SYMBOL=611, 
		SECOND_MICROSECOND_SYMBOL=612, SELECT_SYMBOL=613, SENSITIVE_SYMBOL=614, 
		SEPARATOR_SYMBOL=615, SERVER_OPTIONS_SYMBOL=616, SESSION_USER_SYMBOL=617, 
		SET_SYMBOL=618, SET_VAR_SYMBOL=619, SHOW_SYMBOL=620, SIGNAL_SYMBOL=621, 
		SMALLINT_SYMBOL=622, SPATIAL_SYMBOL=623, SPECIFIC_SYMBOL=624, SQLEXCEPTION_SYMBOL=625, 
		SQLSTATE_SYMBOL=626, SQLWARNING_SYMBOL=627, SQL_BIG_RESULT_SYMBOL=628, 
		SQL_CALC_FOUND_ROWS_SYMBOL=629, SQL_SMALL_RESULT_SYMBOL=630, SQL_SYMBOL=631, 
		SSL_SYMBOL=632, STARTING_SYMBOL=633, STDDEV_SAMP_SYMBOL=634, STDDEV_SYMBOL=635, 
		STDDEV_POP_SYMBOL=636, STD_SYMBOL=637, STORED_SYMBOL=638, STRAIGHT_JOIN_SYMBOL=639, 
		SUBSTR_SYMBOL=640, SUBSTRING_SYMBOL=641, SUM_SYMBOL=642, SYSDATE_SYMBOL=643, 
		SYSTEM_USER_SYMBOL=644, TABLE_REF_PRIORITY_SYMBOL=645, TABLE_SYMBOL=646, 
		TERMINATED_SYMBOL=647, THEN_SYMBOL=648, TINYBLOB_SYMBOL=649, TINYINT_SYMBOL=650, 
		TINYTEXT_SYMBOL=651, TO_SYMBOL=652, TRAILING_SYMBOL=653, TRIGGER_SYMBOL=654, 
		TRIM_SYMBOL=655, TRUE_SYMBOL=656, UNDO_SYMBOL=657, UNION_SYMBOL=658, UNIQUE_SYMBOL=659, 
		UNLOCK_SYMBOL=660, UNSIGNED_SYMBOL=661, UPDATE_SYMBOL=662, USAGE_SYMBOL=663, 
		USE_SYMBOL=664, USING_SYMBOL=665, UTC_DATE_SYMBOL=666, UTC_TIMESTAMP_SYMBOL=667, 
		UTC_TIME_SYMBOL=668, VALIDATION_SYMBOL=669, VALUES_SYMBOL=670, VARBINARY_SYMBOL=671, 
		VARCHAR_SYMBOL=672, VARIANCE_SYMBOL=673, VARYING_SYMBOL=674, VAR_POP_SYMBOL=675, 
		VAR_SAMP_SYMBOL=676, VIRTUAL_SYMBOL=677, WHEN_SYMBOL=678, WHERE_SYMBOL=679, 
		WHILE_SYMBOL=680, WITH_SYMBOL=681, WITH_CUBE_SYMBOL=682, WITH_ROLLUP_SYMBOL=683, 
		WITHOUT_SYMBOL=684, WRITE_SYMBOL=685, XOR_SYMBOL=686, YEAR_MONTH_SYMBOL=687, 
		ZEROFILL_SYMBOL=688, PERSIST_SYMBOL=689, ROLE_SYMBOL=690, ADMIN_SYMBOL=691, 
		INVISIBLE_SYMBOL=692, VISIBLE_SYMBOL=693, EXCEPT_SYMBOL=694, COMPONENT_SYMBOL=695, 
		RECURSIVE_SYMBOL=696, JSON_OBJECTAGG_SYMBOL=697, JSON_ARRAYAGG_SYMBOL=698, 
		OF_SYMBOL=699, SKIP_SYMBOL=700, LOCKED_SYMBOL=701, NOWAIT_SYMBOL=702, 
		GROUPING_SYMBOL=703, PERSIST_ONLY_SYMBOL=704, HISTOGRAM_SYMBOL=705, BUCKETS_SYMBOL=706, 
		REMOTE_SYMBOL=707, CLONE_SYMBOL=708, CUME_DIST_SYMBOL=709, DENSE_RANK_SYMBOL=710, 
		EXCLUDE_SYMBOL=711, FIRST_VALUE_SYMBOL=712, FOLLOWING_SYMBOL=713, GROUPS_SYMBOL=714, 
		LAG_SYMBOL=715, LAST_VALUE_SYMBOL=716, LEAD_SYMBOL=717, NTH_VALUE_SYMBOL=718, 
		NTILE_SYMBOL=719, NULLS_SYMBOL=720, OTHERS_SYMBOL=721, OVER_SYMBOL=722, 
		PERCENT_RANK_SYMBOL=723, PRECEDING_SYMBOL=724, RANK_SYMBOL=725, RESPECT_SYMBOL=726, 
		ROW_NUMBER_SYMBOL=727, TIES_SYMBOL=728, UNBOUNDED_SYMBOL=729, WINDOW_SYMBOL=730, 
		EMPTY_SYMBOL=731, JSON_TABLE_SYMBOL=732, NESTED_SYMBOL=733, ORDINALITY_SYMBOL=734, 
		PATH_SYMBOL=735, HISTORY_SYMBOL=736, REUSE_SYMBOL=737, SRID_SYMBOL=738, 
		THREAD_PRIORITY_SYMBOL=739, RESOURCE_SYMBOL=740, SYSTEM_SYMBOL=741, VCPU_SYMBOL=742, 
		MASTER_PUBLIC_KEY_PATH_SYMBOL=743, GET_MASTER_PUBLIC_KEY_SYMBOL=744, RESTART_SYMBOL=745, 
		DEFINITION_SYMBOL=746, DESCRIPTION_SYMBOL=747, ORGANIZATION_SYMBOL=748, 
		REFERENCE_SYMBOL=749, OPTIONAL_SYMBOL=750, SECONDARY_SYMBOL=751, SECONDARY_ENGINE_SYMBOL=752, 
		SECONDARY_LOAD_SYMBOL=753, SECONDARY_UNLOAD_SYMBOL=754, ACTIVE_SYMBOL=755, 
		INACTIVE_SYMBOL=756, LATERAL_SYMBOL=757, RETAIN_SYMBOL=758, OLD_SYMBOL=759, 
		NETWORK_NAMESPACE_SYMBOL=760, ENFORCED_SYMBOL=761, ARRAY_SYMBOL=762, OJ_SYMBOL=763, 
		MEMBER_SYMBOL=764, WHITESPACE=765, INVALID_INPUT=766, UNDERSCORE_CHARSET=767, 
		IDENTIFIER=768, NCHAR_TEXT=769, BACK_TICK_QUOTED_ID=770, DOUBLE_QUOTED_TEXT=771, 
		SINGLE_QUOTED_TEXT=772, VERSION_COMMENT_START=773, MYSQL_COMMENT_START=774, 
		VERSION_COMMENT_END=775, BLOCK_COMMENT=776, POUND_COMMENT=777, DASHDASH_COMMENT=778, 
		NOT_EQUAL2_OPERATOR=779;
	public const int
		RULE_query = 0, RULE_simpleStatement = 1, RULE_alterStatement = 2, RULE_alterDatabase = 3, 
		RULE_alterEvent = 4, RULE_alterLogfileGroup = 5, RULE_alterLogfileGroupOptions = 6, 
		RULE_alterLogfileGroupOption = 7, RULE_alterServer = 8, RULE_alterTable = 9, 
		RULE_alterTableActions = 10, RULE_alterCommandList = 11, RULE_alterCommandsModifierList = 12, 
		RULE_standaloneAlterCommands = 13, RULE_alterPartition = 14, RULE_alterList = 15, 
		RULE_alterCommandsModifier = 16, RULE_alterListItem = 17, RULE_place = 18, 
		RULE_restrict = 19, RULE_alterOrderList = 20, RULE_alterAlgorithmOption = 21, 
		RULE_alterLockOption = 22, RULE_indexLockAndAlgorithm = 23, RULE_withValidation = 24, 
		RULE_removePartitioning = 25, RULE_allOrPartitionNameList = 26, RULE_reorgPartitionRule = 27, 
		RULE_alterTablespace = 28, RULE_alterUndoTablespace = 29, RULE_undoTableSpaceOptions = 30, 
		RULE_undoTableSpaceOption = 31, RULE_alterTablespaceOptions = 32, RULE_alterTablespaceOption = 33, 
		RULE_changeTablespaceOption = 34, RULE_alterView = 35, RULE_viewTail = 36, 
		RULE_viewSelect = 37, RULE_viewCheckOption = 38, RULE_createStatement = 39, 
		RULE_createDatabase = 40, RULE_createDatabaseOption = 41, RULE_createTable = 42, 
		RULE_tableElementList = 43, RULE_tableElement = 44, RULE_duplicateAsQueryExpression = 45, 
		RULE_queryExpressionOrParens = 46, RULE_createRoutine = 47, RULE_createProcedure = 48, 
		RULE_createFunction = 49, RULE_createUdf = 50, RULE_routineCreateOption = 51, 
		RULE_routineAlterOptions = 52, RULE_routineOption = 53, RULE_createIndex = 54, 
		RULE_indexNameAndType = 55, RULE_createIndexTarget = 56, RULE_createLogfileGroup = 57, 
		RULE_logfileGroupOptions = 58, RULE_logfileGroupOption = 59, RULE_createServer = 60, 
		RULE_serverOptions = 61, RULE_serverOption = 62, RULE_createTablespace = 63, 
		RULE_createUndoTablespace = 64, RULE_tsDataFileName = 65, RULE_tsDataFile = 66, 
		RULE_tablespaceOptions = 67, RULE_tablespaceOption = 68, RULE_tsOptionInitialSize = 69, 
		RULE_tsOptionUndoRedoBufferSize = 70, RULE_tsOptionAutoextendSize = 71, 
		RULE_tsOptionMaxSize = 72, RULE_tsOptionExtentSize = 73, RULE_tsOptionNodegroup = 74, 
		RULE_tsOptionEngine = 75, RULE_tsOptionWait = 76, RULE_tsOptionComment = 77, 
		RULE_tsOptionFileblockSize = 78, RULE_tsOptionEncryption = 79, RULE_createView = 80, 
		RULE_viewReplaceOrAlgorithm = 81, RULE_viewAlgorithm = 82, RULE_viewSuid = 83, 
		RULE_createTrigger = 84, RULE_triggerFollowsPrecedesClause = 85, RULE_createEvent = 86, 
		RULE_createRole = 87, RULE_createSpatialReference = 88, RULE_srsAttribute = 89, 
		RULE_dropStatement = 90, RULE_dropDatabase = 91, RULE_dropEvent = 92, 
		RULE_dropFunction = 93, RULE_dropProcedure = 94, RULE_dropIndex = 95, 
		RULE_dropLogfileGroup = 96, RULE_dropLogfileGroupOption = 97, RULE_dropServer = 98, 
		RULE_dropTable = 99, RULE_dropTableSpace = 100, RULE_dropTrigger = 101, 
		RULE_dropView = 102, RULE_dropRole = 103, RULE_dropSpatialReference = 104, 
		RULE_dropUndoTablespace = 105, RULE_renameTableStatement = 106, RULE_renamePair = 107, 
		RULE_truncateTableStatement = 108, RULE_importStatement = 109, RULE_callStatement = 110, 
		RULE_deleteStatement = 111, RULE_partitionDelete = 112, RULE_deleteStatementOption = 113, 
		RULE_doStatement = 114, RULE_handlerStatement = 115, RULE_handlerReadOrScan = 116, 
		RULE_insertStatement = 117, RULE_insertLockOption = 118, RULE_insertFromConstructor = 119, 
		RULE_fields = 120, RULE_insertValues = 121, RULE_insertQueryExpression = 122, 
		RULE_valueList = 123, RULE_values = 124, RULE_insertUpdateList = 125, 
		RULE_loadStatement = 126, RULE_dataOrXml = 127, RULE_xmlRowsIdentifiedBy = 128, 
		RULE_loadDataFileTail = 129, RULE_loadDataFileTargetList = 130, RULE_fieldOrVariableList = 131, 
		RULE_replaceStatement = 132, RULE_selectStatement = 133, RULE_selectStatementWithInto = 134, 
		RULE_queryExpression = 135, RULE_queryExpressionBody = 136, RULE_queryExpressionParens = 137, 
		RULE_querySpecification = 138, RULE_subquery = 139, RULE_querySpecOption = 140, 
		RULE_limitClause = 141, RULE_simpleLimitClause = 142, RULE_limitOptions = 143, 
		RULE_limitOption = 144, RULE_intoClause = 145, RULE_procedureAnalyseClause = 146, 
		RULE_havingClause = 147, RULE_windowClause = 148, RULE_windowDefinition = 149, 
		RULE_windowSpec = 150, RULE_windowSpecDetails = 151, RULE_windowFrameClause = 152, 
		RULE_windowFrameUnits = 153, RULE_windowFrameExtent = 154, RULE_windowFrameStart = 155, 
		RULE_windowFrameBetween = 156, RULE_windowFrameBound = 157, RULE_windowFrameExclusion = 158, 
		RULE_withClause = 159, RULE_commonTableExpression = 160, RULE_groupByClause = 161, 
		RULE_olapOption = 162, RULE_orderClause = 163, RULE_direction = 164, RULE_fromClause = 165, 
		RULE_tableReferenceList = 166, RULE_selectOption = 167, RULE_lockingClause = 168, 
		RULE_lockStrengh = 169, RULE_lockedRowAction = 170, RULE_selectItemList = 171, 
		RULE_selectItem = 172, RULE_selectAlias = 173, RULE_whereClause = 174, 
		RULE_tableReference = 175, RULE_escapedTableReference = 176, RULE_joinedTable = 177, 
		RULE_naturalJoinType = 178, RULE_innerJoinType = 179, RULE_outerJoinType = 180, 
		RULE_tableFactor = 181, RULE_singleTable = 182, RULE_singleTableParens = 183, 
		RULE_derivedTable = 184, RULE_tableReferenceListParens = 185, RULE_tableFunction = 186, 
		RULE_columnsClause = 187, RULE_jtColumn = 188, RULE_onEmptyOrError = 189, 
		RULE_onEmpty = 190, RULE_onError = 191, RULE_jtOnResponse = 192, RULE_unionOption = 193, 
		RULE_tableAlias = 194, RULE_indexHintList = 195, RULE_indexHint = 196, 
		RULE_indexHintType = 197, RULE_keyOrIndex = 198, RULE_constraintKeyType = 199, 
		RULE_indexHintClause = 200, RULE_indexList = 201, RULE_indexListElement = 202, 
		RULE_updateStatement = 203, RULE_transactionOrLockingStatement = 204, 
		RULE_transactionStatement = 205, RULE_beginWork = 206, RULE_transactionCharacteristic = 207, 
		RULE_setTransactionCharacteristic = 208, RULE_isolationLevel = 209, RULE_savepointStatement = 210, 
		RULE_lockStatement = 211, RULE_lockItem = 212, RULE_lockOption = 213, 
		RULE_xaStatement = 214, RULE_xaConvert = 215, RULE_xid = 216, RULE_replicationStatement = 217, 
		RULE_resetOption = 218, RULE_masterResetOptions = 219, RULE_replicationLoad = 220, 
		RULE_changeMaster = 221, RULE_changeMasterOptions = 222, RULE_masterOption = 223, 
		RULE_masterFileDef = 224, RULE_serverIdList = 225, RULE_changeReplication = 226, 
		RULE_filterDefinition = 227, RULE_filterDbList = 228, RULE_filterTableList = 229, 
		RULE_filterStringList = 230, RULE_filterWildDbTableString = 231, RULE_filterDbPairList = 232, 
		RULE_slave = 233, RULE_slaveUntilOptions = 234, RULE_slaveConnectionOptions = 235, 
		RULE_slaveThreadOptions = 236, RULE_slaveThreadOption = 237, RULE_groupReplication = 238, 
		RULE_preparedStatement = 239, RULE_executeStatement = 240, RULE_executeVarList = 241, 
		RULE_cloneStatement = 242, RULE_dataDirSSL = 243, RULE_ssl = 244, RULE_accountManagementStatement = 245, 
		RULE_alterUser = 246, RULE_alterUserTail = 247, RULE_createUser = 248, 
		RULE_createUserTail = 249, RULE_defaultRoleClause = 250, RULE_requireClause = 251, 
		RULE_connectOptions = 252, RULE_accountLockPasswordExpireOptions = 253, 
		RULE_dropUser = 254, RULE_grant = 255, RULE_grantTargetList = 256, RULE_grantOptions = 257, 
		RULE_exceptRoleList = 258, RULE_withRoles = 259, RULE_grantAs = 260, RULE_versionedRequireClause = 261, 
		RULE_renameUser = 262, RULE_revoke = 263, RULE_onTypeTo = 264, RULE_aclType = 265, 
		RULE_setPassword = 266, RULE_roleOrPrivilegesList = 267, RULE_roleOrPrivilege = 268, 
		RULE_grantIdentifier = 269, RULE_requireList = 270, RULE_requireListElement = 271, 
		RULE_grantOption = 272, RULE_setRole = 273, RULE_roleList = 274, RULE_role = 275, 
		RULE_tableAdministrationStatement = 276, RULE_histogram = 277, RULE_checkOption = 278, 
		RULE_repairType = 279, RULE_installUninstallStatment = 280, RULE_setStatement = 281, 
		RULE_optionValueNoOptionType = 282, RULE_setSystemVariable = 283, RULE_optionValueFollowingOptionType = 284, 
		RULE_setExprOrDefault = 285, RULE_optionValueList = 286, RULE_optionValue = 287, 
		RULE_showStatement = 288, RULE_showCommandType = 289, RULE_nonBlocking = 290, 
		RULE_fromOrIn = 291, RULE_inDb = 292, RULE_profileType = 293, RULE_otherAdministrativeStatement = 294, 
		RULE_keyCacheListOrParts = 295, RULE_keyCacheList = 296, RULE_assignToKeycache = 297, 
		RULE_assignToKeycachePartition = 298, RULE_cacheKeyList = 299, RULE_keyUsageElement = 300, 
		RULE_keyUsageList = 301, RULE_flushOption = 302, RULE_logType = 303, RULE_flushTables = 304, 
		RULE_flushTablesOptions = 305, RULE_preloadTail = 306, RULE_preloadList = 307, 
		RULE_preloadKeys = 308, RULE_adminPartition = 309, RULE_resourceGroupManagement = 310, 
		RULE_createResourceGroup = 311, RULE_resourceGroupVcpuList = 312, RULE_vcpuNumOrRange = 313, 
		RULE_resourceGroupPriority = 314, RULE_resourceGroupEnableDisable = 315, 
		RULE_alterResourceGroup = 316, RULE_setResourceGroup = 317, RULE_threadIdList = 318, 
		RULE_dropResourceGroup = 319, RULE_utilityStatement = 320, RULE_describeCommand = 321, 
		RULE_explainCommand = 322, RULE_explainableStatement = 323, RULE_helpCommand = 324, 
		RULE_useCommand = 325, RULE_restartServer = 326, RULE_expr = 327, RULE_boolPri = 328, 
		RULE_compOp = 329, RULE_predicate = 330, RULE_predicateOperations = 331, 
		RULE_bitExpr = 332, RULE_simpleExpr = 333, RULE_arrayCast = 334, RULE_jsonOperator = 335, 
		RULE_sumExpr = 336, RULE_groupingOperation = 337, RULE_windowFunctionCall = 338, 
		RULE_windowingClause = 339, RULE_leadLagInfo = 340, RULE_nullTreatment = 341, 
		RULE_jsonFunction = 342, RULE_inSumExpr = 343, RULE_identListArg = 344, 
		RULE_identList = 345, RULE_fulltextOptions = 346, RULE_runtimeFunctionCall = 347, 
		RULE_geometryFunction = 348, RULE_timeFunctionParameters = 349, RULE_fractionalPrecision = 350, 
		RULE_weightStringLevels = 351, RULE_weightStringLevelListItem = 352, RULE_dateTimeTtype = 353, 
		RULE_trimFunction = 354, RULE_substringFunction = 355, RULE_functionCall = 356, 
		RULE_udfExprList = 357, RULE_udfExpr = 358, RULE_variable = 359, RULE_userVariable = 360, 
		RULE_systemVariable = 361, RULE_internalVariableName = 362, RULE_whenExpression = 363, 
		RULE_thenExpression = 364, RULE_elseExpression = 365, RULE_castType = 366, 
		RULE_exprList = 367, RULE_charset = 368, RULE_notRule = 369, RULE_not2Rule = 370, 
		RULE_interval = 371, RULE_intervalTimeStamp = 372, RULE_exprListWithParentheses = 373, 
		RULE_exprWithParentheses = 374, RULE_simpleExprWithParentheses = 375, 
		RULE_orderList = 376, RULE_orderExpression = 377, RULE_groupList = 378, 
		RULE_groupingExpression = 379, RULE_channel = 380, RULE_compoundStatement = 381, 
		RULE_returnStatement = 382, RULE_ifStatement = 383, RULE_ifBody = 384, 
		RULE_thenStatement = 385, RULE_compoundStatementList = 386, RULE_caseStatement = 387, 
		RULE_elseStatement = 388, RULE_labeledBlock = 389, RULE_unlabeledBlock = 390, 
		RULE_label = 391, RULE_beginEndBlock = 392, RULE_labeledControl = 393, 
		RULE_unlabeledControl = 394, RULE_loopBlock = 395, RULE_whileDoBlock = 396, 
		RULE_repeatUntilBlock = 397, RULE_spDeclarations = 398, RULE_spDeclaration = 399, 
		RULE_variableDeclaration = 400, RULE_conditionDeclaration = 401, RULE_spCondition = 402, 
		RULE_sqlstate = 403, RULE_handlerDeclaration = 404, RULE_handlerCondition = 405, 
		RULE_cursorDeclaration = 406, RULE_iterateStatement = 407, RULE_leaveStatement = 408, 
		RULE_getDiagnostics = 409, RULE_signalAllowedExpr = 410, RULE_statementInformationItem = 411, 
		RULE_conditionInformationItem = 412, RULE_signalInformationItemName = 413, 
		RULE_signalStatement = 414, RULE_resignalStatement = 415, RULE_signalInformationItem = 416, 
		RULE_cursorOpen = 417, RULE_cursorClose = 418, RULE_cursorFetch = 419, 
		RULE_schedule = 420, RULE_columnDefinition = 421, RULE_checkOrReferences = 422, 
		RULE_checkConstraint = 423, RULE_constraintEnforcement = 424, RULE_tableConstraintDef = 425, 
		RULE_constraintName = 426, RULE_fieldDefinition = 427, RULE_columnAttribute = 428, 
		RULE_columnFormat = 429, RULE_storageMedia = 430, RULE_gcolAttribute = 431, 
		RULE_references = 432, RULE_deleteOption = 433, RULE_keyList = 434, RULE_keyPart = 435, 
		RULE_keyListWithExpression = 436, RULE_keyPartOrExpression = 437, RULE_keyListVariants = 438, 
		RULE_indexType = 439, RULE_indexOption = 440, RULE_commonIndexOption = 441, 
		RULE_visibility = 442, RULE_indexTypeClause = 443, RULE_fulltextIndexOption = 444, 
		RULE_spatialIndexOption = 445, RULE_dataTypeDefinition = 446, RULE_dataType = 447, 
		RULE_nchar = 448, RULE_varchar = 449, RULE_nvarchar = 450, RULE_realType = 451, 
		RULE_fieldLength = 452, RULE_fieldOptions = 453, RULE_charsetWithOptBinary = 454, 
		RULE_ascii = 455, RULE_unicode = 456, RULE_wsNumCodepoints = 457, RULE_typeDatetimePrecision = 458, 
		RULE_charsetName = 459, RULE_collationName = 460, RULE_createTableOptions = 461, 
		RULE_createTableOptionsSpaceSeparated = 462, RULE_createTableOption = 463, 
		RULE_ternaryOption = 464, RULE_defaultCollation = 465, RULE_defaultEncryption = 466, 
		RULE_defaultCharset = 467, RULE_partitionClause = 468, RULE_partitionTypeDef = 469, 
		RULE_subPartitions = 470, RULE_partitionKeyAlgorithm = 471, RULE_partitionDefinitions = 472, 
		RULE_partitionDefinition = 473, RULE_partitionValuesIn = 474, RULE_partitionOption = 475, 
		RULE_subpartitionDefinition = 476, RULE_partitionValueItemListParen = 477, 
		RULE_partitionValueItem = 478, RULE_definerClause = 479, RULE_ifExists = 480, 
		RULE_ifNotExists = 481, RULE_procedureParameter = 482, RULE_functionParameter = 483, 
		RULE_collate = 484, RULE_typeWithOptCollate = 485, RULE_schemaIdentifierPair = 486, 
		RULE_viewRefList = 487, RULE_updateList = 488, RULE_updateElement = 489, 
		RULE_charsetClause = 490, RULE_fieldsClause = 491, RULE_fieldTerm = 492, 
		RULE_linesClause = 493, RULE_lineTerm = 494, RULE_userList = 495, RULE_createUserList = 496, 
		RULE_alterUserList = 497, RULE_createUserEntry = 498, RULE_alterUserEntry = 499, 
		RULE_retainCurrentPassword = 500, RULE_discardOldPassword = 501, RULE_replacePassword = 502, 
		RULE_user = 503, RULE_likeClause = 504, RULE_likeOrWhere = 505, RULE_onlineOption = 506, 
		RULE_noWriteToBinLog = 507, RULE_usePartition = 508, RULE_fieldIdentifier = 509, 
		RULE_columnName = 510, RULE_columnInternalRef = 511, RULE_columnInternalRefList = 512, 
		RULE_columnRef = 513, RULE_insertIdentifier = 514, RULE_indexName = 515, 
		RULE_indexRef = 516, RULE_tableWild = 517, RULE_schemaName = 518, RULE_schemaRef = 519, 
		RULE_procedureName = 520, RULE_procedureRef = 521, RULE_functionName = 522, 
		RULE_functionRef = 523, RULE_triggerName = 524, RULE_triggerRef = 525, 
		RULE_viewName = 526, RULE_viewRef = 527, RULE_tablespaceName = 528, RULE_tablespaceRef = 529, 
		RULE_logfileGroupName = 530, RULE_logfileGroupRef = 531, RULE_eventName = 532, 
		RULE_eventRef = 533, RULE_udfName = 534, RULE_serverName = 535, RULE_serverRef = 536, 
		RULE_engineRef = 537, RULE_tableName = 538, RULE_filterTableRef = 539, 
		RULE_tableRefWithWildcard = 540, RULE_tableRef = 541, RULE_tableRefList = 542, 
		RULE_tableAliasRefList = 543, RULE_parameterName = 544, RULE_labelIdentifier = 545, 
		RULE_labelRef = 546, RULE_roleIdentifier = 547, RULE_roleRef = 548, RULE_pluginRef = 549, 
		RULE_componentRef = 550, RULE_resourceGroupRef = 551, RULE_windowName = 552, 
		RULE_pureIdentifier = 553, RULE_identifier = 554, RULE_identifierList = 555, 
		RULE_identifierListWithParentheses = 556, RULE_qualifiedIdentifier = 557, 
		RULE_simpleIdentifier = 558, RULE_dotIdentifier = 559, RULE_ulong_number = 560, 
		RULE_real_ulong_number = 561, RULE_ulonglong_number = 562, RULE_real_ulonglong_number = 563, 
		RULE_literal = 564, RULE_signedLiteral = 565, RULE_stringList = 566, RULE_textStringLiteral = 567, 
		RULE_textString = 568, RULE_textStringHash = 569, RULE_textLiteral = 570, 
		RULE_textStringNoLinebreak = 571, RULE_textStringLiteralList = 572, RULE_numLiteral = 573, 
		RULE_boolLiteral = 574, RULE_nullLiteral = 575, RULE_temporalLiteral = 576, 
		RULE_floatOptions = 577, RULE_standardFloatOptions = 578, RULE_precision = 579, 
		RULE_textOrIdentifier = 580, RULE_lValueIdentifier = 581, RULE_roleIdentifierOrText = 582, 
		RULE_sizeNumber = 583, RULE_parentheses = 584, RULE_equal = 585, RULE_optionType = 586, 
		RULE_varIdentType = 587, RULE_setVarIdentType = 588, RULE_identifierKeyword = 589, 
		RULE_identifierKeywordsAmbiguous1RolesAndLabels = 590, RULE_identifierKeywordsAmbiguous2Labels = 591, 
		RULE_labelKeyword = 592, RULE_identifierKeywordsAmbiguous3Roles = 593, 
		RULE_identifierKeywordsUnambiguous = 594, RULE_roleKeyword = 595, RULE_lValueKeyword = 596, 
		RULE_identifierKeywordsAmbiguous4SystemVariables = 597, RULE_roleOrIdentifierKeyword = 598, 
		RULE_roleOrLabelKeyword = 599;
	public static readonly string[] ruleNames = {
		"query", "simpleStatement", "alterStatement", "alterDatabase", "alterEvent", 
		"alterLogfileGroup", "alterLogfileGroupOptions", "alterLogfileGroupOption", 
		"alterServer", "alterTable", "alterTableActions", "alterCommandList", 
		"alterCommandsModifierList", "standaloneAlterCommands", "alterPartition", 
		"alterList", "alterCommandsModifier", "alterListItem", "place", "restrict", 
		"alterOrderList", "alterAlgorithmOption", "alterLockOption", "indexLockAndAlgorithm", 
		"withValidation", "removePartitioning", "allOrPartitionNameList", "reorgPartitionRule", 
		"alterTablespace", "alterUndoTablespace", "undoTableSpaceOptions", "undoTableSpaceOption", 
		"alterTablespaceOptions", "alterTablespaceOption", "changeTablespaceOption", 
		"alterView", "viewTail", "viewSelect", "viewCheckOption", "createStatement", 
		"createDatabase", "createDatabaseOption", "createTable", "tableElementList", 
		"tableElement", "duplicateAsQueryExpression", "queryExpressionOrParens", 
		"createRoutine", "createProcedure", "createFunction", "createUdf", "routineCreateOption", 
		"routineAlterOptions", "routineOption", "createIndex", "indexNameAndType", 
		"createIndexTarget", "createLogfileGroup", "logfileGroupOptions", "logfileGroupOption", 
		"createServer", "serverOptions", "serverOption", "createTablespace", "createUndoTablespace", 
		"tsDataFileName", "tsDataFile", "tablespaceOptions", "tablespaceOption", 
		"tsOptionInitialSize", "tsOptionUndoRedoBufferSize", "tsOptionAutoextendSize", 
		"tsOptionMaxSize", "tsOptionExtentSize", "tsOptionNodegroup", "tsOptionEngine", 
		"tsOptionWait", "tsOptionComment", "tsOptionFileblockSize", "tsOptionEncryption", 
		"createView", "viewReplaceOrAlgorithm", "viewAlgorithm", "viewSuid", "createTrigger", 
		"triggerFollowsPrecedesClause", "createEvent", "createRole", "createSpatialReference", 
		"srsAttribute", "dropStatement", "dropDatabase", "dropEvent", "dropFunction", 
		"dropProcedure", "dropIndex", "dropLogfileGroup", "dropLogfileGroupOption", 
		"dropServer", "dropTable", "dropTableSpace", "dropTrigger", "dropView", 
		"dropRole", "dropSpatialReference", "dropUndoTablespace", "renameTableStatement", 
		"renamePair", "truncateTableStatement", "importStatement", "callStatement", 
		"deleteStatement", "partitionDelete", "deleteStatementOption", "doStatement", 
		"handlerStatement", "handlerReadOrScan", "insertStatement", "insertLockOption", 
		"insertFromConstructor", "fields", "insertValues", "insertQueryExpression", 
		"valueList", "values", "insertUpdateList", "loadStatement", "dataOrXml", 
		"xmlRowsIdentifiedBy", "loadDataFileTail", "loadDataFileTargetList", "fieldOrVariableList", 
		"replaceStatement", "selectStatement", "selectStatementWithInto", "queryExpression", 
		"queryExpressionBody", "queryExpressionParens", "querySpecification", 
		"subquery", "querySpecOption", "limitClause", "simpleLimitClause", "limitOptions", 
		"limitOption", "intoClause", "procedureAnalyseClause", "havingClause", 
		"windowClause", "windowDefinition", "windowSpec", "windowSpecDetails", 
		"windowFrameClause", "windowFrameUnits", "windowFrameExtent", "windowFrameStart", 
		"windowFrameBetween", "windowFrameBound", "windowFrameExclusion", "withClause", 
		"commonTableExpression", "groupByClause", "olapOption", "orderClause", 
		"direction", "fromClause", "tableReferenceList", "selectOption", "lockingClause", 
		"lockStrengh", "lockedRowAction", "selectItemList", "selectItem", "selectAlias", 
		"whereClause", "tableReference", "escapedTableReference", "joinedTable", 
		"naturalJoinType", "innerJoinType", "outerJoinType", "tableFactor", "singleTable", 
		"singleTableParens", "derivedTable", "tableReferenceListParens", "tableFunction", 
		"columnsClause", "jtColumn", "onEmptyOrError", "onEmpty", "onError", "jtOnResponse", 
		"unionOption", "tableAlias", "indexHintList", "indexHint", "indexHintType", 
		"keyOrIndex", "constraintKeyType", "indexHintClause", "indexList", "indexListElement", 
		"updateStatement", "transactionOrLockingStatement", "transactionStatement", 
		"beginWork", "transactionCharacteristic", "setTransactionCharacteristic", 
		"isolationLevel", "savepointStatement", "lockStatement", "lockItem", "lockOption", 
		"xaStatement", "xaConvert", "xid", "replicationStatement", "resetOption", 
		"masterResetOptions", "replicationLoad", "changeMaster", "changeMasterOptions", 
		"masterOption", "masterFileDef", "serverIdList", "changeReplication", 
		"filterDefinition", "filterDbList", "filterTableList", "filterStringList", 
		"filterWildDbTableString", "filterDbPairList", "slave", "slaveUntilOptions", 
		"slaveConnectionOptions", "slaveThreadOptions", "slaveThreadOption", "groupReplication", 
		"preparedStatement", "executeStatement", "executeVarList", "cloneStatement", 
		"dataDirSSL", "ssl", "accountManagementStatement", "alterUser", "alterUserTail", 
		"createUser", "createUserTail", "defaultRoleClause", "requireClause", 
		"connectOptions", "accountLockPasswordExpireOptions", "dropUser", "grant", 
		"grantTargetList", "grantOptions", "exceptRoleList", "withRoles", "grantAs", 
		"versionedRequireClause", "renameUser", "revoke", "onTypeTo", "aclType", 
		"setPassword", "roleOrPrivilegesList", "roleOrPrivilege", "grantIdentifier", 
		"requireList", "requireListElement", "grantOption", "setRole", "roleList", 
		"role", "tableAdministrationStatement", "histogram", "checkOption", "repairType", 
		"installUninstallStatment", "setStatement", "optionValueNoOptionType", 
		"setSystemVariable", "optionValueFollowingOptionType", "setExprOrDefault", 
		"optionValueList", "optionValue", "showStatement", "showCommandType", 
		"nonBlocking", "fromOrIn", "inDb", "profileType", "otherAdministrativeStatement", 
		"keyCacheListOrParts", "keyCacheList", "assignToKeycache", "assignToKeycachePartition", 
		"cacheKeyList", "keyUsageElement", "keyUsageList", "flushOption", "logType", 
		"flushTables", "flushTablesOptions", "preloadTail", "preloadList", "preloadKeys", 
		"adminPartition", "resourceGroupManagement", "createResourceGroup", "resourceGroupVcpuList", 
		"vcpuNumOrRange", "resourceGroupPriority", "resourceGroupEnableDisable", 
		"alterResourceGroup", "setResourceGroup", "threadIdList", "dropResourceGroup", 
		"utilityStatement", "describeCommand", "explainCommand", "explainableStatement", 
		"helpCommand", "useCommand", "restartServer", "expr", "boolPri", "compOp", 
		"predicate", "predicateOperations", "bitExpr", "simpleExpr", "arrayCast", 
		"jsonOperator", "sumExpr", "groupingOperation", "windowFunctionCall", 
		"windowingClause", "leadLagInfo", "nullTreatment", "jsonFunction", "inSumExpr", 
		"identListArg", "identList", "fulltextOptions", "runtimeFunctionCall", 
		"geometryFunction", "timeFunctionParameters", "fractionalPrecision", "weightStringLevels", 
		"weightStringLevelListItem", "dateTimeTtype", "trimFunction", "substringFunction", 
		"functionCall", "udfExprList", "udfExpr", "variable", "userVariable", 
		"systemVariable", "internalVariableName", "whenExpression", "thenExpression", 
		"elseExpression", "castType", "exprList", "charset", "notRule", "not2Rule", 
		"interval", "intervalTimeStamp", "exprListWithParentheses", "exprWithParentheses", 
		"simpleExprWithParentheses", "orderList", "orderExpression", "groupList", 
		"groupingExpression", "channel", "compoundStatement", "returnStatement", 
		"ifStatement", "ifBody", "thenStatement", "compoundStatementList", "caseStatement", 
		"elseStatement", "labeledBlock", "unlabeledBlock", "label", "beginEndBlock", 
		"labeledControl", "unlabeledControl", "loopBlock", "whileDoBlock", "repeatUntilBlock", 
		"spDeclarations", "spDeclaration", "variableDeclaration", "conditionDeclaration", 
		"spCondition", "sqlstate", "handlerDeclaration", "handlerCondition", "cursorDeclaration", 
		"iterateStatement", "leaveStatement", "getDiagnostics", "signalAllowedExpr", 
		"statementInformationItem", "conditionInformationItem", "signalInformationItemName", 
		"signalStatement", "resignalStatement", "signalInformationItem", "cursorOpen", 
		"cursorClose", "cursorFetch", "schedule", "columnDefinition", "checkOrReferences", 
		"checkConstraint", "constraintEnforcement", "tableConstraintDef", "constraintName", 
		"fieldDefinition", "columnAttribute", "columnFormat", "storageMedia", 
		"gcolAttribute", "references", "deleteOption", "keyList", "keyPart", "keyListWithExpression", 
		"keyPartOrExpression", "keyListVariants", "indexType", "indexOption", 
		"commonIndexOption", "visibility", "indexTypeClause", "fulltextIndexOption", 
		"spatialIndexOption", "dataTypeDefinition", "dataType", "nchar", "varchar", 
		"nvarchar", "realType", "fieldLength", "fieldOptions", "charsetWithOptBinary", 
		"ascii", "unicode", "wsNumCodepoints", "typeDatetimePrecision", "charsetName", 
		"collationName", "createTableOptions", "createTableOptionsSpaceSeparated", 
		"createTableOption", "ternaryOption", "defaultCollation", "defaultEncryption", 
		"defaultCharset", "partitionClause", "partitionTypeDef", "subPartitions", 
		"partitionKeyAlgorithm", "partitionDefinitions", "partitionDefinition", 
		"partitionValuesIn", "partitionOption", "subpartitionDefinition", "partitionValueItemListParen", 
		"partitionValueItem", "definerClause", "ifExists", "ifNotExists", "procedureParameter", 
		"functionParameter", "collate", "typeWithOptCollate", "schemaIdentifierPair", 
		"viewRefList", "updateList", "updateElement", "charsetClause", "fieldsClause", 
		"fieldTerm", "linesClause", "lineTerm", "userList", "createUserList", 
		"alterUserList", "createUserEntry", "alterUserEntry", "retainCurrentPassword", 
		"discardOldPassword", "replacePassword", "user", "likeClause", "likeOrWhere", 
		"onlineOption", "noWriteToBinLog", "usePartition", "fieldIdentifier", 
		"columnName", "columnInternalRef", "columnInternalRefList", "columnRef", 
		"insertIdentifier", "indexName", "indexRef", "tableWild", "schemaName", 
		"schemaRef", "procedureName", "procedureRef", "functionName", "functionRef", 
		"triggerName", "triggerRef", "viewName", "viewRef", "tablespaceName", 
		"tablespaceRef", "logfileGroupName", "logfileGroupRef", "eventName", "eventRef", 
		"udfName", "serverName", "serverRef", "engineRef", "tableName", "filterTableRef", 
		"tableRefWithWildcard", "tableRef", "tableRefList", "tableAliasRefList", 
		"parameterName", "labelIdentifier", "labelRef", "roleIdentifier", "roleRef", 
		"pluginRef", "componentRef", "resourceGroupRef", "windowName", "pureIdentifier", 
		"identifier", "identifierList", "identifierListWithParentheses", "qualifiedIdentifier", 
		"simpleIdentifier", "dotIdentifier", "ulong_number", "real_ulong_number", 
		"ulonglong_number", "real_ulonglong_number", "literal", "signedLiteral", 
		"stringList", "textStringLiteral", "textString", "textStringHash", "textLiteral", 
		"textStringNoLinebreak", "textStringLiteralList", "numLiteral", "boolLiteral", 
		"nullLiteral", "temporalLiteral", "floatOptions", "standardFloatOptions", 
		"precision", "textOrIdentifier", "lValueIdentifier", "roleIdentifierOrText", 
		"sizeNumber", "parentheses", "equal", "optionType", "varIdentType", "setVarIdentType", 
		"identifierKeyword", "identifierKeywordsAmbiguous1RolesAndLabels", "identifierKeywordsAmbiguous2Labels", 
		"labelKeyword", "identifierKeywordsAmbiguous3Roles", "identifierKeywordsUnambiguous", 
		"roleKeyword", "lValueKeyword", "identifierKeywordsAmbiguous4SystemVariables", 
		"roleOrIdentifierKeyword", "roleOrLabelKeyword"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "'='", 
		"':='", "'<=>'", "'>='", "'>'", "'<='", "'<'", "'!='", "'+'", "'-'", "'*'", 
		"'/'", "'%'", "'!'", "'~'", "'<<'", "'>>'", "'&&'", "'&'", "'^'", "'||'", 
		"'|'", "'.'", "','", "';'", "':'", "'('", "')'", "'{'", "'}'", "'_'", 
		"'->'", "'->>'", "'@'", null, "'@@'", "'\\N'", "'?'", null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "'<>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ACCOUNT_SYMBOL", "ASCII_SYMBOL", "ALWAYS_SYMBOL", "BACKUP_SYMBOL", 
		"BEGIN_SYMBOL", "BYTE_SYMBOL", "CACHE_SYMBOL", "CHARSET_SYMBOL", "CHECKSUM_SYMBOL", 
		"CLOSE_SYMBOL", "COMMENT_SYMBOL", "COMMIT_SYMBOL", "CONTAINS_SYMBOL", 
		"DEALLOCATE_SYMBOL", "DO_SYMBOL", "END_SYMBOL", "EXECUTE_SYMBOL", "FLUSH_SYMBOL", 
		"FOLLOWS_SYMBOL", "FORMAT_SYMBOL", "GROUP_REPLICATION_SYMBOL", "HANDLER_SYMBOL", 
		"HELP_SYMBOL", "HOST_SYMBOL", "INSTALL_SYMBOL", "LANGUAGE_SYMBOL", "NO_SYMBOL", 
		"OPEN_SYMBOL", "OPTIONS_SYMBOL", "OWNER_SYMBOL", "PARSER_SYMBOL", "PARTITION_SYMBOL", 
		"PORT_SYMBOL", "PRECEDES_SYMBOL", "PREPARE_SYMBOL", "REMOVE_SYMBOL", "REPAIR_SYMBOL", 
		"RESET_SYMBOL", "RESTORE_SYMBOL", "ROLLBACK_SYMBOL", "SAVEPOINT_SYMBOL", 
		"SECURITY_SYMBOL", "SERVER_SYMBOL", "SIGNED_SYMBOL", "SLAVE_SYMBOL", "SOCKET_SYMBOL", 
		"SONAME_SYMBOL", "START_SYMBOL", "STOP_SYMBOL", "TRUNCATE_SYMBOL", "UNICODE_SYMBOL", 
		"UNINSTALL_SYMBOL", "UPGRADE_SYMBOL", "WRAPPER_SYMBOL", "XA_SYMBOL", "SHUTDOWN_SYMBOL", 
		"ACTION_SYMBOL", "ADDDATE_SYMBOL", "AFTER_SYMBOL", "AGAINST_SYMBOL", "AGGREGATE_SYMBOL", 
		"ALGORITHM_SYMBOL", "ANALYZE_SYMBOL", "ANY_SYMBOL", "AT_SYMBOL", "AUTHORS_SYMBOL", 
		"AUTO_INCREMENT_SYMBOL", "AUTOEXTEND_SIZE_SYMBOL", "AVG_ROW_LENGTH_SYMBOL", 
		"AVG_SYMBOL", "BINLOG_SYMBOL", "BIT_SYMBOL", "BLOCK_SYMBOL", "BOOL_SYMBOL", 
		"BOOLEAN_SYMBOL", "BTREE_SYMBOL", "CASCADED_SYMBOL", "CATALOG_NAME_SYMBOL", 
		"CHAIN_SYMBOL", "CHANGED_SYMBOL", "CHANNEL_SYMBOL", "CIPHER_SYMBOL", "CLIENT_SYMBOL", 
		"CLASS_ORIGIN_SYMBOL", "COALESCE_SYMBOL", "CODE_SYMBOL", "COLLATION_SYMBOL", 
		"COLUMN_NAME_SYMBOL", "COLUMN_FORMAT_SYMBOL", "COLUMNS_SYMBOL", "COMMITTED_SYMBOL", 
		"COMPACT_SYMBOL", "COMPLETION_SYMBOL", "COMPRESSED_SYMBOL", "COMPRESSION_SYMBOL", 
		"ENCRYPTION_SYMBOL", "CONCURRENT_SYMBOL", "CONNECTION_SYMBOL", "CONSISTENT_SYMBOL", 
		"CONSTRAINT_CATALOG_SYMBOL", "CONSTRAINT_SCHEMA_SYMBOL", "CONSTRAINT_NAME_SYMBOL", 
		"CONTEXT_SYMBOL", "CONTRIBUTORS_SYMBOL", "CPU_SYMBOL", "CUBE_SYMBOL", 
		"CURRENT_SYMBOL", "CURSOR_NAME_SYMBOL", "DATA_SYMBOL", "DATAFILE_SYMBOL", 
		"DATETIME_SYMBOL", "DATE_SYMBOL", "DAY_SYMBOL", "DEFAULT_AUTH_SYMBOL", 
		"DEFINER_SYMBOL", "DELAY_KEY_WRITE_SYMBOL", "DES_KEY_FILE_SYMBOL", "DIAGNOSTICS_SYMBOL", 
		"DIRECTORY_SYMBOL", "DISABLE_SYMBOL", "DISCARD_SYMBOL", "DISK_SYMBOL", 
		"DUMPFILE_SYMBOL", "DUPLICATE_SYMBOL", "DYNAMIC_SYMBOL", "ENDS_SYMBOL", 
		"ENUM_SYMBOL", "ENGINE_SYMBOL", "ENGINES_SYMBOL", "ERROR_SYMBOL", "ERRORS_SYMBOL", 
		"ESCAPE_SYMBOL", "EVENT_SYMBOL", "EVENTS_SYMBOL", "EVERY_SYMBOL", "EXPANSION_SYMBOL", 
		"EXPORT_SYMBOL", "EXTENDED_SYMBOL", "EXTENT_SIZE_SYMBOL", "FAULTS_SYMBOL", 
		"FAST_SYMBOL", "FOUND_SYMBOL", "ENABLE_SYMBOL", "FULL_SYMBOL", "FILE_SYMBOL", 
		"FILE_BLOCK_SIZE_SYMBOL", "FILTER_SYMBOL", "FIRST_SYMBOL", "FIXED_SYMBOL", 
		"GENERAL_SYMBOL", "GEOMETRY_SYMBOL", "GEOMETRYCOLLECTION_SYMBOL", "GET_FORMAT_SYMBOL", 
		"GRANTS_SYMBOL", "GLOBAL_SYMBOL", "HASH_SYMBOL", "HOSTS_SYMBOL", "HOUR_SYMBOL", 
		"IDENTIFIED_SYMBOL", "IGNORE_SERVER_IDS_SYMBOL", "INVOKER_SYMBOL", "IMPORT_SYMBOL", 
		"INDEXES_SYMBOL", "INITIAL_SIZE_SYMBOL", "INSTANCE_SYMBOL", "INNODB_SYMBOL", 
		"IO_SYMBOL", "IPC_SYMBOL", "ISOLATION_SYMBOL", "ISSUER_SYMBOL", "INSERT_METHOD_SYMBOL", 
		"JSON_SYMBOL", "KEY_BLOCK_SIZE_SYMBOL", "LAST_SYMBOL", "LEAVES_SYMBOL", 
		"LESS_SYMBOL", "LEVEL_SYMBOL", "LINESTRING_SYMBOL", "LIST_SYMBOL", "LOCAL_SYMBOL", 
		"LOCKS_SYMBOL", "LOGFILE_SYMBOL", "LOGS_SYMBOL", "MAX_ROWS_SYMBOL", "MASTER_SYMBOL", 
		"MASTER_HEARTBEAT_PERIOD_SYMBOL", "MASTER_HOST_SYMBOL", "MASTER_PORT_SYMBOL", 
		"MASTER_LOG_FILE_SYMBOL", "MASTER_LOG_POS_SYMBOL", "MASTER_USER_SYMBOL", 
		"MASTER_PASSWORD_SYMBOL", "MASTER_SERVER_ID_SYMBOL", "MASTER_CONNECT_RETRY_SYMBOL", 
		"MASTER_RETRY_COUNT_SYMBOL", "MASTER_DELAY_SYMBOL", "MASTER_SSL_SYMBOL", 
		"MASTER_SSL_CA_SYMBOL", "MASTER_SSL_CAPATH_SYMBOL", "MASTER_TLS_VERSION_SYMBOL", 
		"MASTER_SSL_CERT_SYMBOL", "MASTER_SSL_CIPHER_SYMBOL", "MASTER_SSL_CRL_SYMBOL", 
		"MASTER_SSL_CRLPATH_SYMBOL", "MASTER_SSL_KEY_SYMBOL", "MASTER_AUTO_POSITION_SYMBOL", 
		"MAX_CONNECTIONS_PER_HOUR_SYMBOL", "MAX_QUERIES_PER_HOUR_SYMBOL", "MAX_STATEMENT_TIME_SYMBOL", 
		"MAX_SIZE_SYMBOL", "MAX_UPDATES_PER_HOUR_SYMBOL", "MAX_USER_CONNECTIONS_SYMBOL", 
		"MEDIUM_SYMBOL", "MEMORY_SYMBOL", "MERGE_SYMBOL", "MESSAGE_TEXT_SYMBOL", 
		"MICROSECOND_SYMBOL", "MIGRATE_SYMBOL", "MINUTE_SYMBOL", "MIN_ROWS_SYMBOL", 
		"MODIFY_SYMBOL", "MODE_SYMBOL", "MONTH_SYMBOL", "MULTILINESTRING_SYMBOL", 
		"MULTIPOINT_SYMBOL", "MULTIPOLYGON_SYMBOL", "MUTEX_SYMBOL", "MYSQL_ERRNO_SYMBOL", 
		"NAME_SYMBOL", "NAMES_SYMBOL", "NATIONAL_SYMBOL", "NCHAR_SYMBOL", "NDBCLUSTER_SYMBOL", 
		"NEVER_SYMBOL", "NEXT_SYMBOL", "NEW_SYMBOL", "NO_WAIT_SYMBOL", "NODEGROUP_SYMBOL", 
		"NONE_SYMBOL", "NUMBER_SYMBOL", "NVARCHAR_SYMBOL", "OFFSET_SYMBOL", "OLD_PASSWORD_SYMBOL", 
		"ONE_SHOT_SYMBOL", "ONE_SYMBOL", "PACK_KEYS_SYMBOL", "PAGE_SYMBOL", "PARTIAL_SYMBOL", 
		"PARTITIONING_SYMBOL", "PARTITIONS_SYMBOL", "PASSWORD_SYMBOL", "PHASE_SYMBOL", 
		"PLUGIN_DIR_SYMBOL", "PLUGIN_SYMBOL", "PLUGINS_SYMBOL", "POINT_SYMBOL", 
		"POLYGON_SYMBOL", "PRESERVE_SYMBOL", "PREV_SYMBOL", "PRIVILEGES_SYMBOL", 
		"PROCESS_SYMBOL", "PROCESSLIST_SYMBOL", "PROFILE_SYMBOL", "PROFILES_SYMBOL", 
		"PROXY_SYMBOL", "QUARTER_SYMBOL", "QUERY_SYMBOL", "QUICK_SYMBOL", "READ_ONLY_SYMBOL", 
		"REBUILD_SYMBOL", "RECOVER_SYMBOL", "REDO_BUFFER_SIZE_SYMBOL", "REDOFILE_SYMBOL", 
		"REDUNDANT_SYMBOL", "RELAY_SYMBOL", "RELAYLOG_SYMBOL", "RELAY_LOG_FILE_SYMBOL", 
		"RELAY_LOG_POS_SYMBOL", "RELAY_THREAD_SYMBOL", "RELOAD_SYMBOL", "REORGANIZE_SYMBOL", 
		"REPEATABLE_SYMBOL", "REPLICATION_SYMBOL", "REPLICATE_DO_DB_SYMBOL", "REPLICATE_IGNORE_DB_SYMBOL", 
		"REPLICATE_DO_TABLE_SYMBOL", "REPLICATE_IGNORE_TABLE_SYMBOL", "REPLICATE_WILD_DO_TABLE_SYMBOL", 
		"REPLICATE_WILD_IGNORE_TABLE_SYMBOL", "REPLICATE_REWRITE_DB_SYMBOL", "RESUME_SYMBOL", 
		"RETURNED_SQLSTATE_SYMBOL", "RETURNS_SYMBOL", "REVERSE_SYMBOL", "ROLLUP_SYMBOL", 
		"ROTATE_SYMBOL", "ROUTINE_SYMBOL", "ROWS_SYMBOL", "ROW_COUNT_SYMBOL", 
		"ROW_FORMAT_SYMBOL", "ROW_SYMBOL", "RTREE_SYMBOL", "SCHEDULE_SYMBOL", 
		"SCHEMA_NAME_SYMBOL", "SECOND_SYMBOL", "SERIAL_SYMBOL", "SERIALIZABLE_SYMBOL", 
		"SESSION_SYMBOL", "SIMPLE_SYMBOL", "SHARE_SYMBOL", "SLOW_SYMBOL", "SNAPSHOT_SYMBOL", 
		"SOUNDS_SYMBOL", "SOURCE_SYMBOL", "SQL_AFTER_GTIDS_SYMBOL", "SQL_AFTER_MTS_GAPS_SYMBOL", 
		"SQL_BEFORE_GTIDS_SYMBOL", "SQL_CACHE_SYMBOL", "SQL_BUFFER_RESULT_SYMBOL", 
		"SQL_NO_CACHE_SYMBOL", "SQL_THREAD_SYMBOL", "STACKED_SYMBOL", "STARTS_SYMBOL", 
		"STATS_AUTO_RECALC_SYMBOL", "STATS_PERSISTENT_SYMBOL", "STATS_SAMPLE_PAGES_SYMBOL", 
		"STATUS_SYMBOL", "STORAGE_SYMBOL", "STRING_SYMBOL", "SUBCLASS_ORIGIN_SYMBOL", 
		"SUBDATE_SYMBOL", "SUBJECT_SYMBOL", "SUBPARTITION_SYMBOL", "SUBPARTITIONS_SYMBOL", 
		"SUPER_SYMBOL", "SUSPEND_SYMBOL", "SWAPS_SYMBOL", "SWITCHES_SYMBOL", "TABLE_NAME_SYMBOL", 
		"TABLES_SYMBOL", "TABLE_CHECKSUM_SYMBOL", "TABLESPACE_SYMBOL", "TEMPORARY_SYMBOL", 
		"TEMPTABLE_SYMBOL", "TEXT_SYMBOL", "THAN_SYMBOL", "TRANSACTION_SYMBOL", 
		"TRIGGERS_SYMBOL", "TIMESTAMP_SYMBOL", "TIMESTAMP_ADD_SYMBOL", "TIMESTAMP_DIFF_SYMBOL", 
		"TIME_SYMBOL", "TYPES_SYMBOL", "TYPE_SYMBOL", "UDF_RETURNS_SYMBOL", "FUNCTION_SYMBOL", 
		"UNCOMMITTED_SYMBOL", "UNDEFINED_SYMBOL", "UNDO_BUFFER_SIZE_SYMBOL", "UNDOFILE_SYMBOL", 
		"UNKNOWN_SYMBOL", "UNTIL_SYMBOL", "USER_RESOURCES_SYMBOL", "USER_SYMBOL", 
		"USE_FRM_SYMBOL", "VARIABLES_SYMBOL", "VIEW_SYMBOL", "VALUE_SYMBOL", "WARNINGS_SYMBOL", 
		"WAIT_SYMBOL", "WEEK_SYMBOL", "WORK_SYMBOL", "WEIGHT_STRING_SYMBOL", "X509_SYMBOL", 
		"XID_SYMBOL", "XML_SYMBOL", "YEAR_SYMBOL", "NOT2_SYMBOL", "CONCAT_PIPES_SYMBOL", 
		"INT_NUMBER", "LONG_NUMBER", "ULONGLONG_NUMBER", "EQUAL_OPERATOR", "ASSIGN_OPERATOR", 
		"NULL_SAFE_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", "GREATER_THAN_OPERATOR", 
		"LESS_OR_EQUAL_OPERATOR", "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", 
		"PLUS_OPERATOR", "MINUS_OPERATOR", "MULT_OPERATOR", "DIV_OPERATOR", "MOD_OPERATOR", 
		"LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", "SHIFT_LEFT_OPERATOR", 
		"SHIFT_RIGHT_OPERATOR", "LOGICAL_AND_OPERATOR", "BITWISE_AND_OPERATOR", 
		"BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", "BITWISE_OR_OPERATOR", 
		"DOT_SYMBOL", "COMMA_SYMBOL", "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", 
		"CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", "UNDERLINE_SYMBOL", 
		"JSON_SEPARATOR_SYMBOL", "JSON_UNQUOTED_SEPARATOR_SYMBOL", "AT_SIGN_SYMBOL", 
		"AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", "NULL2_SYMBOL", "PARAM_MARKER", 
		"HEX_NUMBER", "BIN_NUMBER", "DECIMAL_NUMBER", "FLOAT_NUMBER", "ACCESSIBLE_SYMBOL", 
		"ADD_SYMBOL", "ALL_SYMBOL", "ALTER_SYMBOL", "ANALYSE_SYMBOL", "AND_SYMBOL", 
		"AS_SYMBOL", "ASC_SYMBOL", "ASENSITIVE_SYMBOL", "BEFORE_SYMBOL", "BETWEEN_SYMBOL", 
		"BIGINT_SYMBOL", "BINARY_SYMBOL", "BIN_NUM_SYMBOL", "BIT_AND_SYMBOL", 
		"BIT_OR_SYMBOL", "BIT_XOR_SYMBOL", "BLOB_SYMBOL", "BOTH_SYMBOL", "BY_SYMBOL", 
		"CALL_SYMBOL", "CASCADE_SYMBOL", "CASE_SYMBOL", "CAST_SYMBOL", "CHANGE_SYMBOL", 
		"CHAR_SYMBOL", "CHECK_SYMBOL", "COLLATE_SYMBOL", "COLUMN_SYMBOL", "CONDITION_SYMBOL", 
		"CONSTRAINT_SYMBOL", "CONTINUE_SYMBOL", "CONVERT_SYMBOL", "COUNT_SYMBOL", 
		"CREATE_SYMBOL", "CROSS_SYMBOL", "CURDATE_SYMBOL", "CURRENT_DATE_SYMBOL", 
		"CURRENT_TIME_SYMBOL", "CURRENT_USER_SYMBOL", "CURSOR_SYMBOL", "CURTIME_SYMBOL", 
		"DATABASE_SYMBOL", "DATABASES_SYMBOL", "DATE_ADD_SYMBOL", "DATE_SUB_SYMBOL", 
		"DAY_HOUR_SYMBOL", "DAY_MICROSECOND_SYMBOL", "DAY_MINUTE_SYMBOL", "DAY_SECOND_SYMBOL", 
		"DECIMAL_NUM_SYMBOL", "DECIMAL_SYMBOL", "DECLARE_SYMBOL", "DEFAULT_SYMBOL", 
		"DELAYED_SYMBOL", "DELETE_SYMBOL", "DESC_SYMBOL", "DESCRIBE_SYMBOL", "DETERMINISTIC_SYMBOL", 
		"DISTINCT_SYMBOL", "DIV_SYMBOL", "DOUBLE_SYMBOL", "DROP_SYMBOL", "DUAL_SYMBOL", 
		"EACH_SYMBOL", "ELSE_SYMBOL", "ELSEIF_SYMBOL", "ENCLOSED_SYMBOL", "END_OF_INPUT_SYMBOL", 
		"ESCAPED_SYMBOL", "EXCHANGE_SYMBOL", "EXISTS_SYMBOL", "EXIT_SYMBOL", "EXPIRE_SYMBOL", 
		"EXTRACT_SYMBOL", "FALSE_SYMBOL", "FETCH_SYMBOL", "FLOAT_SYMBOL", "FORCE_SYMBOL", 
		"FOREIGN_SYMBOL", "FOR_SYMBOL", "FROM_SYMBOL", "FULLTEXT_SYMBOL", "GET_SYMBOL", 
		"GENERATED_SYMBOL", "GRANT_SYMBOL", "GROUP_SYMBOL", "GROUP_CONCAT_SYMBOL", 
		"HAVING_SYMBOL", "HIGH_PRIORITY_SYMBOL", "HOUR_MICROSECOND_SYMBOL", "HOUR_MINUTE_SYMBOL", 
		"HOUR_SECOND_SYMBOL", "IF_SYMBOL", "IGNORE_SYMBOL", "INDEX_SYMBOL", "INFILE_SYMBOL", 
		"INNER_SYMBOL", "INOUT_SYMBOL", "INSENSITIVE_SYMBOL", "INSERT_SYMBOL", 
		"INTERVAL_SYMBOL", "INTO_SYMBOL", "INT_SYMBOL", "IN_SYMBOL", "IO_AFTER_GTIDS_SYMBOL", 
		"IO_BEFORE_GTIDS_SYMBOL", "IS_SYMBOL", "ITERATE_SYMBOL", "JOIN_SYMBOL", 
		"KEYS_SYMBOL", "KEY_SYMBOL", "KILL_SYMBOL", "LEADING_SYMBOL", "LEAVE_SYMBOL", 
		"LEFT_SYMBOL", "LIKE_SYMBOL", "LIMIT_SYMBOL", "LINEAR_SYMBOL", "LINES_SYMBOL", 
		"LOAD_SYMBOL", "LOCATOR_SYMBOL", "LOCK_SYMBOL", "LONGBLOB_SYMBOL", "LONGTEXT_SYMBOL", 
		"LONG_NUM_SYMBOL", "LONG_SYMBOL", "LOOP_SYMBOL", "LOW_PRIORITY_SYMBOL", 
		"MASTER_BIND_SYMBOL", "MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL", "MATCH_SYMBOL", 
		"MAX_SYMBOL", "MAXVALUE_SYMBOL", "MEDIUMBLOB_SYMBOL", "MEDIUMINT_SYMBOL", 
		"MEDIUMTEXT_SYMBOL", "MID_SYMBOL", "MINUTE_MICROSECOND_SYMBOL", "MINUTE_SECOND_SYMBOL", 
		"MIN_SYMBOL", "MODIFIES_SYMBOL", "MOD_SYMBOL", "NATURAL_SYMBOL", "NCHAR_STRING_SYMBOL", 
		"NEG_SYMBOL", "NONBLOCKING_SYMBOL", "NOT_SYMBOL", "NOW_SYMBOL", "NO_WRITE_TO_BINLOG_SYMBOL", 
		"NULL_SYMBOL", "NUMERIC_SYMBOL", "OFFLINE_SYMBOL", "ON_SYMBOL", "ONLINE_SYMBOL", 
		"ONLY_SYMBOL", "OPTIMIZE_SYMBOL", "OPTIMIZER_COSTS_SYMBOL", "OPTION_SYMBOL", 
		"OPTIONALLY_SYMBOL", "ORDER_SYMBOL", "OR_SYMBOL", "OUTER_SYMBOL", "OUTFILE_SYMBOL", 
		"OUT_SYMBOL", "POSITION_SYMBOL", "PRECISION_SYMBOL", "PRIMARY_SYMBOL", 
		"PROCEDURE_SYMBOL", "PURGE_SYMBOL", "RANGE_SYMBOL", "READS_SYMBOL", "READ_SYMBOL", 
		"READ_WRITE_SYMBOL", "REAL_SYMBOL", "REFERENCES_SYMBOL", "REGEXP_SYMBOL", 
		"RELEASE_SYMBOL", "RENAME_SYMBOL", "REPEAT_SYMBOL", "REPLACE_SYMBOL", 
		"REQUIRE_SYMBOL", "RESIGNAL_SYMBOL", "RESTRICT_SYMBOL", "RETURN_SYMBOL", 
		"REVOKE_SYMBOL", "RIGHT_SYMBOL", "SECOND_MICROSECOND_SYMBOL", "SELECT_SYMBOL", 
		"SENSITIVE_SYMBOL", "SEPARATOR_SYMBOL", "SERVER_OPTIONS_SYMBOL", "SESSION_USER_SYMBOL", 
		"SET_SYMBOL", "SET_VAR_SYMBOL", "SHOW_SYMBOL", "SIGNAL_SYMBOL", "SMALLINT_SYMBOL", 
		"SPATIAL_SYMBOL", "SPECIFIC_SYMBOL", "SQLEXCEPTION_SYMBOL", "SQLSTATE_SYMBOL", 
		"SQLWARNING_SYMBOL", "SQL_BIG_RESULT_SYMBOL", "SQL_CALC_FOUND_ROWS_SYMBOL", 
		"SQL_SMALL_RESULT_SYMBOL", "SQL_SYMBOL", "SSL_SYMBOL", "STARTING_SYMBOL", 
		"STDDEV_SAMP_SYMBOL", "STDDEV_SYMBOL", "STDDEV_POP_SYMBOL", "STD_SYMBOL", 
		"STORED_SYMBOL", "STRAIGHT_JOIN_SYMBOL", "SUBSTR_SYMBOL", "SUBSTRING_SYMBOL", 
		"SUM_SYMBOL", "SYSDATE_SYMBOL", "SYSTEM_USER_SYMBOL", "TABLE_REF_PRIORITY_SYMBOL", 
		"TABLE_SYMBOL", "TERMINATED_SYMBOL", "THEN_SYMBOL", "TINYBLOB_SYMBOL", 
		"TINYINT_SYMBOL", "TINYTEXT_SYMBOL", "TO_SYMBOL", "TRAILING_SYMBOL", "TRIGGER_SYMBOL", 
		"TRIM_SYMBOL", "TRUE_SYMBOL", "UNDO_SYMBOL", "UNION_SYMBOL", "UNIQUE_SYMBOL", 
		"UNLOCK_SYMBOL", "UNSIGNED_SYMBOL", "UPDATE_SYMBOL", "USAGE_SYMBOL", "USE_SYMBOL", 
		"USING_SYMBOL", "UTC_DATE_SYMBOL", "UTC_TIMESTAMP_SYMBOL", "UTC_TIME_SYMBOL", 
		"VALIDATION_SYMBOL", "VALUES_SYMBOL", "VARBINARY_SYMBOL", "VARCHAR_SYMBOL", 
		"VARIANCE_SYMBOL", "VARYING_SYMBOL", "VAR_POP_SYMBOL", "VAR_SAMP_SYMBOL", 
		"VIRTUAL_SYMBOL", "WHEN_SYMBOL", "WHERE_SYMBOL", "WHILE_SYMBOL", "WITH_SYMBOL", 
		"WITH_CUBE_SYMBOL", "WITH_ROLLUP_SYMBOL", "WITHOUT_SYMBOL", "WRITE_SYMBOL", 
		"XOR_SYMBOL", "YEAR_MONTH_SYMBOL", "ZEROFILL_SYMBOL", "PERSIST_SYMBOL", 
		"ROLE_SYMBOL", "ADMIN_SYMBOL", "INVISIBLE_SYMBOL", "VISIBLE_SYMBOL", "EXCEPT_SYMBOL", 
		"COMPONENT_SYMBOL", "RECURSIVE_SYMBOL", "JSON_OBJECTAGG_SYMBOL", "JSON_ARRAYAGG_SYMBOL", 
		"OF_SYMBOL", "SKIP_SYMBOL", "LOCKED_SYMBOL", "NOWAIT_SYMBOL", "GROUPING_SYMBOL", 
		"PERSIST_ONLY_SYMBOL", "HISTOGRAM_SYMBOL", "BUCKETS_SYMBOL", "REMOTE_SYMBOL", 
		"CLONE_SYMBOL", "CUME_DIST_SYMBOL", "DENSE_RANK_SYMBOL", "EXCLUDE_SYMBOL", 
		"FIRST_VALUE_SYMBOL", "FOLLOWING_SYMBOL", "GROUPS_SYMBOL", "LAG_SYMBOL", 
		"LAST_VALUE_SYMBOL", "LEAD_SYMBOL", "NTH_VALUE_SYMBOL", "NTILE_SYMBOL", 
		"NULLS_SYMBOL", "OTHERS_SYMBOL", "OVER_SYMBOL", "PERCENT_RANK_SYMBOL", 
		"PRECEDING_SYMBOL", "RANK_SYMBOL", "RESPECT_SYMBOL", "ROW_NUMBER_SYMBOL", 
		"TIES_SYMBOL", "UNBOUNDED_SYMBOL", "WINDOW_SYMBOL", "EMPTY_SYMBOL", "JSON_TABLE_SYMBOL", 
		"NESTED_SYMBOL", "ORDINALITY_SYMBOL", "PATH_SYMBOL", "HISTORY_SYMBOL", 
		"REUSE_SYMBOL", "SRID_SYMBOL", "THREAD_PRIORITY_SYMBOL", "RESOURCE_SYMBOL", 
		"SYSTEM_SYMBOL", "VCPU_SYMBOL", "MASTER_PUBLIC_KEY_PATH_SYMBOL", "GET_MASTER_PUBLIC_KEY_SYMBOL", 
		"RESTART_SYMBOL", "DEFINITION_SYMBOL", "DESCRIPTION_SYMBOL", "ORGANIZATION_SYMBOL", 
		"REFERENCE_SYMBOL", "OPTIONAL_SYMBOL", "SECONDARY_SYMBOL", "SECONDARY_ENGINE_SYMBOL", 
		"SECONDARY_LOAD_SYMBOL", "SECONDARY_UNLOAD_SYMBOL", "ACTIVE_SYMBOL", "INACTIVE_SYMBOL", 
		"LATERAL_SYMBOL", "RETAIN_SYMBOL", "OLD_SYMBOL", "NETWORK_NAMESPACE_SYMBOL", 
		"ENFORCED_SYMBOL", "ARRAY_SYMBOL", "OJ_SYMBOL", "MEMBER_SYMBOL", "WHITESPACE", 
		"INVALID_INPUT", "UNDERSCORE_CHARSET", "IDENTIFIER", "NCHAR_TEXT", "BACK_TICK_QUOTED_ID", 
		"DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", "VERSION_COMMENT_START", "MYSQL_COMMENT_START", 
		"VERSION_COMMENT_END", "BLOCK_COMMENT", "POUND_COMMENT", "DASHDASH_COMMENT", 
		"NOT_EQUAL2_OPERATOR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MySQLParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MySQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MySQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MySQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueryContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MySQLParser.Eof, 0); }
		public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		public BeginWorkContext beginWork() {
			return GetRuleContext<BeginWorkContext>(0);
		}
		public ITerminalNode SEMICOLON_SYMBOL() { return GetToken(MySQLParser.SEMICOLON_SYMBOL, 0); }
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		try {
			State = 1212;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1200; Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1203;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 1201; simpleStatement();
					}
					break;
				case 2:
					{
					State = 1202; beginWork();
					}
					break;
				}
				State = 1210;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SEMICOLON_SYMBOL:
					{
					State = 1205; Match(SEMICOLON_SYMBOL);
					State = 1207;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						State = 1206; Match(Eof);
						}
						break;
					}
					}
					break;
				case Eof:
					{
					State = 1209; Match(Eof);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		public AlterStatementContext alterStatement() {
			return GetRuleContext<AlterStatementContext>(0);
		}
		public CreateStatementContext createStatement() {
			return GetRuleContext<CreateStatementContext>(0);
		}
		public DropStatementContext dropStatement() {
			return GetRuleContext<DropStatementContext>(0);
		}
		public RenameTableStatementContext renameTableStatement() {
			return GetRuleContext<RenameTableStatementContext>(0);
		}
		public TruncateTableStatementContext truncateTableStatement() {
			return GetRuleContext<TruncateTableStatementContext>(0);
		}
		public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		public CallStatementContext callStatement() {
			return GetRuleContext<CallStatementContext>(0);
		}
		public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		public DoStatementContext doStatement() {
			return GetRuleContext<DoStatementContext>(0);
		}
		public HandlerStatementContext handlerStatement() {
			return GetRuleContext<HandlerStatementContext>(0);
		}
		public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		public LoadStatementContext loadStatement() {
			return GetRuleContext<LoadStatementContext>(0);
		}
		public ReplaceStatementContext replaceStatement() {
			return GetRuleContext<ReplaceStatementContext>(0);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		public TransactionOrLockingStatementContext transactionOrLockingStatement() {
			return GetRuleContext<TransactionOrLockingStatementContext>(0);
		}
		public ReplicationStatementContext replicationStatement() {
			return GetRuleContext<ReplicationStatementContext>(0);
		}
		public PreparedStatementContext preparedStatement() {
			return GetRuleContext<PreparedStatementContext>(0);
		}
		public CloneStatementContext cloneStatement() {
			return GetRuleContext<CloneStatementContext>(0);
		}
		public AccountManagementStatementContext accountManagementStatement() {
			return GetRuleContext<AccountManagementStatementContext>(0);
		}
		public TableAdministrationStatementContext tableAdministrationStatement() {
			return GetRuleContext<TableAdministrationStatementContext>(0);
		}
		public InstallUninstallStatmentContext installUninstallStatment() {
			return GetRuleContext<InstallUninstallStatmentContext>(0);
		}
		public SetStatementContext setStatement() {
			return GetRuleContext<SetStatementContext>(0);
		}
		public ShowStatementContext showStatement() {
			return GetRuleContext<ShowStatementContext>(0);
		}
		public ResourceGroupManagementContext resourceGroupManagement() {
			return GetRuleContext<ResourceGroupManagementContext>(0);
		}
		public OtherAdministrativeStatementContext otherAdministrativeStatement() {
			return GetRuleContext<OtherAdministrativeStatementContext>(0);
		}
		public UtilityStatementContext utilityStatement() {
			return GetRuleContext<UtilityStatementContext>(0);
		}
		public GetDiagnosticsContext getDiagnostics() {
			return GetRuleContext<GetDiagnosticsContext>(0);
		}
		public SignalStatementContext signalStatement() {
			return GetRuleContext<SignalStatementContext>(0);
		}
		public ResignalStatementContext resignalStatement() {
			return GetRuleContext<ResignalStatementContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_simpleStatement);
		try {
			State = 1248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1214; alterStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1215; createStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1216; dropStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1217; renameTableStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1218; truncateTableStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1219;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 1220; importStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1221; callStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1222; deleteStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1223; doStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1224; handlerStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1225; insertStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1226; loadStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1227; replaceStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1228; selectStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1229; updateStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1230; transactionOrLockingStatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1231; replicationStatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1232; preparedStatement();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1233;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 1234; cloneStatement();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1235; accountManagementStatement();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1236; tableAdministrationStatement();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1237; installUninstallStatment();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1238; setStatement();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1239; showStatement();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1240;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 1241; resourceGroupManagement();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1242; otherAdministrativeStatement();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1243; utilityStatement();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1244;
				if (!(serverVersion >= 50604)) throw new FailedPredicateException(this, "serverVersion >= 50604");
				State = 1245; getDiagnostics();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1246; signalStatement();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1247; resignalStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementContext : ParserRuleContext {
		public ITerminalNode ALTER_SYMBOL() { return GetToken(MySQLParser.ALTER_SYMBOL, 0); }
		public AlterTableContext alterTable() {
			return GetRuleContext<AlterTableContext>(0);
		}
		public AlterDatabaseContext alterDatabase() {
			return GetRuleContext<AlterDatabaseContext>(0);
		}
		public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return GetRuleContext<ProcedureRefContext>(0);
		}
		public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public FunctionRefContext functionRef() {
			return GetRuleContext<FunctionRefContext>(0);
		}
		public AlterViewContext alterView() {
			return GetRuleContext<AlterViewContext>(0);
		}
		public AlterEventContext alterEvent() {
			return GetRuleContext<AlterEventContext>(0);
		}
		public AlterTablespaceContext alterTablespace() {
			return GetRuleContext<AlterTablespaceContext>(0);
		}
		public AlterUndoTablespaceContext alterUndoTablespace() {
			return GetRuleContext<AlterUndoTablespaceContext>(0);
		}
		public AlterLogfileGroupContext alterLogfileGroup() {
			return GetRuleContext<AlterLogfileGroupContext>(0);
		}
		public AlterServerContext alterServer() {
			return GetRuleContext<AlterServerContext>(0);
		}
		public ITerminalNode INSTANCE_SYMBOL() { return GetToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public ITerminalNode ROTATE_SYMBOL() { return GetToken(MySQLParser.ROTATE_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ITerminalNode MASTER_SYMBOL() { return GetToken(MySQLParser.MASTER_SYMBOL, 0); }
		public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		public RoutineAlterOptionsContext routineAlterOptions() {
			return GetRuleContext<RoutineAlterOptionsContext>(0);
		}
		public AlterStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementContext alterStatement() {
		AlterStatementContext _localctx = new AlterStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_alterStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1250; Match(ALTER_SYMBOL);
			State = 1277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 1251; alterTable();
				}
				break;
			case 2:
				{
				State = 1252; alterDatabase();
				}
				break;
			case 3:
				{
				State = 1253; Match(PROCEDURE_SYMBOL);
				State = 1254; procedureRef();
				State = 1256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMENT_SYMBOL) | (1L << CONTAINS_SYMBOL) | (1L << LANGUAGE_SYMBOL) | (1L << NO_SYMBOL))) != 0) || _la==DETERMINISTIC_SYMBOL || ((((_la - 566)) & ~0x3f) == 0 && ((1L << (_la - 566)) & ((1L << (MODIFIES_SYMBOL - 566)) | (1L << (NOT_SYMBOL - 566)) | (1L << (READS_SYMBOL - 566)))) != 0) || _la==SQL_SYMBOL) {
					{
					State = 1255; routineAlterOptions();
					}
				}

				}
				break;
			case 4:
				{
				State = 1258; Match(FUNCTION_SYMBOL);
				State = 1259; functionRef();
				State = 1261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMENT_SYMBOL) | (1L << CONTAINS_SYMBOL) | (1L << LANGUAGE_SYMBOL) | (1L << NO_SYMBOL))) != 0) || _la==DETERMINISTIC_SYMBOL || ((((_la - 566)) & ~0x3f) == 0 && ((1L << (_la - 566)) & ((1L << (MODIFIES_SYMBOL - 566)) | (1L << (NOT_SYMBOL - 566)) | (1L << (READS_SYMBOL - 566)))) != 0) || _la==SQL_SYMBOL) {
					{
					State = 1260; routineAlterOptions();
					}
				}

				}
				break;
			case 5:
				{
				State = 1263; alterView();
				}
				break;
			case 6:
				{
				State = 1264; alterEvent();
				}
				break;
			case 7:
				{
				State = 1265; alterTablespace();
				}
				break;
			case 8:
				{
				State = 1266;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 1267; alterUndoTablespace();
				}
				break;
			case 9:
				{
				State = 1268; alterLogfileGroup();
				}
				break;
			case 10:
				{
				State = 1269; alterServer();
				}
				break;
			case 11:
				{
				State = 1270;
				if (!(serverVersion >= 50713)) throw new FailedPredicateException(this, "serverVersion >= 50713");
				State = 1271; Match(INSTANCE_SYMBOL);
				State = 1272; Match(ROTATE_SYMBOL);
				State = 1273; textOrIdentifier();
				State = 1274; Match(MASTER_SYMBOL);
				State = 1275; Match(KEY_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterDatabaseContext : ParserRuleContext {
		public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		public ITerminalNode UPGRADE_SYMBOL() { return GetToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public ITerminalNode NAME_SYMBOL() { return GetToken(MySQLParser.NAME_SYMBOL, 0); }
		public CreateDatabaseOptionContext[] createDatabaseOption() {
			return GetRuleContexts<CreateDatabaseOptionContext>();
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return GetRuleContext<CreateDatabaseOptionContext>(i);
		}
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterDatabase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterDatabase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterDatabase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterDatabaseContext alterDatabase() {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(Context, State);
		EnterRule(_localctx, 6, RULE_alterDatabase);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1279; Match(DATABASE_SYMBOL);
			State = 1280; schemaRef();
			State = 1291;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 1282;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1281; createDatabaseOption();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1284;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				State = 1286;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 1287; Match(UPGRADE_SYMBOL);
				State = 1288; Match(DATA_SYMBOL);
				State = 1289; Match(DIRECTORY_SYMBOL);
				State = 1290; Match(NAME_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterEventContext : ParserRuleContext {
		public ITerminalNode EVENT_SYMBOL() { return GetToken(MySQLParser.EVENT_SYMBOL, 0); }
		public EventRefContext eventRef() {
			return GetRuleContext<EventRefContext>(0);
		}
		public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		public ITerminalNode[] ON_SYMBOL() { return GetTokens(MySQLParser.ON_SYMBOL); }
		public ITerminalNode ON_SYMBOL(int i) {
			return GetToken(MySQLParser.ON_SYMBOL, i);
		}
		public ITerminalNode SCHEDULE_SYMBOL() { return GetToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		public ScheduleContext schedule() {
			return GetRuleContext<ScheduleContext>(0);
		}
		public ITerminalNode COMPLETION_SYMBOL() { return GetToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		public ITerminalNode PRESERVE_SYMBOL() { return GetToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		public ITerminalNode RENAME_SYMBOL() { return GetToken(MySQLParser.RENAME_SYMBOL, 0); }
		public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode DO_SYMBOL() { return GetToken(MySQLParser.DO_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public ITerminalNode NOT_SYMBOL() { return GetToken(MySQLParser.NOT_SYMBOL, 0); }
		public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public AlterEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterEvent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterEvent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterEvent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterEventContext alterEvent() {
		AlterEventContext _localctx = new AlterEventContext(Context, State);
		EnterRule(_localctx, 8, RULE_alterEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 1293; definerClause();
				}
			}

			State = 1296; Match(EVENT_SYMBOL);
			State = 1297; eventRef();
			State = 1301;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 1298; Match(ON_SYMBOL);
				State = 1299; Match(SCHEDULE_SYMBOL);
				State = 1300; schedule();
				}
				break;
			}
			State = 1309;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON_SYMBOL) {
				{
				State = 1303; Match(ON_SYMBOL);
				State = 1304; Match(COMPLETION_SYMBOL);
				State = 1306;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					State = 1305; Match(NOT_SYMBOL);
					}
				}

				State = 1308; Match(PRESERVE_SYMBOL);
				}
			}

			State = 1314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RENAME_SYMBOL) {
				{
				State = 1311; Match(RENAME_SYMBOL);
				State = 1312; Match(TO_SYMBOL);
				State = 1313; identifier();
				}
			}

			State = 1322;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENABLE_SYMBOL:
				{
				State = 1316; Match(ENABLE_SYMBOL);
				}
				break;
			case DISABLE_SYMBOL:
				{
				State = 1317; Match(DISABLE_SYMBOL);
				State = 1320;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_SYMBOL) {
					{
					State = 1318; Match(ON_SYMBOL);
					State = 1319; Match(SLAVE_SYMBOL);
					}
				}

				}
				break;
			case Eof:
			case COMMENT_SYMBOL:
			case DO_SYMBOL:
			case SEMICOLON_SYMBOL:
				break;
			default:
				break;
			}
			State = 1326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT_SYMBOL) {
				{
				State = 1324; Match(COMMENT_SYMBOL);
				State = 1325; textLiteral();
				}
			}

			State = 1330;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DO_SYMBOL) {
				{
				State = 1328; Match(DO_SYMBOL);
				State = 1329; compoundStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLogfileGroupContext : ParserRuleContext {
		public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupRefContext logfileGroupRef() {
			return GetRuleContext<LogfileGroupRefContext>(0);
		}
		public ITerminalNode ADD_SYMBOL() { return GetToken(MySQLParser.ADD_SYMBOL, 0); }
		public ITerminalNode UNDOFILE_SYMBOL() { return GetToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public AlterLogfileGroupOptionsContext alterLogfileGroupOptions() {
			return GetRuleContext<AlterLogfileGroupOptionsContext>(0);
		}
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLogfileGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterLogfileGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterLogfileGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterLogfileGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterLogfileGroupContext alterLogfileGroup() {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(Context, State);
		EnterRule(_localctx, 10, RULE_alterLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1332; Match(LOGFILE_SYMBOL);
			State = 1333; Match(GROUP_SYMBOL);
			State = 1334; logfileGroupRef();
			State = 1335; Match(ADD_SYMBOL);
			State = 1336; Match(UNDOFILE_SYMBOL);
			State = 1337; textLiteral();
			State = 1339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				State = 1338; alterLogfileGroupOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLogfileGroupOptionsContext : ParserRuleContext {
		public AlterLogfileGroupOptionContext[] alterLogfileGroupOption() {
			return GetRuleContexts<AlterLogfileGroupOptionContext>();
		}
		public AlterLogfileGroupOptionContext alterLogfileGroupOption(int i) {
			return GetRuleContext<AlterLogfileGroupOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterLogfileGroupOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLogfileGroupOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterLogfileGroupOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterLogfileGroupOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterLogfileGroupOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterLogfileGroupOptionsContext alterLogfileGroupOptions() {
		AlterLogfileGroupOptionsContext _localctx = new AlterLogfileGroupOptionsContext(Context, State);
		EnterRule(_localctx, 12, RULE_alterLogfileGroupOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1341; alterLogfileGroupOption();
			State = 1348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
				{
				{
				State = 1343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 1342; Match(COMMA_SYMBOL);
					}
				}

				State = 1345; alterLogfileGroupOption();
				}
				}
				State = 1350;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLogfileGroupOptionContext : ParserRuleContext {
		public TsOptionInitialSizeContext tsOptionInitialSize() {
			return GetRuleContext<TsOptionInitialSizeContext>(0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		public TsOptionWaitContext tsOptionWait() {
			return GetRuleContext<TsOptionWaitContext>(0);
		}
		public AlterLogfileGroupOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLogfileGroupOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterLogfileGroupOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterLogfileGroupOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterLogfileGroupOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterLogfileGroupOptionContext alterLogfileGroupOption() {
		AlterLogfileGroupOptionContext _localctx = new AlterLogfileGroupOptionContext(Context, State);
		EnterRule(_localctx, 14, RULE_alterLogfileGroupOption);
		try {
			State = 1354;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1351; tsOptionInitialSize();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1352; tsOptionEngine();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1353; tsOptionWait();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterServerContext : ParserRuleContext {
		public ITerminalNode SERVER_SYMBOL() { return GetToken(MySQLParser.SERVER_SYMBOL, 0); }
		public ServerRefContext serverRef() {
			return GetRuleContext<ServerRefContext>(0);
		}
		public ServerOptionsContext serverOptions() {
			return GetRuleContext<ServerOptionsContext>(0);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterServer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterServer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterServer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterServer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterServerContext alterServer() {
		AlterServerContext _localctx = new AlterServerContext(Context, State);
		EnterRule(_localctx, 16, RULE_alterServer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1356; Match(SERVER_SYMBOL);
			State = 1357; serverRef();
			State = 1358; serverOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableContext : ParserRuleContext {
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public OnlineOptionContext onlineOption() {
			return GetRuleContext<OnlineOptionContext>(0);
		}
		public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public AlterTableActionsContext alterTableActions() {
			return GetRuleContext<AlterTableActionsContext>(0);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableContext alterTable() {
		AlterTableContext _localctx = new AlterTableContext(Context, State);
		EnterRule(_localctx, 18, RULE_alterTable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1361;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 1360; onlineOption();
				}
				break;
			}
			State = 1365;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 1363;
				if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
				State = 1364; Match(IGNORE_SYMBOL);
				}
				break;
			}
			State = 1367; Match(TABLE_SYMBOL);
			State = 1368; tableRef();
			State = 1370;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 1369; alterTableActions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableActionsContext : ParserRuleContext {
		public AlterCommandListContext alterCommandList() {
			return GetRuleContext<AlterCommandListContext>(0);
		}
		public PartitionClauseContext partitionClause() {
			return GetRuleContext<PartitionClauseContext>(0);
		}
		public RemovePartitioningContext removePartitioning() {
			return GetRuleContext<RemovePartitioningContext>(0);
		}
		public StandaloneAlterCommandsContext standaloneAlterCommands() {
			return GetRuleContext<StandaloneAlterCommandsContext>(0);
		}
		public AlterCommandsModifierListContext alterCommandsModifierList() {
			return GetRuleContext<AlterCommandsModifierListContext>(0);
		}
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public AlterTableActionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTableActions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterTableActions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterTableActions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTableActions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableActionsContext alterTableActions() {
		AlterTableActionsContext _localctx = new AlterTableActionsContext(Context, State);
		EnterRule(_localctx, 20, RULE_alterTableActions);
		try {
			State = 1385;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1372; alterCommandList();
				State = 1375;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PARTITION_SYMBOL:
					{
					State = 1373; partitionClause();
					}
					break;
				case REMOVE_SYMBOL:
					{
					State = 1374; removePartitioning();
					}
					break;
				case Eof:
				case SEMICOLON_SYMBOL:
					break;
				default:
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1377; partitionClause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1378; removePartitioning();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1382;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 1379; alterCommandsModifierList();
					State = 1380; Match(COMMA_SYMBOL);
					}
					break;
				}
				State = 1384; standaloneAlterCommands();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterCommandListContext : ParserRuleContext {
		public AlterCommandsModifierListContext alterCommandsModifierList() {
			return GetRuleContext<AlterCommandsModifierListContext>(0);
		}
		public AlterListContext alterList() {
			return GetRuleContext<AlterListContext>(0);
		}
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public AlterCommandListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterCommandList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterCommandList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterCommandList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterCommandList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterCommandListContext alterCommandList() {
		AlterCommandListContext _localctx = new AlterCommandListContext(Context, State);
		EnterRule(_localctx, 22, RULE_alterCommandList);
		try {
			State = 1394;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1387; alterCommandsModifierList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1391;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 1388; alterCommandsModifierList();
					State = 1389; Match(COMMA_SYMBOL);
					}
					break;
				}
				State = 1393; alterList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterCommandsModifierListContext : ParserRuleContext {
		public AlterCommandsModifierContext[] alterCommandsModifier() {
			return GetRuleContexts<AlterCommandsModifierContext>();
		}
		public AlterCommandsModifierContext alterCommandsModifier(int i) {
			return GetRuleContext<AlterCommandsModifierContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterCommandsModifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterCommandsModifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterCommandsModifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterCommandsModifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterCommandsModifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterCommandsModifierListContext alterCommandsModifierList() {
		AlterCommandsModifierListContext _localctx = new AlterCommandsModifierListContext(Context, State);
		EnterRule(_localctx, 24, RULE_alterCommandsModifierList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1396; alterCommandsModifier();
			State = 1401;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1397; Match(COMMA_SYMBOL);
					State = 1398; alterCommandsModifier();
					}
					} 
				}
				State = 1403;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandaloneAlterCommandsContext : ParserRuleContext {
		public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public AlterPartitionContext alterPartition() {
			return GetRuleContext<AlterPartitionContext>(0);
		}
		public ITerminalNode SECONDARY_LOAD_SYMBOL() { return GetToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
		public ITerminalNode SECONDARY_UNLOAD_SYMBOL() { return GetToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		public StandaloneAlterCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standaloneAlterCommands; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterStandaloneAlterCommands(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitStandaloneAlterCommands(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandaloneAlterCommands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandaloneAlterCommandsContext standaloneAlterCommands() {
		StandaloneAlterCommandsContext _localctx = new StandaloneAlterCommandsContext(Context, State);
		EnterRule(_localctx, 26, RULE_standaloneAlterCommands);
		int _la;
		try {
			State = 1411;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1404; Match(DISCARD_SYMBOL);
				State = 1405; Match(TABLESPACE_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1406; Match(IMPORT_SYMBOL);
				State = 1407; Match(TABLESPACE_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1408; alterPartition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1409;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 1410;
				_la = TokenStream.LA(1);
				if ( !(_la==SECONDARY_LOAD_SYMBOL || _la==SECONDARY_UNLOAD_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterPartitionContext : ParserRuleContext {
		public ITerminalNode ADD_SYMBOL() { return GetToken(MySQLParser.ADD_SYMBOL, 0); }
		public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		public ITerminalNode PARTITIONS_SYMBOL() { return GetToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public NoWriteToBinLogContext[] noWriteToBinLog() {
			return GetRuleContexts<NoWriteToBinLogContext>();
		}
		public NoWriteToBinLogContext noWriteToBinLog(int i) {
			return GetRuleContext<NoWriteToBinLogContext>(i);
		}
		public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ITerminalNode REBUILD_SYMBOL() { return GetToken(MySQLParser.REBUILD_SYMBOL, 0); }
		public AllOrPartitionNameListContext allOrPartitionNameList() {
			return GetRuleContext<AllOrPartitionNameListContext>(0);
		}
		public ITerminalNode OPTIMIZE_SYMBOL() { return GetToken(MySQLParser.OPTIMIZE_SYMBOL, 0); }
		public ITerminalNode ANALYZE_SYMBOL() { return GetToken(MySQLParser.ANALYZE_SYMBOL, 0); }
		public ITerminalNode CHECK_SYMBOL() { return GetToken(MySQLParser.CHECK_SYMBOL, 0); }
		public CheckOptionContext[] checkOption() {
			return GetRuleContexts<CheckOptionContext>();
		}
		public CheckOptionContext checkOption(int i) {
			return GetRuleContext<CheckOptionContext>(i);
		}
		public ITerminalNode REPAIR_SYMBOL() { return GetToken(MySQLParser.REPAIR_SYMBOL, 0); }
		public RepairTypeContext[] repairType() {
			return GetRuleContexts<RepairTypeContext>();
		}
		public RepairTypeContext repairType(int i) {
			return GetRuleContext<RepairTypeContext>(i);
		}
		public ITerminalNode COALESCE_SYMBOL() { return GetToken(MySQLParser.COALESCE_SYMBOL, 0); }
		public ITerminalNode TRUNCATE_SYMBOL() { return GetToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public ReorgPartitionRuleContext reorgPartitionRule() {
			return GetRuleContext<ReorgPartitionRuleContext>(0);
		}
		public ITerminalNode REORGANIZE_SYMBOL() { return GetToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
		public ITerminalNode INTO_SYMBOL() { return GetToken(MySQLParser.INTO_SYMBOL, 0); }
		public ITerminalNode EXCHANGE_SYMBOL() { return GetToken(MySQLParser.EXCHANGE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public WithValidationContext withValidation() {
			return GetRuleContext<WithValidationContext>(0);
		}
		public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public AlterPartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterPartition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterPartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterPartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterPartition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterPartitionContext alterPartition() {
		AlterPartitionContext _localctx = new AlterPartitionContext(Context, State);
		EnterRule(_localctx, 28, RULE_alterPartition);
		int _la;
		try {
			State = 1510;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1413; Match(ADD_SYMBOL);
				State = 1414; Match(PARTITION_SYMBOL);
				State = 1416;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 1415; noWriteToBinLog();
					}
				}

				State = 1421;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					State = 1418; partitionDefinitions();
					}
					break;
				case PARTITIONS_SYMBOL:
					{
					State = 1419; Match(PARTITIONS_SYMBOL);
					State = 1420; real_ulong_number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1423; Match(DROP_SYMBOL);
				State = 1424; Match(PARTITION_SYMBOL);
				State = 1425; identifierList();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1426; Match(REBUILD_SYMBOL);
				State = 1427; Match(PARTITION_SYMBOL);
				State = 1429;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 1428; noWriteToBinLog();
					}
					break;
				}
				State = 1431; allOrPartitionNameList();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1432; Match(OPTIMIZE_SYMBOL);
				State = 1433; Match(PARTITION_SYMBOL);
				State = 1435;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 1434; noWriteToBinLog();
					}
					break;
				}
				State = 1437; allOrPartitionNameList();
				State = 1439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 1438; noWriteToBinLog();
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1441; Match(ANALYZE_SYMBOL);
				State = 1442; Match(PARTITION_SYMBOL);
				State = 1444;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 1443; noWriteToBinLog();
					}
					break;
				}
				State = 1446; allOrPartitionNameList();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1447; Match(CHECK_SYMBOL);
				State = 1448; Match(PARTITION_SYMBOL);
				State = 1449; allOrPartitionNameList();
				State = 1453;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (CHANGED_SYMBOL - 80)) | (1L << (EXTENDED_SYMBOL - 80)) | (1L << (FAST_SYMBOL - 80)))) != 0) || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL || _la==FOR_SYMBOL) {
					{
					{
					State = 1450; checkOption();
					}
					}
					State = 1455;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1456; Match(REPAIR_SYMBOL);
				State = 1457; Match(PARTITION_SYMBOL);
				State = 1459;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
				case 1:
					{
					State = 1458; noWriteToBinLog();
					}
					break;
				}
				State = 1461; allOrPartitionNameList();
				State = 1465;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) {
					{
					{
					State = 1462; repairType();
					}
					}
					State = 1467;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1468; Match(COALESCE_SYMBOL);
				State = 1469; Match(PARTITION_SYMBOL);
				State = 1471;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 1470; noWriteToBinLog();
					}
				}

				State = 1473; real_ulong_number();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1474; Match(TRUNCATE_SYMBOL);
				State = 1475; Match(PARTITION_SYMBOL);
				State = 1476; allOrPartitionNameList();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1477; reorgPartitionRule();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1478; Match(REORGANIZE_SYMBOL);
				State = 1479; Match(PARTITION_SYMBOL);
				State = 1481;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 1480; noWriteToBinLog();
					}
					break;
				}
				State = 1487;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
				case 1:
					{
					State = 1483; identifierList();
					State = 1484; Match(INTO_SYMBOL);
					State = 1485; partitionDefinitions();
					}
					break;
				}
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1489; Match(EXCHANGE_SYMBOL);
				State = 1490; Match(PARTITION_SYMBOL);
				State = 1491; identifier();
				State = 1492; Match(WITH_SYMBOL);
				State = 1493; Match(TABLE_SYMBOL);
				State = 1494; tableRef();
				State = 1496;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 1495; withValidation();
					}
					break;
				}
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1498;
				if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
				State = 1499; Match(DISCARD_SYMBOL);
				State = 1500; Match(PARTITION_SYMBOL);
				State = 1501; allOrPartitionNameList();
				State = 1502; Match(TABLESPACE_SYMBOL);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1504;
				if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
				State = 1505; Match(IMPORT_SYMBOL);
				State = 1506; Match(PARTITION_SYMBOL);
				State = 1507; allOrPartitionNameList();
				State = 1508; Match(TABLESPACE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterListContext : ParserRuleContext {
		public AlterListItemContext[] alterListItem() {
			return GetRuleContexts<AlterListItemContext>();
		}
		public AlterListItemContext alterListItem(int i) {
			return GetRuleContext<AlterListItemContext>(i);
		}
		public CreateTableOptionsSpaceSeparatedContext[] createTableOptionsSpaceSeparated() {
			return GetRuleContexts<CreateTableOptionsSpaceSeparatedContext>();
		}
		public CreateTableOptionsSpaceSeparatedContext createTableOptionsSpaceSeparated(int i) {
			return GetRuleContext<CreateTableOptionsSpaceSeparatedContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterCommandsModifierContext[] alterCommandsModifier() {
			return GetRuleContexts<AlterCommandsModifierContext>();
		}
		public AlterCommandsModifierContext alterCommandsModifier(int i) {
			return GetRuleContext<AlterCommandsModifierContext>(i);
		}
		public AlterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterListContext alterList() {
		AlterListContext _localctx = new AlterListContext(Context, State);
		EnterRule(_localctx, 30, RULE_alterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1514;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 1512; alterListItem();
				}
				break;
			case 2:
				{
				State = 1513; createTableOptionsSpaceSeparated();
				}
				break;
			}
			State = 1524;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 1516; Match(COMMA_SYMBOL);
				State = 1520;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
				case 1:
					{
					State = 1517; alterListItem();
					}
					break;
				case 2:
					{
					State = 1518; alterCommandsModifier();
					}
					break;
				case 3:
					{
					State = 1519; createTableOptionsSpaceSeparated();
					}
					break;
				}
				}
				}
				State = 1526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterCommandsModifierContext : ParserRuleContext {
		public AlterAlgorithmOptionContext alterAlgorithmOption() {
			return GetRuleContext<AlterAlgorithmOptionContext>(0);
		}
		public AlterLockOptionContext alterLockOption() {
			return GetRuleContext<AlterLockOptionContext>(0);
		}
		public WithValidationContext withValidation() {
			return GetRuleContext<WithValidationContext>(0);
		}
		public AlterCommandsModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterCommandsModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterCommandsModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterCommandsModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterCommandsModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterCommandsModifierContext alterCommandsModifier() {
		AlterCommandsModifierContext _localctx = new AlterCommandsModifierContext(Context, State);
		EnterRule(_localctx, 32, RULE_alterCommandsModifier);
		try {
			State = 1532;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1527;
				if (!(serverVersion >= 50600)) throw new FailedPredicateException(this, "serverVersion >= 50600");
				State = 1528; alterAlgorithmOption();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1529;
				if (!(serverVersion >= 50600)) throw new FailedPredicateException(this, "serverVersion >= 50600");
				State = 1530; alterLockOption();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1531; withValidation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterListItemContext : ParserRuleContext {
		public ITerminalNode ADD_SYMBOL() { return GetToken(MySQLParser.ADD_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FieldDefinitionContext fieldDefinition() {
			return GetRuleContext<FieldDefinitionContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TableElementListContext tableElementList() {
			return GetRuleContext<TableElementListContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode COLUMN_SYMBOL() { return GetToken(MySQLParser.COLUMN_SYMBOL, 0); }
		public CheckOrReferencesContext checkOrReferences() {
			return GetRuleContext<CheckOrReferencesContext>(0);
		}
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public TableConstraintDefContext tableConstraintDef() {
			return GetRuleContext<TableConstraintDefContext>(0);
		}
		public ITerminalNode CHANGE_SYMBOL() { return GetToken(MySQLParser.CHANGE_SYMBOL, 0); }
		public ColumnInternalRefContext columnInternalRef() {
			return GetRuleContext<ColumnInternalRefContext>(0);
		}
		public ITerminalNode MODIFY_SYMBOL() { return GetToken(MySQLParser.MODIFY_SYMBOL, 0); }
		public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		public ITerminalNode FOREIGN_SYMBOL() { return GetToken(MySQLParser.FOREIGN_SYMBOL, 0); }
		public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public KeyOrIndexContext keyOrIndex() {
			return GetRuleContext<KeyOrIndexContext>(0);
		}
		public IndexRefContext indexRef() {
			return GetRuleContext<IndexRefContext>(0);
		}
		public RestrictContext restrict() {
			return GetRuleContext<RestrictContext>(0);
		}
		public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public ITerminalNode KEYS_SYMBOL() { return GetToken(MySQLParser.KEYS_SYMBOL, 0); }
		public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public ITerminalNode ALTER_SYMBOL() { return GetToken(MySQLParser.ALTER_SYMBOL, 0); }
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		public SignedLiteralContext signedLiteral() {
			return GetRuleContext<SignedLiteralContext>(0);
		}
		public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode CHECK_SYMBOL() { return GetToken(MySQLParser.CHECK_SYMBOL, 0); }
		public ConstraintEnforcementContext constraintEnforcement() {
			return GetRuleContext<ConstraintEnforcementContext>(0);
		}
		public ITerminalNode RENAME_SYMBOL() { return GetToken(MySQLParser.RENAME_SYMBOL, 0); }
		public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public IndexNameContext indexName() {
			return GetRuleContext<IndexNameContext>(0);
		}
		public ITerminalNode CONVERT_SYMBOL() { return GetToken(MySQLParser.CONVERT_SYMBOL, 0); }
		public CharsetContext charset() {
			return GetRuleContext<CharsetContext>(0);
		}
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public ITerminalNode FORCE_SYMBOL() { return GetToken(MySQLParser.FORCE_SYMBOL, 0); }
		public ITerminalNode ORDER_SYMBOL() { return GetToken(MySQLParser.ORDER_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public AlterOrderListContext alterOrderList() {
			return GetRuleContext<AlterOrderListContext>(0);
		}
		public ITerminalNode UPGRADE_SYMBOL() { return GetToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public ITerminalNode PARTITIONING_SYMBOL() { return GetToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
		public AlterListItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterListItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterListItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterListItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterListItemContext alterListItem() {
		AlterListItemContext _localctx = new AlterListItemContext(Context, State);
		EnterRule(_localctx, 34, RULE_alterListItem);
		int _la;
		try {
			State = 1667;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1534; Match(ADD_SYMBOL);
				State = 1536;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 1535; Match(COLUMN_SYMBOL);
					}
					break;
				}
				State = 1550;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
				case 1:
					{
					State = 1538; identifier();
					State = 1539; fieldDefinition();
					State = 1541;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
					case 1:
						{
						State = 1540; checkOrReferences();
						}
						break;
					}
					State = 1544;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AFTER_SYMBOL || _la==FIRST_SYMBOL) {
						{
						State = 1543; place();
						}
					}

					}
					break;
				case 2:
					{
					State = 1546; Match(OPEN_PAR_SYMBOL);
					State = 1547; tableElementList();
					State = 1548; Match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1552; Match(ADD_SYMBOL);
				State = 1553; tableConstraintDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1554; Match(CHANGE_SYMBOL);
				State = 1556;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
				case 1:
					{
					State = 1555; Match(COLUMN_SYMBOL);
					}
					break;
				}
				State = 1558; columnInternalRef();
				State = 1559; identifier();
				State = 1560; fieldDefinition();
				State = 1562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AFTER_SYMBOL || _la==FIRST_SYMBOL) {
					{
					State = 1561; place();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1564; Match(MODIFY_SYMBOL);
				State = 1566;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
				case 1:
					{
					State = 1565; Match(COLUMN_SYMBOL);
					}
					break;
				}
				State = 1568; columnInternalRef();
				State = 1569; fieldDefinition();
				State = 1571;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AFTER_SYMBOL || _la==FIRST_SYMBOL) {
					{
					State = 1570; place();
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1573; Match(DROP_SYMBOL);
				State = 1596;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
				case 1:
					{
					State = 1575;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
					case 1:
						{
						State = 1574; Match(COLUMN_SYMBOL);
						}
						break;
					}
					State = 1577; columnInternalRef();
					State = 1579;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
						{
						State = 1578; restrict();
						}
					}

					}
					break;
				case 2:
					{
					State = 1581; Match(FOREIGN_SYMBOL);
					State = 1582; Match(KEY_SYMBOL);
					State = 1589;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
					case 1:
						{
						State = 1583;
						if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
						State = 1584; columnInternalRef();
						}
						break;
					case 2:
						{
						State = 1585;
						if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
						State = 1587;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
						case 1:
							{
							State = 1586; columnInternalRef();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				case 3:
					{
					State = 1591; Match(PRIMARY_SYMBOL);
					State = 1592; Match(KEY_SYMBOL);
					}
					break;
				case 4:
					{
					State = 1593; keyOrIndex();
					State = 1594; indexRef();
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1598; Match(DISABLE_SYMBOL);
				State = 1599; Match(KEYS_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1600; Match(ENABLE_SYMBOL);
				State = 1601; Match(KEYS_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1602; Match(ALTER_SYMBOL);
				State = 1604;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
				case 1:
					{
					State = 1603; Match(COLUMN_SYMBOL);
					}
					break;
				}
				State = 1606; columnInternalRef();
				State = 1616;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SET_SYMBOL:
					{
					State = 1607; Match(SET_SYMBOL);
					State = 1608; Match(DEFAULT_SYMBOL);
					State = 1612;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
					case 1:
						{
						State = 1609;
						if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
						State = 1610; exprWithParentheses();
						}
						break;
					case 2:
						{
						State = 1611; signedLiteral();
						}
						break;
					}
					}
					break;
				case DROP_SYMBOL:
					{
					State = 1614; Match(DROP_SYMBOL);
					State = 1615; Match(DEFAULT_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1618;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 1619; Match(ALTER_SYMBOL);
				State = 1620; Match(INDEX_SYMBOL);
				State = 1621; indexRef();
				State = 1622; visibility();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1624;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 1625; Match(ALTER_SYMBOL);
				State = 1626; Match(CHECK_SYMBOL);
				State = 1627; identifier();
				State = 1628; constraintEnforcement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1630;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 1631; Match(RENAME_SYMBOL);
				State = 1632; Match(COLUMN_SYMBOL);
				State = 1633; columnInternalRef();
				State = 1634; Match(TO_SYMBOL);
				State = 1635; identifier();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1637; Match(RENAME_SYMBOL);
				State = 1639;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
				case 1:
					{
					State = 1638;
					_la = TokenStream.LA(1);
					if ( !(_la==AS_SYMBOL || _la==TO_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 1641; tableName();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1642;
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				State = 1643; Match(RENAME_SYMBOL);
				State = 1644; keyOrIndex();
				State = 1645; indexRef();
				State = 1646; Match(TO_SYMBOL);
				State = 1647; indexName();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1649; Match(CONVERT_SYMBOL);
				State = 1650; Match(TO_SYMBOL);
				State = 1651; charset();
				State = 1655;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 1652;
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					State = 1653; Match(DEFAULT_SYMBOL);
					}
					break;
				case 2:
					{
					State = 1654; charsetName();
					}
					break;
				}
				State = 1658;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE_SYMBOL) {
					{
					State = 1657; collate();
					}
				}

				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1660; Match(FORCE_SYMBOL);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1661; Match(ORDER_SYMBOL);
				State = 1662; Match(BY_SYMBOL);
				State = 1663; alterOrderList();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1664;
				if (!(serverVersion >= 50708 && serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion >= 50708 && serverVersion < 80000");
				State = 1665; Match(UPGRADE_SYMBOL);
				State = 1666; Match(PARTITIONING_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceContext : ParserRuleContext {
		public ITerminalNode AFTER_SYMBOL() { return GetToken(MySQLParser.AFTER_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode FIRST_SYMBOL() { return GetToken(MySQLParser.FIRST_SYMBOL, 0); }
		public PlaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_place; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPlace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPlace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceContext place() {
		PlaceContext _localctx = new PlaceContext(Context, State);
		EnterRule(_localctx, 36, RULE_place);
		try {
			State = 1672;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AFTER_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1669; Match(AFTER_SYMBOL);
				State = 1670; identifier();
				}
				break;
			case FIRST_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1671; Match(FIRST_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestrictContext : ParserRuleContext {
		public ITerminalNode RESTRICT_SYMBOL() { return GetToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		public ITerminalNode CASCADE_SYMBOL() { return GetToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public RestrictContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restrict; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRestrict(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRestrict(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestrict(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestrictContext restrict() {
		RestrictContext _localctx = new RestrictContext(Context, State);
		EnterRule(_localctx, 38, RULE_restrict);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1674;
			_la = TokenStream.LA(1);
			if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterOrderListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public DirectionContext[] direction() {
			return GetRuleContexts<DirectionContext>();
		}
		public DirectionContext direction(int i) {
			return GetRuleContext<DirectionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterOrderListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterOrderList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterOrderList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterOrderList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterOrderList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterOrderListContext alterOrderList() {
		AlterOrderListContext _localctx = new AlterOrderListContext(Context, State);
		EnterRule(_localctx, 40, RULE_alterOrderList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1676; identifier();
			State = 1678;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
				{
				State = 1677; direction();
				}
			}

			State = 1687;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1680; Match(COMMA_SYMBOL);
					State = 1681; identifier();
					State = 1683;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
						{
						State = 1682; direction();
						}
					}

					}
					} 
				}
				State = 1689;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterAlgorithmOptionContext : ParserRuleContext {
		public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public AlterAlgorithmOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterAlgorithmOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterAlgorithmOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterAlgorithmOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterAlgorithmOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterAlgorithmOptionContext alterAlgorithmOption() {
		AlterAlgorithmOptionContext _localctx = new AlterAlgorithmOptionContext(Context, State);
		EnterRule(_localctx, 42, RULE_alterAlgorithmOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1690; Match(ALGORITHM_SYMBOL);
			State = 1692;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				State = 1691; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 1696;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				{
				State = 1694; Match(DEFAULT_SYMBOL);
				}
				break;
			case 2:
				{
				State = 1695; identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLockOptionContext : ParserRuleContext {
		public ITerminalNode LOCK_SYMBOL() { return GetToken(MySQLParser.LOCK_SYMBOL, 0); }
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public AlterLockOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLockOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterLockOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterLockOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterLockOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterLockOptionContext alterLockOption() {
		AlterLockOptionContext _localctx = new AlterLockOptionContext(Context, State);
		EnterRule(_localctx, 44, RULE_alterLockOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1698; Match(LOCK_SYMBOL);
			State = 1700;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 1699; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 1704;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				{
				State = 1702; Match(DEFAULT_SYMBOL);
				}
				break;
			case 2:
				{
				State = 1703; identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexLockAndAlgorithmContext : ParserRuleContext {
		public AlterAlgorithmOptionContext alterAlgorithmOption() {
			return GetRuleContext<AlterAlgorithmOptionContext>(0);
		}
		public AlterLockOptionContext alterLockOption() {
			return GetRuleContext<AlterLockOptionContext>(0);
		}
		public IndexLockAndAlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexLockAndAlgorithm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexLockAndAlgorithm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexLockAndAlgorithm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexLockAndAlgorithm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexLockAndAlgorithmContext indexLockAndAlgorithm() {
		IndexLockAndAlgorithmContext _localctx = new IndexLockAndAlgorithmContext(Context, State);
		EnterRule(_localctx, 46, RULE_indexLockAndAlgorithm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1706;
			if (!(serverVersion >= 50600)) throw new FailedPredicateException(this, "serverVersion >= 50600");
			State = 1715;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALGORITHM_SYMBOL:
				{
				State = 1707; alterAlgorithmOption();
				State = 1709;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCK_SYMBOL) {
					{
					State = 1708; alterLockOption();
					}
				}

				}
				break;
			case LOCK_SYMBOL:
				{
				State = 1711; alterLockOption();
				State = 1713;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM_SYMBOL) {
					{
					State = 1712; alterAlgorithmOption();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithValidationContext : ParserRuleContext {
		public ITerminalNode VALIDATION_SYMBOL() { return GetToken(MySQLParser.VALIDATION_SYMBOL, 0); }
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode WITHOUT_SYMBOL() { return GetToken(MySQLParser.WITHOUT_SYMBOL, 0); }
		public WithValidationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withValidation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWithValidation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWithValidation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithValidation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithValidationContext withValidation() {
		WithValidationContext _localctx = new WithValidationContext(Context, State);
		EnterRule(_localctx, 48, RULE_withValidation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1717;
			if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
			State = 1718;
			_la = TokenStream.LA(1);
			if ( !(_la==WITH_SYMBOL || _la==WITHOUT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1719; Match(VALIDATION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemovePartitioningContext : ParserRuleContext {
		public ITerminalNode REMOVE_SYMBOL() { return GetToken(MySQLParser.REMOVE_SYMBOL, 0); }
		public ITerminalNode PARTITIONING_SYMBOL() { return GetToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
		public RemovePartitioningContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removePartitioning; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRemovePartitioning(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRemovePartitioning(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemovePartitioning(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemovePartitioningContext removePartitioning() {
		RemovePartitioningContext _localctx = new RemovePartitioningContext(Context, State);
		EnterRule(_localctx, 50, RULE_removePartitioning);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1721; Match(REMOVE_SYMBOL);
			State = 1722; Match(PARTITIONING_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllOrPartitionNameListContext : ParserRuleContext {
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public AllOrPartitionNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allOrPartitionNameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAllOrPartitionNameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAllOrPartitionNameList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllOrPartitionNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllOrPartitionNameListContext allOrPartitionNameList() {
		AllOrPartitionNameListContext _localctx = new AllOrPartitionNameListContext(Context, State);
		EnterRule(_localctx, 52, RULE_allOrPartitionNameList);
		try {
			State = 1726;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1724; Match(ALL_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1725; identifierList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReorgPartitionRuleContext : ParserRuleContext {
		public ITerminalNode REORGANIZE_SYMBOL() { return GetToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
		public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public NoWriteToBinLogContext noWriteToBinLog() {
			return GetRuleContext<NoWriteToBinLogContext>(0);
		}
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ITerminalNode INTO_SYMBOL() { return GetToken(MySQLParser.INTO_SYMBOL, 0); }
		public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		public ReorgPartitionRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reorgPartitionRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReorgPartitionRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReorgPartitionRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReorgPartitionRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReorgPartitionRuleContext reorgPartitionRule() {
		ReorgPartitionRuleContext _localctx = new ReorgPartitionRuleContext(Context, State);
		EnterRule(_localctx, 54, RULE_reorgPartitionRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1728; Match(REORGANIZE_SYMBOL);
			State = 1729; Match(PARTITION_SYMBOL);
			State = 1731;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				{
				State = 1730; noWriteToBinLog();
				}
				break;
			}
			State = 1737;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				{
				State = 1733; identifierList();
				State = 1734; Match(INTO_SYMBOL);
				State = 1735; partitionDefinitions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTablespaceContext : ParserRuleContext {
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return GetRuleContext<TablespaceRefContext>(0);
		}
		public ITerminalNode DATAFILE_SYMBOL() { return GetToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode RENAME_SYMBOL() { return GetToken(MySQLParser.RENAME_SYMBOL, 0); }
		public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AlterTablespaceOptionsContext alterTablespaceOptions() {
			return GetRuleContext<AlterTablespaceOptionsContext>(0);
		}
		public ITerminalNode ADD_SYMBOL() { return GetToken(MySQLParser.ADD_SYMBOL, 0); }
		public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		public ITerminalNode CHANGE_SYMBOL() { return GetToken(MySQLParser.CHANGE_SYMBOL, 0); }
		public ITerminalNode NOT_SYMBOL() { return GetToken(MySQLParser.NOT_SYMBOL, 0); }
		public ITerminalNode ACCESSIBLE_SYMBOL() { return GetToken(MySQLParser.ACCESSIBLE_SYMBOL, 0); }
		public ITerminalNode READ_ONLY_SYMBOL() { return GetToken(MySQLParser.READ_ONLY_SYMBOL, 0); }
		public ITerminalNode READ_WRITE_SYMBOL() { return GetToken(MySQLParser.READ_WRITE_SYMBOL, 0); }
		public ChangeTablespaceOptionContext[] changeTablespaceOption() {
			return GetRuleContexts<ChangeTablespaceOptionContext>();
		}
		public ChangeTablespaceOptionContext changeTablespaceOption(int i) {
			return GetRuleContext<ChangeTablespaceOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTablespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterTablespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterTablespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTablespaceContext alterTablespace() {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(Context, State);
		EnterRule(_localctx, 56, RULE_alterTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1739; Match(TABLESPACE_SYMBOL);
			State = 1740; tablespaceRef();
			State = 1774;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				State = 1741;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD_SYMBOL || _la==DROP_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1742; Match(DATAFILE_SYMBOL);
				State = 1743; textLiteral();
				State = 1745;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (AUTOEXTEND_SIZE_SYMBOL - 68)) | (1L << (ENCRYPTION_SYMBOL - 68)) | (1L << (ENGINE_SYMBOL - 68)))) != 0) || _la==INITIAL_SIZE_SYMBOL || _la==MAX_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
					{
					State = 1744; alterTablespaceOptions();
					}
				}

				}
				break;
			case 2:
				{
				State = 1747;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 1767;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Eof:
				case SEMICOLON_SYMBOL:
					{
					}
					break;
				case CHANGE_SYMBOL:
					{
					State = 1749; Match(CHANGE_SYMBOL);
					State = 1750; Match(DATAFILE_SYMBOL);
					State = 1751; textLiteral();
					State = 1762;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AUTOEXTEND_SIZE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==MAX_SIZE_SYMBOL) {
						{
						State = 1752; changeTablespaceOption();
						State = 1759;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==AUTOEXTEND_SIZE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==MAX_SIZE_SYMBOL || _la==COMMA_SYMBOL) {
							{
							{
							State = 1754;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA_SYMBOL) {
								{
								State = 1753; Match(COMMA_SYMBOL);
								}
							}

							State = 1756; changeTablespaceOption();
							}
							}
							State = 1761;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
					}

					}
					break;
				case READ_ONLY_SYMBOL:
				case READ_WRITE_SYMBOL:
					{
					State = 1764;
					_la = TokenStream.LA(1);
					if ( !(_la==READ_ONLY_SYMBOL || _la==READ_WRITE_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case NOT_SYMBOL:
					{
					State = 1765; Match(NOT_SYMBOL);
					State = 1766; Match(ACCESSIBLE_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				State = 1769; Match(RENAME_SYMBOL);
				State = 1770; Match(TO_SYMBOL);
				State = 1771; identifier();
				}
				break;
			case 4:
				{
				State = 1772;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 1773; alterTablespaceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUndoTablespaceContext : ParserRuleContext {
		public ITerminalNode UNDO_SYMBOL() { return GetToken(MySQLParser.UNDO_SYMBOL, 0); }
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return GetRuleContext<TablespaceRefContext>(0);
		}
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public ITerminalNode ACTIVE_SYMBOL() { return GetToken(MySQLParser.ACTIVE_SYMBOL, 0); }
		public ITerminalNode INACTIVE_SYMBOL() { return GetToken(MySQLParser.INACTIVE_SYMBOL, 0); }
		public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return GetRuleContext<UndoTableSpaceOptionsContext>(0);
		}
		public AlterUndoTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUndoTablespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterUndoTablespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterUndoTablespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterUndoTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterUndoTablespaceContext alterUndoTablespace() {
		AlterUndoTablespaceContext _localctx = new AlterUndoTablespaceContext(Context, State);
		EnterRule(_localctx, 58, RULE_alterUndoTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1776; Match(UNDO_SYMBOL);
			State = 1777; Match(TABLESPACE_SYMBOL);
			State = 1778; tablespaceRef();
			State = 1779; Match(SET_SYMBOL);
			State = 1780;
			_la = TokenStream.LA(1);
			if ( !(_la==ACTIVE_SYMBOL || _la==INACTIVE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1782;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				State = 1781; undoTableSpaceOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndoTableSpaceOptionsContext : ParserRuleContext {
		public UndoTableSpaceOptionContext[] undoTableSpaceOption() {
			return GetRuleContexts<UndoTableSpaceOptionContext>();
		}
		public UndoTableSpaceOptionContext undoTableSpaceOption(int i) {
			return GetRuleContext<UndoTableSpaceOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UndoTableSpaceOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undoTableSpaceOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUndoTableSpaceOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUndoTableSpaceOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndoTableSpaceOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
		UndoTableSpaceOptionsContext _localctx = new UndoTableSpaceOptionsContext(Context, State);
		EnterRule(_localctx, 60, RULE_undoTableSpaceOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1784; undoTableSpaceOption();
			State = 1791;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL || _la==COMMA_SYMBOL) {
				{
				{
				State = 1786;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 1785; Match(COMMA_SYMBOL);
					}
				}

				State = 1788; undoTableSpaceOption();
				}
				}
				State = 1793;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndoTableSpaceOptionContext : ParserRuleContext {
		public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		public UndoTableSpaceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undoTableSpaceOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUndoTableSpaceOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUndoTableSpaceOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndoTableSpaceOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UndoTableSpaceOptionContext undoTableSpaceOption() {
		UndoTableSpaceOptionContext _localctx = new UndoTableSpaceOptionContext(Context, State);
		EnterRule(_localctx, 62, RULE_undoTableSpaceOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1794; tsOptionEngine();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTablespaceOptionsContext : ParserRuleContext {
		public AlterTablespaceOptionContext[] alterTablespaceOption() {
			return GetRuleContexts<AlterTablespaceOptionContext>();
		}
		public AlterTablespaceOptionContext alterTablespaceOption(int i) {
			return GetRuleContext<AlterTablespaceOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterTablespaceOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTablespaceOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterTablespaceOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterTablespaceOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTablespaceOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTablespaceOptionsContext alterTablespaceOptions() {
		AlterTablespaceOptionsContext _localctx = new AlterTablespaceOptionsContext(Context, State);
		EnterRule(_localctx, 64, RULE_alterTablespaceOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1796; alterTablespaceOption();
			State = 1803;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (AUTOEXTEND_SIZE_SYMBOL - 68)) | (1L << (ENCRYPTION_SYMBOL - 68)) | (1L << (ENGINE_SYMBOL - 68)))) != 0) || _la==INITIAL_SIZE_SYMBOL || _la==MAX_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
				{
				{
				State = 1798;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 1797; Match(COMMA_SYMBOL);
					}
				}

				State = 1800; alterTablespaceOption();
				}
				}
				State = 1805;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTablespaceOptionContext : ParserRuleContext {
		public ITerminalNode INITIAL_SIZE_SYMBOL() { return GetToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return GetRuleContext<TsOptionAutoextendSizeContext>(0);
		}
		public TsOptionMaxSizeContext tsOptionMaxSize() {
			return GetRuleContext<TsOptionMaxSizeContext>(0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		public TsOptionWaitContext tsOptionWait() {
			return GetRuleContext<TsOptionWaitContext>(0);
		}
		public TsOptionEncryptionContext tsOptionEncryption() {
			return GetRuleContext<TsOptionEncryptionContext>(0);
		}
		public AlterTablespaceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTablespaceOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterTablespaceOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterTablespaceOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTablespaceOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTablespaceOptionContext alterTablespaceOption() {
		AlterTablespaceOptionContext _localctx = new AlterTablespaceOptionContext(Context, State);
		EnterRule(_localctx, 66, RULE_alterTablespaceOption);
		try {
			State = 1816;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1806; Match(INITIAL_SIZE_SYMBOL);
				State = 1808;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
				case 1:
					{
					State = 1807; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 1810; sizeNumber();
				}
				break;
			case AUTOEXTEND_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1811; tsOptionAutoextendSize();
				}
				break;
			case MAX_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1812; tsOptionMaxSize();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1813; tsOptionEngine();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1814; tsOptionWait();
				}
				break;
			case ENCRYPTION_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1815; tsOptionEncryption();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeTablespaceOptionContext : ParserRuleContext {
		public ITerminalNode INITIAL_SIZE_SYMBOL() { return GetToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return GetRuleContext<TsOptionAutoextendSizeContext>(0);
		}
		public TsOptionMaxSizeContext tsOptionMaxSize() {
			return GetRuleContext<TsOptionMaxSizeContext>(0);
		}
		public ChangeTablespaceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeTablespaceOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeTablespaceOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeTablespaceOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeTablespaceOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChangeTablespaceOptionContext changeTablespaceOption() {
		ChangeTablespaceOptionContext _localctx = new ChangeTablespaceOptionContext(Context, State);
		EnterRule(_localctx, 68, RULE_changeTablespaceOption);
		try {
			State = 1825;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1818; Match(INITIAL_SIZE_SYMBOL);
				State = 1820;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
				case 1:
					{
					State = 1819; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 1822; sizeNumber();
				}
				break;
			case AUTOEXTEND_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1823; tsOptionAutoextendSize();
				}
				break;
			case MAX_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1824; tsOptionMaxSize();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterViewContext : ParserRuleContext {
		public ITerminalNode VIEW_SYMBOL() { return GetToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ViewRefContext viewRef() {
			return GetRuleContext<ViewRefContext>(0);
		}
		public ViewTailContext viewTail() {
			return GetRuleContext<ViewTailContext>(0);
		}
		public ViewAlgorithmContext viewAlgorithm() {
			return GetRuleContext<ViewAlgorithmContext>(0);
		}
		public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		public ViewSuidContext viewSuid() {
			return GetRuleContext<ViewSuidContext>(0);
		}
		public AlterViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterView; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterView(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterView(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterView(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterViewContext alterView() {
		AlterViewContext _localctx = new AlterViewContext(Context, State);
		EnterRule(_localctx, 70, RULE_alterView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1828;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM_SYMBOL) {
				{
				State = 1827; viewAlgorithm();
				}
			}

			State = 1831;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 1830; definerClause();
				}
			}

			State = 1834;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SQL_SYMBOL) {
				{
				State = 1833; viewSuid();
				}
			}

			State = 1836; Match(VIEW_SYMBOL);
			State = 1837; viewRef();
			State = 1838; viewTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewTailContext : ParserRuleContext {
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public ViewSelectContext viewSelect() {
			return GetRuleContext<ViewSelectContext>(0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return GetRuleContext<ColumnInternalRefListContext>(0);
		}
		public ViewTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewTail; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewTail(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewTail(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewTailContext viewTail() {
		ViewTailContext _localctx = new ViewTailContext(Context, State);
		EnterRule(_localctx, 72, RULE_viewTail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1841;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 1840; columnInternalRefList();
				}
			}

			State = 1843; Match(AS_SYMBOL);
			State = 1844; viewSelect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewSelectContext : ParserRuleContext {
		public QueryExpressionOrParensContext queryExpressionOrParens() {
			return GetRuleContext<QueryExpressionOrParensContext>(0);
		}
		public ViewCheckOptionContext viewCheckOption() {
			return GetRuleContext<ViewCheckOptionContext>(0);
		}
		public ViewSelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewSelect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewSelect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewSelect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewSelectContext viewSelect() {
		ViewSelectContext _localctx = new ViewSelectContext(Context, State);
		EnterRule(_localctx, 74, RULE_viewSelect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1846; queryExpressionOrParens();
			State = 1848;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_SYMBOL) {
				{
				State = 1847; viewCheckOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewCheckOptionContext : ParserRuleContext {
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode CHECK_SYMBOL() { return GetToken(MySQLParser.CHECK_SYMBOL, 0); }
		public ITerminalNode OPTION_SYMBOL() { return GetToken(MySQLParser.OPTION_SYMBOL, 0); }
		public ITerminalNode CASCADED_SYMBOL() { return GetToken(MySQLParser.CASCADED_SYMBOL, 0); }
		public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public ViewCheckOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewCheckOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewCheckOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewCheckOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewCheckOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewCheckOptionContext viewCheckOption() {
		ViewCheckOptionContext _localctx = new ViewCheckOptionContext(Context, State);
		EnterRule(_localctx, 76, RULE_viewCheckOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1850; Match(WITH_SYMBOL);
			State = 1852;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADED_SYMBOL || _la==LOCAL_SYMBOL) {
				{
				State = 1851;
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADED_SYMBOL || _la==LOCAL_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1854; Match(CHECK_SYMBOL);
			State = 1855; Match(OPTION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateStatementContext : ParserRuleContext {
		public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		public CreateDatabaseContext createDatabase() {
			return GetRuleContext<CreateDatabaseContext>(0);
		}
		public CreateTableContext createTable() {
			return GetRuleContext<CreateTableContext>(0);
		}
		public CreateFunctionContext createFunction() {
			return GetRuleContext<CreateFunctionContext>(0);
		}
		public CreateProcedureContext createProcedure() {
			return GetRuleContext<CreateProcedureContext>(0);
		}
		public CreateUdfContext createUdf() {
			return GetRuleContext<CreateUdfContext>(0);
		}
		public CreateLogfileGroupContext createLogfileGroup() {
			return GetRuleContext<CreateLogfileGroupContext>(0);
		}
		public CreateViewContext createView() {
			return GetRuleContext<CreateViewContext>(0);
		}
		public CreateTriggerContext createTrigger() {
			return GetRuleContext<CreateTriggerContext>(0);
		}
		public CreateIndexContext createIndex() {
			return GetRuleContext<CreateIndexContext>(0);
		}
		public CreateServerContext createServer() {
			return GetRuleContext<CreateServerContext>(0);
		}
		public CreateTablespaceContext createTablespace() {
			return GetRuleContext<CreateTablespaceContext>(0);
		}
		public CreateEventContext createEvent() {
			return GetRuleContext<CreateEventContext>(0);
		}
		public CreateRoleContext createRole() {
			return GetRuleContext<CreateRoleContext>(0);
		}
		public CreateSpatialReferenceContext createSpatialReference() {
			return GetRuleContext<CreateSpatialReferenceContext>(0);
		}
		public CreateUndoTablespaceContext createUndoTablespace() {
			return GetRuleContext<CreateUndoTablespaceContext>(0);
		}
		public CreateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateStatementContext createStatement() {
		CreateStatementContext _localctx = new CreateStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_createStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1857; Match(CREATE_SYMBOL);
			State = 1876;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				{
				State = 1858; createDatabase();
				}
				break;
			case 2:
				{
				State = 1859; createTable();
				}
				break;
			case 3:
				{
				State = 1860; createFunction();
				}
				break;
			case 4:
				{
				State = 1861; createProcedure();
				}
				break;
			case 5:
				{
				State = 1862; createUdf();
				}
				break;
			case 6:
				{
				State = 1863; createLogfileGroup();
				}
				break;
			case 7:
				{
				State = 1864; createView();
				}
				break;
			case 8:
				{
				State = 1865; createTrigger();
				}
				break;
			case 9:
				{
				State = 1866; createIndex();
				}
				break;
			case 10:
				{
				State = 1867; createServer();
				}
				break;
			case 11:
				{
				State = 1868; createTablespace();
				}
				break;
			case 12:
				{
				State = 1869; createEvent();
				}
				break;
			case 13:
				{
				State = 1870;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 1871; createRole();
				}
				break;
			case 14:
				{
				State = 1872;
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				State = 1873; createSpatialReference();
				}
				break;
			case 15:
				{
				State = 1874;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 1875; createUndoTablespace();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatabaseContext : ParserRuleContext {
		public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public SchemaNameContext schemaName() {
			return GetRuleContext<SchemaNameContext>(0);
		}
		public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CreateDatabaseOptionContext[] createDatabaseOption() {
			return GetRuleContexts<CreateDatabaseOptionContext>();
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return GetRuleContext<CreateDatabaseOptionContext>(i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatabase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateDatabase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateDatabase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatabaseContext createDatabase() {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(Context, State);
		EnterRule(_localctx, 80, RULE_createDatabase);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1878; Match(DATABASE_SYMBOL);
			State = 1880;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				{
				State = 1879; ifNotExists();
				}
				break;
			}
			State = 1882; schemaName();
			State = 1886;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1883; createDatabaseOption();
					}
					} 
				}
				State = 1888;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatabaseOptionContext : ParserRuleContext {
		public DefaultCharsetContext defaultCharset() {
			return GetRuleContext<DefaultCharsetContext>(0);
		}
		public DefaultCollationContext defaultCollation() {
			return GetRuleContext<DefaultCollationContext>(0);
		}
		public DefaultEncryptionContext defaultEncryption() {
			return GetRuleContext<DefaultEncryptionContext>(0);
		}
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatabaseOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateDatabaseOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateDatabaseOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatabaseOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatabaseOptionContext createDatabaseOption() {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(Context, State);
		EnterRule(_localctx, 82, RULE_createDatabaseOption);
		try {
			State = 1893;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1889; defaultCharset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1890; defaultCollation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1891;
				if (!(serverVersion >= 80016)) throw new FailedPredicateException(this, "serverVersion >= 80016");
				State = 1892; defaultEncryption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableContext : ParserRuleContext {
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public ITerminalNode LIKE_SYMBOL() { return GetToken(MySQLParser.LIKE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode TEMPORARY_SYMBOL() { return GetToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public TableElementListContext tableElementList() {
			return GetRuleContext<TableElementListContext>(0);
		}
		public CreateTableOptionsContext createTableOptions() {
			return GetRuleContext<CreateTableOptionsContext>(0);
		}
		public PartitionClauseContext partitionClause() {
			return GetRuleContext<PartitionClauseContext>(0);
		}
		public DuplicateAsQueryExpressionContext duplicateAsQueryExpression() {
			return GetRuleContext<DuplicateAsQueryExpressionContext>(0);
		}
		public CreateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableContext createTable() {
		CreateTableContext _localctx = new CreateTableContext(Context, State);
		EnterRule(_localctx, 84, RULE_createTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1896;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMPORARY_SYMBOL) {
				{
				State = 1895; Match(TEMPORARY_SYMBOL);
				}
			}

			State = 1898; Match(TABLE_SYMBOL);
			State = 1900;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				{
				State = 1899; ifNotExists();
				}
				break;
			}
			State = 1902; tableName();
			State = 1925;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				{
				State = 1907;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
				case 1:
					{
					State = 1903; Match(OPEN_PAR_SYMBOL);
					State = 1904; tableElementList();
					State = 1905; Match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				State = 1910;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
				case 1:
					{
					State = 1909; createTableOptions();
					}
					break;
				}
				State = 1913;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
				case 1:
					{
					State = 1912; partitionClause();
					}
					break;
				}
				State = 1916;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
				case 1:
					{
					State = 1915; duplicateAsQueryExpression();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 1918; Match(LIKE_SYMBOL);
				State = 1919; tableRef();
				}
				break;
			case 3:
				{
				State = 1920; Match(OPEN_PAR_SYMBOL);
				State = 1921; Match(LIKE_SYMBOL);
				State = 1922; tableRef();
				State = 1923; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableElementListContext : ParserRuleContext {
		public TableElementContext[] tableElement() {
			return GetRuleContexts<TableElementContext>();
		}
		public TableElementContext tableElement(int i) {
			return GetRuleContext<TableElementContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableElementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableElementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableElementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableElementListContext tableElementList() {
		TableElementListContext _localctx = new TableElementListContext(Context, State);
		EnterRule(_localctx, 86, RULE_tableElementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1927; tableElement();
			State = 1932;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 1928; Match(COMMA_SYMBOL);
				State = 1929; tableElement();
				}
				}
				State = 1934;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableElementContext : ParserRuleContext {
		public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		public TableConstraintDefContext tableConstraintDef() {
			return GetRuleContext<TableConstraintDefContext>(0);
		}
		public TableElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableElementContext tableElement() {
		TableElementContext _localctx = new TableElementContext(Context, State);
		EnterRule(_localctx, 88, RULE_tableElement);
		try {
			State = 1937;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1935; columnDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1936; tableConstraintDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DuplicateAsQueryExpressionContext : ParserRuleContext {
		public QueryExpressionOrParensContext queryExpressionOrParens() {
			return GetRuleContext<QueryExpressionOrParensContext>(0);
		}
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public DuplicateAsQueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_duplicateAsQueryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDuplicateAsQueryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDuplicateAsQueryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDuplicateAsQueryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DuplicateAsQueryExpressionContext duplicateAsQueryExpression() {
		DuplicateAsQueryExpressionContext _localctx = new DuplicateAsQueryExpressionContext(Context, State);
		EnterRule(_localctx, 90, RULE_duplicateAsQueryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1940;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				{
				State = 1939;
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1943;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				{
				State = 1942; Match(AS_SYMBOL);
				}
				break;
			}
			State = 1945; queryExpressionOrParens();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionOrParensContext : ParserRuleContext {
		public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		public QueryExpressionOrParensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpressionOrParens; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQueryExpressionOrParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQueryExpressionOrParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryExpressionOrParens(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionOrParensContext queryExpressionOrParens() {
		QueryExpressionOrParensContext _localctx = new QueryExpressionOrParensContext(Context, State);
		EnterRule(_localctx, 92, RULE_queryExpressionOrParens);
		try {
			State = 1949;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1947; queryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1948; queryExpressionParens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateRoutineContext : ParserRuleContext {
		public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		public ITerminalNode Eof() { return GetToken(MySQLParser.Eof, 0); }
		public CreateProcedureContext createProcedure() {
			return GetRuleContext<CreateProcedureContext>(0);
		}
		public CreateFunctionContext createFunction() {
			return GetRuleContext<CreateFunctionContext>(0);
		}
		public CreateUdfContext createUdf() {
			return GetRuleContext<CreateUdfContext>(0);
		}
		public ITerminalNode SEMICOLON_SYMBOL() { return GetToken(MySQLParser.SEMICOLON_SYMBOL, 0); }
		public CreateRoutineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createRoutine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateRoutine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateRoutine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateRoutine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateRoutineContext createRoutine() {
		CreateRoutineContext _localctx = new CreateRoutineContext(Context, State);
		EnterRule(_localctx, 94, RULE_createRoutine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1951; Match(CREATE_SYMBOL);
			State = 1955;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				{
				State = 1952; createProcedure();
				}
				break;
			case 2:
				{
				State = 1953; createFunction();
				}
				break;
			case 3:
				{
				State = 1954; createUdf();
				}
				break;
			}
			State = 1958;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON_SYMBOL) {
				{
				State = 1957; Match(SEMICOLON_SYMBOL);
				}
			}

			State = 1960; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateProcedureContext : ParserRuleContext {
		public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public ProcedureNameContext procedureName() {
			return GetRuleContext<ProcedureNameContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		public ProcedureParameterContext[] procedureParameter() {
			return GetRuleContexts<ProcedureParameterContext>();
		}
		public ProcedureParameterContext procedureParameter(int i) {
			return GetRuleContext<ProcedureParameterContext>(i);
		}
		public RoutineCreateOptionContext[] routineCreateOption() {
			return GetRuleContexts<RoutineCreateOptionContext>();
		}
		public RoutineCreateOptionContext routineCreateOption(int i) {
			return GetRuleContext<RoutineCreateOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createProcedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateProcedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateProcedure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateProcedureContext createProcedure() {
		CreateProcedureContext _localctx = new CreateProcedureContext(Context, State);
		EnterRule(_localctx, 96, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1963;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 1962; definerClause();
				}
			}

			State = 1965; Match(PROCEDURE_SYMBOL);
			State = 1966; procedureName();
			State = 1967; Match(OPEN_PAR_SYMBOL);
			State = 1976;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
			case 1:
				{
				State = 1968; procedureParameter();
				State = 1973;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 1969; Match(COMMA_SYMBOL);
					State = 1970; procedureParameter();
					}
					}
					State = 1975;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 1978; Match(CLOSE_PAR_SYMBOL);
			State = 1982;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,127,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1979; routineCreateOption();
					}
					} 
				}
				State = 1984;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,127,Context);
			}
			State = 1985; compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateFunctionContext : ParserRuleContext {
		public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode RETURNS_SYMBOL() { return GetToken(MySQLParser.RETURNS_SYMBOL, 0); }
		public TypeWithOptCollateContext typeWithOptCollate() {
			return GetRuleContext<TypeWithOptCollateContext>(0);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		public RoutineCreateOptionContext[] routineCreateOption() {
			return GetRuleContexts<RoutineCreateOptionContext>();
		}
		public RoutineCreateOptionContext routineCreateOption(int i) {
			return GetRuleContext<RoutineCreateOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateFunctionContext createFunction() {
		CreateFunctionContext _localctx = new CreateFunctionContext(Context, State);
		EnterRule(_localctx, 98, RULE_createFunction);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1988;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 1987; definerClause();
				}
			}

			State = 1990; Match(FUNCTION_SYMBOL);
			State = 1991; functionName();
			State = 1992; Match(OPEN_PAR_SYMBOL);
			State = 2001;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
			case 1:
				{
				State = 1993; functionParameter();
				State = 1998;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 1994; Match(COMMA_SYMBOL);
					State = 1995; functionParameter();
					}
					}
					State = 2000;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 2003; Match(CLOSE_PAR_SYMBOL);
			State = 2004; Match(RETURNS_SYMBOL);
			State = 2005; typeWithOptCollate();
			State = 2009;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,131,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2006; routineCreateOption();
					}
					} 
				}
				State = 2011;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,131,Context);
			}
			State = 2012; compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUdfContext : ParserRuleContext {
		public IToken type;
		public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public UdfNameContext udfName() {
			return GetRuleContext<UdfNameContext>(0);
		}
		public ITerminalNode RETURNS_SYMBOL() { return GetToken(MySQLParser.RETURNS_SYMBOL, 0); }
		public ITerminalNode SONAME_SYMBOL() { return GetToken(MySQLParser.SONAME_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode STRING_SYMBOL() { return GetToken(MySQLParser.STRING_SYMBOL, 0); }
		public ITerminalNode INT_SYMBOL() { return GetToken(MySQLParser.INT_SYMBOL, 0); }
		public ITerminalNode REAL_SYMBOL() { return GetToken(MySQLParser.REAL_SYMBOL, 0); }
		public ITerminalNode DECIMAL_SYMBOL() { return GetToken(MySQLParser.DECIMAL_SYMBOL, 0); }
		public ITerminalNode AGGREGATE_SYMBOL() { return GetToken(MySQLParser.AGGREGATE_SYMBOL, 0); }
		public CreateUdfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUdf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateUdf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateUdf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUdf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateUdfContext createUdf() {
		CreateUdfContext _localctx = new CreateUdfContext(Context, State);
		EnterRule(_localctx, 100, RULE_createUdf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2015;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AGGREGATE_SYMBOL) {
				{
				State = 2014; Match(AGGREGATE_SYMBOL);
				}
			}

			State = 2017; Match(FUNCTION_SYMBOL);
			State = 2018; udfName();
			State = 2019; Match(RETURNS_SYMBOL);
			State = 2020;
			_localctx.type = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==STRING_SYMBOL || _la==DECIMAL_SYMBOL || _la==INT_SYMBOL || _la==REAL_SYMBOL) ) {
				_localctx.type = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2021; Match(SONAME_SYMBOL);
			State = 2022; textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineCreateOptionContext : ParserRuleContext {
		public RoutineOptionContext routineOption() {
			return GetRuleContext<RoutineOptionContext>(0);
		}
		public ITerminalNode DETERMINISTIC_SYMBOL() { return GetToken(MySQLParser.DETERMINISTIC_SYMBOL, 0); }
		public ITerminalNode NOT_SYMBOL() { return GetToken(MySQLParser.NOT_SYMBOL, 0); }
		public RoutineCreateOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineCreateOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoutineCreateOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoutineCreateOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineCreateOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineCreateOptionContext routineCreateOption() {
		RoutineCreateOptionContext _localctx = new RoutineCreateOptionContext(Context, State);
		EnterRule(_localctx, 102, RULE_routineCreateOption);
		int _la;
		try {
			State = 2029;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMENT_SYMBOL:
			case CONTAINS_SYMBOL:
			case LANGUAGE_SYMBOL:
			case NO_SYMBOL:
			case MODIFIES_SYMBOL:
			case READS_SYMBOL:
			case SQL_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2024; routineOption();
				}
				break;
			case DETERMINISTIC_SYMBOL:
			case NOT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2026;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					State = 2025; Match(NOT_SYMBOL);
					}
				}

				State = 2028; Match(DETERMINISTIC_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineAlterOptionsContext : ParserRuleContext {
		public RoutineCreateOptionContext[] routineCreateOption() {
			return GetRuleContexts<RoutineCreateOptionContext>();
		}
		public RoutineCreateOptionContext routineCreateOption(int i) {
			return GetRuleContext<RoutineCreateOptionContext>(i);
		}
		public RoutineAlterOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineAlterOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoutineAlterOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoutineAlterOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineAlterOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineAlterOptionsContext routineAlterOptions() {
		RoutineAlterOptionsContext _localctx = new RoutineAlterOptionsContext(Context, State);
		EnterRule(_localctx, 104, RULE_routineAlterOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2032;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2031; routineCreateOption();
				}
				}
				State = 2034;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMENT_SYMBOL) | (1L << CONTAINS_SYMBOL) | (1L << LANGUAGE_SYMBOL) | (1L << NO_SYMBOL))) != 0) || _la==DETERMINISTIC_SYMBOL || ((((_la - 566)) & ~0x3f) == 0 && ((1L << (_la - 566)) & ((1L << (MODIFIES_SYMBOL - 566)) | (1L << (NOT_SYMBOL - 566)) | (1L << (READS_SYMBOL - 566)))) != 0) || _la==SQL_SYMBOL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineOptionContext : ParserRuleContext {
		public IToken option;
		public IToken security;
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public ITerminalNode SQL_SYMBOL() { return GetToken(MySQLParser.SQL_SYMBOL, 0); }
		public ITerminalNode LANGUAGE_SYMBOL() { return GetToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		public ITerminalNode NO_SYMBOL() { return GetToken(MySQLParser.NO_SYMBOL, 0); }
		public ITerminalNode CONTAINS_SYMBOL() { return GetToken(MySQLParser.CONTAINS_SYMBOL, 0); }
		public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		public ITerminalNode READS_SYMBOL() { return GetToken(MySQLParser.READS_SYMBOL, 0); }
		public ITerminalNode MODIFIES_SYMBOL() { return GetToken(MySQLParser.MODIFIES_SYMBOL, 0); }
		public ITerminalNode SECURITY_SYMBOL() { return GetToken(MySQLParser.SECURITY_SYMBOL, 0); }
		public ITerminalNode DEFINER_SYMBOL() { return GetToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public ITerminalNode INVOKER_SYMBOL() { return GetToken(MySQLParser.INVOKER_SYMBOL, 0); }
		public RoutineOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoutineOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoutineOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineOptionContext routineOption() {
		RoutineOptionContext _localctx = new RoutineOptionContext(Context, State);
		EnterRule(_localctx, 106, RULE_routineOption);
		int _la;
		try {
			State = 2053;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMENT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2036; _localctx.option = Match(COMMENT_SYMBOL);
				State = 2037; textLiteral();
				}
				break;
			case LANGUAGE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2038; _localctx.option = Match(LANGUAGE_SYMBOL);
				State = 2039; Match(SQL_SYMBOL);
				}
				break;
			case NO_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2040; _localctx.option = Match(NO_SYMBOL);
				State = 2041; Match(SQL_SYMBOL);
				}
				break;
			case CONTAINS_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2042; _localctx.option = Match(CONTAINS_SYMBOL);
				State = 2043; Match(SQL_SYMBOL);
				}
				break;
			case READS_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2044; _localctx.option = Match(READS_SYMBOL);
				State = 2045; Match(SQL_SYMBOL);
				State = 2046; Match(DATA_SYMBOL);
				}
				break;
			case MODIFIES_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2047; _localctx.option = Match(MODIFIES_SYMBOL);
				State = 2048; Match(SQL_SYMBOL);
				State = 2049; Match(DATA_SYMBOL);
				}
				break;
			case SQL_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2050; _localctx.option = Match(SQL_SYMBOL);
				State = 2051; Match(SECURITY_SYMBOL);
				State = 2052;
				_localctx.security = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFINER_SYMBOL || _la==INVOKER_SYMBOL) ) {
					_localctx.security = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexContext : ParserRuleContext {
		public IToken type;
		public CreateIndexTargetContext createIndexTarget() {
			return GetRuleContext<CreateIndexTargetContext>(0);
		}
		public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		public IndexNameContext indexName() {
			return GetRuleContext<IndexNameContext>(0);
		}
		public OnlineOptionContext onlineOption() {
			return GetRuleContext<OnlineOptionContext>(0);
		}
		public ITerminalNode FULLTEXT_SYMBOL() { return GetToken(MySQLParser.FULLTEXT_SYMBOL, 0); }
		public ITerminalNode SPATIAL_SYMBOL() { return GetToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		public IndexLockAndAlgorithmContext indexLockAndAlgorithm() {
			return GetRuleContext<IndexLockAndAlgorithmContext>(0);
		}
		public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		public FulltextIndexOptionContext[] fulltextIndexOption() {
			return GetRuleContexts<FulltextIndexOptionContext>();
		}
		public FulltextIndexOptionContext fulltextIndexOption(int i) {
			return GetRuleContext<FulltextIndexOptionContext>(i);
		}
		public SpatialIndexOptionContext[] spatialIndexOption() {
			return GetRuleContexts<SpatialIndexOptionContext>();
		}
		public SpatialIndexOptionContext spatialIndexOption(int i) {
			return GetRuleContext<SpatialIndexOptionContext>(i);
		}
		public IndexTypeClauseContext indexTypeClause() {
			return GetRuleContext<IndexTypeClauseContext>(0);
		}
		public IndexNameAndTypeContext indexNameAndType() {
			return GetRuleContext<IndexNameAndTypeContext>(0);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexContext createIndex() {
		CreateIndexContext _localctx = new CreateIndexContext(Context, State);
		EnterRule(_localctx, 108, RULE_createIndex);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2056;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
			case 1:
				{
				State = 2055; onlineOption();
				}
				break;
			}
			State = 2099;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDEX_SYMBOL:
			case UNIQUE_SYMBOL:
				{
				State = 2059;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNIQUE_SYMBOL) {
					{
					State = 2058; Match(UNIQUE_SYMBOL);
					}
				}

				State = 2061; _localctx.type = Match(INDEX_SYMBOL);
				State = 2070;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
				case 1:
					{
					State = 2062;
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					State = 2063; indexName();
					State = 2065;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==TYPE_SYMBOL || _la==USING_SYMBOL) {
						{
						State = 2064; indexTypeClause();
						}
					}

					}
					break;
				case 2:
					{
					State = 2068;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
					case 1:
						{
						State = 2067; indexNameAndType();
						}
						break;
					}
					}
					break;
				}
				State = 2072; createIndexTarget();
				State = 2076;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2073; indexOption();
						}
						} 
					}
					State = 2078;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
				}
				}
				break;
			case FULLTEXT_SYMBOL:
				{
				State = 2079; _localctx.type = Match(FULLTEXT_SYMBOL);
				State = 2080; Match(INDEX_SYMBOL);
				State = 2081; indexName();
				State = 2082; createIndexTarget();
				State = 2086;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2083; fulltextIndexOption();
						}
						} 
					}
					State = 2088;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				{
				State = 2089; _localctx.type = Match(SPATIAL_SYMBOL);
				State = 2090; Match(INDEX_SYMBOL);
				State = 2091; indexName();
				State = 2092; createIndexTarget();
				State = 2096;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2093; spatialIndexOption();
						}
						} 
					}
					State = 2098;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				{
				State = 2101; indexLockAndAlgorithm();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexNameAndTypeContext : ParserRuleContext {
		public IndexNameContext indexName() {
			return GetRuleContext<IndexNameContext>(0);
		}
		public ITerminalNode USING_SYMBOL() { return GetToken(MySQLParser.USING_SYMBOL, 0); }
		public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		public ITerminalNode TYPE_SYMBOL() { return GetToken(MySQLParser.TYPE_SYMBOL, 0); }
		public IndexNameAndTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexNameAndType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexNameAndType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexNameAndType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexNameAndType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexNameAndTypeContext indexNameAndType() {
		IndexNameAndTypeContext _localctx = new IndexNameAndTypeContext(Context, State);
		EnterRule(_localctx, 110, RULE_indexNameAndType);
		try {
			State = 2113;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2104; indexName();
				State = 2107;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,147,Context) ) {
				case 1:
					{
					State = 2105; Match(USING_SYMBOL);
					State = 2106; indexType();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2109; indexName();
				State = 2110; Match(TYPE_SYMBOL);
				State = 2111; indexType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexTargetContext : ParserRuleContext {
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public KeyListVariantsContext keyListVariants() {
			return GetRuleContext<KeyListVariantsContext>(0);
		}
		public CreateIndexTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndexTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateIndexTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateIndexTarget(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndexTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexTargetContext createIndexTarget() {
		CreateIndexTargetContext _localctx = new CreateIndexTargetContext(Context, State);
		EnterRule(_localctx, 112, RULE_createIndexTarget);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2115; Match(ON_SYMBOL);
			State = 2116; tableRef();
			State = 2117; keyListVariants();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateLogfileGroupContext : ParserRuleContext {
		public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupNameContext logfileGroupName() {
			return GetRuleContext<LogfileGroupNameContext>(0);
		}
		public ITerminalNode ADD_SYMBOL() { return GetToken(MySQLParser.ADD_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode UNDOFILE_SYMBOL() { return GetToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		public ITerminalNode REDOFILE_SYMBOL() { return GetToken(MySQLParser.REDOFILE_SYMBOL, 0); }
		public LogfileGroupOptionsContext logfileGroupOptions() {
			return GetRuleContext<LogfileGroupOptionsContext>(0);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createLogfileGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateLogfileGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateLogfileGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateLogfileGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateLogfileGroupContext createLogfileGroup() {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(Context, State);
		EnterRule(_localctx, 114, RULE_createLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2119; Match(LOGFILE_SYMBOL);
			State = 2120; Match(GROUP_SYMBOL);
			State = 2121; logfileGroupName();
			State = 2122; Match(ADD_SYMBOL);
			State = 2123;
			_la = TokenStream.LA(1);
			if ( !(_la==REDOFILE_SYMBOL || _la==UNDOFILE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2124; textLiteral();
			State = 2126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || ((((_la - 237)) & ~0x3f) == 0 && ((1L << (_la - 237)) & ((1L << (NO_WAIT_SYMBOL - 237)) | (1L << (NODEGROUP_SYMBOL - 237)) | (1L << (REDO_BUFFER_SIZE_SYMBOL - 237)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (STORAGE_SYMBOL - 328)) | (1L << (UNDO_BUFFER_SIZE_SYMBOL - 328)) | (1L << (WAIT_SYMBOL - 328)))) != 0)) {
				{
				State = 2125; logfileGroupOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogfileGroupOptionsContext : ParserRuleContext {
		public LogfileGroupOptionContext[] logfileGroupOption() {
			return GetRuleContexts<LogfileGroupOptionContext>();
		}
		public LogfileGroupOptionContext logfileGroupOption(int i) {
			return GetRuleContext<LogfileGroupOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public LogfileGroupOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logfileGroupOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLogfileGroupOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLogfileGroupOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogfileGroupOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogfileGroupOptionsContext logfileGroupOptions() {
		LogfileGroupOptionsContext _localctx = new LogfileGroupOptionsContext(Context, State);
		EnterRule(_localctx, 116, RULE_logfileGroupOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2128; logfileGroupOption();
			State = 2135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || ((((_la - 237)) & ~0x3f) == 0 && ((1L << (_la - 237)) & ((1L << (NO_WAIT_SYMBOL - 237)) | (1L << (NODEGROUP_SYMBOL - 237)) | (1L << (REDO_BUFFER_SIZE_SYMBOL - 237)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (STORAGE_SYMBOL - 328)) | (1L << (UNDO_BUFFER_SIZE_SYMBOL - 328)) | (1L << (WAIT_SYMBOL - 328)))) != 0) || _la==COMMA_SYMBOL) {
				{
				{
				State = 2130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 2129; Match(COMMA_SYMBOL);
					}
				}

				State = 2132; logfileGroupOption();
				}
				}
				State = 2137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogfileGroupOptionContext : ParserRuleContext {
		public TsOptionInitialSizeContext tsOptionInitialSize() {
			return GetRuleContext<TsOptionInitialSizeContext>(0);
		}
		public TsOptionUndoRedoBufferSizeContext tsOptionUndoRedoBufferSize() {
			return GetRuleContext<TsOptionUndoRedoBufferSizeContext>(0);
		}
		public TsOptionNodegroupContext tsOptionNodegroup() {
			return GetRuleContext<TsOptionNodegroupContext>(0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		public TsOptionWaitContext tsOptionWait() {
			return GetRuleContext<TsOptionWaitContext>(0);
		}
		public TsOptionCommentContext tsOptionComment() {
			return GetRuleContext<TsOptionCommentContext>(0);
		}
		public LogfileGroupOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logfileGroupOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLogfileGroupOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLogfileGroupOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogfileGroupOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogfileGroupOptionContext logfileGroupOption() {
		LogfileGroupOptionContext _localctx = new LogfileGroupOptionContext(Context, State);
		EnterRule(_localctx, 118, RULE_logfileGroupOption);
		try {
			State = 2144;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2138; tsOptionInitialSize();
				}
				break;
			case REDO_BUFFER_SIZE_SYMBOL:
			case UNDO_BUFFER_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2139; tsOptionUndoRedoBufferSize();
				}
				break;
			case NODEGROUP_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2140; tsOptionNodegroup();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2141; tsOptionEngine();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2142; tsOptionWait();
				}
				break;
			case COMMENT_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2143; tsOptionComment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateServerContext : ParserRuleContext {
		public ITerminalNode SERVER_SYMBOL() { return GetToken(MySQLParser.SERVER_SYMBOL, 0); }
		public ServerNameContext serverName() {
			return GetRuleContext<ServerNameContext>(0);
		}
		public ITerminalNode FOREIGN_SYMBOL() { return GetToken(MySQLParser.FOREIGN_SYMBOL, 0); }
		public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		public ITerminalNode WRAPPER_SYMBOL() { return GetToken(MySQLParser.WRAPPER_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ServerOptionsContext serverOptions() {
			return GetRuleContext<ServerOptionsContext>(0);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createServer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateServer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateServer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateServer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateServerContext createServer() {
		CreateServerContext _localctx = new CreateServerContext(Context, State);
		EnterRule(_localctx, 120, RULE_createServer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2146; Match(SERVER_SYMBOL);
			State = 2147; serverName();
			State = 2148; Match(FOREIGN_SYMBOL);
			State = 2149; Match(DATA_SYMBOL);
			State = 2150; Match(WRAPPER_SYMBOL);
			State = 2151; textOrIdentifier();
			State = 2152; serverOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerOptionsContext : ParserRuleContext {
		public ITerminalNode OPTIONS_SYMBOL() { return GetToken(MySQLParser.OPTIONS_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ServerOptionContext[] serverOption() {
			return GetRuleContexts<ServerOptionContext>();
		}
		public ServerOptionContext serverOption(int i) {
			return GetRuleContext<ServerOptionContext>(i);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ServerOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterServerOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitServerOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServerOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServerOptionsContext serverOptions() {
		ServerOptionsContext _localctx = new ServerOptionsContext(Context, State);
		EnterRule(_localctx, 122, RULE_serverOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2154; Match(OPTIONS_SYMBOL);
			State = 2155; Match(OPEN_PAR_SYMBOL);
			State = 2156; serverOption();
			State = 2161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 2157; Match(COMMA_SYMBOL);
				State = 2158; serverOption();
				}
				}
				State = 2163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2164; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerOptionContext : ParserRuleContext {
		public IToken option;
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode HOST_SYMBOL() { return GetToken(MySQLParser.HOST_SYMBOL, 0); }
		public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public ITerminalNode SOCKET_SYMBOL() { return GetToken(MySQLParser.SOCKET_SYMBOL, 0); }
		public ITerminalNode OWNER_SYMBOL() { return GetToken(MySQLParser.OWNER_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public ITerminalNode PORT_SYMBOL() { return GetToken(MySQLParser.PORT_SYMBOL, 0); }
		public ServerOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterServerOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitServerOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServerOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServerOptionContext serverOption() {
		ServerOptionContext _localctx = new ServerOptionContext(Context, State);
		EnterRule(_localctx, 124, RULE_serverOption);
		try {
			State = 2180;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HOST_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2166; _localctx.option = Match(HOST_SYMBOL);
				State = 2167; textLiteral();
				}
				break;
			case DATABASE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2168; _localctx.option = Match(DATABASE_SYMBOL);
				State = 2169; textLiteral();
				}
				break;
			case USER_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2170; _localctx.option = Match(USER_SYMBOL);
				State = 2171; textLiteral();
				}
				break;
			case PASSWORD_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2172; _localctx.option = Match(PASSWORD_SYMBOL);
				State = 2173; textLiteral();
				}
				break;
			case SOCKET_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2174; _localctx.option = Match(SOCKET_SYMBOL);
				State = 2175; textLiteral();
				}
				break;
			case OWNER_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2176; _localctx.option = Match(OWNER_SYMBOL);
				State = 2177; textLiteral();
				}
				break;
			case PORT_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2178; _localctx.option = Match(PORT_SYMBOL);
				State = 2179; ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTablespaceContext : ParserRuleContext {
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceNameContext tablespaceName() {
			return GetRuleContext<TablespaceNameContext>(0);
		}
		public TsDataFileNameContext tsDataFileName() {
			return GetRuleContext<TsDataFileNameContext>(0);
		}
		public ITerminalNode USE_SYMBOL() { return GetToken(MySQLParser.USE_SYMBOL, 0); }
		public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupRefContext logfileGroupRef() {
			return GetRuleContext<LogfileGroupRefContext>(0);
		}
		public TablespaceOptionsContext tablespaceOptions() {
			return GetRuleContext<TablespaceOptionsContext>(0);
		}
		public CreateTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTablespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateTablespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateTablespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTablespaceContext createTablespace() {
		CreateTablespaceContext _localctx = new CreateTablespaceContext(Context, State);
		EnterRule(_localctx, 126, RULE_createTablespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2182; Match(TABLESPACE_SYMBOL);
			State = 2183; tablespaceName();
			State = 2184; tsDataFileName();
			State = 2189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
			case 1:
				{
				State = 2185; Match(USE_SYMBOL);
				State = 2186; Match(LOGFILE_SYMBOL);
				State = 2187; Match(GROUP_SYMBOL);
				State = 2188; logfileGroupRef();
				}
				break;
			}
			State = 2192;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
			case 1:
				{
				State = 2191; tablespaceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUndoTablespaceContext : ParserRuleContext {
		public ITerminalNode UNDO_SYMBOL() { return GetToken(MySQLParser.UNDO_SYMBOL, 0); }
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceNameContext tablespaceName() {
			return GetRuleContext<TablespaceNameContext>(0);
		}
		public ITerminalNode ADD_SYMBOL() { return GetToken(MySQLParser.ADD_SYMBOL, 0); }
		public TsDataFileContext tsDataFile() {
			return GetRuleContext<TsDataFileContext>(0);
		}
		public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return GetRuleContext<UndoTableSpaceOptionsContext>(0);
		}
		public CreateUndoTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUndoTablespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateUndoTablespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateUndoTablespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUndoTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateUndoTablespaceContext createUndoTablespace() {
		CreateUndoTablespaceContext _localctx = new CreateUndoTablespaceContext(Context, State);
		EnterRule(_localctx, 128, RULE_createUndoTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2194; Match(UNDO_SYMBOL);
			State = 2195; Match(TABLESPACE_SYMBOL);
			State = 2196; tablespaceName();
			State = 2197; Match(ADD_SYMBOL);
			State = 2198; tsDataFile();
			State = 2200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				State = 2199; undoTableSpaceOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsDataFileNameContext : ParserRuleContext {
		public ITerminalNode ADD_SYMBOL() { return GetToken(MySQLParser.ADD_SYMBOL, 0); }
		public TsDataFileContext tsDataFile() {
			return GetRuleContext<TsDataFileContext>(0);
		}
		public TsDataFileNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsDataFileName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsDataFileName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsDataFileName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsDataFileName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsDataFileNameContext tsDataFileName() {
		TsDataFileNameContext _localctx = new TsDataFileNameContext(Context, State);
		EnterRule(_localctx, 130, RULE_tsDataFileName);
		try {
			State = 2209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2202;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 2205;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
				case 1:
					{
					State = 2203; Match(ADD_SYMBOL);
					State = 2204; tsDataFile();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2207; Match(ADD_SYMBOL);
				State = 2208; tsDataFile();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsDataFileContext : ParserRuleContext {
		public ITerminalNode DATAFILE_SYMBOL() { return GetToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public TsDataFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsDataFile; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsDataFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsDataFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsDataFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsDataFileContext tsDataFile() {
		TsDataFileContext _localctx = new TsDataFileContext(Context, State);
		EnterRule(_localctx, 132, RULE_tsDataFile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2211; Match(DATAFILE_SYMBOL);
			State = 2212; textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceOptionsContext : ParserRuleContext {
		public TablespaceOptionContext[] tablespaceOption() {
			return GetRuleContexts<TablespaceOptionContext>();
		}
		public TablespaceOptionContext tablespaceOption(int i) {
			return GetRuleContext<TablespaceOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TablespaceOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTablespaceOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTablespaceOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespaceOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceOptionsContext tablespaceOptions() {
		TablespaceOptionsContext _localctx = new TablespaceOptionsContext(Context, State);
		EnterRule(_localctx, 134, RULE_tablespaceOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2214; tablespaceOption();
			State = 2221;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2216;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
					case 1:
						{
						State = 2215; Match(COMMA_SYMBOL);
						}
						break;
					}
					State = 2218; tablespaceOption();
					}
					} 
				}
				State = 2223;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceOptionContext : ParserRuleContext {
		public TsOptionInitialSizeContext tsOptionInitialSize() {
			return GetRuleContext<TsOptionInitialSizeContext>(0);
		}
		public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return GetRuleContext<TsOptionAutoextendSizeContext>(0);
		}
		public TsOptionMaxSizeContext tsOptionMaxSize() {
			return GetRuleContext<TsOptionMaxSizeContext>(0);
		}
		public TsOptionExtentSizeContext tsOptionExtentSize() {
			return GetRuleContext<TsOptionExtentSizeContext>(0);
		}
		public TsOptionNodegroupContext tsOptionNodegroup() {
			return GetRuleContext<TsOptionNodegroupContext>(0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		public TsOptionWaitContext tsOptionWait() {
			return GetRuleContext<TsOptionWaitContext>(0);
		}
		public TsOptionCommentContext tsOptionComment() {
			return GetRuleContext<TsOptionCommentContext>(0);
		}
		public TsOptionFileblockSizeContext tsOptionFileblockSize() {
			return GetRuleContext<TsOptionFileblockSizeContext>(0);
		}
		public TsOptionEncryptionContext tsOptionEncryption() {
			return GetRuleContext<TsOptionEncryptionContext>(0);
		}
		public TablespaceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTablespaceOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTablespaceOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespaceOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceOptionContext tablespaceOption() {
		TablespaceOptionContext _localctx = new TablespaceOptionContext(Context, State);
		EnterRule(_localctx, 136, RULE_tablespaceOption);
		try {
			State = 2236;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2224; tsOptionInitialSize();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2225; tsOptionAutoextendSize();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2226; tsOptionMaxSize();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2227; tsOptionExtentSize();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2228; tsOptionNodegroup();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2229; tsOptionEngine();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2230; tsOptionWait();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2231; tsOptionComment();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2232;
				if (!(serverVersion >= 50707)) throw new FailedPredicateException(this, "serverVersion >= 50707");
				State = 2233; tsOptionFileblockSize();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2234;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 2235; tsOptionEncryption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionInitialSizeContext : ParserRuleContext {
		public ITerminalNode INITIAL_SIZE_SYMBOL() { return GetToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionInitialSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionInitialSize; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionInitialSize(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionInitialSize(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsOptionInitialSize(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionInitialSizeContext tsOptionInitialSize() {
		TsOptionInitialSizeContext _localctx = new TsOptionInitialSizeContext(Context, State);
		EnterRule(_localctx, 138, RULE_tsOptionInitialSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2238; Match(INITIAL_SIZE_SYMBOL);
			State = 2240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
			case 1:
				{
				State = 2239; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2242; sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionUndoRedoBufferSizeContext : ParserRuleContext {
		public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		public ITerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		public ITerminalNode REDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionUndoRedoBufferSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionUndoRedoBufferSize; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionUndoRedoBufferSize(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionUndoRedoBufferSize(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsOptionUndoRedoBufferSize(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionUndoRedoBufferSizeContext tsOptionUndoRedoBufferSize() {
		TsOptionUndoRedoBufferSizeContext _localctx = new TsOptionUndoRedoBufferSizeContext(Context, State);
		EnterRule(_localctx, 140, RULE_tsOptionUndoRedoBufferSize);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2244;
			_la = TokenStream.LA(1);
			if ( !(_la==REDO_BUFFER_SIZE_SYMBOL || _la==UNDO_BUFFER_SIZE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2246;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,164,Context) ) {
			case 1:
				{
				State = 2245; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2248; sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionAutoextendSizeContext : ParserRuleContext {
		public ITerminalNode AUTOEXTEND_SIZE_SYMBOL() { return GetToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionAutoextendSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionAutoextendSize; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionAutoextendSize(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionAutoextendSize(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsOptionAutoextendSize(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
		TsOptionAutoextendSizeContext _localctx = new TsOptionAutoextendSizeContext(Context, State);
		EnterRule(_localctx, 142, RULE_tsOptionAutoextendSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2250; Match(AUTOEXTEND_SIZE_SYMBOL);
			State = 2252;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
			case 1:
				{
				State = 2251; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2254; sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionMaxSizeContext : ParserRuleContext {
		public ITerminalNode MAX_SIZE_SYMBOL() { return GetToken(MySQLParser.MAX_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionMaxSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionMaxSize; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionMaxSize(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionMaxSize(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsOptionMaxSize(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionMaxSizeContext tsOptionMaxSize() {
		TsOptionMaxSizeContext _localctx = new TsOptionMaxSizeContext(Context, State);
		EnterRule(_localctx, 144, RULE_tsOptionMaxSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2256; Match(MAX_SIZE_SYMBOL);
			State = 2258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
			case 1:
				{
				State = 2257; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2260; sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionExtentSizeContext : ParserRuleContext {
		public ITerminalNode EXTENT_SIZE_SYMBOL() { return GetToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionExtentSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionExtentSize; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionExtentSize(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionExtentSize(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsOptionExtentSize(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionExtentSizeContext tsOptionExtentSize() {
		TsOptionExtentSizeContext _localctx = new TsOptionExtentSizeContext(Context, State);
		EnterRule(_localctx, 146, RULE_tsOptionExtentSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2262; Match(EXTENT_SIZE_SYMBOL);
			State = 2264;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
			case 1:
				{
				State = 2263; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2266; sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionNodegroupContext : ParserRuleContext {
		public ITerminalNode NODEGROUP_SYMBOL() { return GetToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionNodegroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionNodegroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionNodegroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionNodegroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsOptionNodegroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionNodegroupContext tsOptionNodegroup() {
		TsOptionNodegroupContext _localctx = new TsOptionNodegroupContext(Context, State);
		EnterRule(_localctx, 148, RULE_tsOptionNodegroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2268; Match(NODEGROUP_SYMBOL);
			State = 2270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_OPERATOR) {
				{
				State = 2269; Match(EQUAL_OPERATOR);
				}
			}

			State = 2272; real_ulong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionEngineContext : ParserRuleContext {
		public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public EngineRefContext engineRef() {
			return GetRuleContext<EngineRefContext>(0);
		}
		public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionEngineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionEngine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionEngine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionEngine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsOptionEngine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionEngineContext tsOptionEngine() {
		TsOptionEngineContext _localctx = new TsOptionEngineContext(Context, State);
		EnterRule(_localctx, 150, RULE_tsOptionEngine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STORAGE_SYMBOL) {
				{
				State = 2274; Match(STORAGE_SYMBOL);
				}
			}

			State = 2277; Match(ENGINE_SYMBOL);
			State = 2279;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
			case 1:
				{
				State = 2278; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2281; engineRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionWaitContext : ParserRuleContext {
		public ITerminalNode WAIT_SYMBOL() { return GetToken(MySQLParser.WAIT_SYMBOL, 0); }
		public ITerminalNode NO_WAIT_SYMBOL() { return GetToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
		public TsOptionWaitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionWait; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionWait(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionWait(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsOptionWait(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionWaitContext tsOptionWait() {
		TsOptionWaitContext _localctx = new TsOptionWaitContext(Context, State);
		EnterRule(_localctx, 152, RULE_tsOptionWait);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2283;
			_la = TokenStream.LA(1);
			if ( !(_la==NO_WAIT_SYMBOL || _la==WAIT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionCommentContext : ParserRuleContext {
		public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsOptionComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionCommentContext tsOptionComment() {
		TsOptionCommentContext _localctx = new TsOptionCommentContext(Context, State);
		EnterRule(_localctx, 154, RULE_tsOptionComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2285; Match(COMMENT_SYMBOL);
			State = 2287;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
			case 1:
				{
				State = 2286; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2289; textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionFileblockSizeContext : ParserRuleContext {
		public ITerminalNode FILE_BLOCK_SIZE_SYMBOL() { return GetToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionFileblockSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionFileblockSize; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionFileblockSize(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionFileblockSize(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsOptionFileblockSize(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionFileblockSizeContext tsOptionFileblockSize() {
		TsOptionFileblockSizeContext _localctx = new TsOptionFileblockSizeContext(Context, State);
		EnterRule(_localctx, 156, RULE_tsOptionFileblockSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2291; Match(FILE_BLOCK_SIZE_SYMBOL);
			State = 2293;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				{
				State = 2292; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2295; sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionEncryptionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION_SYMBOL() { return GetToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionEncryptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionEncryption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionEncryption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionEncryption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsOptionEncryption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionEncryptionContext tsOptionEncryption() {
		TsOptionEncryptionContext _localctx = new TsOptionEncryptionContext(Context, State);
		EnterRule(_localctx, 158, RULE_tsOptionEncryption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2297; Match(ENCRYPTION_SYMBOL);
			State = 2299;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
			case 1:
				{
				State = 2298; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2301; textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateViewContext : ParserRuleContext {
		public ITerminalNode VIEW_SYMBOL() { return GetToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ViewNameContext viewName() {
			return GetRuleContext<ViewNameContext>(0);
		}
		public ViewTailContext viewTail() {
			return GetRuleContext<ViewTailContext>(0);
		}
		public ViewReplaceOrAlgorithmContext viewReplaceOrAlgorithm() {
			return GetRuleContext<ViewReplaceOrAlgorithmContext>(0);
		}
		public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		public ViewSuidContext viewSuid() {
			return GetRuleContext<ViewSuidContext>(0);
		}
		public CreateViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createView; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateView(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateView(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateView(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateViewContext createView() {
		CreateViewContext _localctx = new CreateViewContext(Context, State);
		EnterRule(_localctx, 160, RULE_createView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM_SYMBOL || _la==OR_SYMBOL) {
				{
				State = 2303; viewReplaceOrAlgorithm();
				}
			}

			State = 2307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 2306; definerClause();
				}
			}

			State = 2310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SQL_SYMBOL) {
				{
				State = 2309; viewSuid();
				}
			}

			State = 2312; Match(VIEW_SYMBOL);
			State = 2313; viewName();
			State = 2314; viewTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewReplaceOrAlgorithmContext : ParserRuleContext {
		public ITerminalNode OR_SYMBOL() { return GetToken(MySQLParser.OR_SYMBOL, 0); }
		public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public ViewAlgorithmContext viewAlgorithm() {
			return GetRuleContext<ViewAlgorithmContext>(0);
		}
		public ViewReplaceOrAlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewReplaceOrAlgorithm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewReplaceOrAlgorithm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewReplaceOrAlgorithm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewReplaceOrAlgorithm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewReplaceOrAlgorithmContext viewReplaceOrAlgorithm() {
		ViewReplaceOrAlgorithmContext _localctx = new ViewReplaceOrAlgorithmContext(Context, State);
		EnterRule(_localctx, 162, RULE_viewReplaceOrAlgorithm);
		int _la;
		try {
			State = 2322;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2316; Match(OR_SYMBOL);
				State = 2317; Match(REPLACE_SYMBOL);
				State = 2319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM_SYMBOL) {
					{
					State = 2318; viewAlgorithm();
					}
				}

				}
				break;
			case ALGORITHM_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2321; viewAlgorithm();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewAlgorithmContext : ParserRuleContext {
		public IToken algorithm;
		public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public ITerminalNode UNDEFINED_SYMBOL() { return GetToken(MySQLParser.UNDEFINED_SYMBOL, 0); }
		public ITerminalNode MERGE_SYMBOL() { return GetToken(MySQLParser.MERGE_SYMBOL, 0); }
		public ITerminalNode TEMPTABLE_SYMBOL() { return GetToken(MySQLParser.TEMPTABLE_SYMBOL, 0); }
		public ViewAlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewAlgorithm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewAlgorithm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewAlgorithm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewAlgorithm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewAlgorithmContext viewAlgorithm() {
		ViewAlgorithmContext _localctx = new ViewAlgorithmContext(Context, State);
		EnterRule(_localctx, 164, RULE_viewAlgorithm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2324; Match(ALGORITHM_SYMBOL);
			State = 2325; Match(EQUAL_OPERATOR);
			State = 2326;
			_localctx.algorithm = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==MERGE_SYMBOL || _la==TEMPTABLE_SYMBOL || _la==UNDEFINED_SYMBOL) ) {
				_localctx.algorithm = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewSuidContext : ParserRuleContext {
		public ITerminalNode SQL_SYMBOL() { return GetToken(MySQLParser.SQL_SYMBOL, 0); }
		public ITerminalNode SECURITY_SYMBOL() { return GetToken(MySQLParser.SECURITY_SYMBOL, 0); }
		public ITerminalNode DEFINER_SYMBOL() { return GetToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public ITerminalNode INVOKER_SYMBOL() { return GetToken(MySQLParser.INVOKER_SYMBOL, 0); }
		public ViewSuidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewSuid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewSuid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewSuid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewSuid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewSuidContext viewSuid() {
		ViewSuidContext _localctx = new ViewSuidContext(Context, State);
		EnterRule(_localctx, 166, RULE_viewSuid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2328; Match(SQL_SYMBOL);
			State = 2329; Match(SECURITY_SYMBOL);
			State = 2330;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFINER_SYMBOL || _la==INVOKER_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTriggerContext : ParserRuleContext {
		public IToken timing;
		public IToken @event;
		public ITerminalNode TRIGGER_SYMBOL() { return GetToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		public TriggerNameContext triggerName() {
			return GetRuleContext<TriggerNameContext>(0);
		}
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public ITerminalNode EACH_SYMBOL() { return GetToken(MySQLParser.EACH_SYMBOL, 0); }
		public ITerminalNode ROW_SYMBOL() { return GetToken(MySQLParser.ROW_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public ITerminalNode BEFORE_SYMBOL() { return GetToken(MySQLParser.BEFORE_SYMBOL, 0); }
		public ITerminalNode AFTER_SYMBOL() { return GetToken(MySQLParser.AFTER_SYMBOL, 0); }
		public ITerminalNode INSERT_SYMBOL() { return GetToken(MySQLParser.INSERT_SYMBOL, 0); }
		public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public ITerminalNode DELETE_SYMBOL() { return GetToken(MySQLParser.DELETE_SYMBOL, 0); }
		public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		public TriggerFollowsPrecedesClauseContext triggerFollowsPrecedesClause() {
			return GetRuleContext<TriggerFollowsPrecedesClauseContext>(0);
		}
		public CreateTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTrigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateTrigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateTrigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTriggerContext createTrigger() {
		CreateTriggerContext _localctx = new CreateTriggerContext(Context, State);
		EnterRule(_localctx, 168, RULE_createTrigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2333;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 2332; definerClause();
				}
			}

			State = 2335; Match(TRIGGER_SYMBOL);
			State = 2336; triggerName();
			State = 2337;
			_localctx.timing = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==AFTER_SYMBOL || _la==BEFORE_SYMBOL) ) {
				_localctx.timing = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2338;
			_localctx.@event = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DELETE_SYMBOL || _la==INSERT_SYMBOL || _la==UPDATE_SYMBOL) ) {
				_localctx.@event = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2339; Match(ON_SYMBOL);
			State = 2340; tableRef();
			State = 2341; Match(FOR_SYMBOL);
			State = 2342; Match(EACH_SYMBOL);
			State = 2343; Match(ROW_SYMBOL);
			State = 2345;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				{
				State = 2344; triggerFollowsPrecedesClause();
				}
				break;
			}
			State = 2347; compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerFollowsPrecedesClauseContext : ParserRuleContext {
		public IToken ordering;
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ITerminalNode FOLLOWS_SYMBOL() { return GetToken(MySQLParser.FOLLOWS_SYMBOL, 0); }
		public ITerminalNode PRECEDES_SYMBOL() { return GetToken(MySQLParser.PRECEDES_SYMBOL, 0); }
		public TriggerFollowsPrecedesClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerFollowsPrecedesClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerFollowsPrecedesClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerFollowsPrecedesClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriggerFollowsPrecedesClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriggerFollowsPrecedesClauseContext triggerFollowsPrecedesClause() {
		TriggerFollowsPrecedesClauseContext _localctx = new TriggerFollowsPrecedesClauseContext(Context, State);
		EnterRule(_localctx, 170, RULE_triggerFollowsPrecedesClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2349;
			if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
			State = 2350;
			_localctx.ordering = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==FOLLOWS_SYMBOL || _la==PRECEDES_SYMBOL) ) {
				_localctx.ordering = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2351; textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateEventContext : ParserRuleContext {
		public ITerminalNode EVENT_SYMBOL() { return GetToken(MySQLParser.EVENT_SYMBOL, 0); }
		public EventNameContext eventName() {
			return GetRuleContext<EventNameContext>(0);
		}
		public ITerminalNode[] ON_SYMBOL() { return GetTokens(MySQLParser.ON_SYMBOL); }
		public ITerminalNode ON_SYMBOL(int i) {
			return GetToken(MySQLParser.ON_SYMBOL, i);
		}
		public ITerminalNode SCHEDULE_SYMBOL() { return GetToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		public ScheduleContext schedule() {
			return GetRuleContext<ScheduleContext>(0);
		}
		public ITerminalNode DO_SYMBOL() { return GetToken(MySQLParser.DO_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public ITerminalNode COMPLETION_SYMBOL() { return GetToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		public ITerminalNode PRESERVE_SYMBOL() { return GetToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode NOT_SYMBOL() { return GetToken(MySQLParser.NOT_SYMBOL, 0); }
		public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public CreateEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createEvent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateEvent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateEvent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateEventContext createEvent() {
		CreateEventContext _localctx = new CreateEventContext(Context, State);
		EnterRule(_localctx, 172, RULE_createEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 2353; definerClause();
				}
			}

			State = 2356; Match(EVENT_SYMBOL);
			State = 2358;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				{
				State = 2357; ifNotExists();
				}
				break;
			}
			State = 2360; eventName();
			State = 2361; Match(ON_SYMBOL);
			State = 2362; Match(SCHEDULE_SYMBOL);
			State = 2363; schedule();
			State = 2370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON_SYMBOL) {
				{
				State = 2364; Match(ON_SYMBOL);
				State = 2365; Match(COMPLETION_SYMBOL);
				State = 2367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					State = 2366; Match(NOT_SYMBOL);
					}
				}

				State = 2369; Match(PRESERVE_SYMBOL);
				}
			}

			State = 2378;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENABLE_SYMBOL:
				{
				State = 2372; Match(ENABLE_SYMBOL);
				}
				break;
			case DISABLE_SYMBOL:
				{
				State = 2373; Match(DISABLE_SYMBOL);
				State = 2376;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_SYMBOL) {
					{
					State = 2374; Match(ON_SYMBOL);
					State = 2375; Match(SLAVE_SYMBOL);
					}
				}

				}
				break;
			case COMMENT_SYMBOL:
			case DO_SYMBOL:
				break;
			default:
				break;
			}
			State = 2382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT_SYMBOL) {
				{
				State = 2380; Match(COMMENT_SYMBOL);
				State = 2381; textLiteral();
				}
			}

			State = 2384; Match(DO_SYMBOL);
			State = 2385; compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateRoleContext : ParserRuleContext {
		public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CreateRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createRole; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateRole(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateRole(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateRole(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateRoleContext createRole() {
		CreateRoleContext _localctx = new CreateRoleContext(Context, State);
		EnterRule(_localctx, 174, RULE_createRole);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2387; Match(ROLE_SYMBOL);
			State = 2389;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
			case 1:
				{
				State = 2388; ifNotExists();
				}
				break;
			}
			State = 2391; roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateSpatialReferenceContext : ParserRuleContext {
		public ITerminalNode OR_SYMBOL() { return GetToken(MySQLParser.OR_SYMBOL, 0); }
		public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public ITerminalNode SPATIAL_SYMBOL() { return GetToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		public ITerminalNode REFERENCE_SYMBOL() { return GetToken(MySQLParser.REFERENCE_SYMBOL, 0); }
		public ITerminalNode SYSTEM_SYMBOL() { return GetToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		public SrsAttributeContext[] srsAttribute() {
			return GetRuleContexts<SrsAttributeContext>();
		}
		public SrsAttributeContext srsAttribute(int i) {
			return GetRuleContext<SrsAttributeContext>(i);
		}
		public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CreateSpatialReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createSpatialReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateSpatialReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateSpatialReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateSpatialReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateSpatialReferenceContext createSpatialReference() {
		CreateSpatialReferenceContext _localctx = new CreateSpatialReferenceContext(Context, State);
		EnterRule(_localctx, 176, RULE_createSpatialReference);
		int _la;
		try {
			State = 2418;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2393; Match(OR_SYMBOL);
				State = 2394; Match(REPLACE_SYMBOL);
				State = 2395; Match(SPATIAL_SYMBOL);
				State = 2396; Match(REFERENCE_SYMBOL);
				State = 2397; Match(SYSTEM_SYMBOL);
				State = 2398; real_ulonglong_number();
				State = 2402;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NAME_SYMBOL || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & ((1L << (DEFINITION_SYMBOL - 746)) | (1L << (DESCRIPTION_SYMBOL - 746)) | (1L << (ORGANIZATION_SYMBOL - 746)))) != 0)) {
					{
					{
					State = 2399; srsAttribute();
					}
					}
					State = 2404;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2405; Match(SPATIAL_SYMBOL);
				State = 2406; Match(REFERENCE_SYMBOL);
				State = 2407; Match(SYSTEM_SYMBOL);
				State = 2409;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
				case 1:
					{
					State = 2408; ifNotExists();
					}
					break;
				}
				State = 2411; real_ulonglong_number();
				State = 2415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NAME_SYMBOL || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & ((1L << (DEFINITION_SYMBOL - 746)) | (1L << (DESCRIPTION_SYMBOL - 746)) | (1L << (ORGANIZATION_SYMBOL - 746)))) != 0)) {
					{
					{
					State = 2412; srsAttribute();
					}
					}
					State = 2417;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SrsAttributeContext : ParserRuleContext {
		public ITerminalNode NAME_SYMBOL() { return GetToken(MySQLParser.NAME_SYMBOL, 0); }
		public ITerminalNode TEXT_SYMBOL() { return GetToken(MySQLParser.TEXT_SYMBOL, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		public ITerminalNode DEFINITION_SYMBOL() { return GetToken(MySQLParser.DEFINITION_SYMBOL, 0); }
		public ITerminalNode ORGANIZATION_SYMBOL() { return GetToken(MySQLParser.ORGANIZATION_SYMBOL, 0); }
		public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		public ITerminalNode DESCRIPTION_SYMBOL() { return GetToken(MySQLParser.DESCRIPTION_SYMBOL, 0); }
		public SrsAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_srsAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSrsAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSrsAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSrsAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SrsAttributeContext srsAttribute() {
		SrsAttributeContext _localctx = new SrsAttributeContext(Context, State);
		EnterRule(_localctx, 178, RULE_srsAttribute);
		try {
			State = 2435;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2420; Match(NAME_SYMBOL);
				State = 2421; Match(TEXT_SYMBOL);
				State = 2422; textStringNoLinebreak();
				}
				break;
			case DEFINITION_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2423; Match(DEFINITION_SYMBOL);
				State = 2424; Match(TEXT_SYMBOL);
				State = 2425; textStringNoLinebreak();
				}
				break;
			case ORGANIZATION_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2426; Match(ORGANIZATION_SYMBOL);
				State = 2427; textStringNoLinebreak();
				State = 2428; Match(IDENTIFIED_SYMBOL);
				State = 2429; Match(BY_SYMBOL);
				State = 2430; real_ulonglong_number();
				}
				break;
			case DESCRIPTION_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2432; Match(DESCRIPTION_SYMBOL);
				State = 2433; Match(TEXT_SYMBOL);
				State = 2434; textStringNoLinebreak();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropStatementContext : ParserRuleContext {
		public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		public DropDatabaseContext dropDatabase() {
			return GetRuleContext<DropDatabaseContext>(0);
		}
		public DropEventContext dropEvent() {
			return GetRuleContext<DropEventContext>(0);
		}
		public DropFunctionContext dropFunction() {
			return GetRuleContext<DropFunctionContext>(0);
		}
		public DropProcedureContext dropProcedure() {
			return GetRuleContext<DropProcedureContext>(0);
		}
		public DropIndexContext dropIndex() {
			return GetRuleContext<DropIndexContext>(0);
		}
		public DropLogfileGroupContext dropLogfileGroup() {
			return GetRuleContext<DropLogfileGroupContext>(0);
		}
		public DropServerContext dropServer() {
			return GetRuleContext<DropServerContext>(0);
		}
		public DropTableContext dropTable() {
			return GetRuleContext<DropTableContext>(0);
		}
		public DropTableSpaceContext dropTableSpace() {
			return GetRuleContext<DropTableSpaceContext>(0);
		}
		public DropTriggerContext dropTrigger() {
			return GetRuleContext<DropTriggerContext>(0);
		}
		public DropViewContext dropView() {
			return GetRuleContext<DropViewContext>(0);
		}
		public DropRoleContext dropRole() {
			return GetRuleContext<DropRoleContext>(0);
		}
		public DropSpatialReferenceContext dropSpatialReference() {
			return GetRuleContext<DropSpatialReferenceContext>(0);
		}
		public DropUndoTablespaceContext dropUndoTablespace() {
			return GetRuleContext<DropUndoTablespaceContext>(0);
		}
		public DropStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropStatementContext dropStatement() {
		DropStatementContext _localctx = new DropStatementContext(Context, State);
		EnterRule(_localctx, 180, RULE_dropStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2437; Match(DROP_SYMBOL);
			State = 2455;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
			case 1:
				{
				State = 2438; dropDatabase();
				}
				break;
			case 2:
				{
				State = 2439; dropEvent();
				}
				break;
			case 3:
				{
				State = 2440; dropFunction();
				}
				break;
			case 4:
				{
				State = 2441; dropProcedure();
				}
				break;
			case 5:
				{
				State = 2442; dropIndex();
				}
				break;
			case 6:
				{
				State = 2443; dropLogfileGroup();
				}
				break;
			case 7:
				{
				State = 2444; dropServer();
				}
				break;
			case 8:
				{
				State = 2445; dropTable();
				}
				break;
			case 9:
				{
				State = 2446; dropTableSpace();
				}
				break;
			case 10:
				{
				State = 2447; dropTrigger();
				}
				break;
			case 11:
				{
				State = 2448; dropView();
				}
				break;
			case 12:
				{
				State = 2449;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 2450; dropRole();
				}
				break;
			case 13:
				{
				State = 2451;
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				State = 2452; dropSpatialReference();
				}
				break;
			case 14:
				{
				State = 2453;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 2454; dropUndoTablespace();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropDatabaseContext : ParserRuleContext {
		public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropDatabase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropDatabase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropDatabase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropDatabaseContext dropDatabase() {
		DropDatabaseContext _localctx = new DropDatabaseContext(Context, State);
		EnterRule(_localctx, 182, RULE_dropDatabase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2457; Match(DATABASE_SYMBOL);
			State = 2459;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
			case 1:
				{
				State = 2458; ifExists();
				}
				break;
			}
			State = 2461; schemaRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropEventContext : ParserRuleContext {
		public ITerminalNode EVENT_SYMBOL() { return GetToken(MySQLParser.EVENT_SYMBOL, 0); }
		public EventRefContext eventRef() {
			return GetRuleContext<EventRefContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropEvent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropEvent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropEvent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropEventContext dropEvent() {
		DropEventContext _localctx = new DropEventContext(Context, State);
		EnterRule(_localctx, 184, RULE_dropEvent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2463; Match(EVENT_SYMBOL);
			State = 2465;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
			case 1:
				{
				State = 2464; ifExists();
				}
				break;
			}
			State = 2467; eventRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropFunctionContext : ParserRuleContext {
		public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public FunctionRefContext functionRef() {
			return GetRuleContext<FunctionRefContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropFunctionContext dropFunction() {
		DropFunctionContext _localctx = new DropFunctionContext(Context, State);
		EnterRule(_localctx, 186, RULE_dropFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2469; Match(FUNCTION_SYMBOL);
			State = 2471;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
			case 1:
				{
				State = 2470; ifExists();
				}
				break;
			}
			State = 2473; functionRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropProcedureContext : ParserRuleContext {
		public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return GetRuleContext<ProcedureRefContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropProcedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropProcedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropProcedure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropProcedureContext dropProcedure() {
		DropProcedureContext _localctx = new DropProcedureContext(Context, State);
		EnterRule(_localctx, 188, RULE_dropProcedure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2475; Match(PROCEDURE_SYMBOL);
			State = 2477;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
			case 1:
				{
				State = 2476; ifExists();
				}
				break;
			}
			State = 2479; procedureRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropIndexContext : ParserRuleContext {
		public IToken type;
		public IndexRefContext indexRef() {
			return GetRuleContext<IndexRefContext>(0);
		}
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		public OnlineOptionContext onlineOption() {
			return GetRuleContext<OnlineOptionContext>(0);
		}
		public IndexLockAndAlgorithmContext indexLockAndAlgorithm() {
			return GetRuleContext<IndexLockAndAlgorithmContext>(0);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropIndexContext dropIndex() {
		DropIndexContext _localctx = new DropIndexContext(Context, State);
		EnterRule(_localctx, 190, RULE_dropIndex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2482;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
			case 1:
				{
				State = 2481; onlineOption();
				}
				break;
			}
			State = 2484; _localctx.type = Match(INDEX_SYMBOL);
			State = 2485; indexRef();
			State = 2486; Match(ON_SYMBOL);
			State = 2487; tableRef();
			State = 2489;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,200,Context) ) {
			case 1:
				{
				State = 2488; indexLockAndAlgorithm();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropLogfileGroupContext : ParserRuleContext {
		public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupRefContext logfileGroupRef() {
			return GetRuleContext<LogfileGroupRefContext>(0);
		}
		public DropLogfileGroupOptionContext[] dropLogfileGroupOption() {
			return GetRuleContexts<DropLogfileGroupOptionContext>();
		}
		public DropLogfileGroupOptionContext dropLogfileGroupOption(int i) {
			return GetRuleContext<DropLogfileGroupOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropLogfileGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropLogfileGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropLogfileGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropLogfileGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropLogfileGroupContext dropLogfileGroup() {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(Context, State);
		EnterRule(_localctx, 192, RULE_dropLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2491; Match(LOGFILE_SYMBOL);
			State = 2492; Match(GROUP_SYMBOL);
			State = 2493; logfileGroupRef();
			State = 2504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				State = 2494; dropLogfileGroupOption();
				State = 2501;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
					{
					{
					State = 2496;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA_SYMBOL) {
						{
						State = 2495; Match(COMMA_SYMBOL);
						}
					}

					State = 2498; dropLogfileGroupOption();
					}
					}
					State = 2503;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropLogfileGroupOptionContext : ParserRuleContext {
		public TsOptionWaitContext tsOptionWait() {
			return GetRuleContext<TsOptionWaitContext>(0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		public DropLogfileGroupOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropLogfileGroupOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropLogfileGroupOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropLogfileGroupOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropLogfileGroupOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropLogfileGroupOptionContext dropLogfileGroupOption() {
		DropLogfileGroupOptionContext _localctx = new DropLogfileGroupOptionContext(Context, State);
		EnterRule(_localctx, 194, RULE_dropLogfileGroupOption);
		try {
			State = 2508;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2506; tsOptionWait();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2507; tsOptionEngine();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropServerContext : ParserRuleContext {
		public ITerminalNode SERVER_SYMBOL() { return GetToken(MySQLParser.SERVER_SYMBOL, 0); }
		public ServerRefContext serverRef() {
			return GetRuleContext<ServerRefContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropServer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropServer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropServer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropServer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropServerContext dropServer() {
		DropServerContext _localctx = new DropServerContext(Context, State);
		EnterRule(_localctx, 196, RULE_dropServer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2510; Match(SERVER_SYMBOL);
			State = 2512;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
			case 1:
				{
				State = 2511; ifExists();
				}
				break;
			}
			State = 2514; serverRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTableContext : ParserRuleContext {
		public IToken type;
		public TableRefListContext tableRefList() {
			return GetRuleContext<TableRefListContext>(0);
		}
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public ITerminalNode TABLES_SYMBOL() { return GetToken(MySQLParser.TABLES_SYMBOL, 0); }
		public ITerminalNode TEMPORARY_SYMBOL() { return GetToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public ITerminalNode RESTRICT_SYMBOL() { return GetToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		public ITerminalNode CASCADE_SYMBOL() { return GetToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTableContext dropTable() {
		DropTableContext _localctx = new DropTableContext(Context, State);
		EnterRule(_localctx, 198, RULE_dropTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2517;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMPORARY_SYMBOL) {
				{
				State = 2516; Match(TEMPORARY_SYMBOL);
				}
			}

			State = 2519;
			_localctx.type = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
				_localctx.type = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2521;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,207,Context) ) {
			case 1:
				{
				State = 2520; ifExists();
				}
				break;
			}
			State = 2523; tableRefList();
			State = 2525;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
				{
				State = 2524;
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTableSpaceContext : ParserRuleContext {
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return GetRuleContext<TablespaceRefContext>(0);
		}
		public DropLogfileGroupOptionContext[] dropLogfileGroupOption() {
			return GetRuleContexts<DropLogfileGroupOptionContext>();
		}
		public DropLogfileGroupOptionContext dropLogfileGroupOption(int i) {
			return GetRuleContext<DropLogfileGroupOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public DropTableSpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTableSpace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropTableSpace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropTableSpace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTableSpace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTableSpaceContext dropTableSpace() {
		DropTableSpaceContext _localctx = new DropTableSpaceContext(Context, State);
		EnterRule(_localctx, 200, RULE_dropTableSpace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2527; Match(TABLESPACE_SYMBOL);
			State = 2528; tablespaceRef();
			State = 2539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				State = 2529; dropLogfileGroupOption();
				State = 2536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
					{
					{
					State = 2531;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA_SYMBOL) {
						{
						State = 2530; Match(COMMA_SYMBOL);
						}
					}

					State = 2533; dropLogfileGroupOption();
					}
					}
					State = 2538;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTriggerContext : ParserRuleContext {
		public ITerminalNode TRIGGER_SYMBOL() { return GetToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		public TriggerRefContext triggerRef() {
			return GetRuleContext<TriggerRefContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTrigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropTrigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropTrigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTriggerContext dropTrigger() {
		DropTriggerContext _localctx = new DropTriggerContext(Context, State);
		EnterRule(_localctx, 202, RULE_dropTrigger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2541; Match(TRIGGER_SYMBOL);
			State = 2543;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,212,Context) ) {
			case 1:
				{
				State = 2542; ifExists();
				}
				break;
			}
			State = 2545; triggerRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropViewContext : ParserRuleContext {
		public ITerminalNode VIEW_SYMBOL() { return GetToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ViewRefListContext viewRefList() {
			return GetRuleContext<ViewRefListContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public ITerminalNode RESTRICT_SYMBOL() { return GetToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		public ITerminalNode CASCADE_SYMBOL() { return GetToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropView; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropView(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropView(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropView(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropViewContext dropView() {
		DropViewContext _localctx = new DropViewContext(Context, State);
		EnterRule(_localctx, 204, RULE_dropView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2547; Match(VIEW_SYMBOL);
			State = 2549;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,213,Context) ) {
			case 1:
				{
				State = 2548; ifExists();
				}
				break;
			}
			State = 2551; viewRefList();
			State = 2553;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
				{
				State = 2552;
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropRoleContext : ParserRuleContext {
		public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropRole; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropRole(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropRole(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropRole(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropRoleContext dropRole() {
		DropRoleContext _localctx = new DropRoleContext(Context, State);
		EnterRule(_localctx, 206, RULE_dropRole);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2555; Match(ROLE_SYMBOL);
			State = 2557;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,215,Context) ) {
			case 1:
				{
				State = 2556; ifExists();
				}
				break;
			}
			State = 2559; roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropSpatialReferenceContext : ParserRuleContext {
		public ITerminalNode SPATIAL_SYMBOL() { return GetToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		public ITerminalNode REFERENCE_SYMBOL() { return GetToken(MySQLParser.REFERENCE_SYMBOL, 0); }
		public ITerminalNode SYSTEM_SYMBOL() { return GetToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropSpatialReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropSpatialReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropSpatialReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropSpatialReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropSpatialReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropSpatialReferenceContext dropSpatialReference() {
		DropSpatialReferenceContext _localctx = new DropSpatialReferenceContext(Context, State);
		EnterRule(_localctx, 208, RULE_dropSpatialReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2561; Match(SPATIAL_SYMBOL);
			State = 2562; Match(REFERENCE_SYMBOL);
			State = 2563; Match(SYSTEM_SYMBOL);
			State = 2565;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,216,Context) ) {
			case 1:
				{
				State = 2564; ifExists();
				}
				break;
			}
			State = 2567; real_ulonglong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropUndoTablespaceContext : ParserRuleContext {
		public ITerminalNode UNDO_SYMBOL() { return GetToken(MySQLParser.UNDO_SYMBOL, 0); }
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return GetRuleContext<TablespaceRefContext>(0);
		}
		public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return GetRuleContext<UndoTableSpaceOptionsContext>(0);
		}
		public DropUndoTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropUndoTablespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropUndoTablespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropUndoTablespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropUndoTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropUndoTablespaceContext dropUndoTablespace() {
		DropUndoTablespaceContext _localctx = new DropUndoTablespaceContext(Context, State);
		EnterRule(_localctx, 210, RULE_dropUndoTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2569; Match(UNDO_SYMBOL);
			State = 2570; Match(TABLESPACE_SYMBOL);
			State = 2571; tablespaceRef();
			State = 2573;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				State = 2572; undoTableSpaceOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameTableStatementContext : ParserRuleContext {
		public ITerminalNode RENAME_SYMBOL() { return GetToken(MySQLParser.RENAME_SYMBOL, 0); }
		public RenamePairContext[] renamePair() {
			return GetRuleContexts<RenamePairContext>();
		}
		public RenamePairContext renamePair(int i) {
			return GetRuleContext<RenamePairContext>(i);
		}
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public ITerminalNode TABLES_SYMBOL() { return GetToken(MySQLParser.TABLES_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RenameTableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameTableStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRenameTableStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRenameTableStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameTableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameTableStatementContext renameTableStatement() {
		RenameTableStatementContext _localctx = new RenameTableStatementContext(Context, State);
		EnterRule(_localctx, 212, RULE_renameTableStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2575; Match(RENAME_SYMBOL);
			State = 2576;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2577; renamePair();
			State = 2582;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 2578; Match(COMMA_SYMBOL);
				State = 2579; renamePair();
				}
				}
				State = 2584;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenamePairContext : ParserRuleContext {
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public RenamePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renamePair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRenamePair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRenamePair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenamePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenamePairContext renamePair() {
		RenamePairContext _localctx = new RenamePairContext(Context, State);
		EnterRule(_localctx, 214, RULE_renamePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2585; tableRef();
			State = 2586; Match(TO_SYMBOL);
			State = 2587; tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TruncateTableStatementContext : ParserRuleContext {
		public ITerminalNode TRUNCATE_SYMBOL() { return GetToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TruncateTableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncateTableStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTruncateTableStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTruncateTableStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruncateTableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TruncateTableStatementContext truncateTableStatement() {
		TruncateTableStatementContext _localctx = new TruncateTableStatementContext(Context, State);
		EnterRule(_localctx, 216, RULE_truncateTableStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2589; Match(TRUNCATE_SYMBOL);
			State = 2591;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,219,Context) ) {
			case 1:
				{
				State = 2590; Match(TABLE_SYMBOL);
				}
				break;
			}
			State = 2593; tableRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public TextStringLiteralListContext textStringLiteralList() {
			return GetRuleContext<TextStringLiteralListContext>(0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 218, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2595; Match(IMPORT_SYMBOL);
			State = 2596; Match(TABLE_SYMBOL);
			State = 2597; Match(FROM_SYMBOL);
			State = 2598; textStringLiteralList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		public ITerminalNode CALL_SYMBOL() { return GetToken(MySQLParser.CALL_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return GetRuleContext<ProcedureRefContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCallStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCallStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		CallStatementContext _localctx = new CallStatementContext(Context, State);
		EnterRule(_localctx, 220, RULE_callStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2600; Match(CALL_SYMBOL);
			State = 2601; procedureRef();
			State = 2607;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 2602; Match(OPEN_PAR_SYMBOL);
				State = 2604;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,220,Context) ) {
				case 1:
					{
					State = 2603; exprList();
					}
					break;
				}
				State = 2606; Match(CLOSE_PAR_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		public ITerminalNode DELETE_SYMBOL() { return GetToken(MySQLParser.DELETE_SYMBOL, 0); }
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public TableAliasRefListContext tableAliasRefList() {
			return GetRuleContext<TableAliasRefListContext>(0);
		}
		public TableReferenceListContext tableReferenceList() {
			return GetRuleContext<TableReferenceListContext>(0);
		}
		public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		public DeleteStatementOptionContext[] deleteStatementOption() {
			return GetRuleContexts<DeleteStatementOptionContext>();
		}
		public DeleteStatementOptionContext deleteStatementOption(int i) {
			return GetRuleContext<DeleteStatementOptionContext>(i);
		}
		public ITerminalNode USING_SYMBOL() { return GetToken(MySQLParser.USING_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public PartitionDeleteContext partitionDelete() {
			return GetRuleContext<PartitionDeleteContext>(0);
		}
		public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		public SimpleLimitClauseContext simpleLimitClause() {
			return GetRuleContext<SimpleLimitClauseContext>(0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 222, RULE_deleteStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2611;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,222,Context) ) {
			case 1:
				{
				State = 2609;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 2610; withClause();
				}
				break;
			}
			State = 2613; Match(DELETE_SYMBOL);
			State = 2617;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,223,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2614; deleteStatementOption();
					}
					} 
				}
				State = 2619;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,223,Context);
			}
			State = 2652;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
			case 1:
				{
				State = 2620; Match(FROM_SYMBOL);
				State = 2644;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,230,Context) ) {
				case 1:
					{
					State = 2621; tableAliasRefList();
					State = 2622; Match(USING_SYMBOL);
					State = 2623; tableReferenceList();
					State = 2625;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						State = 2624; whereClause();
						}
					}

					}
					break;
				case 2:
					{
					State = 2627; tableRef();
					State = 2630;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
					case 1:
						{
						State = 2628;
						if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
						State = 2629; tableAlias();
						}
						break;
					}
					State = 2633;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,226,Context) ) {
					case 1:
						{
						State = 2632; partitionDelete();
						}
						break;
					}
					State = 2636;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						State = 2635; whereClause();
						}
					}

					State = 2639;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ORDER_SYMBOL) {
						{
						State = 2638; orderClause();
						}
					}

					State = 2642;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LIMIT_SYMBOL) {
						{
						State = 2641; simpleLimitClause();
						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 2646; tableAliasRefList();
				State = 2647; Match(FROM_SYMBOL);
				State = 2648; tableReferenceList();
				State = 2650;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE_SYMBOL) {
					{
					State = 2649; whereClause();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDeleteContext : ParserRuleContext {
		public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PartitionDeleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDelete; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionDelete(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionDelete(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDelete(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDeleteContext partitionDelete() {
		PartitionDeleteContext _localctx = new PartitionDeleteContext(Context, State);
		EnterRule(_localctx, 224, RULE_partitionDelete);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2654;
			if (!(serverVersion >= 50602)) throw new FailedPredicateException(this, "serverVersion >= 50602");
			State = 2655; Match(PARTITION_SYMBOL);
			State = 2656; Match(OPEN_PAR_SYMBOL);
			State = 2657; identifierList();
			State = 2658; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementOptionContext : ParserRuleContext {
		public ITerminalNode QUICK_SYMBOL() { return GetToken(MySQLParser.QUICK_SYMBOL, 0); }
		public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public DeleteStatementOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatementOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatementOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatementOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatementOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementOptionContext deleteStatementOption() {
		DeleteStatementOptionContext _localctx = new DeleteStatementOptionContext(Context, State);
		EnterRule(_localctx, 226, RULE_deleteStatementOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2660;
			_la = TokenStream.LA(1);
			if ( !(_la==QUICK_SYMBOL || _la==IGNORE_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoStatementContext : ParserRuleContext {
		public ITerminalNode DO_SYMBOL() { return GetToken(MySQLParser.DO_SYMBOL, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public SelectItemListContext selectItemList() {
			return GetRuleContext<SelectItemListContext>(0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoStatementContext doStatement() {
		DoStatementContext _localctx = new DoStatementContext(Context, State);
		EnterRule(_localctx, 228, RULE_doStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2662; Match(DO_SYMBOL);
			State = 2667;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,233,Context) ) {
			case 1:
				{
				State = 2663;
				if (!(serverVersion < 50709)) throw new FailedPredicateException(this, "serverVersion < 50709");
				State = 2664; exprList();
				}
				break;
			case 2:
				{
				State = 2665;
				if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
				State = 2666; selectItemList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerStatementContext : ParserRuleContext {
		public ITerminalNode HANDLER_SYMBOL() { return GetToken(MySQLParser.HANDLER_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ITerminalNode OPEN_SYMBOL() { return GetToken(MySQLParser.OPEN_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode CLOSE_SYMBOL() { return GetToken(MySQLParser.CLOSE_SYMBOL, 0); }
		public ITerminalNode READ_SYMBOL() { return GetToken(MySQLParser.READ_SYMBOL, 0); }
		public HandlerReadOrScanContext handlerReadOrScan() {
			return GetRuleContext<HandlerReadOrScanContext>(0);
		}
		public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterHandlerStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitHandlerStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerStatementContext handlerStatement() {
		HandlerStatementContext _localctx = new HandlerStatementContext(Context, State);
		EnterRule(_localctx, 230, RULE_handlerStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2669; Match(HANDLER_SYMBOL);
			State = 2687;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
			case 1:
				{
				State = 2670; tableRef();
				State = 2671; Match(OPEN_SYMBOL);
				State = 2673;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,234,Context) ) {
				case 1:
					{
					State = 2672; tableAlias();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 2675; identifier();
				State = 2685;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CLOSE_SYMBOL:
					{
					State = 2676; Match(CLOSE_SYMBOL);
					}
					break;
				case READ_SYMBOL:
					{
					State = 2677; Match(READ_SYMBOL);
					State = 2678; handlerReadOrScan();
					State = 2680;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						State = 2679; whereClause();
						}
					}

					State = 2683;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LIMIT_SYMBOL) {
						{
						State = 2682; limitClause();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerReadOrScanContext : ParserRuleContext {
		public ITerminalNode FIRST_SYMBOL() { return GetToken(MySQLParser.FIRST_SYMBOL, 0); }
		public ITerminalNode NEXT_SYMBOL() { return GetToken(MySQLParser.NEXT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ValuesContext @values() {
			return GetRuleContext<ValuesContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode PREV_SYMBOL() { return GetToken(MySQLParser.PREV_SYMBOL, 0); }
		public ITerminalNode LAST_SYMBOL() { return GetToken(MySQLParser.LAST_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public ITerminalNode LESS_THAN_OPERATOR() { return GetToken(MySQLParser.LESS_THAN_OPERATOR, 0); }
		public ITerminalNode GREATER_THAN_OPERATOR() { return GetToken(MySQLParser.GREATER_THAN_OPERATOR, 0); }
		public ITerminalNode LESS_OR_EQUAL_OPERATOR() { return GetToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0); }
		public ITerminalNode GREATER_OR_EQUAL_OPERATOR() { return GetToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0); }
		public HandlerReadOrScanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerReadOrScan; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterHandlerReadOrScan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitHandlerReadOrScan(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerReadOrScan(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerReadOrScanContext handlerReadOrScan() {
		HandlerReadOrScanContext _localctx = new HandlerReadOrScanContext(Context, State);
		EnterRule(_localctx, 232, RULE_handlerReadOrScan);
		int _la;
		try {
			State = 2699;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,240,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2689;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_SYMBOL || _la==NEXT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2690; identifier();
				State = 2697;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FIRST_SYMBOL:
				case LAST_SYMBOL:
				case NEXT_SYMBOL:
				case PREV_SYMBOL:
					{
					State = 2691;
					_la = TokenStream.LA(1);
					if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL || _la==NEXT_SYMBOL || _la==PREV_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case EQUAL_OPERATOR:
				case GREATER_OR_EQUAL_OPERATOR:
				case GREATER_THAN_OPERATOR:
				case LESS_OR_EQUAL_OPERATOR:
				case LESS_THAN_OPERATOR:
					{
					State = 2692;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (EQUAL_OPERATOR - 383)) | (1L << (GREATER_OR_EQUAL_OPERATOR - 383)) | (1L << (GREATER_THAN_OPERATOR - 383)) | (1L << (LESS_OR_EQUAL_OPERATOR - 383)) | (1L << (LESS_THAN_OPERATOR - 383)))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 2693; Match(OPEN_PAR_SYMBOL);
					State = 2694; @values();
					State = 2695; Match(CLOSE_PAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementContext : ParserRuleContext {
		public ITerminalNode INSERT_SYMBOL() { return GetToken(MySQLParser.INSERT_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public InsertFromConstructorContext insertFromConstructor() {
			return GetRuleContext<InsertFromConstructorContext>(0);
		}
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return GetRuleContext<UpdateListContext>(0);
		}
		public InsertQueryExpressionContext insertQueryExpression() {
			return GetRuleContext<InsertQueryExpressionContext>(0);
		}
		public InsertLockOptionContext insertLockOption() {
			return GetRuleContext<InsertLockOptionContext>(0);
		}
		public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public ITerminalNode INTO_SYMBOL() { return GetToken(MySQLParser.INTO_SYMBOL, 0); }
		public UsePartitionContext usePartition() {
			return GetRuleContext<UsePartitionContext>(0);
		}
		public InsertUpdateListContext insertUpdateList() {
			return GetRuleContext<InsertUpdateListContext>(0);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInsertStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInsertStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementContext insertStatement() {
		InsertStatementContext _localctx = new InsertStatementContext(Context, State);
		EnterRule(_localctx, 234, RULE_insertStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2701; Match(INSERT_SYMBOL);
			State = 2703;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,241,Context) ) {
			case 1:
				{
				State = 2702; insertLockOption();
				}
				break;
			}
			State = 2706;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
			case 1:
				{
				State = 2705; Match(IGNORE_SYMBOL);
				}
				break;
			}
			State = 2709;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,243,Context) ) {
			case 1:
				{
				State = 2708; Match(INTO_SYMBOL);
				}
				break;
			}
			State = 2711; tableRef();
			State = 2713;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,244,Context) ) {
			case 1:
				{
				State = 2712; usePartition();
				}
				break;
			}
			State = 2719;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,245,Context) ) {
			case 1:
				{
				State = 2715; insertFromConstructor();
				}
				break;
			case 2:
				{
				State = 2716; Match(SET_SYMBOL);
				State = 2717; updateList();
				}
				break;
			case 3:
				{
				State = 2718; insertQueryExpression();
				}
				break;
			}
			State = 2722;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON_SYMBOL) {
				{
				State = 2721; insertUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertLockOptionContext : ParserRuleContext {
		public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public ITerminalNode DELAYED_SYMBOL() { return GetToken(MySQLParser.DELAYED_SYMBOL, 0); }
		public ITerminalNode HIGH_PRIORITY_SYMBOL() { return GetToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0); }
		public InsertLockOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertLockOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInsertLockOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInsertLockOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertLockOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertLockOptionContext insertLockOption() {
		InsertLockOptionContext _localctx = new InsertLockOptionContext(Context, State);
		EnterRule(_localctx, 236, RULE_insertLockOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2724;
			_la = TokenStream.LA(1);
			if ( !(_la==DELAYED_SYMBOL || _la==HIGH_PRIORITY_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertFromConstructorContext : ParserRuleContext {
		public InsertValuesContext insertValues() {
			return GetRuleContext<InsertValuesContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		public InsertFromConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertFromConstructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInsertFromConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInsertFromConstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertFromConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertFromConstructorContext insertFromConstructor() {
		InsertFromConstructorContext _localctx = new InsertFromConstructorContext(Context, State);
		EnterRule(_localctx, 238, RULE_insertFromConstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2731;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 2726; Match(OPEN_PAR_SYMBOL);
				State = 2728;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,247,Context) ) {
				case 1:
					{
					State = 2727; fields();
					}
					break;
				}
				State = 2730; Match(CLOSE_PAR_SYMBOL);
				}
			}

			State = 2733; insertValues();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsContext : ParserRuleContext {
		public InsertIdentifierContext[] insertIdentifier() {
			return GetRuleContexts<InsertIdentifierContext>();
		}
		public InsertIdentifierContext insertIdentifier(int i) {
			return GetRuleContext<InsertIdentifierContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fields; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFields(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFields(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFields(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsContext fields() {
		FieldsContext _localctx = new FieldsContext(Context, State);
		EnterRule(_localctx, 240, RULE_fields);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2735; insertIdentifier();
			State = 2740;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 2736; Match(COMMA_SYMBOL);
				State = 2737; insertIdentifier();
				}
				}
				State = 2742;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertValuesContext : ParserRuleContext {
		public ValueListContext valueList() {
			return GetRuleContext<ValueListContext>(0);
		}
		public ITerminalNode VALUES_SYMBOL() { return GetToken(MySQLParser.VALUES_SYMBOL, 0); }
		public ITerminalNode VALUE_SYMBOL() { return GetToken(MySQLParser.VALUE_SYMBOL, 0); }
		public InsertValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertValues; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInsertValues(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInsertValues(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertValuesContext insertValues() {
		InsertValuesContext _localctx = new InsertValuesContext(Context, State);
		EnterRule(_localctx, 242, RULE_insertValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2743;
			_la = TokenStream.LA(1);
			if ( !(_la==VALUE_SYMBOL || _la==VALUES_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2744; valueList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertQueryExpressionContext : ParserRuleContext {
		public QueryExpressionOrParensContext queryExpressionOrParens() {
			return GetRuleContext<QueryExpressionOrParensContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		public InsertQueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertQueryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInsertQueryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInsertQueryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertQueryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertQueryExpressionContext insertQueryExpression() {
		InsertQueryExpressionContext _localctx = new InsertQueryExpressionContext(Context, State);
		EnterRule(_localctx, 244, RULE_insertQueryExpression);
		try {
			State = 2753;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,251,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2746; queryExpressionOrParens();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2747; Match(OPEN_PAR_SYMBOL);
				State = 2749;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,250,Context) ) {
				case 1:
					{
					State = 2748; fields();
					}
					break;
				}
				State = 2751; Match(CLOSE_PAR_SYMBOL);
				State = 2752; queryExpressionOrParens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueListContext : ParserRuleContext {
		public ITerminalNode[] OPEN_PAR_SYMBOL() { return GetTokens(MySQLParser.OPEN_PAR_SYMBOL); }
		public ITerminalNode OPEN_PAR_SYMBOL(int i) {
			return GetToken(MySQLParser.OPEN_PAR_SYMBOL, i);
		}
		public ITerminalNode[] CLOSE_PAR_SYMBOL() { return GetTokens(MySQLParser.CLOSE_PAR_SYMBOL); }
		public ITerminalNode CLOSE_PAR_SYMBOL(int i) {
			return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, i);
		}
		public ValuesContext[] @values() {
			return GetRuleContexts<ValuesContext>();
		}
		public ValuesContext @values(int i) {
			return GetRuleContext<ValuesContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitValueList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueListContext valueList() {
		ValueListContext _localctx = new ValueListContext(Context, State);
		EnterRule(_localctx, 246, RULE_valueList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2755; Match(OPEN_PAR_SYMBOL);
			State = 2757;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,252,Context) ) {
			case 1:
				{
				State = 2756; @values();
				}
				break;
			}
			State = 2759; Match(CLOSE_PAR_SYMBOL);
			State = 2768;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 2760; Match(COMMA_SYMBOL);
				State = 2761; Match(OPEN_PAR_SYMBOL);
				State = 2763;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,253,Context) ) {
				case 1:
					{
					State = 2762; @values();
					}
					break;
				}
				State = 2765; Match(CLOSE_PAR_SYMBOL);
				}
				}
				State = 2770;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] DEFAULT_SYMBOL() { return GetTokens(MySQLParser.DEFAULT_SYMBOL); }
		public ITerminalNode DEFAULT_SYMBOL(int i) {
			return GetToken(MySQLParser.DEFAULT_SYMBOL, i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterValues(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitValues(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValuesContext @values() {
		ValuesContext _localctx = new ValuesContext(Context, State);
		EnterRule(_localctx, 248, RULE_values);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2773;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,255,Context) ) {
			case 1:
				{
				State = 2771; expr(0);
				}
				break;
			case 2:
				{
				State = 2772; Match(DEFAULT_SYMBOL);
				}
				break;
			}
			State = 2782;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 2775; Match(COMMA_SYMBOL);
				State = 2778;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,256,Context) ) {
				case 1:
					{
					State = 2776; expr(0);
					}
					break;
				case 2:
					{
					State = 2777; Match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				}
				State = 2784;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertUpdateListContext : ParserRuleContext {
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public ITerminalNode DUPLICATE_SYMBOL() { return GetToken(MySQLParser.DUPLICATE_SYMBOL, 0); }
		public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return GetRuleContext<UpdateListContext>(0);
		}
		public InsertUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertUpdateList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInsertUpdateList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInsertUpdateList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertUpdateListContext insertUpdateList() {
		InsertUpdateListContext _localctx = new InsertUpdateListContext(Context, State);
		EnterRule(_localctx, 250, RULE_insertUpdateList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2785; Match(ON_SYMBOL);
			State = 2786; Match(DUPLICATE_SYMBOL);
			State = 2787; Match(KEY_SYMBOL);
			State = 2788; Match(UPDATE_SYMBOL);
			State = 2789; updateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadStatementContext : ParserRuleContext {
		public ITerminalNode LOAD_SYMBOL() { return GetToken(MySQLParser.LOAD_SYMBOL, 0); }
		public DataOrXmlContext dataOrXml() {
			return GetRuleContext<DataOrXmlContext>(0);
		}
		public ITerminalNode INFILE_SYMBOL() { return GetToken(MySQLParser.INFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode INTO_SYMBOL() { return GetToken(MySQLParser.INTO_SYMBOL, 0); }
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public LoadDataFileTailContext loadDataFileTail() {
			return GetRuleContext<LoadDataFileTailContext>(0);
		}
		public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public UsePartitionContext usePartition() {
			return GetRuleContext<UsePartitionContext>(0);
		}
		public CharsetClauseContext charsetClause() {
			return GetRuleContext<CharsetClauseContext>(0);
		}
		public XmlRowsIdentifiedByContext xmlRowsIdentifiedBy() {
			return GetRuleContext<XmlRowsIdentifiedByContext>(0);
		}
		public FieldsClauseContext fieldsClause() {
			return GetRuleContext<FieldsClauseContext>(0);
		}
		public LinesClauseContext linesClause() {
			return GetRuleContext<LinesClauseContext>(0);
		}
		public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public ITerminalNode CONCURRENT_SYMBOL() { return GetToken(MySQLParser.CONCURRENT_SYMBOL, 0); }
		public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public LoadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLoadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLoadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadStatementContext loadStatement() {
		LoadStatementContext _localctx = new LoadStatementContext(Context, State);
		EnterRule(_localctx, 252, RULE_loadStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2791; Match(LOAD_SYMBOL);
			State = 2792; dataOrXml();
			State = 2794;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONCURRENT_SYMBOL || _la==LOW_PRIORITY_SYMBOL) {
				{
				State = 2793;
				_la = TokenStream.LA(1);
				if ( !(_la==CONCURRENT_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2797;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL_SYMBOL) {
				{
				State = 2796; Match(LOCAL_SYMBOL);
				}
			}

			State = 2799; Match(INFILE_SYMBOL);
			State = 2800; textLiteral();
			State = 2802;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) {
				{
				State = 2801;
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2804; Match(INTO_SYMBOL);
			State = 2805; Match(TABLE_SYMBOL);
			State = 2806; tableRef();
			State = 2808;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,261,Context) ) {
			case 1:
				{
				State = 2807; usePartition();
				}
				break;
			}
			State = 2811;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHARSET_SYMBOL || _la==CHAR_SYMBOL) {
				{
				State = 2810; charsetClause();
				}
			}

			State = 2814;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROWS_SYMBOL) {
				{
				State = 2813; xmlRowsIdentifiedBy();
				}
			}

			State = 2817;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLUMNS_SYMBOL) {
				{
				State = 2816; fieldsClause();
				}
			}

			State = 2820;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LINES_SYMBOL) {
				{
				State = 2819; linesClause();
				}
			}

			State = 2822; loadDataFileTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataOrXmlContext : ParserRuleContext {
		public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		public ITerminalNode XML_SYMBOL() { return GetToken(MySQLParser.XML_SYMBOL, 0); }
		public DataOrXmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataOrXml; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDataOrXml(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDataOrXml(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataOrXml(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataOrXmlContext dataOrXml() {
		DataOrXmlContext _localctx = new DataOrXmlContext(Context, State);
		EnterRule(_localctx, 254, RULE_dataOrXml);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2824;
			_la = TokenStream.LA(1);
			if ( !(_la==DATA_SYMBOL || _la==XML_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmlRowsIdentifiedByContext : ParserRuleContext {
		public ITerminalNode ROWS_SYMBOL() { return GetToken(MySQLParser.ROWS_SYMBOL, 0); }
		public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public XmlRowsIdentifiedByContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlRowsIdentifiedBy; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterXmlRowsIdentifiedBy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitXmlRowsIdentifiedBy(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlRowsIdentifiedBy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XmlRowsIdentifiedByContext xmlRowsIdentifiedBy() {
		XmlRowsIdentifiedByContext _localctx = new XmlRowsIdentifiedByContext(Context, State);
		EnterRule(_localctx, 256, RULE_xmlRowsIdentifiedBy);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2826; Match(ROWS_SYMBOL);
			State = 2827; Match(IDENTIFIED_SYMBOL);
			State = 2828; Match(BY_SYMBOL);
			State = 2829; textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadDataFileTailContext : ParserRuleContext {
		public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public LoadDataFileTargetListContext loadDataFileTargetList() {
			return GetRuleContext<LoadDataFileTargetListContext>(0);
		}
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return GetRuleContext<UpdateListContext>(0);
		}
		public ITerminalNode LINES_SYMBOL() { return GetToken(MySQLParser.LINES_SYMBOL, 0); }
		public ITerminalNode ROWS_SYMBOL() { return GetToken(MySQLParser.ROWS_SYMBOL, 0); }
		public LoadDataFileTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadDataFileTail; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLoadDataFileTail(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLoadDataFileTail(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadDataFileTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadDataFileTailContext loadDataFileTail() {
		LoadDataFileTailContext _localctx = new LoadDataFileTailContext(Context, State);
		EnterRule(_localctx, 258, RULE_loadDataFileTail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2834;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE_SYMBOL) {
				{
				State = 2831; Match(IGNORE_SYMBOL);
				State = 2832; Match(INT_NUMBER);
				State = 2833;
				_la = TokenStream.LA(1);
				if ( !(_la==ROWS_SYMBOL || _la==LINES_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2837;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 2836; loadDataFileTargetList();
				}
			}

			State = 2841;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SET_SYMBOL) {
				{
				State = 2839; Match(SET_SYMBOL);
				State = 2840; updateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadDataFileTargetListContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FieldOrVariableListContext fieldOrVariableList() {
			return GetRuleContext<FieldOrVariableListContext>(0);
		}
		public LoadDataFileTargetListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadDataFileTargetList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLoadDataFileTargetList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLoadDataFileTargetList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadDataFileTargetList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadDataFileTargetListContext loadDataFileTargetList() {
		LoadDataFileTargetListContext _localctx = new LoadDataFileTargetListContext(Context, State);
		EnterRule(_localctx, 260, RULE_loadDataFileTargetList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2843; Match(OPEN_PAR_SYMBOL);
			State = 2845;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,269,Context) ) {
			case 1:
				{
				State = 2844; fieldOrVariableList();
				}
				break;
			}
			State = 2847; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldOrVariableListContext : ParserRuleContext {
		public ColumnRefContext[] columnRef() {
			return GetRuleContexts<ColumnRefContext>();
		}
		public ColumnRefContext columnRef(int i) {
			return GetRuleContext<ColumnRefContext>(i);
		}
		public UserVariableContext[] userVariable() {
			return GetRuleContexts<UserVariableContext>();
		}
		public UserVariableContext userVariable(int i) {
			return GetRuleContext<UserVariableContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FieldOrVariableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldOrVariableList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFieldOrVariableList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFieldOrVariableList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldOrVariableList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldOrVariableListContext fieldOrVariableList() {
		FieldOrVariableListContext _localctx = new FieldOrVariableListContext(Context, State);
		EnterRule(_localctx, 262, RULE_fieldOrVariableList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2851;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,270,Context) ) {
			case 1:
				{
				State = 2849; columnRef();
				}
				break;
			case 2:
				{
				State = 2850; userVariable();
				}
				break;
			}
			State = 2860;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 2853; Match(COMMA_SYMBOL);
				State = 2856;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,271,Context) ) {
				case 1:
					{
					State = 2854; columnRef();
					}
					break;
				case 2:
					{
					State = 2855; userVariable();
					}
					break;
				}
				}
				}
				State = 2862;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplaceStatementContext : ParserRuleContext {
		public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public InsertFromConstructorContext insertFromConstructor() {
			return GetRuleContext<InsertFromConstructorContext>(0);
		}
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return GetRuleContext<UpdateListContext>(0);
		}
		public InsertQueryExpressionContext insertQueryExpression() {
			return GetRuleContext<InsertQueryExpressionContext>(0);
		}
		public ITerminalNode INTO_SYMBOL() { return GetToken(MySQLParser.INTO_SYMBOL, 0); }
		public UsePartitionContext usePartition() {
			return GetRuleContext<UsePartitionContext>(0);
		}
		public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public ITerminalNode DELAYED_SYMBOL() { return GetToken(MySQLParser.DELAYED_SYMBOL, 0); }
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replaceStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReplaceStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReplaceStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplaceStatementContext replaceStatement() {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(Context, State);
		EnterRule(_localctx, 264, RULE_replaceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2863; Match(REPLACE_SYMBOL);
			State = 2865;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,273,Context) ) {
			case 1:
				{
				State = 2864;
				_la = TokenStream.LA(1);
				if ( !(_la==DELAYED_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 2868;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,274,Context) ) {
			case 1:
				{
				State = 2867; Match(INTO_SYMBOL);
				}
				break;
			}
			State = 2870; tableRef();
			State = 2872;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,275,Context) ) {
			case 1:
				{
				State = 2871; usePartition();
				}
				break;
			}
			State = 2878;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
			case 1:
				{
				State = 2874; insertFromConstructor();
				}
				break;
			case 2:
				{
				State = 2875; Match(SET_SYMBOL);
				State = 2876; updateList();
				}
				break;
			case 3:
				{
				State = 2877; insertQueryExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		public SelectStatementWithIntoContext selectStatementWithInto() {
			return GetRuleContext<SelectStatementWithIntoContext>(0);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSelectStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSelectStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 266, RULE_selectStatement);
		try {
			State = 2883;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,277,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2880; queryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2881; queryExpressionParens();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2882; selectStatementWithInto();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementWithIntoContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SelectStatementWithIntoContext selectStatementWithInto() {
			return GetRuleContext<SelectStatementWithIntoContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		public IntoClauseContext intoClause() {
			return GetRuleContext<IntoClauseContext>(0);
		}
		public SelectStatementWithIntoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatementWithInto; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSelectStatementWithInto(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSelectStatementWithInto(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatementWithInto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementWithIntoContext selectStatementWithInto() {
		SelectStatementWithIntoContext _localctx = new SelectStatementWithIntoContext(Context, State);
		EnterRule(_localctx, 268, RULE_selectStatementWithInto);
		try {
			State = 2892;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,278,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2885; Match(OPEN_PAR_SYMBOL);
				State = 2886; selectStatementWithInto();
				State = 2887; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2889; queryExpression();
				State = 2890; intoClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionContext : ParserRuleContext {
		public QueryExpressionBodyContext queryExpressionBody() {
			return GetRuleContext<QueryExpressionBodyContext>(0);
		}
		public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		public ProcedureAnalyseClauseContext procedureAnalyseClause() {
			return GetRuleContext<ProcedureAnalyseClauseContext>(0);
		}
		public LockingClauseContext lockingClause() {
			return GetRuleContext<LockingClauseContext>(0);
		}
		public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQueryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQueryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionContext queryExpression() {
		QueryExpressionContext _localctx = new QueryExpressionContext(Context, State);
		EnterRule(_localctx, 270, RULE_queryExpression);
		int _la;
		try {
			State = 2928;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,288,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2896;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,279,Context) ) {
				case 1:
					{
					State = 2894;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 2895; withClause();
					}
					break;
				}
				State = 2913;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,284,Context) ) {
				case 1:
					{
					State = 2898; queryExpressionBody(0);
					State = 2900;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,280,Context) ) {
					case 1:
						{
						State = 2899; orderClause();
						}
						break;
					}
					State = 2903;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,281,Context) ) {
					case 1:
						{
						State = 2902; limitClause();
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 2905; queryExpressionParens();
					State = 2911;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ORDER_SYMBOL:
						{
						State = 2906; orderClause();
						State = 2908;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,282,Context) ) {
						case 1:
							{
							State = 2907; limitClause();
							}
							break;
						}
						}
						break;
					case LIMIT_SYMBOL:
						{
						State = 2910; limitClause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				State = 2917;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,285,Context) ) {
				case 1:
					{
					State = 2915;
					if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
					State = 2916; procedureAnalyseClause();
					}
					break;
				}
				State = 2920;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL || _la==LOCK_SYMBOL) {
					{
					State = 2919; lockingClause();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2922;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 2923; withClause();
				State = 2924; queryExpressionParens();
				State = 2926;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL || _la==LOCK_SYMBOL) {
					{
					State = 2925; lockingClause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionBodyContext : ParserRuleContext {
		public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		public QueryExpressionParensContext[] queryExpressionParens() {
			return GetRuleContexts<QueryExpressionParensContext>();
		}
		public QueryExpressionParensContext queryExpressionParens(int i) {
			return GetRuleContext<QueryExpressionParensContext>(i);
		}
		public ITerminalNode UNION_SYMBOL() { return GetToken(MySQLParser.UNION_SYMBOL, 0); }
		public UnionOptionContext unionOption() {
			return GetRuleContext<UnionOptionContext>(0);
		}
		public QueryExpressionBodyContext queryExpressionBody() {
			return GetRuleContext<QueryExpressionBodyContext>(0);
		}
		public QueryExpressionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpressionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQueryExpressionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQueryExpressionBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryExpressionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionBodyContext queryExpressionBody() {
		return queryExpressionBody(0);
	}

	private QueryExpressionBodyContext queryExpressionBody(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		QueryExpressionBodyContext _localctx = new QueryExpressionBodyContext(Context, _parentState);
		QueryExpressionBodyContext _prevctx = _localctx;
		int _startState = 272;
		EnterRecursionRule(_localctx, 272, RULE_queryExpressionBody, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2941;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT_SYMBOL:
				{
				State = 2931; querySpecification();
				}
				break;
			case OPEN_PAR_SYMBOL:
				{
				State = 2932; queryExpressionParens();
				State = 2933; Match(UNION_SYMBOL);
				State = 2935;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL_SYMBOL || _la==DISTINCT_SYMBOL) {
					{
					State = 2934; unionOption();
					}
				}

				State = 2939;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SELECT_SYMBOL:
					{
					State = 2937; querySpecification();
					}
					break;
				case OPEN_PAR_SYMBOL:
					{
					State = 2938; queryExpressionParens();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2954;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,294,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QueryExpressionBodyContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_queryExpressionBody);
					State = 2943;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 2944; Match(UNION_SYMBOL);
					State = 2946;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALL_SYMBOL || _la==DISTINCT_SYMBOL) {
						{
						State = 2945; unionOption();
						}
					}

					State = 2950;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case SELECT_SYMBOL:
						{
						State = 2948; querySpecification();
						}
						break;
					case OPEN_PAR_SYMBOL:
						{
						State = 2949; queryExpressionParens();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 2956;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,294,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class QueryExpressionParensContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		public QueryExpressionParensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpressionParens; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQueryExpressionParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQueryExpressionParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryExpressionParens(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionParensContext queryExpressionParens() {
		QueryExpressionParensContext _localctx = new QueryExpressionParensContext(Context, State);
		EnterRule(_localctx, 274, RULE_queryExpressionParens);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2957; Match(OPEN_PAR_SYMBOL);
			State = 2960;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,295,Context) ) {
			case 1:
				{
				State = 2958; queryExpressionParens();
				}
				break;
			case 2:
				{
				State = 2959; queryExpression();
				}
				break;
			}
			State = 2962; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecificationContext : ParserRuleContext {
		public ITerminalNode SELECT_SYMBOL() { return GetToken(MySQLParser.SELECT_SYMBOL, 0); }
		public SelectItemListContext selectItemList() {
			return GetRuleContext<SelectItemListContext>(0);
		}
		public SelectOptionContext[] selectOption() {
			return GetRuleContexts<SelectOptionContext>();
		}
		public SelectOptionContext selectOption(int i) {
			return GetRuleContext<SelectOptionContext>(i);
		}
		public IntoClauseContext intoClause() {
			return GetRuleContext<IntoClauseContext>(0);
		}
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public GroupByClauseContext groupByClause() {
			return GetRuleContext<GroupByClauseContext>(0);
		}
		public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		public WindowClauseContext windowClause() {
			return GetRuleContext<WindowClauseContext>(0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQuerySpecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQuerySpecification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuerySpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecificationContext querySpecification() {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(Context, State);
		EnterRule(_localctx, 276, RULE_querySpecification);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2964; Match(SELECT_SYMBOL);
			State = 2968;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,296,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2965; selectOption();
					}
					} 
				}
				State = 2970;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,296,Context);
			}
			State = 2971; selectItemList();
			State = 2973;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,297,Context) ) {
			case 1:
				{
				State = 2972; intoClause();
				}
				break;
			}
			State = 2976;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,298,Context) ) {
			case 1:
				{
				State = 2975; fromClause();
				}
				break;
			}
			State = 2979;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,299,Context) ) {
			case 1:
				{
				State = 2978; whereClause();
				}
				break;
			}
			State = 2982;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,300,Context) ) {
			case 1:
				{
				State = 2981; groupByClause();
				}
				break;
			}
			State = 2985;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,301,Context) ) {
			case 1:
				{
				State = 2984; havingClause();
				}
				break;
			}
			State = 2989;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,302,Context) ) {
			case 1:
				{
				State = 2987;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 2988; windowClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubqueryContext : ParserRuleContext {
		public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSubquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSubquery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubqueryContext subquery() {
		SubqueryContext _localctx = new SubqueryContext(Context, State);
		EnterRule(_localctx, 278, RULE_subquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2991; queryExpressionParens();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecOptionContext : ParserRuleContext {
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public ITerminalNode DISTINCT_SYMBOL() { return GetToken(MySQLParser.DISTINCT_SYMBOL, 0); }
		public ITerminalNode STRAIGHT_JOIN_SYMBOL() { return GetToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0); }
		public ITerminalNode HIGH_PRIORITY_SYMBOL() { return GetToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0); }
		public ITerminalNode SQL_SMALL_RESULT_SYMBOL() { return GetToken(MySQLParser.SQL_SMALL_RESULT_SYMBOL, 0); }
		public ITerminalNode SQL_BIG_RESULT_SYMBOL() { return GetToken(MySQLParser.SQL_BIG_RESULT_SYMBOL, 0); }
		public ITerminalNode SQL_BUFFER_RESULT_SYMBOL() { return GetToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		public ITerminalNode SQL_CALC_FOUND_ROWS_SYMBOL() { return GetToken(MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL, 0); }
		public QuerySpecOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQuerySpecOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQuerySpecOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuerySpecOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecOptionContext querySpecOption() {
		QuerySpecOptionContext _localctx = new QuerySpecOptionContext(Context, State);
		EnterRule(_localctx, 280, RULE_querySpecOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2993;
			_la = TokenStream.LA(1);
			if ( !(_la==SQL_BUFFER_RESULT_SYMBOL || _la==ALL_SYMBOL || _la==DISTINCT_SYMBOL || _la==HIGH_PRIORITY_SYMBOL || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (SQL_BIG_RESULT_SYMBOL - 628)) | (1L << (SQL_CALC_FOUND_ROWS_SYMBOL - 628)) | (1L << (SQL_SMALL_RESULT_SYMBOL - 628)) | (1L << (STRAIGHT_JOIN_SYMBOL - 628)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitClauseContext : ParserRuleContext {
		public ITerminalNode LIMIT_SYMBOL() { return GetToken(MySQLParser.LIMIT_SYMBOL, 0); }
		public LimitOptionsContext limitOptions() {
			return GetRuleContext<LimitOptionsContext>(0);
		}
		public LimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLimitClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLimitClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitClauseContext limitClause() {
		LimitClauseContext _localctx = new LimitClauseContext(Context, State);
		EnterRule(_localctx, 282, RULE_limitClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2995; Match(LIMIT_SYMBOL);
			State = 2996; limitOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleLimitClauseContext : ParserRuleContext {
		public ITerminalNode LIMIT_SYMBOL() { return GetToken(MySQLParser.LIMIT_SYMBOL, 0); }
		public LimitOptionContext limitOption() {
			return GetRuleContext<LimitOptionContext>(0);
		}
		public SimpleLimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleLimitClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleLimitClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleLimitClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleLimitClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleLimitClauseContext simpleLimitClause() {
		SimpleLimitClauseContext _localctx = new SimpleLimitClauseContext(Context, State);
		EnterRule(_localctx, 284, RULE_simpleLimitClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2998; Match(LIMIT_SYMBOL);
			State = 2999; limitOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitOptionsContext : ParserRuleContext {
		public LimitOptionContext[] limitOption() {
			return GetRuleContexts<LimitOptionContext>();
		}
		public LimitOptionContext limitOption(int i) {
			return GetRuleContext<LimitOptionContext>(i);
		}
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public ITerminalNode OFFSET_SYMBOL() { return GetToken(MySQLParser.OFFSET_SYMBOL, 0); }
		public LimitOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLimitOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLimitOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitOptionsContext limitOptions() {
		LimitOptionsContext _localctx = new LimitOptionsContext(Context, State);
		EnterRule(_localctx, 286, RULE_limitOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3001; limitOption();
			State = 3004;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,303,Context) ) {
			case 1:
				{
				State = 3002;
				_la = TokenStream.LA(1);
				if ( !(_la==OFFSET_SYMBOL || _la==COMMA_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3003; limitOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitOptionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode PARAM_MARKER() { return GetToken(MySQLParser.PARAM_MARKER, 0); }
		public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public ITerminalNode LONG_NUMBER() { return GetToken(MySQLParser.LONG_NUMBER, 0); }
		public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public LimitOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLimitOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLimitOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitOptionContext limitOption() {
		LimitOptionContext _localctx = new LimitOptionContext(Context, State);
		EnterRule(_localctx, 288, RULE_limitOption);
		int _la;
		try {
			State = 3008;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,304,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3006; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3007;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (PARAM_MARKER - 380)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntoClauseContext : ParserRuleContext {
		public ITerminalNode INTO_SYMBOL() { return GetToken(MySQLParser.INTO_SYMBOL, 0); }
		public ITerminalNode OUTFILE_SYMBOL() { return GetToken(MySQLParser.OUTFILE_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ITerminalNode DUMPFILE_SYMBOL() { return GetToken(MySQLParser.DUMPFILE_SYMBOL, 0); }
		public TextOrIdentifierContext[] textOrIdentifier() {
			return GetRuleContexts<TextOrIdentifierContext>();
		}
		public TextOrIdentifierContext textOrIdentifier(int i) {
			return GetRuleContext<TextOrIdentifierContext>(i);
		}
		public UserVariableContext[] userVariable() {
			return GetRuleContexts<UserVariableContext>();
		}
		public UserVariableContext userVariable(int i) {
			return GetRuleContext<UserVariableContext>(i);
		}
		public CharsetClauseContext charsetClause() {
			return GetRuleContext<CharsetClauseContext>(0);
		}
		public FieldsClauseContext fieldsClause() {
			return GetRuleContext<FieldsClauseContext>(0);
		}
		public LinesClauseContext linesClause() {
			return GetRuleContext<LinesClauseContext>(0);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IntoClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intoClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIntoClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIntoClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntoClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntoClauseContext intoClause() {
		IntoClauseContext _localctx = new IntoClauseContext(Context, State);
		EnterRule(_localctx, 290, RULE_intoClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3010; Match(INTO_SYMBOL);
			State = 3038;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,311,Context) ) {
			case 1:
				{
				State = 3011; Match(OUTFILE_SYMBOL);
				State = 3012; textStringLiteral();
				State = 3014;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,305,Context) ) {
				case 1:
					{
					State = 3013; charsetClause();
					}
					break;
				}
				State = 3017;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,306,Context) ) {
				case 1:
					{
					State = 3016; fieldsClause();
					}
					break;
				}
				State = 3020;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,307,Context) ) {
				case 1:
					{
					State = 3019; linesClause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 3022; Match(DUMPFILE_SYMBOL);
				State = 3023; textStringLiteral();
				}
				break;
			case 3:
				{
				State = 3026;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,308,Context) ) {
				case 1:
					{
					State = 3024; textOrIdentifier();
					}
					break;
				case 2:
					{
					State = 3025; userVariable();
					}
					break;
				}
				State = 3035;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,310,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3028; Match(COMMA_SYMBOL);
						State = 3031;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,309,Context) ) {
						case 1:
							{
							State = 3029; textOrIdentifier();
							}
							break;
						case 2:
							{
							State = 3030; userVariable();
							}
							break;
						}
						}
						} 
					}
					State = 3037;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,310,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureAnalyseClauseContext : ParserRuleContext {
		public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public ITerminalNode ANALYSE_SYMBOL() { return GetToken(MySQLParser.ANALYSE_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode[] INT_NUMBER() { return GetTokens(MySQLParser.INT_NUMBER); }
		public ITerminalNode INT_NUMBER(int i) {
			return GetToken(MySQLParser.INT_NUMBER, i);
		}
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public ProcedureAnalyseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureAnalyseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterProcedureAnalyseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitProcedureAnalyseClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureAnalyseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureAnalyseClauseContext procedureAnalyseClause() {
		ProcedureAnalyseClauseContext _localctx = new ProcedureAnalyseClauseContext(Context, State);
		EnterRule(_localctx, 292, RULE_procedureAnalyseClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3040; Match(PROCEDURE_SYMBOL);
			State = 3041; Match(ANALYSE_SYMBOL);
			State = 3042; Match(OPEN_PAR_SYMBOL);
			State = 3048;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INT_NUMBER) {
				{
				State = 3043; Match(INT_NUMBER);
				State = 3046;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 3044; Match(COMMA_SYMBOL);
					State = 3045; Match(INT_NUMBER);
					}
				}

				}
			}

			State = 3050; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingClauseContext : ParserRuleContext {
		public ITerminalNode HAVING_SYMBOL() { return GetToken(MySQLParser.HAVING_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_havingClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterHavingClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitHavingClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHavingClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HavingClauseContext havingClause() {
		HavingClauseContext _localctx = new HavingClauseContext(Context, State);
		EnterRule(_localctx, 294, RULE_havingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3052; Match(HAVING_SYMBOL);
			State = 3053; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowClauseContext : ParserRuleContext {
		public ITerminalNode WINDOW_SYMBOL() { return GetToken(MySQLParser.WINDOW_SYMBOL, 0); }
		public WindowDefinitionContext[] windowDefinition() {
			return GetRuleContexts<WindowDefinitionContext>();
		}
		public WindowDefinitionContext windowDefinition(int i) {
			return GetRuleContext<WindowDefinitionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowClauseContext windowClause() {
		WindowClauseContext _localctx = new WindowClauseContext(Context, State);
		EnterRule(_localctx, 296, RULE_windowClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3055; Match(WINDOW_SYMBOL);
			State = 3056; windowDefinition();
			State = 3061;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,314,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3057; Match(COMMA_SYMBOL);
					State = 3058; windowDefinition();
					}
					} 
				}
				State = 3063;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,314,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowDefinitionContext : ParserRuleContext {
		public WindowNameContext windowName() {
			return GetRuleContext<WindowNameContext>(0);
		}
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public WindowSpecContext windowSpec() {
			return GetRuleContext<WindowSpecContext>(0);
		}
		public WindowDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowDefinitionContext windowDefinition() {
		WindowDefinitionContext _localctx = new WindowDefinitionContext(Context, State);
		EnterRule(_localctx, 298, RULE_windowDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3064; windowName();
			State = 3065; Match(AS_SYMBOL);
			State = 3066; windowSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowSpecContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public WindowSpecDetailsContext windowSpecDetails() {
			return GetRuleContext<WindowSpecDetailsContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public WindowSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowSpecContext windowSpec() {
		WindowSpecContext _localctx = new WindowSpecContext(Context, State);
		EnterRule(_localctx, 300, RULE_windowSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3068; Match(OPEN_PAR_SYMBOL);
			State = 3069; windowSpecDetails();
			State = 3070; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowSpecDetailsContext : ParserRuleContext {
		public WindowNameContext windowName() {
			return GetRuleContext<WindowNameContext>(0);
		}
		public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public OrderListContext orderList() {
			return GetRuleContext<OrderListContext>(0);
		}
		public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		public WindowFrameClauseContext windowFrameClause() {
			return GetRuleContext<WindowFrameClauseContext>(0);
		}
		public WindowSpecDetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowSpecDetails; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowSpecDetails(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowSpecDetails(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowSpecDetails(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowSpecDetailsContext windowSpecDetails() {
		WindowSpecDetailsContext _localctx = new WindowSpecDetailsContext(Context, State);
		EnterRule(_localctx, 302, RULE_windowSpecDetails);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3073;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,315,Context) ) {
			case 1:
				{
				State = 3072; windowName();
				}
				break;
			}
			State = 3078;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION_SYMBOL) {
				{
				State = 3075; Match(PARTITION_SYMBOL);
				State = 3076; Match(BY_SYMBOL);
				State = 3077; orderList();
				}
			}

			State = 3081;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER_SYMBOL) {
				{
				State = 3080; orderClause();
				}
			}

			State = 3084;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROWS_SYMBOL || _la==RANGE_SYMBOL || _la==GROUPS_SYMBOL) {
				{
				State = 3083; windowFrameClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameClauseContext : ParserRuleContext {
		public WindowFrameUnitsContext windowFrameUnits() {
			return GetRuleContext<WindowFrameUnitsContext>(0);
		}
		public WindowFrameExtentContext windowFrameExtent() {
			return GetRuleContext<WindowFrameExtentContext>(0);
		}
		public WindowFrameExclusionContext windowFrameExclusion() {
			return GetRuleContext<WindowFrameExclusionContext>(0);
		}
		public WindowFrameClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowFrameClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameClauseContext windowFrameClause() {
		WindowFrameClauseContext _localctx = new WindowFrameClauseContext(Context, State);
		EnterRule(_localctx, 304, RULE_windowFrameClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3086; windowFrameUnits();
			State = 3087; windowFrameExtent();
			State = 3089;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXCLUDE_SYMBOL) {
				{
				State = 3088; windowFrameExclusion();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameUnitsContext : ParserRuleContext {
		public ITerminalNode ROWS_SYMBOL() { return GetToken(MySQLParser.ROWS_SYMBOL, 0); }
		public ITerminalNode RANGE_SYMBOL() { return GetToken(MySQLParser.RANGE_SYMBOL, 0); }
		public ITerminalNode GROUPS_SYMBOL() { return GetToken(MySQLParser.GROUPS_SYMBOL, 0); }
		public WindowFrameUnitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameUnits; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameUnits(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameUnits(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowFrameUnits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameUnitsContext windowFrameUnits() {
		WindowFrameUnitsContext _localctx = new WindowFrameUnitsContext(Context, State);
		EnterRule(_localctx, 306, RULE_windowFrameUnits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3091;
			_la = TokenStream.LA(1);
			if ( !(_la==ROWS_SYMBOL || _la==RANGE_SYMBOL || _la==GROUPS_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameExtentContext : ParserRuleContext {
		public WindowFrameStartContext windowFrameStart() {
			return GetRuleContext<WindowFrameStartContext>(0);
		}
		public WindowFrameBetweenContext windowFrameBetween() {
			return GetRuleContext<WindowFrameBetweenContext>(0);
		}
		public WindowFrameExtentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameExtent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameExtent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameExtent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowFrameExtent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameExtentContext windowFrameExtent() {
		WindowFrameExtentContext _localctx = new WindowFrameExtentContext(Context, State);
		EnterRule(_localctx, 308, RULE_windowFrameExtent);
		try {
			State = 3095;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT_SYMBOL:
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case PARAM_MARKER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
			case INTERVAL_SYMBOL:
			case UNBOUNDED_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3093; windowFrameStart();
				}
				break;
			case BETWEEN_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3094; windowFrameBetween();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameStartContext : ParserRuleContext {
		public ITerminalNode UNBOUNDED_SYMBOL() { return GetToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public ITerminalNode PRECEDING_SYMBOL() { return GetToken(MySQLParser.PRECEDING_SYMBOL, 0); }
		public Ulonglong_numberContext ulonglong_number() {
			return GetRuleContext<Ulonglong_numberContext>(0);
		}
		public ITerminalNode PARAM_MARKER() { return GetToken(MySQLParser.PARAM_MARKER, 0); }
		public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public ITerminalNode ROW_SYMBOL() { return GetToken(MySQLParser.ROW_SYMBOL, 0); }
		public WindowFrameStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameStart; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowFrameStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameStartContext windowFrameStart() {
		WindowFrameStartContext _localctx = new WindowFrameStartContext(Context, State);
		EnterRule(_localctx, 310, RULE_windowFrameStart);
		try {
			State = 3111;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNBOUNDED_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3097; Match(UNBOUNDED_SYMBOL);
				State = 3098; Match(PRECEDING_SYMBOL);
				}
				break;
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3099; ulonglong_number();
				State = 3100; Match(PRECEDING_SYMBOL);
				}
				break;
			case PARAM_MARKER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3102; Match(PARAM_MARKER);
				State = 3103; Match(PRECEDING_SYMBOL);
				}
				break;
			case INTERVAL_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3104; Match(INTERVAL_SYMBOL);
				State = 3105; expr(0);
				State = 3106; interval();
				State = 3107; Match(PRECEDING_SYMBOL);
				}
				break;
			case CURRENT_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3109; Match(CURRENT_SYMBOL);
				State = 3110; Match(ROW_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameBetweenContext : ParserRuleContext {
		public ITerminalNode BETWEEN_SYMBOL() { return GetToken(MySQLParser.BETWEEN_SYMBOL, 0); }
		public WindowFrameBoundContext[] windowFrameBound() {
			return GetRuleContexts<WindowFrameBoundContext>();
		}
		public WindowFrameBoundContext windowFrameBound(int i) {
			return GetRuleContext<WindowFrameBoundContext>(i);
		}
		public ITerminalNode AND_SYMBOL() { return GetToken(MySQLParser.AND_SYMBOL, 0); }
		public WindowFrameBetweenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameBetween; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameBetween(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameBetween(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowFrameBetween(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameBetweenContext windowFrameBetween() {
		WindowFrameBetweenContext _localctx = new WindowFrameBetweenContext(Context, State);
		EnterRule(_localctx, 312, RULE_windowFrameBetween);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3113; Match(BETWEEN_SYMBOL);
			State = 3114; windowFrameBound();
			State = 3115; Match(AND_SYMBOL);
			State = 3116; windowFrameBound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameBoundContext : ParserRuleContext {
		public WindowFrameStartContext windowFrameStart() {
			return GetRuleContext<WindowFrameStartContext>(0);
		}
		public ITerminalNode UNBOUNDED_SYMBOL() { return GetToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public ITerminalNode FOLLOWING_SYMBOL() { return GetToken(MySQLParser.FOLLOWING_SYMBOL, 0); }
		public Ulonglong_numberContext ulonglong_number() {
			return GetRuleContext<Ulonglong_numberContext>(0);
		}
		public ITerminalNode PARAM_MARKER() { return GetToken(MySQLParser.PARAM_MARKER, 0); }
		public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		public WindowFrameBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameBound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameBound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameBound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowFrameBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameBoundContext windowFrameBound() {
		WindowFrameBoundContext _localctx = new WindowFrameBoundContext(Context, State);
		EnterRule(_localctx, 314, RULE_windowFrameBound);
		try {
			State = 3131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,322,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3118; windowFrameStart();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3119; Match(UNBOUNDED_SYMBOL);
				State = 3120; Match(FOLLOWING_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3121; ulonglong_number();
				State = 3122; Match(FOLLOWING_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3124; Match(PARAM_MARKER);
				State = 3125; Match(FOLLOWING_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3126; Match(INTERVAL_SYMBOL);
				State = 3127; expr(0);
				State = 3128; interval();
				State = 3129; Match(FOLLOWING_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameExclusionContext : ParserRuleContext {
		public ITerminalNode EXCLUDE_SYMBOL() { return GetToken(MySQLParser.EXCLUDE_SYMBOL, 0); }
		public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public ITerminalNode ROW_SYMBOL() { return GetToken(MySQLParser.ROW_SYMBOL, 0); }
		public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		public ITerminalNode TIES_SYMBOL() { return GetToken(MySQLParser.TIES_SYMBOL, 0); }
		public ITerminalNode NO_SYMBOL() { return GetToken(MySQLParser.NO_SYMBOL, 0); }
		public ITerminalNode OTHERS_SYMBOL() { return GetToken(MySQLParser.OTHERS_SYMBOL, 0); }
		public WindowFrameExclusionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameExclusion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameExclusion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameExclusion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowFrameExclusion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameExclusionContext windowFrameExclusion() {
		WindowFrameExclusionContext _localctx = new WindowFrameExclusionContext(Context, State);
		EnterRule(_localctx, 316, RULE_windowFrameExclusion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3133; Match(EXCLUDE_SYMBOL);
			State = 3140;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT_SYMBOL:
				{
				State = 3134; Match(CURRENT_SYMBOL);
				State = 3135; Match(ROW_SYMBOL);
				}
				break;
			case GROUP_SYMBOL:
				{
				State = 3136; Match(GROUP_SYMBOL);
				}
				break;
			case TIES_SYMBOL:
				{
				State = 3137; Match(TIES_SYMBOL);
				}
				break;
			case NO_SYMBOL:
				{
				State = 3138; Match(NO_SYMBOL);
				State = 3139; Match(OTHERS_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithClauseContext : ParserRuleContext {
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public CommonTableExpressionContext[] commonTableExpression() {
			return GetRuleContexts<CommonTableExpressionContext>();
		}
		public CommonTableExpressionContext commonTableExpression(int i) {
			return GetRuleContext<CommonTableExpressionContext>(i);
		}
		public ITerminalNode RECURSIVE_SYMBOL() { return GetToken(MySQLParser.RECURSIVE_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWithClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWithClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithClauseContext withClause() {
		WithClauseContext _localctx = new WithClauseContext(Context, State);
		EnterRule(_localctx, 318, RULE_withClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3142; Match(WITH_SYMBOL);
			State = 3144;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,324,Context) ) {
			case 1:
				{
				State = 3143; Match(RECURSIVE_SYMBOL);
				}
				break;
			}
			State = 3146; commonTableExpression();
			State = 3151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 3147; Match(COMMA_SYMBOL);
				State = 3148; commonTableExpression();
				}
				}
				State = 3153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonTableExpressionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return GetRuleContext<ColumnInternalRefListContext>(0);
		}
		public CommonTableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonTableExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCommonTableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCommonTableExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommonTableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommonTableExpressionContext commonTableExpression() {
		CommonTableExpressionContext _localctx = new CommonTableExpressionContext(Context, State);
		EnterRule(_localctx, 320, RULE_commonTableExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3154; identifier();
			State = 3156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 3155; columnInternalRefList();
				}
			}

			State = 3158; Match(AS_SYMBOL);
			State = 3159; subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByClauseContext : ParserRuleContext {
		public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public OrderListContext orderList() {
			return GetRuleContext<OrderListContext>(0);
		}
		public OlapOptionContext olapOption() {
			return GetRuleContext<OlapOptionContext>(0);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGroupByClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGroupByClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByClauseContext groupByClause() {
		GroupByClauseContext _localctx = new GroupByClauseContext(Context, State);
		EnterRule(_localctx, 322, RULE_groupByClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3161; Match(GROUP_SYMBOL);
			State = 3162; Match(BY_SYMBOL);
			State = 3163; orderList();
			State = 3165;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,327,Context) ) {
			case 1:
				{
				State = 3164; olapOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OlapOptionContext : ParserRuleContext {
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode ROLLUP_SYMBOL() { return GetToken(MySQLParser.ROLLUP_SYMBOL, 0); }
		public ITerminalNode CUBE_SYMBOL() { return GetToken(MySQLParser.CUBE_SYMBOL, 0); }
		public OlapOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_olapOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOlapOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOlapOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOlapOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OlapOptionContext olapOption() {
		OlapOptionContext _localctx = new OlapOptionContext(Context, State);
		EnterRule(_localctx, 324, RULE_olapOption);
		try {
			State = 3172;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,328,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3167; Match(WITH_SYMBOL);
				State = 3168; Match(ROLLUP_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3169;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 3170; Match(WITH_SYMBOL);
				State = 3171; Match(CUBE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderClauseContext : ParserRuleContext {
		public ITerminalNode ORDER_SYMBOL() { return GetToken(MySQLParser.ORDER_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public OrderListContext orderList() {
			return GetRuleContext<OrderListContext>(0);
		}
		public OrderClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOrderClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOrderClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderClauseContext orderClause() {
		OrderClauseContext _localctx = new OrderClauseContext(Context, State);
		EnterRule(_localctx, 326, RULE_orderClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3174; Match(ORDER_SYMBOL);
			State = 3175; Match(BY_SYMBOL);
			State = 3176; orderList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionContext : ParserRuleContext {
		public ITerminalNode ASC_SYMBOL() { return GetToken(MySQLParser.ASC_SYMBOL, 0); }
		public ITerminalNode DESC_SYMBOL() { return GetToken(MySQLParser.DESC_SYMBOL, 0); }
		public DirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDirection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDirection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectionContext direction() {
		DirectionContext _localctx = new DirectionContext(Context, State);
		EnterRule(_localctx, 328, RULE_direction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3178;
			_la = TokenStream.LA(1);
			if ( !(_la==ASC_SYMBOL || _la==DESC_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : ParserRuleContext {
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public ITerminalNode DUAL_SYMBOL() { return GetToken(MySQLParser.DUAL_SYMBOL, 0); }
		public TableReferenceListContext tableReferenceList() {
			return GetRuleContext<TableReferenceListContext>(0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFromClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFromClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(Context, State);
		EnterRule(_localctx, 330, RULE_fromClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3180; Match(FROM_SYMBOL);
			State = 3183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,329,Context) ) {
			case 1:
				{
				State = 3181; Match(DUAL_SYMBOL);
				}
				break;
			case 2:
				{
				State = 3182; tableReferenceList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableReferenceListContext : ParserRuleContext {
		public TableReferenceContext[] tableReference() {
			return GetRuleContexts<TableReferenceContext>();
		}
		public TableReferenceContext tableReference(int i) {
			return GetRuleContext<TableReferenceContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableReferenceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableReferenceList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableReferenceList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableReferenceList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableReferenceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableReferenceListContext tableReferenceList() {
		TableReferenceListContext _localctx = new TableReferenceListContext(Context, State);
		EnterRule(_localctx, 332, RULE_tableReferenceList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3185; tableReference();
			State = 3190;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,330,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3186; Match(COMMA_SYMBOL);
					State = 3187; tableReference();
					}
					} 
				}
				State = 3192;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,330,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectOptionContext : ParserRuleContext {
		public QuerySpecOptionContext querySpecOption() {
			return GetRuleContext<QuerySpecOptionContext>(0);
		}
		public ITerminalNode SQL_NO_CACHE_SYMBOL() { return GetToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
		public ITerminalNode SQL_CACHE_SYMBOL() { return GetToken(MySQLParser.SQL_CACHE_SYMBOL, 0); }
		public ITerminalNode MAX_STATEMENT_TIME_SYMBOL() { return GetToken(MySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public SelectOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSelectOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSelectOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectOptionContext selectOption() {
		SelectOptionContext _localctx = new SelectOptionContext(Context, State);
		EnterRule(_localctx, 334, RULE_selectOption);
		try {
			State = 3201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,331,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3193; querySpecOption();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3194; Match(SQL_NO_CACHE_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3195;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 3196; Match(SQL_CACHE_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3197;
				if (!(serverVersion >= 50704 && serverVersion < 50708)) throw new FailedPredicateException(this, "serverVersion >= 50704 && serverVersion < 50708");
				State = 3198; Match(MAX_STATEMENT_TIME_SYMBOL);
				State = 3199; Match(EQUAL_OPERATOR);
				State = 3200; real_ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockingClauseContext : ParserRuleContext {
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public LockStrenghContext lockStrengh() {
			return GetRuleContext<LockStrenghContext>(0);
		}
		public ITerminalNode OF_SYMBOL() { return GetToken(MySQLParser.OF_SYMBOL, 0); }
		public TableAliasRefListContext tableAliasRefList() {
			return GetRuleContext<TableAliasRefListContext>(0);
		}
		public LockedRowActionContext lockedRowAction() {
			return GetRuleContext<LockedRowActionContext>(0);
		}
		public ITerminalNode LOCK_SYMBOL() { return GetToken(MySQLParser.LOCK_SYMBOL, 0); }
		public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		public ITerminalNode SHARE_SYMBOL() { return GetToken(MySQLParser.SHARE_SYMBOL, 0); }
		public ITerminalNode MODE_SYMBOL() { return GetToken(MySQLParser.MODE_SYMBOL, 0); }
		public LockingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockingClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLockingClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLockingClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockingClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockingClauseContext lockingClause() {
		LockingClauseContext _localctx = new LockingClauseContext(Context, State);
		EnterRule(_localctx, 336, RULE_lockingClause);
		try {
			State = 3218;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3203; Match(FOR_SYMBOL);
				State = 3204; lockStrengh();
				State = 3208;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,332,Context) ) {
				case 1:
					{
					State = 3205;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 3206; Match(OF_SYMBOL);
					State = 3207; tableAliasRefList();
					}
					break;
				}
				State = 3212;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,333,Context) ) {
				case 1:
					{
					State = 3210;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 3211; lockedRowAction();
					}
					break;
				}
				}
				break;
			case LOCK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3214; Match(LOCK_SYMBOL);
				State = 3215; Match(IN_SYMBOL);
				State = 3216; Match(SHARE_SYMBOL);
				State = 3217; Match(MODE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStrenghContext : ParserRuleContext {
		public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public ITerminalNode SHARE_SYMBOL() { return GetToken(MySQLParser.SHARE_SYMBOL, 0); }
		public LockStrenghContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStrengh; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLockStrengh(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLockStrengh(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStrengh(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockStrenghContext lockStrengh() {
		LockStrenghContext _localctx = new LockStrenghContext(Context, State);
		EnterRule(_localctx, 338, RULE_lockStrengh);
		try {
			State = 3223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,335,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3220; Match(UPDATE_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3221;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 3222; Match(SHARE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockedRowActionContext : ParserRuleContext {
		public ITerminalNode SKIP_SYMBOL() { return GetToken(MySQLParser.SKIP_SYMBOL, 0); }
		public ITerminalNode LOCKED_SYMBOL() { return GetToken(MySQLParser.LOCKED_SYMBOL, 0); }
		public ITerminalNode NOWAIT_SYMBOL() { return GetToken(MySQLParser.NOWAIT_SYMBOL, 0); }
		public LockedRowActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockedRowAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLockedRowAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLockedRowAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockedRowAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockedRowActionContext lockedRowAction() {
		LockedRowActionContext _localctx = new LockedRowActionContext(Context, State);
		EnterRule(_localctx, 340, RULE_lockedRowAction);
		try {
			State = 3228;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SKIP_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3225; Match(SKIP_SYMBOL);
				State = 3226; Match(LOCKED_SYMBOL);
				}
				break;
			case NOWAIT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3227; Match(NOWAIT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectItemListContext : ParserRuleContext {
		public SelectItemContext[] selectItem() {
			return GetRuleContexts<SelectItemContext>();
		}
		public SelectItemContext selectItem(int i) {
			return GetRuleContext<SelectItemContext>(i);
		}
		public ITerminalNode MULT_OPERATOR() { return GetToken(MySQLParser.MULT_OPERATOR, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SelectItemListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectItemList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSelectItemList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSelectItemList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectItemList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectItemListContext selectItemList() {
		SelectItemListContext _localctx = new SelectItemListContext(Context, State);
		EnterRule(_localctx, 342, RULE_selectItemList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3232;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,337,Context) ) {
			case 1:
				{
				State = 3230; selectItem();
				}
				break;
			case 2:
				{
				State = 3231; Match(MULT_OPERATOR);
				}
				break;
			}
			State = 3238;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,338,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3234; Match(COMMA_SYMBOL);
					State = 3235; selectItem();
					}
					} 
				}
				State = 3240;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,338,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectItemContext : ParserRuleContext {
		public TableWildContext tableWild() {
			return GetRuleContext<TableWildContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSelectItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSelectItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectItemContext selectItem() {
		SelectItemContext _localctx = new SelectItemContext(Context, State);
		EnterRule(_localctx, 344, RULE_selectItem);
		try {
			State = 3246;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,340,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3241; tableWild();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3242; expr(0);
				State = 3244;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,339,Context) ) {
				case 1:
					{
					State = 3243; selectAlias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectAliasContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public SelectAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectAlias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSelectAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSelectAlias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectAliasContext selectAlias() {
		SelectAliasContext _localctx = new SelectAliasContext(Context, State);
		EnterRule(_localctx, 346, RULE_selectAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3249;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,341,Context) ) {
			case 1:
				{
				State = 3248; Match(AS_SYMBOL);
				}
				break;
			}
			State = 3253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,342,Context) ) {
			case 1:
				{
				State = 3251; identifier();
				}
				break;
			case 2:
				{
				State = 3252; textStringLiteral();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		public ITerminalNode WHERE_SYMBOL() { return GetToken(MySQLParser.WHERE_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 348, RULE_whereClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3255; Match(WHERE_SYMBOL);
			State = 3256; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableReferenceContext : ParserRuleContext {
		public TableFactorContext tableFactor() {
			return GetRuleContext<TableFactorContext>(0);
		}
		public ITerminalNode OPEN_CURLY_SYMBOL() { return GetToken(MySQLParser.OPEN_CURLY_SYMBOL, 0); }
		public EscapedTableReferenceContext escapedTableReference() {
			return GetRuleContext<EscapedTableReferenceContext>(0);
		}
		public ITerminalNode CLOSE_CURLY_SYMBOL() { return GetToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0); }
		public JoinedTableContext[] joinedTable() {
			return GetRuleContexts<JoinedTableContext>();
		}
		public JoinedTableContext joinedTable(int i) {
			return GetRuleContext<JoinedTableContext>(i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OJ_SYMBOL() { return GetToken(MySQLParser.OJ_SYMBOL, 0); }
		public TableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableReferenceContext tableReference() {
		TableReferenceContext _localctx = new TableReferenceContext(Context, State);
		EnterRule(_localctx, 350, RULE_tableReference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,344,Context) ) {
			case 1:
				{
				State = 3258; tableFactor();
				}
				break;
			case 2:
				{
				State = 3259; Match(OPEN_CURLY_SYMBOL);
				State = 3263;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,343,Context) ) {
				case 1:
					{
					State = 3260;
					if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
					State = 3261; identifier();
					}
					break;
				case 2:
					{
					State = 3262; Match(OJ_SYMBOL);
					}
					break;
				}
				State = 3265; escapedTableReference();
				State = 3266; Match(CLOSE_CURLY_SYMBOL);
				}
				break;
			}
			State = 3273;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,345,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3270; joinedTable();
					}
					} 
				}
				State = 3275;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,345,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EscapedTableReferenceContext : ParserRuleContext {
		public TableFactorContext tableFactor() {
			return GetRuleContext<TableFactorContext>(0);
		}
		public JoinedTableContext[] joinedTable() {
			return GetRuleContexts<JoinedTableContext>();
		}
		public JoinedTableContext joinedTable(int i) {
			return GetRuleContext<JoinedTableContext>(i);
		}
		public EscapedTableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escapedTableReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterEscapedTableReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitEscapedTableReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEscapedTableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EscapedTableReferenceContext escapedTableReference() {
		EscapedTableReferenceContext _localctx = new EscapedTableReferenceContext(Context, State);
		EnterRule(_localctx, 352, RULE_escapedTableReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3276; tableFactor();
			State = 3280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CROSS_SYMBOL || _la==INNER_SYMBOL || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (JOIN_SYMBOL - 534)) | (1L << (LEFT_SYMBOL - 534)) | (1L << (NATURAL_SYMBOL - 534)))) != 0) || _la==RIGHT_SYMBOL || _la==STRAIGHT_JOIN_SYMBOL) {
				{
				{
				State = 3277; joinedTable();
				}
				}
				State = 3282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinedTableContext : ParserRuleContext {
		public InnerJoinTypeContext innerJoinType() {
			return GetRuleContext<InnerJoinTypeContext>(0);
		}
		public TableReferenceContext tableReference() {
			return GetRuleContext<TableReferenceContext>(0);
		}
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode USING_SYMBOL() { return GetToken(MySQLParser.USING_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return GetRuleContext<IdentifierListWithParenthesesContext>(0);
		}
		public OuterJoinTypeContext outerJoinType() {
			return GetRuleContext<OuterJoinTypeContext>(0);
		}
		public NaturalJoinTypeContext naturalJoinType() {
			return GetRuleContext<NaturalJoinTypeContext>(0);
		}
		public TableFactorContext tableFactor() {
			return GetRuleContext<TableFactorContext>(0);
		}
		public JoinedTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinedTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterJoinedTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitJoinedTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinedTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinedTableContext joinedTable() {
		JoinedTableContext _localctx = new JoinedTableContext(Context, State);
		EnterRule(_localctx, 354, RULE_joinedTable);
		try {
			State = 3302;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CROSS_SYMBOL:
			case INNER_SYMBOL:
			case JOIN_SYMBOL:
			case STRAIGHT_JOIN_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3283; innerJoinType();
				State = 3284; tableReference();
				State = 3289;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,347,Context) ) {
				case 1:
					{
					State = 3285; Match(ON_SYMBOL);
					State = 3286; expr(0);
					}
					break;
				case 2:
					{
					State = 3287; Match(USING_SYMBOL);
					State = 3288; identifierListWithParentheses();
					}
					break;
				}
				}
				break;
			case LEFT_SYMBOL:
			case RIGHT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3291; outerJoinType();
				State = 3292; tableReference();
				State = 3297;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ON_SYMBOL:
					{
					State = 3293; Match(ON_SYMBOL);
					State = 3294; expr(0);
					}
					break;
				case USING_SYMBOL:
					{
					State = 3295; Match(USING_SYMBOL);
					State = 3296; identifierListWithParentheses();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3299; naturalJoinType();
				State = 3300; tableFactor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NaturalJoinTypeContext : ParserRuleContext {
		public ITerminalNode NATURAL_SYMBOL() { return GetToken(MySQLParser.NATURAL_SYMBOL, 0); }
		public ITerminalNode JOIN_SYMBOL() { return GetToken(MySQLParser.JOIN_SYMBOL, 0); }
		public ITerminalNode INNER_SYMBOL() { return GetToken(MySQLParser.INNER_SYMBOL, 0); }
		public ITerminalNode LEFT_SYMBOL() { return GetToken(MySQLParser.LEFT_SYMBOL, 0); }
		public ITerminalNode RIGHT_SYMBOL() { return GetToken(MySQLParser.RIGHT_SYMBOL, 0); }
		public ITerminalNode OUTER_SYMBOL() { return GetToken(MySQLParser.OUTER_SYMBOL, 0); }
		public NaturalJoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_naturalJoinType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNaturalJoinType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNaturalJoinType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNaturalJoinType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NaturalJoinTypeContext naturalJoinType() {
		NaturalJoinTypeContext _localctx = new NaturalJoinTypeContext(Context, State);
		EnterRule(_localctx, 356, RULE_naturalJoinType);
		int _la;
		try {
			State = 3315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,352,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3304; Match(NATURAL_SYMBOL);
				State = 3306;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INNER_SYMBOL) {
					{
					State = 3305; Match(INNER_SYMBOL);
					}
				}

				State = 3308; Match(JOIN_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3309; Match(NATURAL_SYMBOL);
				State = 3310;
				_la = TokenStream.LA(1);
				if ( !(_la==LEFT_SYMBOL || _la==RIGHT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER_SYMBOL) {
					{
					State = 3311; Match(OUTER_SYMBOL);
					}
				}

				State = 3314; Match(JOIN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InnerJoinTypeContext : ParserRuleContext {
		public IToken type;
		public ITerminalNode JOIN_SYMBOL() { return GetToken(MySQLParser.JOIN_SYMBOL, 0); }
		public ITerminalNode INNER_SYMBOL() { return GetToken(MySQLParser.INNER_SYMBOL, 0); }
		public ITerminalNode CROSS_SYMBOL() { return GetToken(MySQLParser.CROSS_SYMBOL, 0); }
		public ITerminalNode STRAIGHT_JOIN_SYMBOL() { return GetToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0); }
		public InnerJoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_innerJoinType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInnerJoinType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInnerJoinType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInnerJoinType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InnerJoinTypeContext innerJoinType() {
		InnerJoinTypeContext _localctx = new InnerJoinTypeContext(Context, State);
		EnterRule(_localctx, 358, RULE_innerJoinType);
		int _la;
		try {
			State = 3322;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CROSS_SYMBOL:
			case INNER_SYMBOL:
			case JOIN_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CROSS_SYMBOL || _la==INNER_SYMBOL) {
					{
					State = 3317;
					_localctx.type = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==CROSS_SYMBOL || _la==INNER_SYMBOL) ) {
						_localctx.type = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 3320; Match(JOIN_SYMBOL);
				}
				break;
			case STRAIGHT_JOIN_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3321; _localctx.type = Match(STRAIGHT_JOIN_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OuterJoinTypeContext : ParserRuleContext {
		public IToken type;
		public ITerminalNode JOIN_SYMBOL() { return GetToken(MySQLParser.JOIN_SYMBOL, 0); }
		public ITerminalNode LEFT_SYMBOL() { return GetToken(MySQLParser.LEFT_SYMBOL, 0); }
		public ITerminalNode RIGHT_SYMBOL() { return GetToken(MySQLParser.RIGHT_SYMBOL, 0); }
		public ITerminalNode OUTER_SYMBOL() { return GetToken(MySQLParser.OUTER_SYMBOL, 0); }
		public OuterJoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outerJoinType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOuterJoinType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOuterJoinType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOuterJoinType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OuterJoinTypeContext outerJoinType() {
		OuterJoinTypeContext _localctx = new OuterJoinTypeContext(Context, State);
		EnterRule(_localctx, 360, RULE_outerJoinType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3324;
			_localctx.type = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LEFT_SYMBOL || _la==RIGHT_SYMBOL) ) {
				_localctx.type = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUTER_SYMBOL) {
				{
				State = 3325; Match(OUTER_SYMBOL);
				}
			}

			State = 3328; Match(JOIN_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableFactorContext : ParserRuleContext {
		public SingleTableContext singleTable() {
			return GetRuleContext<SingleTableContext>(0);
		}
		public SingleTableParensContext singleTableParens() {
			return GetRuleContext<SingleTableParensContext>(0);
		}
		public DerivedTableContext derivedTable() {
			return GetRuleContext<DerivedTableContext>(0);
		}
		public TableReferenceListParensContext tableReferenceListParens() {
			return GetRuleContext<TableReferenceListParensContext>(0);
		}
		public TableFunctionContext tableFunction() {
			return GetRuleContext<TableFunctionContext>(0);
		}
		public TableFactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableFactor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableFactorContext tableFactor() {
		TableFactorContext _localctx = new TableFactorContext(Context, State);
		EnterRule(_localctx, 362, RULE_tableFactor);
		try {
			State = 3336;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,356,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3330; singleTable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3331; singleTableParens();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3332; derivedTable();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3333; tableReferenceListParens();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3334;
				if (!(serverVersion >= 80004)) throw new FailedPredicateException(this, "serverVersion >= 80004");
				State = 3335; tableFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleTableContext : ParserRuleContext {
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public UsePartitionContext usePartition() {
			return GetRuleContext<UsePartitionContext>(0);
		}
		public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public IndexHintListContext indexHintList() {
			return GetRuleContext<IndexHintListContext>(0);
		}
		public SingleTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSingleTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSingleTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleTableContext singleTable() {
		SingleTableContext _localctx = new SingleTableContext(Context, State);
		EnterRule(_localctx, 364, RULE_singleTable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3338; tableRef();
			State = 3340;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,357,Context) ) {
			case 1:
				{
				State = 3339; usePartition();
				}
				break;
			}
			State = 3343;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,358,Context) ) {
			case 1:
				{
				State = 3342; tableAlias();
				}
				break;
			}
			State = 3346;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,359,Context) ) {
			case 1:
				{
				State = 3345; indexHintList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleTableParensContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SingleTableContext singleTable() {
			return GetRuleContext<SingleTableContext>(0);
		}
		public SingleTableParensContext singleTableParens() {
			return GetRuleContext<SingleTableParensContext>(0);
		}
		public SingleTableParensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleTableParens; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSingleTableParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSingleTableParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleTableParens(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleTableParensContext singleTableParens() {
		SingleTableParensContext _localctx = new SingleTableParensContext(Context, State);
		EnterRule(_localctx, 366, RULE_singleTableParens);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3348; Match(OPEN_PAR_SYMBOL);
			State = 3351;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,360,Context) ) {
			case 1:
				{
				State = 3349; singleTable();
				}
				break;
			case 2:
				{
				State = 3350; singleTableParens();
				}
				break;
			}
			State = 3353; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DerivedTableContext : ParserRuleContext {
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return GetRuleContext<ColumnInternalRefListContext>(0);
		}
		public ITerminalNode LATERAL_SYMBOL() { return GetToken(MySQLParser.LATERAL_SYMBOL, 0); }
		public DerivedTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derivedTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDerivedTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDerivedTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerivedTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DerivedTableContext derivedTable() {
		DerivedTableContext _localctx = new DerivedTableContext(Context, State);
		EnterRule(_localctx, 368, RULE_derivedTable);
		try {
			State = 3372;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,365,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3355; subquery();
				State = 3357;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,361,Context) ) {
				case 1:
					{
					State = 3356; tableAlias();
					}
					break;
				}
				State = 3361;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,362,Context) ) {
				case 1:
					{
					State = 3359;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 3360; columnInternalRefList();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3363;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 3364; Match(LATERAL_SYMBOL);
				State = 3365; subquery();
				State = 3367;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,363,Context) ) {
				case 1:
					{
					State = 3366; tableAlias();
					}
					break;
				}
				State = 3370;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,364,Context) ) {
				case 1:
					{
					State = 3369; columnInternalRefList();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableReferenceListParensContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TableReferenceListContext tableReferenceList() {
			return GetRuleContext<TableReferenceListContext>(0);
		}
		public TableReferenceListParensContext tableReferenceListParens() {
			return GetRuleContext<TableReferenceListParensContext>(0);
		}
		public TableReferenceListParensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableReferenceListParens; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableReferenceListParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableReferenceListParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableReferenceListParens(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableReferenceListParensContext tableReferenceListParens() {
		TableReferenceListParensContext _localctx = new TableReferenceListParensContext(Context, State);
		EnterRule(_localctx, 370, RULE_tableReferenceListParens);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3374; Match(OPEN_PAR_SYMBOL);
			State = 3377;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,366,Context) ) {
			case 1:
				{
				State = 3375; tableReferenceList();
				}
				break;
			case 2:
				{
				State = 3376; tableReferenceListParens();
				}
				break;
			}
			State = 3379; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableFunctionContext : ParserRuleContext {
		public ITerminalNode JSON_TABLE_SYMBOL() { return GetToken(MySQLParser.JSON_TABLE_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ColumnsClauseContext columnsClause() {
			return GetRuleContext<ColumnsClauseContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public TableFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableFunctionContext tableFunction() {
		TableFunctionContext _localctx = new TableFunctionContext(Context, State);
		EnterRule(_localctx, 372, RULE_tableFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3381; Match(JSON_TABLE_SYMBOL);
			State = 3382; Match(OPEN_PAR_SYMBOL);
			State = 3383; expr(0);
			State = 3384; Match(COMMA_SYMBOL);
			State = 3385; textStringLiteral();
			State = 3386; columnsClause();
			State = 3387; Match(CLOSE_PAR_SYMBOL);
			State = 3389;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,367,Context) ) {
			case 1:
				{
				State = 3388; tableAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnsClauseContext : ParserRuleContext {
		public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public JtColumnContext[] jtColumn() {
			return GetRuleContexts<JtColumnContext>();
		}
		public JtColumnContext jtColumn(int i) {
			return GetRuleContext<JtColumnContext>(i);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ColumnsClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnsClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumnsClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumnsClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnsClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnsClauseContext columnsClause() {
		ColumnsClauseContext _localctx = new ColumnsClauseContext(Context, State);
		EnterRule(_localctx, 374, RULE_columnsClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3391; Match(COLUMNS_SYMBOL);
			State = 3392; Match(OPEN_PAR_SYMBOL);
			State = 3393; jtColumn();
			State = 3398;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 3394; Match(COMMA_SYMBOL);
				State = 3395; jtColumn();
				}
				}
				State = 3400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3401; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JtColumnContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public ITerminalNode ORDINALITY_SYMBOL() { return GetToken(MySQLParser.ORDINALITY_SYMBOL, 0); }
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ITerminalNode PATH_SYMBOL() { return GetToken(MySQLParser.PATH_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public ITerminalNode EXISTS_SYMBOL() { return GetToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public OnEmptyOrErrorContext onEmptyOrError() {
			return GetRuleContext<OnEmptyOrErrorContext>(0);
		}
		public ITerminalNode NESTED_SYMBOL() { return GetToken(MySQLParser.NESTED_SYMBOL, 0); }
		public ColumnsClauseContext columnsClause() {
			return GetRuleContext<ColumnsClauseContext>(0);
		}
		public JtColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jtColumn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterJtColumn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitJtColumn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJtColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JtColumnContext jtColumn() {
		JtColumnContext _localctx = new JtColumnContext(Context, State);
		EnterRule(_localctx, 376, RULE_jtColumn);
		int _la;
		try {
			State = 3426;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,372,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3403; identifier();
				State = 3404; Match(FOR_SYMBOL);
				State = 3405; Match(ORDINALITY_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3407; identifier();
				State = 3408; dataType();
				State = 3411;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,369,Context) ) {
				case 1:
					{
					State = 3409;
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					State = 3410; collate();
					}
					break;
				}
				State = 3414;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXISTS_SYMBOL) {
					{
					State = 3413; Match(EXISTS_SYMBOL);
					}
				}

				State = 3416; Match(PATH_SYMBOL);
				State = 3417; textStringLiteral();
				State = 3419;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ERROR_SYMBOL || _la==DEFAULT_SYMBOL || _la==NULL_SYMBOL) {
					{
					State = 3418; onEmptyOrError();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3421; Match(NESTED_SYMBOL);
				State = 3422; Match(PATH_SYMBOL);
				State = 3423; textStringLiteral();
				State = 3424; columnsClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnEmptyOrErrorContext : ParserRuleContext {
		public OnEmptyContext onEmpty() {
			return GetRuleContext<OnEmptyContext>(0);
		}
		public OnErrorContext onError() {
			return GetRuleContext<OnErrorContext>(0);
		}
		public OnEmptyOrErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onEmptyOrError; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOnEmptyOrError(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOnEmptyOrError(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnEmptyOrError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnEmptyOrErrorContext onEmptyOrError() {
		OnEmptyOrErrorContext _localctx = new OnEmptyOrErrorContext(Context, State);
		EnterRule(_localctx, 378, RULE_onEmptyOrError);
		int _la;
		try {
			State = 3436;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,375,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3428; onEmpty();
				State = 3430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ERROR_SYMBOL || _la==DEFAULT_SYMBOL || _la==NULL_SYMBOL) {
					{
					State = 3429; onError();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3432; onError();
				State = 3434;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ERROR_SYMBOL || _la==DEFAULT_SYMBOL || _la==NULL_SYMBOL) {
					{
					State = 3433; onEmpty();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnEmptyContext : ParserRuleContext {
		public JtOnResponseContext jtOnResponse() {
			return GetRuleContext<JtOnResponseContext>(0);
		}
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public ITerminalNode EMPTY_SYMBOL() { return GetToken(MySQLParser.EMPTY_SYMBOL, 0); }
		public OnEmptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onEmpty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOnEmpty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOnEmpty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnEmptyContext onEmpty() {
		OnEmptyContext _localctx = new OnEmptyContext(Context, State);
		EnterRule(_localctx, 380, RULE_onEmpty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3438; jtOnResponse();
			State = 3439; Match(ON_SYMBOL);
			State = 3440; Match(EMPTY_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnErrorContext : ParserRuleContext {
		public JtOnResponseContext jtOnResponse() {
			return GetRuleContext<JtOnResponseContext>(0);
		}
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public ITerminalNode ERROR_SYMBOL() { return GetToken(MySQLParser.ERROR_SYMBOL, 0); }
		public OnErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onError; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOnError(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOnError(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnErrorContext onError() {
		OnErrorContext _localctx = new OnErrorContext(Context, State);
		EnterRule(_localctx, 382, RULE_onError);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3442; jtOnResponse();
			State = 3443; Match(ON_SYMBOL);
			State = 3444; Match(ERROR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JtOnResponseContext : ParserRuleContext {
		public ITerminalNode ERROR_SYMBOL() { return GetToken(MySQLParser.ERROR_SYMBOL, 0); }
		public ITerminalNode NULL_SYMBOL() { return GetToken(MySQLParser.NULL_SYMBOL, 0); }
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public JtOnResponseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jtOnResponse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterJtOnResponse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitJtOnResponse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJtOnResponse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JtOnResponseContext jtOnResponse() {
		JtOnResponseContext _localctx = new JtOnResponseContext(Context, State);
		EnterRule(_localctx, 384, RULE_jtOnResponse);
		try {
			State = 3450;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ERROR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3446; Match(ERROR_SYMBOL);
				}
				break;
			case NULL_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3447; Match(NULL_SYMBOL);
				}
				break;
			case DEFAULT_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3448; Match(DEFAULT_SYMBOL);
				State = 3449; textStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionOptionContext : ParserRuleContext {
		public ITerminalNode DISTINCT_SYMBOL() { return GetToken(MySQLParser.DISTINCT_SYMBOL, 0); }
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public UnionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUnionOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUnionOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionOptionContext unionOption() {
		UnionOptionContext _localctx = new UnionOptionContext(Context, State);
		EnterRule(_localctx, 386, RULE_unionOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3452;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL_SYMBOL || _la==DISTINCT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableAliasContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TableAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableAlias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableAlias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableAliasContext tableAlias() {
		TableAliasContext _localctx = new TableAliasContext(Context, State);
		EnterRule(_localctx, 388, RULE_tableAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3457;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,377,Context) ) {
			case 1:
				{
				State = 3454; Match(AS_SYMBOL);
				}
				break;
			case 2:
				{
				State = 3455;
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				State = 3456; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 3459; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintListContext : ParserRuleContext {
		public IndexHintContext[] indexHint() {
			return GetRuleContexts<IndexHintContext>();
		}
		public IndexHintContext indexHint(int i) {
			return GetRuleContext<IndexHintContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IndexHintListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHintList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexHintList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexHintList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexHintList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintListContext indexHintList() {
		IndexHintListContext _localctx = new IndexHintListContext(Context, State);
		EnterRule(_localctx, 390, RULE_indexHintList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3461; indexHint();
			State = 3466;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,378,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3462; Match(COMMA_SYMBOL);
					State = 3463; indexHint();
					}
					} 
				}
				State = 3468;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,378,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintContext : ParserRuleContext {
		public IndexHintTypeContext indexHintType() {
			return GetRuleContext<IndexHintTypeContext>(0);
		}
		public KeyOrIndexContext keyOrIndex() {
			return GetRuleContext<KeyOrIndexContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public IndexListContext indexList() {
			return GetRuleContext<IndexListContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public IndexHintClauseContext indexHintClause() {
			return GetRuleContext<IndexHintClauseContext>(0);
		}
		public ITerminalNode USE_SYMBOL() { return GetToken(MySQLParser.USE_SYMBOL, 0); }
		public IndexHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintContext indexHint() {
		IndexHintContext _localctx = new IndexHintContext(Context, State);
		EnterRule(_localctx, 392, RULE_indexHint);
		int _la;
		try {
			State = 3489;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCE_SYMBOL:
			case IGNORE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3469; indexHintType();
				State = 3470; keyOrIndex();
				State = 3472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 3471; indexHintClause();
					}
				}

				State = 3474; Match(OPEN_PAR_SYMBOL);
				State = 3475; indexList();
				State = 3476; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case USE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3478; Match(USE_SYMBOL);
				State = 3479; keyOrIndex();
				State = 3481;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 3480; indexHintClause();
					}
				}

				State = 3483; Match(OPEN_PAR_SYMBOL);
				State = 3485;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,381,Context) ) {
				case 1:
					{
					State = 3484; indexList();
					}
					break;
				}
				State = 3487; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintTypeContext : ParserRuleContext {
		public ITerminalNode FORCE_SYMBOL() { return GetToken(MySQLParser.FORCE_SYMBOL, 0); }
		public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHintType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexHintType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexHintType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexHintType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintTypeContext indexHintType() {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(Context, State);
		EnterRule(_localctx, 394, RULE_indexHintType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3491;
			_la = TokenStream.LA(1);
			if ( !(_la==FORCE_SYMBOL || _la==IGNORE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyOrIndexContext : ParserRuleContext {
		public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		public KeyOrIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyOrIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyOrIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyOrIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyOrIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyOrIndexContext keyOrIndex() {
		KeyOrIndexContext _localctx = new KeyOrIndexContext(Context, State);
		EnterRule(_localctx, 396, RULE_keyOrIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3493;
			_la = TokenStream.LA(1);
			if ( !(_la==INDEX_SYMBOL || _la==KEY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintKeyTypeContext : ParserRuleContext {
		public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public KeyOrIndexContext keyOrIndex() {
			return GetRuleContext<KeyOrIndexContext>(0);
		}
		public ConstraintKeyTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintKeyType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintKeyType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintKeyType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraintKeyType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintKeyTypeContext constraintKeyType() {
		ConstraintKeyTypeContext _localctx = new ConstraintKeyTypeContext(Context, State);
		EnterRule(_localctx, 398, RULE_constraintKeyType);
		int _la;
		try {
			State = 3501;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3495; Match(PRIMARY_SYMBOL);
				State = 3496; Match(KEY_SYMBOL);
				}
				break;
			case UNIQUE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3497; Match(UNIQUE_SYMBOL);
				State = 3499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
					{
					State = 3498; keyOrIndex();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintClauseContext : ParserRuleContext {
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public ITerminalNode JOIN_SYMBOL() { return GetToken(MySQLParser.JOIN_SYMBOL, 0); }
		public ITerminalNode ORDER_SYMBOL() { return GetToken(MySQLParser.ORDER_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		public IndexHintClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHintClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexHintClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexHintClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexHintClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintClauseContext indexHintClause() {
		IndexHintClauseContext _localctx = new IndexHintClauseContext(Context, State);
		EnterRule(_localctx, 400, RULE_indexHintClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3503; Match(FOR_SYMBOL);
			State = 3509;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JOIN_SYMBOL:
				{
				State = 3504; Match(JOIN_SYMBOL);
				}
				break;
			case ORDER_SYMBOL:
				{
				State = 3505; Match(ORDER_SYMBOL);
				State = 3506; Match(BY_SYMBOL);
				}
				break;
			case GROUP_SYMBOL:
				{
				State = 3507; Match(GROUP_SYMBOL);
				State = 3508; Match(BY_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexListContext : ParserRuleContext {
		public IndexListElementContext[] indexListElement() {
			return GetRuleContexts<IndexListElementContext>();
		}
		public IndexListElementContext indexListElement(int i) {
			return GetRuleContext<IndexListElementContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IndexListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexListContext indexList() {
		IndexListContext _localctx = new IndexListContext(Context, State);
		EnterRule(_localctx, 402, RULE_indexList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3511; indexListElement();
			State = 3516;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 3512; Match(COMMA_SYMBOL);
				State = 3513; indexListElement();
				}
				}
				State = 3518;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexListElementContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public IndexListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexListElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexListElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexListElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexListElementContext indexListElement() {
		IndexListElementContext _localctx = new IndexListElementContext(Context, State);
		EnterRule(_localctx, 404, RULE_indexListElement);
		try {
			State = 3521;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,387,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3519; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3520; Match(PRIMARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateStatementContext : ParserRuleContext {
		public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TableReferenceListContext tableReferenceList() {
			return GetRuleContext<TableReferenceListContext>(0);
		}
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return GetRuleContext<UpdateListContext>(0);
		}
		public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		public SimpleLimitClauseContext simpleLimitClause() {
			return GetRuleContext<SimpleLimitClauseContext>(0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUpdateStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUpdateStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateStatementContext updateStatement() {
		UpdateStatementContext _localctx = new UpdateStatementContext(Context, State);
		EnterRule(_localctx, 406, RULE_updateStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3525;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,388,Context) ) {
			case 1:
				{
				State = 3523;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 3524; withClause();
				}
				break;
			}
			State = 3527; Match(UPDATE_SYMBOL);
			State = 3529;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,389,Context) ) {
			case 1:
				{
				State = 3528; Match(LOW_PRIORITY_SYMBOL);
				}
				break;
			}
			State = 3532;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,390,Context) ) {
			case 1:
				{
				State = 3531; Match(IGNORE_SYMBOL);
				}
				break;
			}
			State = 3534; tableReferenceList();
			State = 3535; Match(SET_SYMBOL);
			State = 3536; updateList();
			State = 3538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE_SYMBOL) {
				{
				State = 3537; whereClause();
				}
			}

			State = 3541;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER_SYMBOL) {
				{
				State = 3540; orderClause();
				}
			}

			State = 3544;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT_SYMBOL) {
				{
				State = 3543; simpleLimitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionOrLockingStatementContext : ParserRuleContext {
		public TransactionStatementContext transactionStatement() {
			return GetRuleContext<TransactionStatementContext>(0);
		}
		public SavepointStatementContext savepointStatement() {
			return GetRuleContext<SavepointStatementContext>(0);
		}
		public LockStatementContext lockStatement() {
			return GetRuleContext<LockStatementContext>(0);
		}
		public XaStatementContext xaStatement() {
			return GetRuleContext<XaStatementContext>(0);
		}
		public TransactionOrLockingStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionOrLockingStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTransactionOrLockingStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTransactionOrLockingStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionOrLockingStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionOrLockingStatementContext transactionOrLockingStatement() {
		TransactionOrLockingStatementContext _localctx = new TransactionOrLockingStatementContext(Context, State);
		EnterRule(_localctx, 408, RULE_transactionOrLockingStatement);
		try {
			State = 3550;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,394,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3546; transactionStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3547; savepointStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3548; lockStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3549; xaStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionStatementContext : ParserRuleContext {
		public ITerminalNode START_SYMBOL() { return GetToken(MySQLParser.START_SYMBOL, 0); }
		public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public TransactionCharacteristicContext[] transactionCharacteristic() {
			return GetRuleContexts<TransactionCharacteristicContext>();
		}
		public TransactionCharacteristicContext transactionCharacteristic(int i) {
			return GetRuleContext<TransactionCharacteristicContext>(i);
		}
		public ITerminalNode COMMIT_SYMBOL() { return GetToken(MySQLParser.COMMIT_SYMBOL, 0); }
		public ITerminalNode WORK_SYMBOL() { return GetToken(MySQLParser.WORK_SYMBOL, 0); }
		public ITerminalNode AND_SYMBOL() { return GetToken(MySQLParser.AND_SYMBOL, 0); }
		public ITerminalNode CHAIN_SYMBOL() { return GetToken(MySQLParser.CHAIN_SYMBOL, 0); }
		public ITerminalNode RELEASE_SYMBOL() { return GetToken(MySQLParser.RELEASE_SYMBOL, 0); }
		public ITerminalNode[] NO_SYMBOL() { return GetTokens(MySQLParser.NO_SYMBOL); }
		public ITerminalNode NO_SYMBOL(int i) {
			return GetToken(MySQLParser.NO_SYMBOL, i);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTransactionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTransactionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionStatementContext transactionStatement() {
		TransactionStatementContext _localctx = new TransactionStatementContext(Context, State);
		EnterRule(_localctx, 410, RULE_transactionStatement);
		int _la;
		try {
			int _alt;
			State = 3577;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case START_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3552; Match(START_SYMBOL);
				State = 3553; Match(TRANSACTION_SYMBOL);
				State = 3557;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,395,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3554; transactionCharacteristic();
						}
						} 
					}
					State = 3559;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,395,Context);
				}
				}
				break;
			case COMMIT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3560; Match(COMMIT_SYMBOL);
				State = 3562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WORK_SYMBOL) {
					{
					State = 3561; Match(WORK_SYMBOL);
					}
				}

				State = 3569;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND_SYMBOL) {
					{
					State = 3564; Match(AND_SYMBOL);
					State = 3566;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NO_SYMBOL) {
						{
						State = 3565; Match(NO_SYMBOL);
						}
					}

					State = 3568; Match(CHAIN_SYMBOL);
					}
				}

				State = 3575;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO_SYMBOL || _la==RELEASE_SYMBOL) {
					{
					State = 3572;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NO_SYMBOL) {
						{
						State = 3571; Match(NO_SYMBOL);
						}
					}

					State = 3574; Match(RELEASE_SYMBOL);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeginWorkContext : ParserRuleContext {
		public ITerminalNode BEGIN_SYMBOL() { return GetToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public ITerminalNode WORK_SYMBOL() { return GetToken(MySQLParser.WORK_SYMBOL, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beginWork; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterBeginWork(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitBeginWork(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeginWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeginWorkContext beginWork() {
		BeginWorkContext _localctx = new BeginWorkContext(Context, State);
		EnterRule(_localctx, 412, RULE_beginWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3579; Match(BEGIN_SYMBOL);
			State = 3581;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK_SYMBOL) {
				{
				State = 3580; Match(WORK_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionCharacteristicContext : ParserRuleContext {
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode CONSISTENT_SYMBOL() { return GetToken(MySQLParser.CONSISTENT_SYMBOL, 0); }
		public ITerminalNode SNAPSHOT_SYMBOL() { return GetToken(MySQLParser.SNAPSHOT_SYMBOL, 0); }
		public ITerminalNode READ_SYMBOL() { return GetToken(MySQLParser.READ_SYMBOL, 0); }
		public ITerminalNode WRITE_SYMBOL() { return GetToken(MySQLParser.WRITE_SYMBOL, 0); }
		public ITerminalNode ONLY_SYMBOL() { return GetToken(MySQLParser.ONLY_SYMBOL, 0); }
		public TransactionCharacteristicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionCharacteristic; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTransactionCharacteristic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTransactionCharacteristic(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionCharacteristic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionCharacteristicContext transactionCharacteristic() {
		TransactionCharacteristicContext _localctx = new TransactionCharacteristicContext(Context, State);
		EnterRule(_localctx, 414, RULE_transactionCharacteristic);
		int _la;
		try {
			State = 3589;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,403,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3583; Match(WITH_SYMBOL);
				State = 3584; Match(CONSISTENT_SYMBOL);
				State = 3585; Match(SNAPSHOT_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3586;
				if (!(serverVersion >= 50605)) throw new FailedPredicateException(this, "serverVersion >= 50605");
				State = 3587; Match(READ_SYMBOL);
				State = 3588;
				_la = TokenStream.LA(1);
				if ( !(_la==ONLY_SYMBOL || _la==WRITE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetTransactionCharacteristicContext : ParserRuleContext {
		public ITerminalNode ISOLATION_SYMBOL() { return GetToken(MySQLParser.ISOLATION_SYMBOL, 0); }
		public ITerminalNode LEVEL_SYMBOL() { return GetToken(MySQLParser.LEVEL_SYMBOL, 0); }
		public IsolationLevelContext isolationLevel() {
			return GetRuleContext<IsolationLevelContext>(0);
		}
		public ITerminalNode READ_SYMBOL() { return GetToken(MySQLParser.READ_SYMBOL, 0); }
		public ITerminalNode WRITE_SYMBOL() { return GetToken(MySQLParser.WRITE_SYMBOL, 0); }
		public ITerminalNode ONLY_SYMBOL() { return GetToken(MySQLParser.ONLY_SYMBOL, 0); }
		public SetTransactionCharacteristicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setTransactionCharacteristic; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSetTransactionCharacteristic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSetTransactionCharacteristic(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetTransactionCharacteristic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetTransactionCharacteristicContext setTransactionCharacteristic() {
		SetTransactionCharacteristicContext _localctx = new SetTransactionCharacteristicContext(Context, State);
		EnterRule(_localctx, 416, RULE_setTransactionCharacteristic);
		int _la;
		try {
			State = 3597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,404,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3591; Match(ISOLATION_SYMBOL);
				State = 3592; Match(LEVEL_SYMBOL);
				State = 3593; isolationLevel();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3594;
				if (!(serverVersion >= 50605)) throw new FailedPredicateException(this, "serverVersion >= 50605");
				State = 3595; Match(READ_SYMBOL);
				State = 3596;
				_la = TokenStream.LA(1);
				if ( !(_la==ONLY_SYMBOL || _la==WRITE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsolationLevelContext : ParserRuleContext {
		public ITerminalNode REPEATABLE_SYMBOL() { return GetToken(MySQLParser.REPEATABLE_SYMBOL, 0); }
		public ITerminalNode READ_SYMBOL() { return GetToken(MySQLParser.READ_SYMBOL, 0); }
		public ITerminalNode COMMITTED_SYMBOL() { return GetToken(MySQLParser.COMMITTED_SYMBOL, 0); }
		public ITerminalNode UNCOMMITTED_SYMBOL() { return GetToken(MySQLParser.UNCOMMITTED_SYMBOL, 0); }
		public ITerminalNode SERIALIZABLE_SYMBOL() { return GetToken(MySQLParser.SERIALIZABLE_SYMBOL, 0); }
		public IsolationLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isolationLevel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIsolationLevel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIsolationLevel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsolationLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsolationLevelContext isolationLevel() {
		IsolationLevelContext _localctx = new IsolationLevelContext(Context, State);
		EnterRule(_localctx, 418, RULE_isolationLevel);
		int _la;
		try {
			State = 3604;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REPEATABLE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3599; Match(REPEATABLE_SYMBOL);
				State = 3600; Match(READ_SYMBOL);
				}
				break;
			case READ_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3601; Match(READ_SYMBOL);
				State = 3602;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMITTED_SYMBOL || _la==UNCOMMITTED_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SERIALIZABLE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3603; Match(SERIALIZABLE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavepointStatementContext : ParserRuleContext {
		public ITerminalNode SAVEPOINT_SYMBOL() { return GetToken(MySQLParser.SAVEPOINT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ROLLBACK_SYMBOL() { return GetToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		public ITerminalNode WORK_SYMBOL() { return GetToken(MySQLParser.WORK_SYMBOL, 0); }
		public ITerminalNode AND_SYMBOL() { return GetToken(MySQLParser.AND_SYMBOL, 0); }
		public ITerminalNode CHAIN_SYMBOL() { return GetToken(MySQLParser.CHAIN_SYMBOL, 0); }
		public ITerminalNode RELEASE_SYMBOL() { return GetToken(MySQLParser.RELEASE_SYMBOL, 0); }
		public ITerminalNode[] NO_SYMBOL() { return GetTokens(MySQLParser.NO_SYMBOL); }
		public ITerminalNode NO_SYMBOL(int i) {
			return GetToken(MySQLParser.NO_SYMBOL, i);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepointStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSavepointStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSavepointStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepointStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavepointStatementContext savepointStatement() {
		SavepointStatementContext _localctx = new SavepointStatementContext(Context, State);
		EnterRule(_localctx, 420, RULE_savepointStatement);
		int _la;
		try {
			State = 3635;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SAVEPOINT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3606; Match(SAVEPOINT_SYMBOL);
				State = 3607; identifier();
				}
				break;
			case ROLLBACK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3608; Match(ROLLBACK_SYMBOL);
				State = 3610;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WORK_SYMBOL) {
					{
					State = 3609; Match(WORK_SYMBOL);
					}
				}

				State = 3630;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TO_SYMBOL:
					{
					State = 3612; Match(TO_SYMBOL);
					State = 3614;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,407,Context) ) {
					case 1:
						{
						State = 3613; Match(SAVEPOINT_SYMBOL);
						}
						break;
					}
					State = 3616; identifier();
					}
					break;
				case Eof:
				case NO_SYMBOL:
				case SEMICOLON_SYMBOL:
				case AND_SYMBOL:
				case RELEASE_SYMBOL:
					{
					State = 3622;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AND_SYMBOL) {
						{
						State = 3617; Match(AND_SYMBOL);
						State = 3619;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NO_SYMBOL) {
							{
							State = 3618; Match(NO_SYMBOL);
							}
						}

						State = 3621; Match(CHAIN_SYMBOL);
						}
					}

					State = 3628;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NO_SYMBOL || _la==RELEASE_SYMBOL) {
						{
						State = 3625;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NO_SYMBOL) {
							{
							State = 3624; Match(NO_SYMBOL);
							}
						}

						State = 3627; Match(RELEASE_SYMBOL);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case RELEASE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3632; Match(RELEASE_SYMBOL);
				State = 3633; Match(SAVEPOINT_SYMBOL);
				State = 3634; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStatementContext : ParserRuleContext {
		public ITerminalNode LOCK_SYMBOL() { return GetToken(MySQLParser.LOCK_SYMBOL, 0); }
		public LockItemContext[] lockItem() {
			return GetRuleContexts<LockItemContext>();
		}
		public LockItemContext lockItem(int i) {
			return GetRuleContext<LockItemContext>(i);
		}
		public ITerminalNode TABLES_SYMBOL() { return GetToken(MySQLParser.TABLES_SYMBOL, 0); }
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ITerminalNode INSTANCE_SYMBOL() { return GetToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public ITerminalNode BACKUP_SYMBOL() { return GetToken(MySQLParser.BACKUP_SYMBOL, 0); }
		public ITerminalNode UNLOCK_SYMBOL() { return GetToken(MySQLParser.UNLOCK_SYMBOL, 0); }
		public LockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockStatementContext lockStatement() {
		LockStatementContext _localctx = new LockStatementContext(Context, State);
		EnterRule(_localctx, 422, RULE_lockStatement);
		int _la;
		try {
			State = 3659;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,416,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3637; Match(LOCK_SYMBOL);
				State = 3638;
				_la = TokenStream.LA(1);
				if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3639; lockItem();
				State = 3644;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 3640; Match(COMMA_SYMBOL);
					State = 3641; lockItem();
					}
					}
					State = 3646;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3647;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 3648; Match(LOCK_SYMBOL);
				State = 3649; Match(INSTANCE_SYMBOL);
				State = 3650; Match(FOR_SYMBOL);
				State = 3651; Match(BACKUP_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3652; Match(UNLOCK_SYMBOL);
				State = 3657;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,415,Context) ) {
				case 1:
					{
					State = 3653; Match(TABLES_SYMBOL);
					}
					break;
				case 2:
					{
					State = 3654; Match(TABLE_SYMBOL);
					}
					break;
				case 3:
					{
					State = 3655;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 3656; Match(INSTANCE_SYMBOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockItemContext : ParserRuleContext {
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public LockOptionContext lockOption() {
			return GetRuleContext<LockOptionContext>(0);
		}
		public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public LockItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLockItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLockItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockItemContext lockItem() {
		LockItemContext _localctx = new LockItemContext(Context, State);
		EnterRule(_localctx, 424, RULE_lockItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3661; tableRef();
			State = 3663;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,417,Context) ) {
			case 1:
				{
				State = 3662; tableAlias();
				}
				break;
			}
			State = 3665; lockOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockOptionContext : ParserRuleContext {
		public ITerminalNode READ_SYMBOL() { return GetToken(MySQLParser.READ_SYMBOL, 0); }
		public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public ITerminalNode WRITE_SYMBOL() { return GetToken(MySQLParser.WRITE_SYMBOL, 0); }
		public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public LockOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLockOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLockOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockOptionContext lockOption() {
		LockOptionContext _localctx = new LockOptionContext(Context, State);
		EnterRule(_localctx, 426, RULE_lockOption);
		int _la;
		try {
			State = 3675;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case READ_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3667; Match(READ_SYMBOL);
				State = 3669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL) {
					{
					State = 3668; Match(LOCAL_SYMBOL);
					}
				}

				}
				break;
			case LOW_PRIORITY_SYMBOL:
			case WRITE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3672;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOW_PRIORITY_SYMBOL) {
					{
					State = 3671; Match(LOW_PRIORITY_SYMBOL);
					}
				}

				State = 3674; Match(WRITE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaStatementContext : ParserRuleContext {
		public ITerminalNode XA_SYMBOL() { return GetToken(MySQLParser.XA_SYMBOL, 0); }
		public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		public ITerminalNode PREPARE_SYMBOL() { return GetToken(MySQLParser.PREPARE_SYMBOL, 0); }
		public ITerminalNode COMMIT_SYMBOL() { return GetToken(MySQLParser.COMMIT_SYMBOL, 0); }
		public ITerminalNode ROLLBACK_SYMBOL() { return GetToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		public ITerminalNode RECOVER_SYMBOL() { return GetToken(MySQLParser.RECOVER_SYMBOL, 0); }
		public XaConvertContext xaConvert() {
			return GetRuleContext<XaConvertContext>(0);
		}
		public ITerminalNode START_SYMBOL() { return GetToken(MySQLParser.START_SYMBOL, 0); }
		public ITerminalNode BEGIN_SYMBOL() { return GetToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public ITerminalNode SUSPEND_SYMBOL() { return GetToken(MySQLParser.SUSPEND_SYMBOL, 0); }
		public ITerminalNode ONE_SYMBOL() { return GetToken(MySQLParser.ONE_SYMBOL, 0); }
		public ITerminalNode PHASE_SYMBOL() { return GetToken(MySQLParser.PHASE_SYMBOL, 0); }
		public ITerminalNode JOIN_SYMBOL() { return GetToken(MySQLParser.JOIN_SYMBOL, 0); }
		public ITerminalNode RESUME_SYMBOL() { return GetToken(MySQLParser.RESUME_SYMBOL, 0); }
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public ITerminalNode MIGRATE_SYMBOL() { return GetToken(MySQLParser.MIGRATE_SYMBOL, 0); }
		public XaStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterXaStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitXaStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaStatementContext xaStatement() {
		XaStatementContext _localctx = new XaStatementContext(Context, State);
		EnterRule(_localctx, 428, RULE_xaStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3677; Match(XA_SYMBOL);
			State = 3704;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEGIN_SYMBOL:
			case START_SYMBOL:
				{
				State = 3678;
				_la = TokenStream.LA(1);
				if ( !(_la==BEGIN_SYMBOL || _la==START_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3679; xid();
				State = 3681;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RESUME_SYMBOL || _la==JOIN_SYMBOL) {
					{
					State = 3680;
					_la = TokenStream.LA(1);
					if ( !(_la==RESUME_SYMBOL || _la==JOIN_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case END_SYMBOL:
				{
				State = 3683; Match(END_SYMBOL);
				State = 3684; xid();
				State = 3690;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SUSPEND_SYMBOL) {
					{
					State = 3685; Match(SUSPEND_SYMBOL);
					State = 3688;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FOR_SYMBOL) {
						{
						State = 3686; Match(FOR_SYMBOL);
						State = 3687; Match(MIGRATE_SYMBOL);
						}
					}

					}
				}

				}
				break;
			case PREPARE_SYMBOL:
				{
				State = 3692; Match(PREPARE_SYMBOL);
				State = 3693; xid();
				}
				break;
			case COMMIT_SYMBOL:
				{
				State = 3694; Match(COMMIT_SYMBOL);
				State = 3695; xid();
				State = 3698;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ONE_SYMBOL) {
					{
					State = 3696; Match(ONE_SYMBOL);
					State = 3697; Match(PHASE_SYMBOL);
					}
				}

				}
				break;
			case ROLLBACK_SYMBOL:
				{
				State = 3700; Match(ROLLBACK_SYMBOL);
				State = 3701; xid();
				}
				break;
			case RECOVER_SYMBOL:
				{
				State = 3702; Match(RECOVER_SYMBOL);
				State = 3703; xaConvert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaConvertContext : ParserRuleContext {
		public ITerminalNode CONVERT_SYMBOL() { return GetToken(MySQLParser.CONVERT_SYMBOL, 0); }
		public ITerminalNode XID_SYMBOL() { return GetToken(MySQLParser.XID_SYMBOL, 0); }
		public XaConvertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaConvert; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterXaConvert(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitXaConvert(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaConvert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaConvertContext xaConvert() {
		XaConvertContext _localctx = new XaConvertContext(Context, State);
		EnterRule(_localctx, 430, RULE_xaConvert);
		int _la;
		try {
			State = 3712;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,427,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3706;
				if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
				State = 3709;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONVERT_SYMBOL) {
					{
					State = 3707; Match(CONVERT_SYMBOL);
					State = 3708; Match(XID_SYMBOL);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XidContext : ParserRuleContext {
		public TextStringContext[] textString() {
			return GetRuleContexts<TextStringContext>();
		}
		public TextStringContext textString(int i) {
			return GetRuleContext<TextStringContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public XidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterXid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitXid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XidContext xid() {
		XidContext _localctx = new XidContext(Context, State);
		EnterRule(_localctx, 432, RULE_xid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3714; textString();
			State = 3721;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA_SYMBOL) {
				{
				State = 3715; Match(COMMA_SYMBOL);
				State = 3716; textString();
				State = 3719;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 3717; Match(COMMA_SYMBOL);
					State = 3718; ulong_number();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicationStatementContext : ParserRuleContext {
		public ITerminalNode PURGE_SYMBOL() { return GetToken(MySQLParser.PURGE_SYMBOL, 0); }
		public ITerminalNode LOGS_SYMBOL() { return GetToken(MySQLParser.LOGS_SYMBOL, 0); }
		public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public ITerminalNode MASTER_SYMBOL() { return GetToken(MySQLParser.MASTER_SYMBOL, 0); }
		public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode BEFORE_SYMBOL() { return GetToken(MySQLParser.BEFORE_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ChangeMasterContext changeMaster() {
			return GetRuleContext<ChangeMasterContext>(0);
		}
		public ITerminalNode RESET_SYMBOL() { return GetToken(MySQLParser.RESET_SYMBOL, 0); }
		public ResetOptionContext[] resetOption() {
			return GetRuleContexts<ResetOptionContext>();
		}
		public ResetOptionContext resetOption(int i) {
			return GetRuleContext<ResetOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ITerminalNode PERSIST_SYMBOL() { return GetToken(MySQLParser.PERSIST_SYMBOL, 0); }
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SlaveContext slave() {
			return GetRuleContext<SlaveContext>(0);
		}
		public ChangeReplicationContext changeReplication() {
			return GetRuleContext<ChangeReplicationContext>(0);
		}
		public ReplicationLoadContext replicationLoad() {
			return GetRuleContext<ReplicationLoadContext>(0);
		}
		public GroupReplicationContext groupReplication() {
			return GetRuleContext<GroupReplicationContext>(0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReplicationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReplicationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplicationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplicationStatementContext replicationStatement() {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(Context, State);
		EnterRule(_localctx, 434, RULE_replicationStatement);
		int _la;
		try {
			State = 3756;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,433,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3723; Match(PURGE_SYMBOL);
				State = 3724;
				_la = TokenStream.LA(1);
				if ( !(_la==MASTER_SYMBOL || _la==BINARY_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3725; Match(LOGS_SYMBOL);
				State = 3730;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TO_SYMBOL:
					{
					State = 3726; Match(TO_SYMBOL);
					State = 3727; textLiteral();
					}
					break;
				case BEFORE_SYMBOL:
					{
					State = 3728; Match(BEFORE_SYMBOL);
					State = 3729; expr(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3732; changeMaster();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3733; Match(RESET_SYMBOL);
				State = 3734; resetOption();
				State = 3739;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 3735; Match(COMMA_SYMBOL);
					State = 3736; resetOption();
					}
					}
					State = 3741;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3742;
				if (!(serverVersion > 80000)) throw new FailedPredicateException(this, "serverVersion > 80000");
				State = 3743; Match(RESET_SYMBOL);
				State = 3744; Match(PERSIST_SYMBOL);
				State = 3748;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF_SYMBOL) {
					{
					State = 3745; ifExists();
					State = 3746; identifier();
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3750; slave();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3751;
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				State = 3752; changeReplication();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3753; replicationLoad();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3754;
				if (!(serverVersion > 50706)) throw new FailedPredicateException(this, "serverVersion > 50706");
				State = 3755; groupReplication();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetOptionContext : ParserRuleContext {
		public IToken option;
		public ITerminalNode MASTER_SYMBOL() { return GetToken(MySQLParser.MASTER_SYMBOL, 0); }
		public MasterResetOptionsContext masterResetOptions() {
			return GetRuleContext<MasterResetOptionsContext>(0);
		}
		public ITerminalNode CACHE_SYMBOL() { return GetToken(MySQLParser.CACHE_SYMBOL, 0); }
		public ITerminalNode QUERY_SYMBOL() { return GetToken(MySQLParser.QUERY_SYMBOL, 0); }
		public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ResetOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterResetOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitResetOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetOptionContext resetOption() {
		ResetOptionContext _localctx = new ResetOptionContext(Context, State);
		EnterRule(_localctx, 436, RULE_resetOption);
		try {
			State = 3772;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,437,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3758; _localctx.option = Match(MASTER_SYMBOL);
				State = 3760;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,434,Context) ) {
				case 1:
					{
					State = 3759; masterResetOptions();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3762;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 3763; _localctx.option = Match(QUERY_SYMBOL);
				State = 3764; Match(CACHE_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3765; _localctx.option = Match(SLAVE_SYMBOL);
				State = 3767;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,435,Context) ) {
				case 1:
					{
					State = 3766; Match(ALL_SYMBOL);
					}
					break;
				}
				State = 3770;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,436,Context) ) {
				case 1:
					{
					State = 3769; channel();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MasterResetOptionsContext : ParserRuleContext {
		public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		public MasterResetOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_masterResetOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterMasterResetOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitMasterResetOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterResetOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MasterResetOptionsContext masterResetOptions() {
		MasterResetOptionsContext _localctx = new MasterResetOptionsContext(Context, State);
		EnterRule(_localctx, 438, RULE_masterResetOptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3774;
			if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
			State = 3775; Match(TO_SYMBOL);
			State = 3780;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,438,Context) ) {
			case 1:
				{
				State = 3776;
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				State = 3777; real_ulong_number();
				}
				break;
			case 2:
				{
				State = 3778;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 3779; real_ulonglong_number();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicationLoadContext : ParserRuleContext {
		public ITerminalNode LOAD_SYMBOL() { return GetToken(MySQLParser.LOAD_SYMBOL, 0); }
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public ITerminalNode MASTER_SYMBOL() { return GetToken(MySQLParser.MASTER_SYMBOL, 0); }
		public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ReplicationLoadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicationLoad; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReplicationLoad(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReplicationLoad(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplicationLoad(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplicationLoadContext replicationLoad() {
		ReplicationLoadContext _localctx = new ReplicationLoadContext(Context, State);
		EnterRule(_localctx, 440, RULE_replicationLoad);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3782; Match(LOAD_SYMBOL);
			State = 3786;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATA_SYMBOL:
				{
				State = 3783; Match(DATA_SYMBOL);
				}
				break;
			case TABLE_SYMBOL:
				{
				State = 3784; Match(TABLE_SYMBOL);
				State = 3785; tableRef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3788; Match(FROM_SYMBOL);
			State = 3789; Match(MASTER_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeMasterContext : ParserRuleContext {
		public ITerminalNode CHANGE_SYMBOL() { return GetToken(MySQLParser.CHANGE_SYMBOL, 0); }
		public ITerminalNode MASTER_SYMBOL() { return GetToken(MySQLParser.MASTER_SYMBOL, 0); }
		public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		public ChangeMasterOptionsContext changeMasterOptions() {
			return GetRuleContext<ChangeMasterOptionsContext>(0);
		}
		public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ChangeMasterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeMaster; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeMaster(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeMaster(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeMaster(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChangeMasterContext changeMaster() {
		ChangeMasterContext _localctx = new ChangeMasterContext(Context, State);
		EnterRule(_localctx, 442, RULE_changeMaster);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3791; Match(CHANGE_SYMBOL);
			State = 3792; Match(MASTER_SYMBOL);
			State = 3793; Match(TO_SYMBOL);
			State = 3794; changeMasterOptions();
			State = 3796;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,440,Context) ) {
			case 1:
				{
				State = 3795; channel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeMasterOptionsContext : ParserRuleContext {
		public MasterOptionContext[] masterOption() {
			return GetRuleContexts<MasterOptionContext>();
		}
		public MasterOptionContext masterOption(int i) {
			return GetRuleContext<MasterOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ChangeMasterOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeMasterOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeMasterOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeMasterOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeMasterOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChangeMasterOptionsContext changeMasterOptions() {
		ChangeMasterOptionsContext _localctx = new ChangeMasterOptionsContext(Context, State);
		EnterRule(_localctx, 444, RULE_changeMasterOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3798; masterOption();
			State = 3803;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,441,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3799; Match(COMMA_SYMBOL);
					State = 3800; masterOption();
					}
					} 
				}
				State = 3805;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,441,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MasterOptionContext : ParserRuleContext {
		public ITerminalNode MASTER_HOST_SYMBOL() { return GetToken(MySQLParser.MASTER_HOST_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		public ITerminalNode NETWORK_NAMESPACE_SYMBOL() { return GetToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0); }
		public ITerminalNode MASTER_BIND_SYMBOL() { return GetToken(MySQLParser.MASTER_BIND_SYMBOL, 0); }
		public ITerminalNode MASTER_USER_SYMBOL() { return GetToken(MySQLParser.MASTER_USER_SYMBOL, 0); }
		public ITerminalNode MASTER_PASSWORD_SYMBOL() { return GetToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
		public ITerminalNode MASTER_PORT_SYMBOL() { return GetToken(MySQLParser.MASTER_PORT_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public ITerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return GetToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		public ITerminalNode MASTER_RETRY_COUNT_SYMBOL() { return GetToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		public ITerminalNode MASTER_DELAY_SYMBOL() { return GetToken(MySQLParser.MASTER_DELAY_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CA_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
		public ITerminalNode MASTER_TLS_VERSION_SYMBOL() { return GetToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CAPATH_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CERT_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CIPHER_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_KEY_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CRL_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		public ITerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return GetToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		public ITerminalNode GET_MASTER_PUBLIC_KEY_SYMBOL() { return GetToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0); }
		public ITerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return GetToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		public ITerminalNode IGNORE_SERVER_IDS_SYMBOL() { return GetToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		public ServerIdListContext serverIdList() {
			return GetRuleContext<ServerIdListContext>(0);
		}
		public ITerminalNode MASTER_AUTO_POSITION_SYMBOL() { return GetToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		public MasterFileDefContext masterFileDef() {
			return GetRuleContext<MasterFileDefContext>(0);
		}
		public MasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_masterOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterMasterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitMasterOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MasterOptionContext masterOption() {
		MasterOptionContext _localctx = new MasterOptionContext(Context, State);
		EnterRule(_localctx, 446, RULE_masterOption);
		try {
			State = 3879;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MASTER_HOST_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3806; Match(MASTER_HOST_SYMBOL);
				State = 3807; Match(EQUAL_OPERATOR);
				State = 3808; textStringNoLinebreak();
				}
				break;
			case NETWORK_NAMESPACE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3809; Match(NETWORK_NAMESPACE_SYMBOL);
				State = 3810; Match(EQUAL_OPERATOR);
				State = 3811; textStringNoLinebreak();
				}
				break;
			case MASTER_BIND_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3812; Match(MASTER_BIND_SYMBOL);
				State = 3813; Match(EQUAL_OPERATOR);
				State = 3814; textStringNoLinebreak();
				}
				break;
			case MASTER_USER_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3815; Match(MASTER_USER_SYMBOL);
				State = 3816; Match(EQUAL_OPERATOR);
				State = 3817; textStringNoLinebreak();
				}
				break;
			case MASTER_PASSWORD_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3818; Match(MASTER_PASSWORD_SYMBOL);
				State = 3819; Match(EQUAL_OPERATOR);
				State = 3820; textStringNoLinebreak();
				}
				break;
			case MASTER_PORT_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3821; Match(MASTER_PORT_SYMBOL);
				State = 3822; Match(EQUAL_OPERATOR);
				State = 3823; ulong_number();
				}
				break;
			case MASTER_CONNECT_RETRY_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3824; Match(MASTER_CONNECT_RETRY_SYMBOL);
				State = 3825; Match(EQUAL_OPERATOR);
				State = 3826; ulong_number();
				}
				break;
			case MASTER_RETRY_COUNT_SYMBOL:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3827; Match(MASTER_RETRY_COUNT_SYMBOL);
				State = 3828; Match(EQUAL_OPERATOR);
				State = 3829; ulong_number();
				}
				break;
			case MASTER_DELAY_SYMBOL:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3830; Match(MASTER_DELAY_SYMBOL);
				State = 3831; Match(EQUAL_OPERATOR);
				State = 3832; ulong_number();
				}
				break;
			case MASTER_SSL_SYMBOL:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3833; Match(MASTER_SSL_SYMBOL);
				State = 3834; Match(EQUAL_OPERATOR);
				State = 3835; ulong_number();
				}
				break;
			case MASTER_SSL_CA_SYMBOL:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3836; Match(MASTER_SSL_CA_SYMBOL);
				State = 3837; Match(EQUAL_OPERATOR);
				State = 3838; textStringNoLinebreak();
				}
				break;
			case MASTER_TLS_VERSION_SYMBOL:
				EnterOuterAlt(_localctx, 12);
				{
				State = 3839; Match(MASTER_TLS_VERSION_SYMBOL);
				State = 3840; Match(EQUAL_OPERATOR);
				State = 3841; textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_CAPATH_SYMBOL:
				EnterOuterAlt(_localctx, 13);
				{
				State = 3842; Match(MASTER_SSL_CAPATH_SYMBOL);
				State = 3843; Match(EQUAL_OPERATOR);
				State = 3844; textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_CERT_SYMBOL:
				EnterOuterAlt(_localctx, 14);
				{
				State = 3845; Match(MASTER_SSL_CERT_SYMBOL);
				State = 3846; Match(EQUAL_OPERATOR);
				State = 3847; textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_CIPHER_SYMBOL:
				EnterOuterAlt(_localctx, 15);
				{
				State = 3848; Match(MASTER_SSL_CIPHER_SYMBOL);
				State = 3849; Match(EQUAL_OPERATOR);
				State = 3850; textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_KEY_SYMBOL:
				EnterOuterAlt(_localctx, 16);
				{
				State = 3851; Match(MASTER_SSL_KEY_SYMBOL);
				State = 3852; Match(EQUAL_OPERATOR);
				State = 3853; textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL:
				EnterOuterAlt(_localctx, 17);
				{
				State = 3854; Match(MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL);
				State = 3855; Match(EQUAL_OPERATOR);
				State = 3856; ulong_number();
				}
				break;
			case MASTER_SSL_CRL_SYMBOL:
				EnterOuterAlt(_localctx, 18);
				{
				State = 3857; Match(MASTER_SSL_CRL_SYMBOL);
				State = 3858; Match(EQUAL_OPERATOR);
				State = 3859; textLiteral();
				}
				break;
			case MASTER_SSL_CRLPATH_SYMBOL:
				EnterOuterAlt(_localctx, 19);
				{
				State = 3860; Match(MASTER_SSL_CRLPATH_SYMBOL);
				State = 3861; Match(EQUAL_OPERATOR);
				State = 3862; textStringNoLinebreak();
				}
				break;
			case MASTER_PUBLIC_KEY_PATH_SYMBOL:
				EnterOuterAlt(_localctx, 20);
				{
				State = 3863; Match(MASTER_PUBLIC_KEY_PATH_SYMBOL);
				State = 3864; Match(EQUAL_OPERATOR);
				State = 3865; textStringNoLinebreak();
				}
				break;
			case GET_MASTER_PUBLIC_KEY_SYMBOL:
				EnterOuterAlt(_localctx, 21);
				{
				State = 3866; Match(GET_MASTER_PUBLIC_KEY_SYMBOL);
				State = 3867; Match(EQUAL_OPERATOR);
				State = 3868; ulong_number();
				}
				break;
			case MASTER_HEARTBEAT_PERIOD_SYMBOL:
				EnterOuterAlt(_localctx, 22);
				{
				State = 3869; Match(MASTER_HEARTBEAT_PERIOD_SYMBOL);
				State = 3870; Match(EQUAL_OPERATOR);
				State = 3871; ulong_number();
				}
				break;
			case IGNORE_SERVER_IDS_SYMBOL:
				EnterOuterAlt(_localctx, 23);
				{
				State = 3872; Match(IGNORE_SERVER_IDS_SYMBOL);
				State = 3873; Match(EQUAL_OPERATOR);
				State = 3874; serverIdList();
				}
				break;
			case MASTER_AUTO_POSITION_SYMBOL:
				EnterOuterAlt(_localctx, 24);
				{
				State = 3875; Match(MASTER_AUTO_POSITION_SYMBOL);
				State = 3876; Match(EQUAL_OPERATOR);
				State = 3877; ulong_number();
				}
				break;
			case MASTER_LOG_FILE_SYMBOL:
			case MASTER_LOG_POS_SYMBOL:
			case RELAY_LOG_FILE_SYMBOL:
			case RELAY_LOG_POS_SYMBOL:
				EnterOuterAlt(_localctx, 25);
				{
				State = 3878; masterFileDef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MasterFileDefContext : ParserRuleContext {
		public ITerminalNode MASTER_LOG_FILE_SYMBOL() { return GetToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		public ITerminalNode MASTER_LOG_POS_SYMBOL() { return GetToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
		public Ulonglong_numberContext ulonglong_number() {
			return GetRuleContext<Ulonglong_numberContext>(0);
		}
		public ITerminalNode RELAY_LOG_FILE_SYMBOL() { return GetToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
		public ITerminalNode RELAY_LOG_POS_SYMBOL() { return GetToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public MasterFileDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_masterFileDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterMasterFileDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitMasterFileDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterFileDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MasterFileDefContext masterFileDef() {
		MasterFileDefContext _localctx = new MasterFileDefContext(Context, State);
		EnterRule(_localctx, 448, RULE_masterFileDef);
		try {
			State = 3893;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MASTER_LOG_FILE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3881; Match(MASTER_LOG_FILE_SYMBOL);
				State = 3882; Match(EQUAL_OPERATOR);
				State = 3883; textStringNoLinebreak();
				}
				break;
			case MASTER_LOG_POS_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3884; Match(MASTER_LOG_POS_SYMBOL);
				State = 3885; Match(EQUAL_OPERATOR);
				State = 3886; ulonglong_number();
				}
				break;
			case RELAY_LOG_FILE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3887; Match(RELAY_LOG_FILE_SYMBOL);
				State = 3888; Match(EQUAL_OPERATOR);
				State = 3889; textStringNoLinebreak();
				}
				break;
			case RELAY_LOG_POS_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3890; Match(RELAY_LOG_POS_SYMBOL);
				State = 3891; Match(EQUAL_OPERATOR);
				State = 3892; ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerIdListContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public Ulong_numberContext[] ulong_number() {
			return GetRuleContexts<Ulong_numberContext>();
		}
		public Ulong_numberContext ulong_number(int i) {
			return GetRuleContext<Ulong_numberContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ServerIdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverIdList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterServerIdList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitServerIdList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServerIdList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServerIdListContext serverIdList() {
		ServerIdListContext _localctx = new ServerIdListContext(Context, State);
		EnterRule(_localctx, 450, RULE_serverIdList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3895; Match(OPEN_PAR_SYMBOL);
			State = 3904;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (HEX_NUMBER - 380)) | (1L << (DECIMAL_NUMBER - 380)) | (1L << (FLOAT_NUMBER - 380)))) != 0)) {
				{
				State = 3896; ulong_number();
				State = 3901;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 3897; Match(COMMA_SYMBOL);
					State = 3898; ulong_number();
					}
					}
					State = 3903;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 3906; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationContext : ParserRuleContext {
		public ITerminalNode CHANGE_SYMBOL() { return GetToken(MySQLParser.CHANGE_SYMBOL, 0); }
		public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public ITerminalNode FILTER_SYMBOL() { return GetToken(MySQLParser.FILTER_SYMBOL, 0); }
		public FilterDefinitionContext[] filterDefinition() {
			return GetRuleContexts<FilterDefinitionContext>();
		}
		public FilterDefinitionContext filterDefinition(int i) {
			return GetRuleContext<FilterDefinitionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ChangeReplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplication; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplication(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeReplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationContext changeReplication() {
		ChangeReplicationContext _localctx = new ChangeReplicationContext(Context, State);
		EnterRule(_localctx, 452, RULE_changeReplication);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3908; Match(CHANGE_SYMBOL);
			State = 3909; Match(REPLICATION_SYMBOL);
			State = 3910; Match(FILTER_SYMBOL);
			State = 3911; filterDefinition();
			State = 3916;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,446,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3912; Match(COMMA_SYMBOL);
					State = 3913; filterDefinition();
					}
					} 
				}
				State = 3918;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,446,Context);
			}
			State = 3921;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,447,Context) ) {
			case 1:
				{
				State = 3919;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 3920; channel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterDefinitionContext : ParserRuleContext {
		public ITerminalNode REPLICATE_DO_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FilterDbListContext filterDbList() {
			return GetRuleContext<FilterDbListContext>(0);
		}
		public ITerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		public ITerminalNode REPLICATE_DO_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		public FilterTableListContext filterTableList() {
			return GetRuleContext<FilterTableListContext>(0);
		}
		public ITerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		public ITerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		public FilterStringListContext filterStringList() {
			return GetRuleContext<FilterStringListContext>(0);
		}
		public ITerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		public ITerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		public FilterDbPairListContext filterDbPairList() {
			return GetRuleContext<FilterDbPairListContext>(0);
		}
		public FilterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFilterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFilterDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterDefinitionContext filterDefinition() {
		FilterDefinitionContext _localctx = new FilterDefinitionContext(Context, State);
		EnterRule(_localctx, 454, RULE_filterDefinition);
		int _la;
		try {
			State = 3972;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REPLICATE_DO_DB_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3923; Match(REPLICATE_DO_DB_SYMBOL);
				State = 3924; Match(EQUAL_OPERATOR);
				State = 3925; Match(OPEN_PAR_SYMBOL);
				State = 3927;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,448,Context) ) {
				case 1:
					{
					State = 3926; filterDbList();
					}
					break;
				}
				State = 3929; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_IGNORE_DB_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3930; Match(REPLICATE_IGNORE_DB_SYMBOL);
				State = 3931; Match(EQUAL_OPERATOR);
				State = 3932; Match(OPEN_PAR_SYMBOL);
				State = 3934;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,449,Context) ) {
				case 1:
					{
					State = 3933; filterDbList();
					}
					break;
				}
				State = 3936; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_DO_TABLE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3937; Match(REPLICATE_DO_TABLE_SYMBOL);
				State = 3938; Match(EQUAL_OPERATOR);
				State = 3939; Match(OPEN_PAR_SYMBOL);
				State = 3941;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,450,Context) ) {
				case 1:
					{
					State = 3940; filterTableList();
					}
					break;
				}
				State = 3943; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_IGNORE_TABLE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3944; Match(REPLICATE_IGNORE_TABLE_SYMBOL);
				State = 3945; Match(EQUAL_OPERATOR);
				State = 3946; Match(OPEN_PAR_SYMBOL);
				State = 3948;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,451,Context) ) {
				case 1:
					{
					State = 3947; filterTableList();
					}
					break;
				}
				State = 3950; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_WILD_DO_TABLE_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3951; Match(REPLICATE_WILD_DO_TABLE_SYMBOL);
				State = 3952; Match(EQUAL_OPERATOR);
				State = 3953; Match(OPEN_PAR_SYMBOL);
				State = 3955;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,452,Context) ) {
				case 1:
					{
					State = 3954; filterStringList();
					}
					break;
				}
				State = 3957; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3958; Match(REPLICATE_WILD_IGNORE_TABLE_SYMBOL);
				State = 3959; Match(EQUAL_OPERATOR);
				State = 3960; Match(OPEN_PAR_SYMBOL);
				State = 3962;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,453,Context) ) {
				case 1:
					{
					State = 3961; filterStringList();
					}
					break;
				}
				State = 3964; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_REWRITE_DB_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3965; Match(REPLICATE_REWRITE_DB_SYMBOL);
				State = 3966; Match(EQUAL_OPERATOR);
				State = 3967; Match(OPEN_PAR_SYMBOL);
				State = 3969;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAR_SYMBOL) {
					{
					State = 3968; filterDbPairList();
					}
				}

				State = 3971; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterDbListContext : ParserRuleContext {
		public SchemaRefContext[] schemaRef() {
			return GetRuleContexts<SchemaRefContext>();
		}
		public SchemaRefContext schemaRef(int i) {
			return GetRuleContext<SchemaRefContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterDbListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterDbList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFilterDbList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFilterDbList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterDbList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterDbListContext filterDbList() {
		FilterDbListContext _localctx = new FilterDbListContext(Context, State);
		EnterRule(_localctx, 456, RULE_filterDbList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3974; schemaRef();
			State = 3979;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 3975; Match(COMMA_SYMBOL);
				State = 3976; schemaRef();
				}
				}
				State = 3981;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterTableListContext : ParserRuleContext {
		public FilterTableRefContext[] filterTableRef() {
			return GetRuleContexts<FilterTableRefContext>();
		}
		public FilterTableRefContext filterTableRef(int i) {
			return GetRuleContext<FilterTableRefContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterTableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterTableList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFilterTableList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFilterTableList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterTableList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterTableListContext filterTableList() {
		FilterTableListContext _localctx = new FilterTableListContext(Context, State);
		EnterRule(_localctx, 458, RULE_filterTableList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3982; filterTableRef();
			State = 3987;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 3983; Match(COMMA_SYMBOL);
				State = 3984; filterTableRef();
				}
				}
				State = 3989;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterStringListContext : ParserRuleContext {
		public FilterWildDbTableStringContext[] filterWildDbTableString() {
			return GetRuleContexts<FilterWildDbTableStringContext>();
		}
		public FilterWildDbTableStringContext filterWildDbTableString(int i) {
			return GetRuleContext<FilterWildDbTableStringContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterStringListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterStringList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFilterStringList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFilterStringList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterStringList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterStringListContext filterStringList() {
		FilterStringListContext _localctx = new FilterStringListContext(Context, State);
		EnterRule(_localctx, 460, RULE_filterStringList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3990; filterWildDbTableString();
			State = 3995;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 3991; Match(COMMA_SYMBOL);
				State = 3992; filterWildDbTableString();
				}
				}
				State = 3997;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterWildDbTableStringContext : ParserRuleContext {
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		public FilterWildDbTableStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterWildDbTableString; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFilterWildDbTableString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFilterWildDbTableString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterWildDbTableString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterWildDbTableStringContext filterWildDbTableString() {
		FilterWildDbTableStringContext _localctx = new FilterWildDbTableStringContext(Context, State);
		EnterRule(_localctx, 462, RULE_filterWildDbTableString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3998; textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterDbPairListContext : ParserRuleContext {
		public SchemaIdentifierPairContext[] schemaIdentifierPair() {
			return GetRuleContexts<SchemaIdentifierPairContext>();
		}
		public SchemaIdentifierPairContext schemaIdentifierPair(int i) {
			return GetRuleContext<SchemaIdentifierPairContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterDbPairListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterDbPairList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFilterDbPairList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFilterDbPairList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterDbPairList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterDbPairListContext filterDbPairList() {
		FilterDbPairListContext _localctx = new FilterDbPairListContext(Context, State);
		EnterRule(_localctx, 464, RULE_filterDbPairList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4000; schemaIdentifierPair();
			State = 4005;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4001; Match(COMMA_SYMBOL);
				State = 4002; schemaIdentifierPair();
				}
				}
				State = 4007;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlaveContext : ParserRuleContext {
		public ITerminalNode START_SYMBOL() { return GetToken(MySQLParser.START_SYMBOL, 0); }
		public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public SlaveConnectionOptionsContext slaveConnectionOptions() {
			return GetRuleContext<SlaveConnectionOptionsContext>(0);
		}
		public SlaveThreadOptionsContext slaveThreadOptions() {
			return GetRuleContext<SlaveThreadOptionsContext>(0);
		}
		public ITerminalNode UNTIL_SYMBOL() { return GetToken(MySQLParser.UNTIL_SYMBOL, 0); }
		public SlaveUntilOptionsContext slaveUntilOptions() {
			return GetRuleContext<SlaveUntilOptionsContext>(0);
		}
		public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ITerminalNode STOP_SYMBOL() { return GetToken(MySQLParser.STOP_SYMBOL, 0); }
		public SlaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slave; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSlave(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSlave(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SlaveContext slave() {
		SlaveContext _localctx = new SlaveContext(Context, State);
		EnterRule(_localctx, 466, RULE_slave);
		try {
			State = 4029;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case START_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4008; Match(START_SYMBOL);
				State = 4009; Match(SLAVE_SYMBOL);
				State = 4011;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,460,Context) ) {
				case 1:
					{
					State = 4010; slaveThreadOptions();
					}
					break;
				}
				State = 4015;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,461,Context) ) {
				case 1:
					{
					State = 4013; Match(UNTIL_SYMBOL);
					State = 4014; slaveUntilOptions();
					}
					break;
				}
				State = 4017; slaveConnectionOptions();
				State = 4019;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,462,Context) ) {
				case 1:
					{
					State = 4018; channel();
					}
					break;
				}
				}
				break;
			case STOP_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4021; Match(STOP_SYMBOL);
				State = 4022; Match(SLAVE_SYMBOL);
				State = 4024;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,463,Context) ) {
				case 1:
					{
					State = 4023; slaveThreadOptions();
					}
					break;
				}
				State = 4027;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,464,Context) ) {
				case 1:
					{
					State = 4026; channel();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlaveUntilOptionsContext : ParserRuleContext {
		public MasterFileDefContext[] masterFileDef() {
			return GetRuleContexts<MasterFileDefContext>();
		}
		public MasterFileDefContext masterFileDef(int i) {
			return GetRuleContext<MasterFileDefContext>(i);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public ITerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return GetToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		public ITerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return GetToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		public ITerminalNode SQL_AFTER_GTIDS_SYMBOL() { return GetToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SlaveUntilOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slaveUntilOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSlaveUntilOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSlaveUntilOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlaveUntilOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SlaveUntilOptionsContext slaveUntilOptions() {
		SlaveUntilOptionsContext _localctx = new SlaveUntilOptionsContext(Context, State);
		EnterRule(_localctx, 468, RULE_slaveUntilOptions);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4038;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,466,Context) ) {
			case 1:
				{
				State = 4031; masterFileDef();
				}
				break;
			case 2:
				{
				State = 4032;
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				State = 4033;
				_la = TokenStream.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS_SYMBOL || _la==SQL_BEFORE_GTIDS_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4034; Match(EQUAL_OPERATOR);
				State = 4035; textString();
				}
				break;
			case 3:
				{
				State = 4036;
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				State = 4037; Match(SQL_AFTER_MTS_GAPS_SYMBOL);
				}
				break;
			}
			State = 4044;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,467,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4040; Match(COMMA_SYMBOL);
					State = 4041; masterFileDef();
					}
					} 
				}
				State = 4046;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,467,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlaveConnectionOptionsContext : ParserRuleContext {
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public ITerminalNode[] EQUAL_OPERATOR() { return GetTokens(MySQLParser.EQUAL_OPERATOR); }
		public ITerminalNode EQUAL_OPERATOR(int i) {
			return GetToken(MySQLParser.EQUAL_OPERATOR, i);
		}
		public TextStringContext[] textString() {
			return GetRuleContexts<TextStringContext>();
		}
		public TextStringContext textString(int i) {
			return GetRuleContext<TextStringContext>(i);
		}
		public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public ITerminalNode DEFAULT_AUTH_SYMBOL() { return GetToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
		public ITerminalNode PLUGIN_DIR_SYMBOL() { return GetToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0); }
		public SlaveConnectionOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slaveConnectionOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSlaveConnectionOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSlaveConnectionOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlaveConnectionOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SlaveConnectionOptionsContext slaveConnectionOptions() {
		SlaveConnectionOptionsContext _localctx = new SlaveConnectionOptionsContext(Context, State);
		EnterRule(_localctx, 470, RULE_slaveConnectionOptions);
		try {
			State = 4069;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,472,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4047;
				if (!(serverVersion >= 50604)) throw new FailedPredicateException(this, "serverVersion >= 50604");
				State = 4051;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,468,Context) ) {
				case 1:
					{
					State = 4048; Match(USER_SYMBOL);
					State = 4049; Match(EQUAL_OPERATOR);
					State = 4050; textString();
					}
					break;
				}
				State = 4056;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,469,Context) ) {
				case 1:
					{
					State = 4053; Match(PASSWORD_SYMBOL);
					State = 4054; Match(EQUAL_OPERATOR);
					State = 4055; textString();
					}
					break;
				}
				State = 4061;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,470,Context) ) {
				case 1:
					{
					State = 4058; Match(DEFAULT_AUTH_SYMBOL);
					State = 4059; Match(EQUAL_OPERATOR);
					State = 4060; textString();
					}
					break;
				}
				State = 4066;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,471,Context) ) {
				case 1:
					{
					State = 4063; Match(PLUGIN_DIR_SYMBOL);
					State = 4064; Match(EQUAL_OPERATOR);
					State = 4065; textString();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlaveThreadOptionsContext : ParserRuleContext {
		public SlaveThreadOptionContext[] slaveThreadOption() {
			return GetRuleContexts<SlaveThreadOptionContext>();
		}
		public SlaveThreadOptionContext slaveThreadOption(int i) {
			return GetRuleContext<SlaveThreadOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SlaveThreadOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slaveThreadOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSlaveThreadOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSlaveThreadOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlaveThreadOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SlaveThreadOptionsContext slaveThreadOptions() {
		SlaveThreadOptionsContext _localctx = new SlaveThreadOptionsContext(Context, State);
		EnterRule(_localctx, 472, RULE_slaveThreadOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4071; slaveThreadOption();
			State = 4076;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,473,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4072; Match(COMMA_SYMBOL);
					State = 4073; slaveThreadOption();
					}
					} 
				}
				State = 4078;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,473,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlaveThreadOptionContext : ParserRuleContext {
		public ITerminalNode RELAY_THREAD_SYMBOL() { return GetToken(MySQLParser.RELAY_THREAD_SYMBOL, 0); }
		public ITerminalNode SQL_THREAD_SYMBOL() { return GetToken(MySQLParser.SQL_THREAD_SYMBOL, 0); }
		public SlaveThreadOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slaveThreadOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSlaveThreadOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSlaveThreadOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlaveThreadOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SlaveThreadOptionContext slaveThreadOption() {
		SlaveThreadOptionContext _localctx = new SlaveThreadOptionContext(Context, State);
		EnterRule(_localctx, 474, RULE_slaveThreadOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4079;
			_la = TokenStream.LA(1);
			if ( !(_la==RELAY_THREAD_SYMBOL || _la==SQL_THREAD_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupReplicationContext : ParserRuleContext {
		public ITerminalNode GROUP_REPLICATION_SYMBOL() { return GetToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
		public ITerminalNode START_SYMBOL() { return GetToken(MySQLParser.START_SYMBOL, 0); }
		public ITerminalNode STOP_SYMBOL() { return GetToken(MySQLParser.STOP_SYMBOL, 0); }
		public GroupReplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupReplication; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGroupReplication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGroupReplication(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupReplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupReplicationContext groupReplication() {
		GroupReplicationContext _localctx = new GroupReplicationContext(Context, State);
		EnterRule(_localctx, 476, RULE_groupReplication);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4081;
			_la = TokenStream.LA(1);
			if ( !(_la==START_SYMBOL || _la==STOP_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4082; Match(GROUP_REPLICATION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreparedStatementContext : ParserRuleContext {
		public IToken type;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public ITerminalNode PREPARE_SYMBOL() { return GetToken(MySQLParser.PREPARE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		public ExecuteStatementContext executeStatement() {
			return GetRuleContext<ExecuteStatementContext>(0);
		}
		public ITerminalNode DEALLOCATE_SYMBOL() { return GetToken(MySQLParser.DEALLOCATE_SYMBOL, 0); }
		public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		public PreparedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preparedStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPreparedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPreparedStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreparedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreparedStatementContext preparedStatement() {
		PreparedStatementContext _localctx = new PreparedStatementContext(Context, State);
		EnterRule(_localctx, 478, RULE_preparedStatement);
		int _la;
		try {
			State = 4095;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PREPARE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4084; _localctx.type = Match(PREPARE_SYMBOL);
				State = 4085; identifier();
				State = 4086; Match(FROM_SYMBOL);
				State = 4089;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,474,Context) ) {
				case 1:
					{
					State = 4087; textLiteral();
					}
					break;
				case 2:
					{
					State = 4088; userVariable();
					}
					break;
				}
				}
				break;
			case EXECUTE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4091; executeStatement();
				}
				break;
			case DEALLOCATE_SYMBOL:
			case DROP_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4092;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEALLOCATE_SYMBOL || _la==DROP_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4093; Match(PREPARE_SYMBOL);
				State = 4094; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteStatementContext : ParserRuleContext {
		public ITerminalNode EXECUTE_SYMBOL() { return GetToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode USING_SYMBOL() { return GetToken(MySQLParser.USING_SYMBOL, 0); }
		public ExecuteVarListContext executeVarList() {
			return GetRuleContext<ExecuteVarListContext>(0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExecuteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExecuteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecuteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteStatementContext executeStatement() {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(Context, State);
		EnterRule(_localctx, 480, RULE_executeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4097; Match(EXECUTE_SYMBOL);
			State = 4098; identifier();
			State = 4101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING_SYMBOL) {
				{
				State = 4099; Match(USING_SYMBOL);
				State = 4100; executeVarList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteVarListContext : ParserRuleContext {
		public UserVariableContext[] userVariable() {
			return GetRuleContexts<UserVariableContext>();
		}
		public UserVariableContext userVariable(int i) {
			return GetRuleContext<UserVariableContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ExecuteVarListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeVarList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExecuteVarList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExecuteVarList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecuteVarList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteVarListContext executeVarList() {
		ExecuteVarListContext _localctx = new ExecuteVarListContext(Context, State);
		EnterRule(_localctx, 482, RULE_executeVarList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4103; userVariable();
			State = 4108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4104; Match(COMMA_SYMBOL);
				State = 4105; userVariable();
				}
				}
				State = 4110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloneStatementContext : ParserRuleContext {
		public ITerminalNode CLONE_SYMBOL() { return GetToken(MySQLParser.CLONE_SYMBOL, 0); }
		public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ITerminalNode REMOTE_SYMBOL() { return GetToken(MySQLParser.REMOTE_SYMBOL, 0); }
		public ITerminalNode INSTANCE_SYMBOL() { return GetToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		public ITerminalNode COLON_SYMBOL() { return GetToken(MySQLParser.COLON_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public DataDirSSLContext dataDirSSL() {
			return GetRuleContext<DataDirSSLContext>(0);
		}
		public CloneStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cloneStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCloneStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCloneStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloneStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloneStatementContext cloneStatement() {
		CloneStatementContext _localctx = new CloneStatementContext(Context, State);
		EnterRule(_localctx, 484, RULE_cloneStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4111; Match(CLONE_SYMBOL);
			State = 4136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,481,Context) ) {
			case 1:
				{
				State = 4112; Match(LOCAL_SYMBOL);
				State = 4113; Match(DATA_SYMBOL);
				State = 4114; Match(DIRECTORY_SYMBOL);
				State = 4116;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,478,Context) ) {
				case 1:
					{
					State = 4115; equal();
					}
					break;
				}
				State = 4118; textStringLiteral();
				}
				break;
			case 2:
				{
				State = 4119; Match(REMOTE_SYMBOL);
				State = 4122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 4120; Match(FOR_SYMBOL);
					State = 4121; Match(REPLICATION_SYMBOL);
					}
				}

				}
				break;
			case 3:
				{
				State = 4124;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 4125; Match(INSTANCE_SYMBOL);
				State = 4126; Match(FROM_SYMBOL);
				State = 4127; user();
				State = 4128; Match(COLON_SYMBOL);
				State = 4129; ulong_number();
				State = 4130; Match(IDENTIFIED_SYMBOL);
				State = 4131; Match(BY_SYMBOL);
				State = 4132; textStringLiteral();
				State = 4134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DATA_SYMBOL || _la==REQUIRE_SYMBOL) {
					{
					State = 4133; dataDirSSL();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataDirSSLContext : ParserRuleContext {
		public SslContext ssl() {
			return GetRuleContext<SslContext>(0);
		}
		public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public DataDirSSLContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataDirSSL; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDataDirSSL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDataDirSSL(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataDirSSL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataDirSSLContext dataDirSSL() {
		DataDirSSLContext _localctx = new DataDirSSLContext(Context, State);
		EnterRule(_localctx, 486, RULE_dataDirSSL);
		int _la;
		try {
			State = 4148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REQUIRE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4138; ssl();
				}
				break;
			case DATA_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4139; Match(DATA_SYMBOL);
				State = 4140; Match(DIRECTORY_SYMBOL);
				State = 4142;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,482,Context) ) {
				case 1:
					{
					State = 4141; equal();
					}
					break;
				}
				State = 4144; textStringLiteral();
				State = 4146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRE_SYMBOL) {
					{
					State = 4145; ssl();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SslContext : ParserRuleContext {
		public ITerminalNode REQUIRE_SYMBOL() { return GetToken(MySQLParser.REQUIRE_SYMBOL, 0); }
		public ITerminalNode SSL_SYMBOL() { return GetToken(MySQLParser.SSL_SYMBOL, 0); }
		public ITerminalNode NO_SYMBOL() { return GetToken(MySQLParser.NO_SYMBOL, 0); }
		public SslContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ssl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSsl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSsl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSsl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SslContext ssl() {
		SslContext _localctx = new SslContext(Context, State);
		EnterRule(_localctx, 488, RULE_ssl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4150; Match(REQUIRE_SYMBOL);
			State = 4152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_SYMBOL) {
				{
				State = 4151; Match(NO_SYMBOL);
				}
			}

			State = 4154; Match(SSL_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccountManagementStatementContext : ParserRuleContext {
		public AlterUserContext alterUser() {
			return GetRuleContext<AlterUserContext>(0);
		}
		public CreateUserContext createUser() {
			return GetRuleContext<CreateUserContext>(0);
		}
		public DropUserContext dropUser() {
			return GetRuleContext<DropUserContext>(0);
		}
		public GrantContext grant() {
			return GetRuleContext<GrantContext>(0);
		}
		public RenameUserContext renameUser() {
			return GetRuleContext<RenameUserContext>(0);
		}
		public RevokeContext revoke() {
			return GetRuleContext<RevokeContext>(0);
		}
		public SetPasswordContext setPassword() {
			return GetRuleContext<SetPasswordContext>(0);
		}
		public SetRoleContext setRole() {
			return GetRuleContext<SetRoleContext>(0);
		}
		public AccountManagementStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accountManagementStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAccountManagementStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAccountManagementStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccountManagementStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccountManagementStatementContext accountManagementStatement() {
		AccountManagementStatementContext _localctx = new AccountManagementStatementContext(Context, State);
		EnterRule(_localctx, 490, RULE_accountManagementStatement);
		try {
			State = 4166;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,486,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4156;
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				State = 4157; alterUser();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4158; createUser();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4159; dropUser();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4160; grant();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4161; renameUser();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4162; revoke();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4163; setPassword();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4164;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 4165; setRole();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUserContext : ParserRuleContext {
		public ITerminalNode ALTER_SYMBOL() { return GetToken(MySQLParser.ALTER_SYMBOL, 0); }
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public AlterUserTailContext alterUserTail() {
			return GetRuleContext<AlterUserTailContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public AlterUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUser; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterUser(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterUser(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterUser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterUserContext alterUser() {
		AlterUserContext _localctx = new AlterUserContext(Context, State);
		EnterRule(_localctx, 492, RULE_alterUser);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4168; Match(ALTER_SYMBOL);
			State = 4169; Match(USER_SYMBOL);
			State = 4172;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,487,Context) ) {
			case 1:
				{
				State = 4170;
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				State = 4171; ifExists();
				}
				break;
			}
			State = 4174; alterUserTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUserTailContext : ParserRuleContext {
		public CreateUserTailContext createUserTail() {
			return GetRuleContext<CreateUserTailContext>(0);
		}
		public CreateUserListContext createUserList() {
			return GetRuleContext<CreateUserListContext>(0);
		}
		public AlterUserListContext alterUserList() {
			return GetRuleContext<AlterUserListContext>(0);
		}
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public ReplacePasswordContext replacePassword() {
			return GetRuleContext<ReplacePasswordContext>(0);
		}
		public RetainCurrentPasswordContext retainCurrentPassword() {
			return GetRuleContext<RetainCurrentPasswordContext>(0);
		}
		public DiscardOldPasswordContext discardOldPassword() {
			return GetRuleContext<DiscardOldPasswordContext>(0);
		}
		public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public ITerminalNode NONE_SYMBOL() { return GetToken(MySQLParser.NONE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		public AlterUserTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUserTail; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterUserTail(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterUserTail(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterUserTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterUserTailContext alterUserTail() {
		AlterUserTailContext _localctx = new AlterUserTailContext(Context, State);
		EnterRule(_localctx, 494, RULE_alterUserTail);
		try {
			State = 4212;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,492,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4180;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,488,Context) ) {
				case 1:
					{
					State = 4176;
					if (!(serverVersion < 80014)) throw new FailedPredicateException(this, "serverVersion < 80014");
					State = 4177; createUserList();
					}
					break;
				case 2:
					{
					State = 4178;
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					State = 4179; alterUserList();
					}
					break;
				}
				State = 4182; createUserTail();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4184;
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				State = 4185; Match(USER_SYMBOL);
				State = 4186; parentheses();
				State = 4187; Match(IDENTIFIED_SYMBOL);
				State = 4188; Match(BY_SYMBOL);
				State = 4189; textString();
				State = 4192;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,489,Context) ) {
				case 1:
					{
					State = 4190;
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					State = 4191; replacePassword();
					}
					break;
				}
				State = 4196;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,490,Context) ) {
				case 1:
					{
					State = 4194;
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					State = 4195; retainCurrentPassword();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4198;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 4199; Match(USER_SYMBOL);
				State = 4200; parentheses();
				State = 4201; discardOldPassword();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4203;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 4204; user();
				State = 4205; Match(DEFAULT_SYMBOL);
				State = 4206; Match(ROLE_SYMBOL);
				State = 4210;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,491,Context) ) {
				case 1:
					{
					State = 4207; Match(ALL_SYMBOL);
					}
					break;
				case 2:
					{
					State = 4208; Match(NONE_SYMBOL);
					}
					break;
				case 3:
					{
					State = 4209; roleList();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserContext : ParserRuleContext {
		public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public CreateUserListContext createUserList() {
			return GetRuleContext<CreateUserListContext>(0);
		}
		public DefaultRoleClauseContext defaultRoleClause() {
			return GetRuleContext<DefaultRoleClauseContext>(0);
		}
		public CreateUserTailContext createUserTail() {
			return GetRuleContext<CreateUserTailContext>(0);
		}
		public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CreateUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUser; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateUser(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateUser(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserContext createUser() {
		CreateUserContext _localctx = new CreateUserContext(Context, State);
		EnterRule(_localctx, 496, RULE_createUser);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4214; Match(CREATE_SYMBOL);
			State = 4215; Match(USER_SYMBOL);
			State = 4219;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,493,Context) ) {
			case 1:
				{
				State = 4216;
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				State = 4217; ifNotExists();
				}
				break;
			case 2:
				{
				}
				break;
			}
			State = 4221; createUserList();
			State = 4222; defaultRoleClause();
			State = 4223; createUserTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserTailContext : ParserRuleContext {
		public RequireClauseContext requireClause() {
			return GetRuleContext<RequireClauseContext>(0);
		}
		public ConnectOptionsContext connectOptions() {
			return GetRuleContext<ConnectOptionsContext>(0);
		}
		public AccountLockPasswordExpireOptionsContext[] accountLockPasswordExpireOptions() {
			return GetRuleContexts<AccountLockPasswordExpireOptionsContext>();
		}
		public AccountLockPasswordExpireOptionsContext accountLockPasswordExpireOptions(int i) {
			return GetRuleContext<AccountLockPasswordExpireOptionsContext>(i);
		}
		public CreateUserTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUserTail; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateUserTail(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateUserTail(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUserTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserTailContext createUserTail() {
		CreateUserTailContext _localctx = new CreateUserTailContext(Context, State);
		EnterRule(_localctx, 498, RULE_createUserTail);
		int _la;
		try {
			State = 4239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,497,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4225;
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				State = 4227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRE_SYMBOL) {
					{
					State = 4226; requireClause();
					}
				}

				State = 4230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					State = 4229; connectOptions();
					}
				}

				State = 4235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ACCOUNT_SYMBOL || _la==PASSWORD_SYMBOL) {
					{
					{
					State = 4232; accountLockPasswordExpireOptions();
					}
					}
					State = 4237;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultRoleClauseContext : ParserRuleContext {
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		public DefaultRoleClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultRoleClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDefaultRoleClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDefaultRoleClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultRoleClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultRoleClauseContext defaultRoleClause() {
		DefaultRoleClauseContext _localctx = new DefaultRoleClauseContext(Context, State);
		EnterRule(_localctx, 500, RULE_defaultRoleClause);
		try {
			State = 4248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,499,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4241;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 4245;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,498,Context) ) {
				case 1:
					{
					State = 4242; Match(DEFAULT_SYMBOL);
					State = 4243; Match(ROLE_SYMBOL);
					State = 4244; roleList();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireClauseContext : ParserRuleContext {
		public IToken option;
		public ITerminalNode REQUIRE_SYMBOL() { return GetToken(MySQLParser.REQUIRE_SYMBOL, 0); }
		public RequireListContext requireList() {
			return GetRuleContext<RequireListContext>(0);
		}
		public ITerminalNode SSL_SYMBOL() { return GetToken(MySQLParser.SSL_SYMBOL, 0); }
		public ITerminalNode X509_SYMBOL() { return GetToken(MySQLParser.X509_SYMBOL, 0); }
		public ITerminalNode NONE_SYMBOL() { return GetToken(MySQLParser.NONE_SYMBOL, 0); }
		public RequireClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requireClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRequireClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRequireClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequireClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequireClauseContext requireClause() {
		RequireClauseContext _localctx = new RequireClauseContext(Context, State);
		EnterRule(_localctx, 502, RULE_requireClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4250; Match(REQUIRE_SYMBOL);
			State = 4253;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CIPHER_SYMBOL:
			case ISSUER_SYMBOL:
			case SUBJECT_SYMBOL:
				{
				State = 4251; requireList();
				}
				break;
			case NONE_SYMBOL:
			case X509_SYMBOL:
			case SSL_SYMBOL:
				{
				State = 4252;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NONE_SYMBOL || _la==X509_SYMBOL || _la==SSL_SYMBOL) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnectOptionsContext : ParserRuleContext {
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode[] MAX_QUERIES_PER_HOUR_SYMBOL() { return GetTokens(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL); }
		public ITerminalNode MAX_QUERIES_PER_HOUR_SYMBOL(int i) {
			return GetToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, i);
		}
		public Ulong_numberContext[] ulong_number() {
			return GetRuleContexts<Ulong_numberContext>();
		}
		public Ulong_numberContext ulong_number(int i) {
			return GetRuleContext<Ulong_numberContext>(i);
		}
		public ITerminalNode[] MAX_UPDATES_PER_HOUR_SYMBOL() { return GetTokens(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL); }
		public ITerminalNode MAX_UPDATES_PER_HOUR_SYMBOL(int i) {
			return GetToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, i);
		}
		public ITerminalNode[] MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return GetTokens(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL); }
		public ITerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL(int i) {
			return GetToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, i);
		}
		public ITerminalNode[] MAX_USER_CONNECTIONS_SYMBOL() { return GetTokens(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL); }
		public ITerminalNode MAX_USER_CONNECTIONS_SYMBOL(int i) {
			return GetToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, i);
		}
		public ConnectOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connectOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterConnectOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitConnectOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConnectOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConnectOptionsContext connectOptions() {
		ConnectOptionsContext _localctx = new ConnectOptionsContext(Context, State);
		EnterRule(_localctx, 504, RULE_connectOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4255; Match(WITH_SYMBOL);
			State = 4264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 4264;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MAX_QUERIES_PER_HOUR_SYMBOL:
					{
					State = 4256; Match(MAX_QUERIES_PER_HOUR_SYMBOL);
					State = 4257; ulong_number();
					}
					break;
				case MAX_UPDATES_PER_HOUR_SYMBOL:
					{
					State = 4258; Match(MAX_UPDATES_PER_HOUR_SYMBOL);
					State = 4259; ulong_number();
					}
					break;
				case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
					{
					State = 4260; Match(MAX_CONNECTIONS_PER_HOUR_SYMBOL);
					State = 4261; ulong_number();
					}
					break;
				case MAX_USER_CONNECTIONS_SYMBOL:
					{
					State = 4262; Match(MAX_USER_CONNECTIONS_SYMBOL);
					State = 4263; ulong_number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 4266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (MAX_CONNECTIONS_PER_HOUR_SYMBOL - 207)) | (1L << (MAX_QUERIES_PER_HOUR_SYMBOL - 207)) | (1L << (MAX_UPDATES_PER_HOUR_SYMBOL - 207)) | (1L << (MAX_USER_CONNECTIONS_SYMBOL - 207)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccountLockPasswordExpireOptionsContext : ParserRuleContext {
		public ITerminalNode ACCOUNT_SYMBOL() { return GetToken(MySQLParser.ACCOUNT_SYMBOL, 0); }
		public ITerminalNode LOCK_SYMBOL() { return GetToken(MySQLParser.LOCK_SYMBOL, 0); }
		public ITerminalNode UNLOCK_SYMBOL() { return GetToken(MySQLParser.UNLOCK_SYMBOL, 0); }
		public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public ITerminalNode EXPIRE_SYMBOL() { return GetToken(MySQLParser.EXPIRE_SYMBOL, 0); }
		public ITerminalNode HISTORY_SYMBOL() { return GetToken(MySQLParser.HISTORY_SYMBOL, 0); }
		public ITerminalNode REUSE_SYMBOL() { return GetToken(MySQLParser.REUSE_SYMBOL, 0); }
		public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public ITerminalNode REQUIRE_SYMBOL() { return GetToken(MySQLParser.REQUIRE_SYMBOL, 0); }
		public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ITerminalNode DAY_SYMBOL() { return GetToken(MySQLParser.DAY_SYMBOL, 0); }
		public ITerminalNode NEVER_SYMBOL() { return GetToken(MySQLParser.NEVER_SYMBOL, 0); }
		public ITerminalNode OPTIONAL_SYMBOL() { return GetToken(MySQLParser.OPTIONAL_SYMBOL, 0); }
		public AccountLockPasswordExpireOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accountLockPasswordExpireOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAccountLockPasswordExpireOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAccountLockPasswordExpireOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccountLockPasswordExpireOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccountLockPasswordExpireOptionsContext accountLockPasswordExpireOptions() {
		AccountLockPasswordExpireOptionsContext _localctx = new AccountLockPasswordExpireOptionsContext(Context, State);
		EnterRule(_localctx, 506, RULE_accountLockPasswordExpireOptions);
		int _la;
		try {
			State = 4301;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4268; Match(ACCOUNT_SYMBOL);
				State = 4269;
				_la = TokenStream.LA(1);
				if ( !(_la==LOCK_SYMBOL || _la==UNLOCK_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case PASSWORD_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4270; Match(PASSWORD_SYMBOL);
				State = 4299;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,507,Context) ) {
				case 1:
					{
					State = 4271; Match(EXPIRE_SYMBOL);
					State = 4278;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INTERVAL_SYMBOL:
						{
						State = 4272; Match(INTERVAL_SYMBOL);
						State = 4273; real_ulong_number();
						State = 4274; Match(DAY_SYMBOL);
						}
						break;
					case NEVER_SYMBOL:
						{
						State = 4276; Match(NEVER_SYMBOL);
						}
						break;
					case DEFAULT_SYMBOL:
						{
						State = 4277; Match(DEFAULT_SYMBOL);
						}
						break;
					case Eof:
					case ACCOUNT_SYMBOL:
					case PASSWORD_SYMBOL:
					case SEMICOLON_SYMBOL:
						break;
					default:
						break;
					}
					}
					break;
				case 2:
					{
					State = 4280; Match(HISTORY_SYMBOL);
					State = 4283;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INT_NUMBER:
					case LONG_NUMBER:
					case ULONGLONG_NUMBER:
					case HEX_NUMBER:
						{
						State = 4281; real_ulong_number();
						}
						break;
					case DEFAULT_SYMBOL:
						{
						State = 4282; Match(DEFAULT_SYMBOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 3:
					{
					State = 4285; Match(REUSE_SYMBOL);
					State = 4286; Match(INTERVAL_SYMBOL);
					State = 4291;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INT_NUMBER:
					case LONG_NUMBER:
					case ULONGLONG_NUMBER:
					case HEX_NUMBER:
						{
						State = 4287; real_ulong_number();
						State = 4288; Match(DAY_SYMBOL);
						}
						break;
					case DEFAULT_SYMBOL:
						{
						State = 4290; Match(DEFAULT_SYMBOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 4:
					{
					State = 4293;
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					State = 4294; Match(REQUIRE_SYMBOL);
					State = 4295; Match(CURRENT_SYMBOL);
					State = 4297;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DEFAULT_SYMBOL || _la==OPTIONAL_SYMBOL) {
						{
						State = 4296;
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT_SYMBOL || _la==OPTIONAL_SYMBOL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropUserContext : ParserRuleContext {
		public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public UserListContext userList() {
			return GetRuleContext<UserListContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropUser; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropUser(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropUser(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropUser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropUserContext dropUser() {
		DropUserContext _localctx = new DropUserContext(Context, State);
		EnterRule(_localctx, 508, RULE_dropUser);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4303; Match(DROP_SYMBOL);
			State = 4304; Match(USER_SYMBOL);
			State = 4307;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,509,Context) ) {
			case 1:
				{
				State = 4305;
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				State = 4306; ifExists();
				}
				break;
			}
			State = 4309; userList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantContext : ParserRuleContext {
		public ITerminalNode[] GRANT_SYMBOL() { return GetTokens(MySQLParser.GRANT_SYMBOL); }
		public ITerminalNode GRANT_SYMBOL(int i) {
			return GetToken(MySQLParser.GRANT_SYMBOL, i);
		}
		public RoleOrPrivilegesListContext roleOrPrivilegesList() {
			return GetRuleContext<RoleOrPrivilegesListContext>(0);
		}
		public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		public UserListContext userList() {
			return GetRuleContext<UserListContext>(0);
		}
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public GrantIdentifierContext grantIdentifier() {
			return GetRuleContext<GrantIdentifierContext>(0);
		}
		public GrantTargetListContext grantTargetList() {
			return GetRuleContext<GrantTargetListContext>(0);
		}
		public ITerminalNode PROXY_SYMBOL() { return GetToken(MySQLParser.PROXY_SYMBOL, 0); }
		public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode ADMIN_SYMBOL() { return GetToken(MySQLParser.ADMIN_SYMBOL, 0); }
		public ITerminalNode OPTION_SYMBOL() { return GetToken(MySQLParser.OPTION_SYMBOL, 0); }
		public AclTypeContext aclType() {
			return GetRuleContext<AclTypeContext>(0);
		}
		public VersionedRequireClauseContext versionedRequireClause() {
			return GetRuleContext<VersionedRequireClauseContext>(0);
		}
		public GrantOptionsContext grantOptions() {
			return GetRuleContext<GrantOptionsContext>(0);
		}
		public GrantAsContext grantAs() {
			return GetRuleContext<GrantAsContext>(0);
		}
		public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public GrantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGrant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGrant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantContext grant() {
		GrantContext _localctx = new GrantContext(Context, State);
		EnterRule(_localctx, 510, RULE_grant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4311; Match(GRANT_SYMBOL);
			State = 4354;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,518,Context) ) {
			case 1:
				{
				State = 4312;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 4313; roleOrPrivilegesList();
				State = 4314; Match(TO_SYMBOL);
				State = 4315; userList();
				State = 4319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					State = 4316; Match(WITH_SYMBOL);
					State = 4317; Match(ADMIN_SYMBOL);
					State = 4318; Match(OPTION_SYMBOL);
					}
				}

				}
				break;
			case 2:
				{
				State = 4326;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,512,Context) ) {
				case 1:
					{
					State = 4321; roleOrPrivilegesList();
					}
					break;
				case 2:
					{
					State = 4322; Match(ALL_SYMBOL);
					State = 4324;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==PRIVILEGES_SYMBOL) {
						{
						State = 4323; Match(PRIVILEGES_SYMBOL);
						}
					}

					}
					break;
				}
				State = 4328; Match(ON_SYMBOL);
				State = 4330;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,513,Context) ) {
				case 1:
					{
					State = 4329; aclType();
					}
					break;
				}
				State = 4332; grantIdentifier();
				State = 4333; Match(TO_SYMBOL);
				State = 4334; grantTargetList();
				State = 4336;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,514,Context) ) {
				case 1:
					{
					State = 4335; versionedRequireClause();
					}
					break;
				}
				State = 4339;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,515,Context) ) {
				case 1:
					{
					State = 4338; grantOptions();
					}
					break;
				}
				State = 4342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS_SYMBOL) {
					{
					State = 4341; grantAs();
					}
				}

				}
				break;
			case 3:
				{
				State = 4344; Match(PROXY_SYMBOL);
				State = 4345; Match(ON_SYMBOL);
				State = 4346; user();
				State = 4347; Match(TO_SYMBOL);
				State = 4348; grantTargetList();
				State = 4352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					State = 4349; Match(WITH_SYMBOL);
					State = 4350; Match(GRANT_SYMBOL);
					State = 4351; Match(OPTION_SYMBOL);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantTargetListContext : ParserRuleContext {
		public CreateUserListContext createUserList() {
			return GetRuleContext<CreateUserListContext>(0);
		}
		public UserListContext userList() {
			return GetRuleContext<UserListContext>(0);
		}
		public GrantTargetListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantTargetList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGrantTargetList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGrantTargetList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantTargetList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantTargetListContext grantTargetList() {
		GrantTargetListContext _localctx = new GrantTargetListContext(Context, State);
		EnterRule(_localctx, 512, RULE_grantTargetList);
		try {
			State = 4360;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,519,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4356;
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				State = 4357; createUserList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4358;
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				State = 4359; userList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantOptionsContext : ParserRuleContext {
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public GrantOptionContext[] grantOption() {
			return GetRuleContexts<GrantOptionContext>();
		}
		public GrantOptionContext grantOption(int i) {
			return GetRuleContext<GrantOptionContext>(i);
		}
		public ITerminalNode GRANT_SYMBOL() { return GetToken(MySQLParser.GRANT_SYMBOL, 0); }
		public ITerminalNode OPTION_SYMBOL() { return GetToken(MySQLParser.OPTION_SYMBOL, 0); }
		public GrantOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGrantOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGrantOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantOptionsContext grantOptions() {
		GrantOptionsContext _localctx = new GrantOptionsContext(Context, State);
		EnterRule(_localctx, 514, RULE_grantOptions);
		int _la;
		try {
			State = 4373;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,521,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4362;
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				State = 4363; Match(WITH_SYMBOL);
				State = 4365;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 4364; grantOption();
					}
					}
					State = 4367;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (MAX_CONNECTIONS_PER_HOUR_SYMBOL - 207)) | (1L << (MAX_QUERIES_PER_HOUR_SYMBOL - 207)) | (1L << (MAX_UPDATES_PER_HOUR_SYMBOL - 207)) | (1L << (MAX_USER_CONNECTIONS_SYMBOL - 207)))) != 0) || _la==GRANT_SYMBOL );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4369;
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				State = 4370; Match(WITH_SYMBOL);
				State = 4371; Match(GRANT_SYMBOL);
				State = 4372; Match(OPTION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptRoleListContext : ParserRuleContext {
		public ITerminalNode EXCEPT_SYMBOL() { return GetToken(MySQLParser.EXCEPT_SYMBOL, 0); }
		public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		public ExceptRoleListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptRoleList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExceptRoleList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExceptRoleList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptRoleList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptRoleListContext exceptRoleList() {
		ExceptRoleListContext _localctx = new ExceptRoleListContext(Context, State);
		EnterRule(_localctx, 516, RULE_exceptRoleList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4375; Match(EXCEPT_SYMBOL);
			State = 4376; roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithRolesContext : ParserRuleContext {
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public ITerminalNode NONE_SYMBOL() { return GetToken(MySQLParser.NONE_SYMBOL, 0); }
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ExceptRoleListContext exceptRoleList() {
			return GetRuleContext<ExceptRoleListContext>(0);
		}
		public WithRolesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withRoles; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWithRoles(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWithRoles(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithRoles(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithRolesContext withRoles() {
		WithRolesContext _localctx = new WithRolesContext(Context, State);
		EnterRule(_localctx, 518, RULE_withRoles);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4378; Match(WITH_SYMBOL);
			State = 4379; Match(ROLE_SYMBOL);
			State = 4387;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,523,Context) ) {
			case 1:
				{
				State = 4380; roleList();
				}
				break;
			case 2:
				{
				State = 4381; Match(ALL_SYMBOL);
				State = 4383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXCEPT_SYMBOL) {
					{
					State = 4382; exceptRoleList();
					}
				}

				}
				break;
			case 3:
				{
				State = 4385; Match(NONE_SYMBOL);
				}
				break;
			case 4:
				{
				State = 4386; Match(DEFAULT_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantAsContext : ParserRuleContext {
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public WithRolesContext withRoles() {
			return GetRuleContext<WithRolesContext>(0);
		}
		public GrantAsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantAs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGrantAs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGrantAs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantAs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantAsContext grantAs() {
		GrantAsContext _localctx = new GrantAsContext(Context, State);
		EnterRule(_localctx, 520, RULE_grantAs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4389; Match(AS_SYMBOL);
			State = 4390; Match(USER_SYMBOL);
			State = 4392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_SYMBOL) {
				{
				State = 4391; withRoles();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionedRequireClauseContext : ParserRuleContext {
		public RequireClauseContext requireClause() {
			return GetRuleContext<RequireClauseContext>(0);
		}
		public VersionedRequireClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_versionedRequireClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterVersionedRequireClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitVersionedRequireClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVersionedRequireClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VersionedRequireClauseContext versionedRequireClause() {
		VersionedRequireClauseContext _localctx = new VersionedRequireClauseContext(Context, State);
		EnterRule(_localctx, 522, RULE_versionedRequireClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4394;
			if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
			State = 4395; requireClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameUserContext : ParserRuleContext {
		public ITerminalNode RENAME_SYMBOL() { return GetToken(MySQLParser.RENAME_SYMBOL, 0); }
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public UserContext[] user() {
			return GetRuleContexts<UserContext>();
		}
		public UserContext user(int i) {
			return GetRuleContext<UserContext>(i);
		}
		public ITerminalNode[] TO_SYMBOL() { return GetTokens(MySQLParser.TO_SYMBOL); }
		public ITerminalNode TO_SYMBOL(int i) {
			return GetToken(MySQLParser.TO_SYMBOL, i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameUser; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRenameUser(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRenameUser(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameUser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameUserContext renameUser() {
		RenameUserContext _localctx = new RenameUserContext(Context, State);
		EnterRule(_localctx, 524, RULE_renameUser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4397; Match(RENAME_SYMBOL);
			State = 4398; Match(USER_SYMBOL);
			State = 4399; user();
			State = 4400; Match(TO_SYMBOL);
			State = 4401; user();
			State = 4409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4402; Match(COMMA_SYMBOL);
				State = 4403; user();
				State = 4404; Match(TO_SYMBOL);
				State = 4405; user();
				}
				}
				State = 4411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokeContext : ParserRuleContext {
		public ITerminalNode REVOKE_SYMBOL() { return GetToken(MySQLParser.REVOKE_SYMBOL, 0); }
		public RoleOrPrivilegesListContext roleOrPrivilegesList() {
			return GetRuleContext<RoleOrPrivilegesListContext>(0);
		}
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public UserListContext userList() {
			return GetRuleContext<UserListContext>(0);
		}
		public OnTypeToContext onTypeTo() {
			return GetRuleContext<OnTypeToContext>(0);
		}
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public ITerminalNode PROXY_SYMBOL() { return GetToken(MySQLParser.PROXY_SYMBOL, 0); }
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		public GrantIdentifierContext grantIdentifier() {
			return GetRuleContext<GrantIdentifierContext>(0);
		}
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public ITerminalNode GRANT_SYMBOL() { return GetToken(MySQLParser.GRANT_SYMBOL, 0); }
		public ITerminalNode OPTION_SYMBOL() { return GetToken(MySQLParser.OPTION_SYMBOL, 0); }
		public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public AclTypeContext aclType() {
			return GetRuleContext<AclTypeContext>(0);
		}
		public RevokeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revoke; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRevoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRevoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRevoke(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RevokeContext revoke() {
		RevokeContext _localctx = new RevokeContext(Context, State);
		EnterRule(_localctx, 526, RULE_revoke);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4412; Match(REVOKE_SYMBOL);
			State = 4446;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,529,Context) ) {
			case 1:
				{
				State = 4413;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 4414; roleOrPrivilegesList();
				State = 4415; Match(FROM_SYMBOL);
				State = 4416; userList();
				}
				break;
			case 2:
				{
				State = 4418; roleOrPrivilegesList();
				State = 4419; onTypeTo();
				State = 4420; Match(FROM_SYMBOL);
				State = 4421; userList();
				}
				break;
			case 3:
				{
				State = 4423; Match(ALL_SYMBOL);
				State = 4425;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,526,Context) ) {
				case 1:
					{
					State = 4424; Match(PRIVILEGES_SYMBOL);
					}
					break;
				}
				State = 4438;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,528,Context) ) {
				case 1:
					{
					State = 4427;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 4428; Match(ON_SYMBOL);
					State = 4430;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,527,Context) ) {
					case 1:
						{
						State = 4429; aclType();
						}
						break;
					}
					State = 4432; grantIdentifier();
					}
					break;
				case 2:
					{
					State = 4433; Match(COMMA_SYMBOL);
					State = 4434; Match(GRANT_SYMBOL);
					State = 4435; Match(OPTION_SYMBOL);
					State = 4436; Match(FROM_SYMBOL);
					State = 4437; userList();
					}
					break;
				}
				}
				break;
			case 4:
				{
				State = 4440; Match(PROXY_SYMBOL);
				State = 4441; Match(ON_SYMBOL);
				State = 4442; user();
				State = 4443; Match(FROM_SYMBOL);
				State = 4444; userList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnTypeToContext : ParserRuleContext {
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public GrantIdentifierContext grantIdentifier() {
			return GetRuleContext<GrantIdentifierContext>(0);
		}
		public AclTypeContext aclType() {
			return GetRuleContext<AclTypeContext>(0);
		}
		public OnTypeToContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onTypeTo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOnTypeTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOnTypeTo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnTypeTo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnTypeToContext onTypeTo() {
		OnTypeToContext _localctx = new OnTypeToContext(Context, State);
		EnterRule(_localctx, 528, RULE_onTypeTo);
		int _la;
		try {
			State = 4462;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,533,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4448;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 4449; Match(ON_SYMBOL);
				State = 4451;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,530,Context) ) {
				case 1:
					{
					State = 4450; aclType();
					}
					break;
				}
				State = 4453; grantIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4454;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 4460;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_SYMBOL) {
					{
					State = 4455; Match(ON_SYMBOL);
					State = 4457;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,531,Context) ) {
					case 1:
						{
						State = 4456; aclType();
						}
						break;
					}
					State = 4459; grantIdentifier();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AclTypeContext : ParserRuleContext {
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public AclTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aclType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAclType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAclType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAclType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AclTypeContext aclType() {
		AclTypeContext _localctx = new AclTypeContext(Context, State);
		EnterRule(_localctx, 530, RULE_aclType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4464;
			_la = TokenStream.LA(1);
			if ( !(_la==FUNCTION_SYMBOL || _la==PROCEDURE_SYMBOL || _la==TABLE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetPasswordContext : ParserRuleContext {
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public ITerminalNode[] PASSWORD_SYMBOL() { return GetTokens(MySQLParser.PASSWORD_SYMBOL); }
		public ITerminalNode PASSWORD_SYMBOL(int i) {
			return GetToken(MySQLParser.PASSWORD_SYMBOL, i);
		}
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode OLD_PASSWORD_SYMBOL() { return GetToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0); }
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		public ReplacePasswordContext replacePassword() {
			return GetRuleContext<ReplacePasswordContext>(0);
		}
		public RetainCurrentPasswordContext retainCurrentPassword() {
			return GetRuleContext<RetainCurrentPasswordContext>(0);
		}
		public SetPasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setPassword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSetPassword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSetPassword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetPassword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetPasswordContext setPassword() {
		SetPasswordContext _localctx = new SetPasswordContext(Context, State);
		EnterRule(_localctx, 532, RULE_setPassword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4466; Match(SET_SYMBOL);
			State = 4467; Match(PASSWORD_SYMBOL);
			State = 4470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				State = 4468; Match(FOR_SYMBOL);
				State = 4469; user();
				}
			}

			State = 4472; equal();
			State = 4485;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,535,Context) ) {
			case 1:
				{
				State = 4473; Match(PASSWORD_SYMBOL);
				State = 4474; Match(OPEN_PAR_SYMBOL);
				State = 4475; textString();
				State = 4476; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				{
				State = 4478;
				if (!(serverVersion < 50706)) throw new FailedPredicateException(this, "serverVersion < 50706");
				State = 4479; Match(OLD_PASSWORD_SYMBOL);
				State = 4480; Match(OPEN_PAR_SYMBOL);
				State = 4481; textString();
				State = 4482; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 3:
				{
				State = 4484; textString();
				}
				break;
			}
			State = 4489;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,536,Context) ) {
			case 1:
				{
				State = 4487;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 4488; replacePassword();
				}
				break;
			}
			State = 4493;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,537,Context) ) {
			case 1:
				{
				State = 4491;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 4492; retainCurrentPassword();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleOrPrivilegesListContext : ParserRuleContext {
		public RoleOrPrivilegeContext[] roleOrPrivilege() {
			return GetRuleContexts<RoleOrPrivilegeContext>();
		}
		public RoleOrPrivilegeContext roleOrPrivilege(int i) {
			return GetRuleContext<RoleOrPrivilegeContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RoleOrPrivilegesListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleOrPrivilegesList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleOrPrivilegesList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleOrPrivilegesList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleOrPrivilegesList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleOrPrivilegesListContext roleOrPrivilegesList() {
		RoleOrPrivilegesListContext _localctx = new RoleOrPrivilegesListContext(Context, State);
		EnterRule(_localctx, 534, RULE_roleOrPrivilegesList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4495; roleOrPrivilege();
			State = 4500;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,538,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4496; Match(COMMA_SYMBOL);
					State = 4497; roleOrPrivilege();
					}
					} 
				}
				State = 4502;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,538,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleOrPrivilegeContext : ParserRuleContext {
		public IToken @object;
		public RoleIdentifierOrTextContext roleIdentifierOrText() {
			return GetRuleContext<RoleIdentifierOrTextContext>(0);
		}
		public ITerminalNode AT_TEXT_SUFFIX() { return GetToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
		public ITerminalNode AT_SIGN_SYMBOL() { return GetToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return GetRuleContext<ColumnInternalRefListContext>(0);
		}
		public ITerminalNode SELECT_SYMBOL() { return GetToken(MySQLParser.SELECT_SYMBOL, 0); }
		public ITerminalNode INSERT_SYMBOL() { return GetToken(MySQLParser.INSERT_SYMBOL, 0); }
		public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public ITerminalNode REFERENCES_SYMBOL() { return GetToken(MySQLParser.REFERENCES_SYMBOL, 0); }
		public ITerminalNode DELETE_SYMBOL() { return GetToken(MySQLParser.DELETE_SYMBOL, 0); }
		public ITerminalNode USAGE_SYMBOL() { return GetToken(MySQLParser.USAGE_SYMBOL, 0); }
		public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		public ITerminalNode EXECUTE_SYMBOL() { return GetToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		public ITerminalNode RELOAD_SYMBOL() { return GetToken(MySQLParser.RELOAD_SYMBOL, 0); }
		public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public ITerminalNode PROCESS_SYMBOL() { return GetToken(MySQLParser.PROCESS_SYMBOL, 0); }
		public ITerminalNode FILE_SYMBOL() { return GetToken(MySQLParser.FILE_SYMBOL, 0); }
		public ITerminalNode PROXY_SYMBOL() { return GetToken(MySQLParser.PROXY_SYMBOL, 0); }
		public ITerminalNode SUPER_SYMBOL() { return GetToken(MySQLParser.SUPER_SYMBOL, 0); }
		public ITerminalNode EVENT_SYMBOL() { return GetToken(MySQLParser.EVENT_SYMBOL, 0); }
		public ITerminalNode TRIGGER_SYMBOL() { return GetToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		public ITerminalNode GRANT_SYMBOL() { return GetToken(MySQLParser.GRANT_SYMBOL, 0); }
		public ITerminalNode OPTION_SYMBOL() { return GetToken(MySQLParser.OPTION_SYMBOL, 0); }
		public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		public ITerminalNode DATABASES_SYMBOL() { return GetToken(MySQLParser.DATABASES_SYMBOL, 0); }
		public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		public ITerminalNode TEMPORARY_SYMBOL() { return GetToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public ITerminalNode TABLES_SYMBOL() { return GetToken(MySQLParser.TABLES_SYMBOL, 0); }
		public ITerminalNode ROUTINE_SYMBOL() { return GetToken(MySQLParser.ROUTINE_SYMBOL, 0); }
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public ITerminalNode VIEW_SYMBOL() { return GetToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ITerminalNode LOCK_SYMBOL() { return GetToken(MySQLParser.LOCK_SYMBOL, 0); }
		public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public ITerminalNode CLIENT_SYMBOL() { return GetToken(MySQLParser.CLIENT_SYMBOL, 0); }
		public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public ITerminalNode ALTER_SYMBOL() { return GetToken(MySQLParser.ALTER_SYMBOL, 0); }
		public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleOrPrivilegeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleOrPrivilege; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleOrPrivilege(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleOrPrivilege(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleOrPrivilege(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleOrPrivilegeContext roleOrPrivilege() {
		RoleOrPrivilegeContext _localctx = new RoleOrPrivilegeContext(Context, State);
		EnterRule(_localctx, 536, RULE_roleOrPrivilege);
		int _la;
		try {
			State = 4544;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,545,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4503;
				if (!(serverVersion > 80000)) throw new FailedPredicateException(this, "serverVersion > 80000");
				State = 4514;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,541,Context) ) {
				case 1:
					{
					State = 4504; roleIdentifierOrText();
					State = 4506;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,539,Context) ) {
					case 1:
						{
						State = 4505; columnInternalRefList();
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 4508; roleIdentifierOrText();
					State = 4512;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case AT_TEXT_SUFFIX:
						{
						State = 4509; Match(AT_TEXT_SUFFIX);
						}
						break;
					case AT_SIGN_SYMBOL:
						{
						State = 4510; Match(AT_SIGN_SYMBOL);
						State = 4511; textOrIdentifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4516;
				_la = TokenStream.LA(1);
				if ( !(_la==INSERT_SYMBOL || ((((_la - 600)) & ~0x3f) == 0 && ((1L << (_la - 600)) & ((1L << (REFERENCES_SYMBOL - 600)) | (1L << (SELECT_SYMBOL - 600)) | (1L << (UPDATE_SYMBOL - 600)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4518;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,542,Context) ) {
				case 1:
					{
					State = 4517; columnInternalRefList();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4520;
				_la = TokenStream.LA(1);
				if ( !(_la==EXECUTE_SYMBOL || _la==SHUTDOWN_SYMBOL || _la==EVENT_SYMBOL || _la==FILE_SYMBOL || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (PROCESS_SYMBOL - 261)) | (1L << (PROXY_SYMBOL - 261)) | (1L << (RELOAD_SYMBOL - 261)))) != 0) || _la==SUPER_SYMBOL || ((((_la - 480)) & ~0x3f) == 0 && ((1L << (_la - 480)) & ((1L << (DELETE_SYMBOL - 480)) | (1L << (DROP_SYMBOL - 480)) | (1L << (INDEX_SYMBOL - 480)))) != 0) || _la==TRIGGER_SYMBOL || _la==USAGE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4521; Match(GRANT_SYMBOL);
				State = 4522; Match(OPTION_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4523; Match(SHOW_SYMBOL);
				State = 4524; Match(DATABASES_SYMBOL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4525; Match(CREATE_SYMBOL);
				State = 4529;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,543,Context) ) {
				case 1:
					{
					State = 4526; Match(TEMPORARY_SYMBOL);
					State = 4527; _localctx.@object = Match(TABLES_SYMBOL);
					}
					break;
				case 2:
					{
					State = 4528;
					_localctx.@object = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ROUTINE_SYMBOL || _la==TABLESPACE_SYMBOL || _la==USER_SYMBOL || _la==VIEW_SYMBOL) ) {
						_localctx.@object = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4531; Match(LOCK_SYMBOL);
				State = 4532; Match(TABLES_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4533; Match(REPLICATION_SYMBOL);
				State = 4534;
				_localctx.@object = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==SLAVE_SYMBOL || _la==CLIENT_SYMBOL) ) {
					_localctx.@object = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4535; Match(SHOW_SYMBOL);
				State = 4536; Match(VIEW_SYMBOL);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4537; Match(ALTER_SYMBOL);
				State = 4539;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,544,Context) ) {
				case 1:
					{
					State = 4538; Match(ROUTINE_SYMBOL);
					}
					break;
				}
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4541;
				if (!(serverVersion > 80000)) throw new FailedPredicateException(this, "serverVersion > 80000");
				State = 4542;
				_la = TokenStream.LA(1);
				if ( !(_la==CREATE_SYMBOL || _la==DROP_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4543; Match(ROLE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantIdentifierContext : ParserRuleContext {
		public ITerminalNode[] MULT_OPERATOR() { return GetTokens(MySQLParser.MULT_OPERATOR); }
		public ITerminalNode MULT_OPERATOR(int i) {
			return GetToken(MySQLParser.MULT_OPERATOR, i);
		}
		public ITerminalNode DOT_SYMBOL() { return GetToken(MySQLParser.DOT_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public GrantIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGrantIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGrantIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantIdentifierContext grantIdentifier() {
		GrantIdentifierContext _localctx = new GrantIdentifierContext(Context, State);
		EnterRule(_localctx, 538, RULE_grantIdentifier);
		int _la;
		try {
			State = 4562;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,548,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4546; Match(MULT_OPERATOR);
				State = 4549;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					State = 4547; Match(DOT_SYMBOL);
					State = 4548; Match(MULT_OPERATOR);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4551; schemaRef();
				State = 4554;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					State = 4552; Match(DOT_SYMBOL);
					State = 4553; Match(MULT_OPERATOR);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4556; tableRef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4557;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 4558; schemaRef();
				State = 4559; Match(DOT_SYMBOL);
				State = 4560; tableRef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireListContext : ParserRuleContext {
		public RequireListElementContext[] requireListElement() {
			return GetRuleContexts<RequireListElementContext>();
		}
		public RequireListElementContext requireListElement(int i) {
			return GetRuleContext<RequireListElementContext>(i);
		}
		public ITerminalNode[] AND_SYMBOL() { return GetTokens(MySQLParser.AND_SYMBOL); }
		public ITerminalNode AND_SYMBOL(int i) {
			return GetToken(MySQLParser.AND_SYMBOL, i);
		}
		public RequireListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requireList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRequireList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRequireList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequireList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequireListContext requireList() {
		RequireListContext _localctx = new RequireListContext(Context, State);
		EnterRule(_localctx, 540, RULE_requireList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4564; requireListElement();
			State = 4571;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,550,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4566;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AND_SYMBOL) {
						{
						State = 4565; Match(AND_SYMBOL);
						}
					}

					State = 4568; requireListElement();
					}
					} 
				}
				State = 4573;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,550,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireListElementContext : ParserRuleContext {
		public IToken element;
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public ITerminalNode CIPHER_SYMBOL() { return GetToken(MySQLParser.CIPHER_SYMBOL, 0); }
		public ITerminalNode ISSUER_SYMBOL() { return GetToken(MySQLParser.ISSUER_SYMBOL, 0); }
		public ITerminalNode SUBJECT_SYMBOL() { return GetToken(MySQLParser.SUBJECT_SYMBOL, 0); }
		public RequireListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requireListElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRequireListElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRequireListElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequireListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequireListElementContext requireListElement() {
		RequireListElementContext _localctx = new RequireListElementContext(Context, State);
		EnterRule(_localctx, 542, RULE_requireListElement);
		try {
			State = 4580;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CIPHER_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4574; _localctx.element = Match(CIPHER_SYMBOL);
				State = 4575; textString();
				}
				break;
			case ISSUER_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4576; _localctx.element = Match(ISSUER_SYMBOL);
				State = 4577; textString();
				}
				break;
			case SUBJECT_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4578; _localctx.element = Match(SUBJECT_SYMBOL);
				State = 4579; textString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantOptionContext : ParserRuleContext {
		public IToken option;
		public ITerminalNode OPTION_SYMBOL() { return GetToken(MySQLParser.OPTION_SYMBOL, 0); }
		public ITerminalNode GRANT_SYMBOL() { return GetToken(MySQLParser.GRANT_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public ITerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		public ITerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		public ITerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		public ITerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return GetToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		public GrantOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGrantOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGrantOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantOptionContext grantOption() {
		GrantOptionContext _localctx = new GrantOptionContext(Context, State);
		EnterRule(_localctx, 544, RULE_grantOption);
		try {
			State = 4592;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GRANT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4582; _localctx.option = Match(GRANT_SYMBOL);
				State = 4583; Match(OPTION_SYMBOL);
				}
				break;
			case MAX_QUERIES_PER_HOUR_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4584; _localctx.option = Match(MAX_QUERIES_PER_HOUR_SYMBOL);
				State = 4585; ulong_number();
				}
				break;
			case MAX_UPDATES_PER_HOUR_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4586; _localctx.option = Match(MAX_UPDATES_PER_HOUR_SYMBOL);
				State = 4587; ulong_number();
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4588; _localctx.option = Match(MAX_CONNECTIONS_PER_HOUR_SYMBOL);
				State = 4589; ulong_number();
				}
				break;
			case MAX_USER_CONNECTIONS_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4590; _localctx.option = Match(MAX_USER_CONNECTIONS_SYMBOL);
				State = 4591; ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetRoleContext : ParserRuleContext {
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext[] roleList() {
			return GetRuleContexts<RoleListContext>();
		}
		public RoleListContext roleList(int i) {
			return GetRuleContext<RoleListContext>(i);
		}
		public ITerminalNode NONE_SYMBOL() { return GetToken(MySQLParser.NONE_SYMBOL, 0); }
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public ITerminalNode EXCEPT_SYMBOL() { return GetToken(MySQLParser.EXCEPT_SYMBOL, 0); }
		public SetRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setRole; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSetRole(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSetRole(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetRole(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetRoleContext setRole() {
		SetRoleContext _localctx = new SetRoleContext(Context, State);
		EnterRule(_localctx, 546, RULE_setRole);
		int _la;
		try {
			State = 4617;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,555,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4594; Match(SET_SYMBOL);
				State = 4595; Match(ROLE_SYMBOL);
				State = 4596; roleList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4597; Match(SET_SYMBOL);
				State = 4598; Match(ROLE_SYMBOL);
				State = 4599;
				_la = TokenStream.LA(1);
				if ( !(_la==NONE_SYMBOL || _la==DEFAULT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4600; Match(SET_SYMBOL);
				State = 4601; Match(DEFAULT_SYMBOL);
				State = 4602; Match(ROLE_SYMBOL);
				State = 4606;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,553,Context) ) {
				case 1:
					{
					State = 4603; roleList();
					}
					break;
				case 2:
					{
					State = 4604; Match(NONE_SYMBOL);
					}
					break;
				case 3:
					{
					State = 4605; Match(ALL_SYMBOL);
					}
					break;
				}
				State = 4608; Match(TO_SYMBOL);
				State = 4609; roleList();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4610; Match(SET_SYMBOL);
				State = 4611; Match(ROLE_SYMBOL);
				State = 4612; Match(ALL_SYMBOL);
				State = 4615;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXCEPT_SYMBOL) {
					{
					State = 4613; Match(EXCEPT_SYMBOL);
					State = 4614; roleList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleListContext : ParserRuleContext {
		public RoleContext[] role() {
			return GetRuleContexts<RoleContext>();
		}
		public RoleContext role(int i) {
			return GetRuleContext<RoleContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RoleListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleListContext roleList() {
		RoleListContext _localctx = new RoleListContext(Context, State);
		EnterRule(_localctx, 548, RULE_roleList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4619; role();
			State = 4624;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,556,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4620; Match(COMMA_SYMBOL);
					State = 4621; role();
					}
					} 
				}
				State = 4626;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,556,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleContext : ParserRuleContext {
		public RoleIdentifierOrTextContext roleIdentifierOrText() {
			return GetRuleContext<RoleIdentifierOrTextContext>(0);
		}
		public ITerminalNode AT_SIGN_SYMBOL() { return GetToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public RoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRole(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRole(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRole(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleContext role() {
		RoleContext _localctx = new RoleContext(Context, State);
		EnterRule(_localctx, 550, RULE_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4627; roleIdentifierOrText();
			State = 4630;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,557,Context) ) {
			case 1:
				{
				State = 4628; Match(AT_SIGN_SYMBOL);
				State = 4629; textOrIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableAdministrationStatementContext : ParserRuleContext {
		public IToken type;
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefListContext tableRefList() {
			return GetRuleContext<TableRefListContext>(0);
		}
		public ITerminalNode ANALYZE_SYMBOL() { return GetToken(MySQLParser.ANALYZE_SYMBOL, 0); }
		public NoWriteToBinLogContext noWriteToBinLog() {
			return GetRuleContext<NoWriteToBinLogContext>(0);
		}
		public ITerminalNode CHECK_SYMBOL() { return GetToken(MySQLParser.CHECK_SYMBOL, 0); }
		public CheckOptionContext[] checkOption() {
			return GetRuleContexts<CheckOptionContext>();
		}
		public CheckOptionContext checkOption(int i) {
			return GetRuleContext<CheckOptionContext>(i);
		}
		public ITerminalNode CHECKSUM_SYMBOL() { return GetToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		public ITerminalNode QUICK_SYMBOL() { return GetToken(MySQLParser.QUICK_SYMBOL, 0); }
		public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public ITerminalNode OPTIMIZE_SYMBOL() { return GetToken(MySQLParser.OPTIMIZE_SYMBOL, 0); }
		public HistogramContext histogram() {
			return GetRuleContext<HistogramContext>(0);
		}
		public ITerminalNode REPAIR_SYMBOL() { return GetToken(MySQLParser.REPAIR_SYMBOL, 0); }
		public RepairTypeContext[] repairType() {
			return GetRuleContexts<RepairTypeContext>();
		}
		public RepairTypeContext repairType(int i) {
			return GetRuleContext<RepairTypeContext>(i);
		}
		public TableAdministrationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableAdministrationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableAdministrationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableAdministrationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableAdministrationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableAdministrationStatementContext tableAdministrationStatement() {
		TableAdministrationStatementContext _localctx = new TableAdministrationStatementContext(Context, State);
		EnterRule(_localctx, 552, RULE_tableAdministrationStatement);
		int _la;
		try {
			State = 4675;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ANALYZE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4632; _localctx.type = Match(ANALYZE_SYMBOL);
				State = 4634;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 4633; noWriteToBinLog();
					}
				}

				State = 4636; Match(TABLE_SYMBOL);
				State = 4637; tableRefList();
				}
				break;
			case CHECK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4638; _localctx.type = Match(CHECK_SYMBOL);
				State = 4639; Match(TABLE_SYMBOL);
				State = 4640; tableRefList();
				State = 4644;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (CHANGED_SYMBOL - 80)) | (1L << (EXTENDED_SYMBOL - 80)) | (1L << (FAST_SYMBOL - 80)))) != 0) || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL || _la==FOR_SYMBOL) {
					{
					{
					State = 4641; checkOption();
					}
					}
					State = 4646;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case CHECKSUM_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4647; _localctx.type = Match(CHECKSUM_SYMBOL);
				State = 4648; Match(TABLE_SYMBOL);
				State = 4649; tableRefList();
				State = 4651;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL) {
					{
					State = 4650;
					_la = TokenStream.LA(1);
					if ( !(_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case OPTIMIZE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4653; _localctx.type = Match(OPTIMIZE_SYMBOL);
				State = 4655;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 4654; noWriteToBinLog();
					}
				}

				State = 4657; Match(TABLE_SYMBOL);
				State = 4658; tableRefList();
				State = 4661;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,562,Context) ) {
				case 1:
					{
					State = 4659;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 4660; histogram();
					}
					break;
				}
				}
				break;
			case REPAIR_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4663; _localctx.type = Match(REPAIR_SYMBOL);
				State = 4665;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 4664; noWriteToBinLog();
					}
				}

				State = 4667; Match(TABLE_SYMBOL);
				State = 4668; tableRefList();
				State = 4672;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) {
					{
					{
					State = 4669; repairType();
					}
					}
					State = 4674;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HistogramContext : ParserRuleContext {
		public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public ITerminalNode HISTOGRAM_SYMBOL() { return GetToken(MySQLParser.HISTOGRAM_SYMBOL, 0); }
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public ITerminalNode BUCKETS_SYMBOL() { return GetToken(MySQLParser.BUCKETS_SYMBOL, 0); }
		public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		public HistogramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_histogram; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterHistogram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitHistogram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHistogram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HistogramContext histogram() {
		HistogramContext _localctx = new HistogramContext(Context, State);
		EnterRule(_localctx, 554, RULE_histogram);
		int _la;
		try {
			State = 4690;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UPDATE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4677; Match(UPDATE_SYMBOL);
				State = 4678; Match(HISTOGRAM_SYMBOL);
				State = 4679; Match(ON_SYMBOL);
				State = 4680; identifierList();
				State = 4684;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					State = 4681; Match(WITH_SYMBOL);
					State = 4682; Match(INT_NUMBER);
					State = 4683; Match(BUCKETS_SYMBOL);
					}
				}

				}
				break;
			case DROP_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4686; Match(DROP_SYMBOL);
				State = 4687; Match(HISTOGRAM_SYMBOL);
				State = 4688; Match(ON_SYMBOL);
				State = 4689; identifierList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckOptionContext : ParserRuleContext {
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public ITerminalNode UPGRADE_SYMBOL() { return GetToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public ITerminalNode QUICK_SYMBOL() { return GetToken(MySQLParser.QUICK_SYMBOL, 0); }
		public ITerminalNode FAST_SYMBOL() { return GetToken(MySQLParser.FAST_SYMBOL, 0); }
		public ITerminalNode MEDIUM_SYMBOL() { return GetToken(MySQLParser.MEDIUM_SYMBOL, 0); }
		public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public ITerminalNode CHANGED_SYMBOL() { return GetToken(MySQLParser.CHANGED_SYMBOL, 0); }
		public CheckOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCheckOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCheckOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckOptionContext checkOption() {
		CheckOptionContext _localctx = new CheckOptionContext(Context, State);
		EnterRule(_localctx, 556, RULE_checkOption);
		int _la;
		try {
			State = 4695;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4692; Match(FOR_SYMBOL);
				State = 4693; Match(UPGRADE_SYMBOL);
				}
				break;
			case CHANGED_SYMBOL:
			case EXTENDED_SYMBOL:
			case FAST_SYMBOL:
			case MEDIUM_SYMBOL:
			case QUICK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4694;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (CHANGED_SYMBOL - 80)) | (1L << (EXTENDED_SYMBOL - 80)) | (1L << (FAST_SYMBOL - 80)))) != 0) || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepairTypeContext : ParserRuleContext {
		public ITerminalNode QUICK_SYMBOL() { return GetToken(MySQLParser.QUICK_SYMBOL, 0); }
		public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public ITerminalNode USE_FRM_SYMBOL() { return GetToken(MySQLParser.USE_FRM_SYMBOL, 0); }
		public RepairTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repairType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRepairType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRepairType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepairType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepairTypeContext repairType() {
		RepairTypeContext _localctx = new RepairTypeContext(Context, State);
		EnterRule(_localctx, 558, RULE_repairType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4697;
			_la = TokenStream.LA(1);
			if ( !(_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstallUninstallStatmentContext : ParserRuleContext {
		public IToken action;
		public IToken type;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SONAME_SYMBOL() { return GetToken(MySQLParser.SONAME_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ITerminalNode INSTALL_SYMBOL() { return GetToken(MySQLParser.INSTALL_SYMBOL, 0); }
		public ITerminalNode PLUGIN_SYMBOL() { return GetToken(MySQLParser.PLUGIN_SYMBOL, 0); }
		public TextStringLiteralListContext textStringLiteralList() {
			return GetRuleContext<TextStringLiteralListContext>(0);
		}
		public ITerminalNode COMPONENT_SYMBOL() { return GetToken(MySQLParser.COMPONENT_SYMBOL, 0); }
		public PluginRefContext pluginRef() {
			return GetRuleContext<PluginRefContext>(0);
		}
		public ITerminalNode UNINSTALL_SYMBOL() { return GetToken(MySQLParser.UNINSTALL_SYMBOL, 0); }
		public ComponentRefContext[] componentRef() {
			return GetRuleContexts<ComponentRefContext>();
		}
		public ComponentRefContext componentRef(int i) {
			return GetRuleContext<ComponentRefContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public InstallUninstallStatmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_installUninstallStatment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInstallUninstallStatment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInstallUninstallStatment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstallUninstallStatment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstallUninstallStatmentContext installUninstallStatment() {
		InstallUninstallStatmentContext _localctx = new InstallUninstallStatmentContext(Context, State);
		EnterRule(_localctx, 560, RULE_installUninstallStatment);
		int _la;
		try {
			State = 4721;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,570,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4699; _localctx.action = Match(INSTALL_SYMBOL);
				State = 4700; _localctx.type = Match(PLUGIN_SYMBOL);
				State = 4701; identifier();
				State = 4702; Match(SONAME_SYMBOL);
				State = 4703; textStringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4705; _localctx.action = Match(INSTALL_SYMBOL);
				State = 4706; _localctx.type = Match(COMPONENT_SYMBOL);
				State = 4707; textStringLiteralList();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4708; _localctx.action = Match(UNINSTALL_SYMBOL);
				State = 4709; _localctx.type = Match(PLUGIN_SYMBOL);
				State = 4710; pluginRef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4711; _localctx.action = Match(UNINSTALL_SYMBOL);
				State = 4712; _localctx.type = Match(COMPONENT_SYMBOL);
				State = 4713; componentRef();
				State = 4718;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 4714; Match(COMMA_SYMBOL);
					State = 4715; componentRef();
					}
					}
					State = 4720;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStatementContext : ParserRuleContext {
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public OptionValueNoOptionTypeContext optionValueNoOptionType() {
			return GetRuleContext<OptionValueNoOptionTypeContext>(0);
		}
		public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public SetTransactionCharacteristicContext setTransactionCharacteristic() {
			return GetRuleContext<SetTransactionCharacteristicContext>(0);
		}
		public OptionValueFollowingOptionTypeContext optionValueFollowingOptionType() {
			return GetRuleContext<OptionValueFollowingOptionTypeContext>(0);
		}
		public OptionTypeContext optionType() {
			return GetRuleContext<OptionTypeContext>(0);
		}
		public ITerminalNode ONE_SHOT_SYMBOL() { return GetToken(MySQLParser.ONE_SHOT_SYMBOL, 0); }
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public OptionValueListContext optionValueList() {
			return GetRuleContext<OptionValueListContext>(0);
		}
		public SetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSetStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSetStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStatementContext setStatement() {
		SetStatementContext _localctx = new SetStatementContext(Context, State);
		EnterRule(_localctx, 562, RULE_setStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4723; Match(SET_SYMBOL);
			State = 4744;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,576,Context) ) {
			case 1:
				{
				State = 4725;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,571,Context) ) {
				case 1:
					{
					State = 4724; optionType();
					}
					break;
				}
				State = 4734;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,573,Context) ) {
				case 1:
					{
					State = 4727; Match(TRANSACTION_SYMBOL);
					State = 4728; setTransactionCharacteristic();
					}
					break;
				case 2:
					{
					State = 4729; optionValueFollowingOptionType();
					State = 4732;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA_SYMBOL) {
						{
						State = 4730; Match(COMMA_SYMBOL);
						State = 4731; optionValueList();
						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 4737;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,574,Context) ) {
				case 1:
					{
					State = 4736; Match(ONE_SHOT_SYMBOL);
					}
					break;
				}
				State = 4739; optionValueNoOptionType();
				State = 4742;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 4740; Match(COMMA_SYMBOL);
					State = 4741; optionValueList();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueNoOptionTypeContext : ParserRuleContext {
		public InternalVariableNameContext internalVariableName() {
			return GetRuleContext<InternalVariableNameContext>(0);
		}
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public SetExprOrDefaultContext setExprOrDefault() {
			return GetRuleContext<SetExprOrDefaultContext>(0);
		}
		public CharsetClauseContext charsetClause() {
			return GetRuleContext<CharsetClauseContext>(0);
		}
		public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SetSystemVariableContext setSystemVariable() {
			return GetRuleContext<SetSystemVariableContext>(0);
		}
		public ITerminalNode NAMES_SYMBOL() { return GetToken(MySQLParser.NAMES_SYMBOL, 0); }
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public OptionValueNoOptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValueNoOptionType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOptionValueNoOptionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOptionValueNoOptionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionValueNoOptionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueNoOptionTypeContext optionValueNoOptionType() {
		OptionValueNoOptionTypeContext _localctx = new OptionValueNoOptionTypeContext(Context, State);
		EnterRule(_localctx, 564, RULE_optionValueNoOptionType);
		int _la;
		try {
			State = 4771;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,579,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4746; internalVariableName();
				State = 4747; equal();
				State = 4748; setExprOrDefault();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4750; charsetClause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4751; userVariable();
				State = 4752; equal();
				State = 4753; expr(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4755; setSystemVariable();
				State = 4756; equal();
				State = 4757; setExprOrDefault();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4759; Match(NAMES_SYMBOL);
				State = 4769;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,578,Context) ) {
				case 1:
					{
					State = 4760; equal();
					State = 4761; expr(0);
					}
					break;
				case 2:
					{
					State = 4763; charsetName();
					State = 4765;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COLLATE_SYMBOL) {
						{
						State = 4764; collate();
						}
					}

					}
					break;
				case 3:
					{
					State = 4767;
					if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
					State = 4768; Match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetSystemVariableContext : ParserRuleContext {
		public ITerminalNode AT_AT_SIGN_SYMBOL() { return GetToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0); }
		public InternalVariableNameContext internalVariableName() {
			return GetRuleContext<InternalVariableNameContext>(0);
		}
		public SetVarIdentTypeContext setVarIdentType() {
			return GetRuleContext<SetVarIdentTypeContext>(0);
		}
		public SetSystemVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setSystemVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSetSystemVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSetSystemVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetSystemVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetSystemVariableContext setSystemVariable() {
		SetSystemVariableContext _localctx = new SetSystemVariableContext(Context, State);
		EnterRule(_localctx, 566, RULE_setSystemVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4773; Match(AT_AT_SIGN_SYMBOL);
			State = 4775;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,580,Context) ) {
			case 1:
				{
				State = 4774; setVarIdentType();
				}
				break;
			}
			State = 4777; internalVariableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueFollowingOptionTypeContext : ParserRuleContext {
		public InternalVariableNameContext internalVariableName() {
			return GetRuleContext<InternalVariableNameContext>(0);
		}
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public SetExprOrDefaultContext setExprOrDefault() {
			return GetRuleContext<SetExprOrDefaultContext>(0);
		}
		public OptionValueFollowingOptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValueFollowingOptionType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOptionValueFollowingOptionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOptionValueFollowingOptionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionValueFollowingOptionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueFollowingOptionTypeContext optionValueFollowingOptionType() {
		OptionValueFollowingOptionTypeContext _localctx = new OptionValueFollowingOptionTypeContext(Context, State);
		EnterRule(_localctx, 568, RULE_optionValueFollowingOptionType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4779; internalVariableName();
			State = 4780; equal();
			State = 4781; setExprOrDefault();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetExprOrDefaultContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public ITerminalNode ROW_SYMBOL() { return GetToken(MySQLParser.ROW_SYMBOL, 0); }
		public ITerminalNode SYSTEM_SYMBOL() { return GetToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public SetExprOrDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setExprOrDefault; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSetExprOrDefault(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSetExprOrDefault(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetExprOrDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetExprOrDefaultContext setExprOrDefault() {
		SetExprOrDefaultContext _localctx = new SetExprOrDefaultContext(Context, State);
		EnterRule(_localctx, 570, RULE_setExprOrDefault);
		int _la;
		try {
			State = 4787;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,581,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4783; expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4784;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 427)) & ~0x3f) == 0 && ((1L << (_la - 427)) & ((1L << (ALL_SYMBOL - 427)) | (1L << (BINARY_SYMBOL - 427)) | (1L << (DEFAULT_SYMBOL - 427)))) != 0) || _la==ON_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4785;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 4786;
				_la = TokenStream.LA(1);
				if ( !(_la==ROW_SYMBOL || _la==SYSTEM_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueListContext : ParserRuleContext {
		public OptionValueContext[] optionValue() {
			return GetRuleContexts<OptionValueContext>();
		}
		public OptionValueContext optionValue(int i) {
			return GetRuleContext<OptionValueContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public OptionValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValueList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOptionValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOptionValueList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueListContext optionValueList() {
		OptionValueListContext _localctx = new OptionValueListContext(Context, State);
		EnterRule(_localctx, 572, RULE_optionValueList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4789; optionValue();
			State = 4794;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4790; Match(COMMA_SYMBOL);
				State = 4791; optionValue();
				}
				}
				State = 4796;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueContext : ParserRuleContext {
		public OptionTypeContext optionType() {
			return GetRuleContext<OptionTypeContext>(0);
		}
		public InternalVariableNameContext internalVariableName() {
			return GetRuleContext<InternalVariableNameContext>(0);
		}
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public SetExprOrDefaultContext setExprOrDefault() {
			return GetRuleContext<SetExprOrDefaultContext>(0);
		}
		public OptionValueNoOptionTypeContext optionValueNoOptionType() {
			return GetRuleContext<OptionValueNoOptionTypeContext>(0);
		}
		public OptionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOptionValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOptionValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueContext optionValue() {
		OptionValueContext _localctx = new OptionValueContext(Context, State);
		EnterRule(_localctx, 574, RULE_optionValue);
		try {
			State = 4803;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,583,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4797; optionType();
				State = 4798; internalVariableName();
				State = 4799; equal();
				State = 4800; setExprOrDefault();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4802; optionValueNoOptionType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowStatementContext : ParserRuleContext {
		public IToken value;
		public IToken @object;
		public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		public ITerminalNode STATUS_SYMBOL() { return GetToken(MySQLParser.STATUS_SYMBOL, 0); }
		public ITerminalNode TABLES_SYMBOL() { return GetToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ITerminalNode EVENTS_SYMBOL() { return GetToken(MySQLParser.EVENTS_SYMBOL, 0); }
		public FromOrInContext fromOrIn() {
			return GetRuleContext<FromOrInContext>(0);
		}
		public ITerminalNode COUNT_SYMBOL() { return GetToken(MySQLParser.COUNT_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode MULT_OPERATOR() { return GetToken(MySQLParser.MULT_OPERATOR, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public CharsetContext charset() {
			return GetRuleContext<CharsetContext>(0);
		}
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		public ITerminalNode USING_SYMBOL() { return GetToken(MySQLParser.USING_SYMBOL, 0); }
		public UserListContext userList() {
			return GetRuleContext<UserListContext>(0);
		}
		public ITerminalNode CODE_SYMBOL() { return GetToken(MySQLParser.CODE_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return GetRuleContext<ProcedureRefContext>(0);
		}
		public FunctionRefContext functionRef() {
			return GetRuleContext<FunctionRefContext>(0);
		}
		public ITerminalNode AUTHORS_SYMBOL() { return GetToken(MySQLParser.AUTHORS_SYMBOL, 0); }
		public ITerminalNode DATABASES_SYMBOL() { return GetToken(MySQLParser.DATABASES_SYMBOL, 0); }
		public ITerminalNode TRIGGERS_SYMBOL() { return GetToken(MySQLParser.TRIGGERS_SYMBOL, 0); }
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public ITerminalNode OPEN_SYMBOL() { return GetToken(MySQLParser.OPEN_SYMBOL, 0); }
		public ITerminalNode PLUGINS_SYMBOL() { return GetToken(MySQLParser.PLUGINS_SYMBOL, 0); }
		public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public ITerminalNode MUTEX_SYMBOL() { return GetToken(MySQLParser.MUTEX_SYMBOL, 0); }
		public ITerminalNode LOGS_SYMBOL() { return GetToken(MySQLParser.LOGS_SYMBOL, 0); }
		public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public ITerminalNode MASTER_SYMBOL() { return GetToken(MySQLParser.MASTER_SYMBOL, 0); }
		public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public ITerminalNode ENGINES_SYMBOL() { return GetToken(MySQLParser.ENGINES_SYMBOL, 0); }
		public ITerminalNode WARNINGS_SYMBOL() { return GetToken(MySQLParser.WARNINGS_SYMBOL, 0); }
		public ITerminalNode ERRORS_SYMBOL() { return GetToken(MySQLParser.ERRORS_SYMBOL, 0); }
		public ITerminalNode PROFILES_SYMBOL() { return GetToken(MySQLParser.PROFILES_SYMBOL, 0); }
		public ITerminalNode PROFILE_SYMBOL() { return GetToken(MySQLParser.PROFILE_SYMBOL, 0); }
		public ITerminalNode PROCESSLIST_SYMBOL() { return GetToken(MySQLParser.PROCESSLIST_SYMBOL, 0); }
		public ITerminalNode COLLATION_SYMBOL() { return GetToken(MySQLParser.COLLATION_SYMBOL, 0); }
		public ITerminalNode CONTRIBUTORS_SYMBOL() { return GetToken(MySQLParser.CONTRIBUTORS_SYMBOL, 0); }
		public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public ITerminalNode GRANTS_SYMBOL() { return GetToken(MySQLParser.GRANTS_SYMBOL, 0); }
		public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public EngineRefContext engineRef() {
			return GetRuleContext<EngineRefContext>(0);
		}
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public ITerminalNode HOSTS_SYMBOL() { return GetToken(MySQLParser.HOSTS_SYMBOL, 0); }
		public NonBlockingContext nonBlocking() {
			return GetRuleContext<NonBlockingContext>(0);
		}
		public ITerminalNode BINLOG_SYMBOL() { return GetToken(MySQLParser.BINLOG_SYMBOL, 0); }
		public ITerminalNode RELAYLOG_SYMBOL() { return GetToken(MySQLParser.RELAYLOG_SYMBOL, 0); }
		public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		public ITerminalNode INDEXES_SYMBOL() { return GetToken(MySQLParser.INDEXES_SYMBOL, 0); }
		public ITerminalNode KEYS_SYMBOL() { return GetToken(MySQLParser.KEYS_SYMBOL, 0); }
		public ITerminalNode VARIABLES_SYMBOL() { return GetToken(MySQLParser.VARIABLES_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		public EventRefContext eventRef() {
			return GetRuleContext<EventRefContext>(0);
		}
		public TriggerRefContext triggerRef() {
			return GetRuleContext<TriggerRefContext>(0);
		}
		public ViewRefContext viewRef() {
			return GetRuleContext<ViewRefContext>(0);
		}
		public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowCommandTypeContext showCommandType() {
			return GetRuleContext<ShowCommandTypeContext>(0);
		}
		public InDbContext inDb() {
			return GetRuleContext<InDbContext>(0);
		}
		public ITerminalNode FULL_SYMBOL() { return GetToken(MySQLParser.FULL_SYMBOL, 0); }
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public Ulonglong_numberContext ulonglong_number() {
			return GetRuleContext<Ulonglong_numberContext>(0);
		}
		public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public ProfileTypeContext[] profileType() {
			return GetRuleContexts<ProfileTypeContext>();
		}
		public ProfileTypeContext profileType(int i) {
			return GetRuleContext<ProfileTypeContext>(i);
		}
		public ITerminalNode QUERY_SYMBOL() { return GetToken(MySQLParser.QUERY_SYMBOL, 0); }
		public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public OptionTypeContext optionType() {
			return GetRuleContext<OptionTypeContext>(0);
		}
		public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public ITerminalNode EVENT_SYMBOL() { return GetToken(MySQLParser.EVENT_SYMBOL, 0); }
		public ITerminalNode TRIGGER_SYMBOL() { return GetToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		public ITerminalNode VIEW_SYMBOL() { return GetToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ShowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowStatementContext showStatement() {
		ShowStatementContext _localctx = new ShowStatementContext(Context, State);
		EnterRule(_localctx, 576, RULE_showStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4805; Match(SHOW_SYMBOL);
			State = 5025;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,627,Context) ) {
			case 1:
				{
				State = 4806;
				if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
				State = 4807; _localctx.value = Match(AUTHORS_SYMBOL);
				}
				break;
			case 2:
				{
				State = 4808; _localctx.value = Match(DATABASES_SYMBOL);
				State = 4810;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 4809; likeOrWhere();
					}
				}

				}
				break;
			case 3:
				{
				State = 4813;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,585,Context) ) {
				case 1:
					{
					State = 4812; showCommandType();
					}
					break;
				}
				State = 4815; _localctx.value = Match(TABLES_SYMBOL);
				State = 4817;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					State = 4816; inDb();
					}
				}

				State = 4820;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 4819; likeOrWhere();
					}
				}

				}
				break;
			case 4:
				{
				State = 4823;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL_SYMBOL) {
					{
					State = 4822; Match(FULL_SYMBOL);
					}
				}

				State = 4825; _localctx.value = Match(TRIGGERS_SYMBOL);
				State = 4827;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					State = 4826; inDb();
					}
				}

				State = 4830;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 4829; likeOrWhere();
					}
				}

				}
				break;
			case 5:
				{
				State = 4832; _localctx.value = Match(EVENTS_SYMBOL);
				State = 4834;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					State = 4833; inDb();
					}
				}

				State = 4837;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 4836; likeOrWhere();
					}
				}

				}
				break;
			case 6:
				{
				State = 4839; _localctx.value = Match(TABLE_SYMBOL);
				State = 4840; Match(STATUS_SYMBOL);
				State = 4842;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					State = 4841; inDb();
					}
				}

				State = 4845;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 4844; likeOrWhere();
					}
				}

				}
				break;
			case 7:
				{
				State = 4847; _localctx.value = Match(OPEN_SYMBOL);
				State = 4848; Match(TABLES_SYMBOL);
				State = 4850;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					State = 4849; inDb();
					}
				}

				State = 4853;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 4852; likeOrWhere();
					}
				}

				}
				break;
			case 8:
				{
				State = 4855; _localctx.value = Match(PLUGINS_SYMBOL);
				}
				break;
			case 9:
				{
				State = 4856; _localctx.value = Match(ENGINE_SYMBOL);
				State = 4859;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,597,Context) ) {
				case 1:
					{
					State = 4857; engineRef();
					}
					break;
				case 2:
					{
					State = 4858; Match(ALL_SYMBOL);
					}
					break;
				}
				State = 4861;
				_la = TokenStream.LA(1);
				if ( !(_la==LOGS_SYMBOL || _la==MUTEX_SYMBOL || _la==STATUS_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 10:
				{
				State = 4863;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,598,Context) ) {
				case 1:
					{
					State = 4862; showCommandType();
					}
					break;
				}
				State = 4865; _localctx.value = Match(COLUMNS_SYMBOL);
				State = 4866;
				_la = TokenStream.LA(1);
				if ( !(_la==FROM_SYMBOL || _la==IN_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4867; tableRef();
				State = 4869;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					State = 4868; inDb();
					}
				}

				State = 4872;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 4871; likeOrWhere();
					}
				}

				}
				break;
			case 11:
				{
				State = 4874;
				_la = TokenStream.LA(1);
				if ( !(_la==MASTER_SYMBOL || _la==BINARY_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4875; _localctx.value = Match(LOGS_SYMBOL);
				}
				break;
			case 12:
				{
				State = 4876; _localctx.value = Match(SLAVE_SYMBOL);
				State = 4883;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case HOSTS_SYMBOL:
					{
					State = 4877; Match(HOSTS_SYMBOL);
					}
					break;
				case STATUS_SYMBOL:
					{
					State = 4878; Match(STATUS_SYMBOL);
					State = 4879; nonBlocking();
					State = 4881;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,601,Context) ) {
					case 1:
						{
						State = 4880; channel();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 13:
				{
				State = 4885;
				_localctx.value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BINLOG_SYMBOL || _la==RELAYLOG_SYMBOL) ) {
					_localctx.value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4886; Match(EVENTS_SYMBOL);
				State = 4889;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,603,Context) ) {
				case 1:
					{
					State = 4887; Match(IN_SYMBOL);
					State = 4888; textString();
					}
					break;
				}
				State = 4893;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,604,Context) ) {
				case 1:
					{
					State = 4891; Match(FROM_SYMBOL);
					State = 4892; ulonglong_number();
					}
					break;
				}
				State = 4896;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,605,Context) ) {
				case 1:
					{
					State = 4895; limitClause();
					}
					break;
				}
				State = 4899;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,606,Context) ) {
				case 1:
					{
					State = 4898; channel();
					}
					break;
				}
				}
				break;
			case 14:
				{
				State = 4903;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,607,Context) ) {
				case 1:
					{
					State = 4901;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 4902; Match(EXTENDED_SYMBOL);
					}
					break;
				}
				State = 4905;
				_localctx.value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEXES_SYMBOL || _la==INDEX_SYMBOL || _la==KEYS_SYMBOL) ) {
					_localctx.value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4906; fromOrIn();
				State = 4907; tableRef();
				State = 4909;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					State = 4908; inDb();
					}
				}

				State = 4912;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE_SYMBOL) {
					{
					State = 4911; whereClause();
					}
				}

				}
				break;
			case 15:
				{
				State = 4915;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORAGE_SYMBOL) {
					{
					State = 4914; Match(STORAGE_SYMBOL);
					}
				}

				State = 4917; _localctx.value = Match(ENGINES_SYMBOL);
				}
				break;
			case 16:
				{
				State = 4918; Match(COUNT_SYMBOL);
				State = 4919; Match(OPEN_PAR_SYMBOL);
				State = 4920; Match(MULT_OPERATOR);
				State = 4921; Match(CLOSE_PAR_SYMBOL);
				State = 4922;
				_localctx.value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ERRORS_SYMBOL || _la==WARNINGS_SYMBOL) ) {
					_localctx.value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 17:
				{
				State = 4923; _localctx.value = Match(WARNINGS_SYMBOL);
				State = 4925;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT_SYMBOL) {
					{
					State = 4924; limitClause();
					}
				}

				}
				break;
			case 18:
				{
				State = 4927; _localctx.value = Match(ERRORS_SYMBOL);
				State = 4929;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT_SYMBOL) {
					{
					State = 4928; limitClause();
					}
				}

				}
				break;
			case 19:
				{
				State = 4931; _localctx.value = Match(PROFILES_SYMBOL);
				}
				break;
			case 20:
				{
				State = 4932; _localctx.value = Match(PROFILE_SYMBOL);
				State = 4941;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (BLOCK_SYMBOL - 73)) | (1L << (CONTEXT_SYMBOL - 73)) | (1L << (CPU_SYMBOL - 73)))) != 0) || _la==IPC_SYMBOL || _la==MEMORY_SYMBOL || _la==PAGE_SYMBOL || _la==SOURCE_SYMBOL || _la==SWAPS_SYMBOL || _la==ALL_SYMBOL) {
					{
					State = 4933; profileType();
					State = 4938;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA_SYMBOL) {
						{
						{
						State = 4934; Match(COMMA_SYMBOL);
						State = 4935; profileType();
						}
						}
						State = 4940;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 4946;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 4943; Match(FOR_SYMBOL);
					State = 4944; Match(QUERY_SYMBOL);
					State = 4945; Match(INT_NUMBER);
					}
				}

				State = 4949;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT_SYMBOL) {
					{
					State = 4948; limitClause();
					}
				}

				}
				break;
			case 21:
				{
				State = 4952;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) {
					{
					State = 4951; optionType();
					}
				}

				State = 4954;
				_localctx.value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==STATUS_SYMBOL || _la==VARIABLES_SYMBOL) ) {
					_localctx.value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4956;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 4955; likeOrWhere();
					}
				}

				}
				break;
			case 22:
				{
				State = 4959;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL_SYMBOL) {
					{
					State = 4958; Match(FULL_SYMBOL);
					}
				}

				State = 4961; _localctx.value = Match(PROCESSLIST_SYMBOL);
				}
				break;
			case 23:
				{
				State = 4962; charset();
				State = 4964;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 4963; likeOrWhere();
					}
				}

				}
				break;
			case 24:
				{
				State = 4966; _localctx.value = Match(COLLATION_SYMBOL);
				State = 4968;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 4967; likeOrWhere();
					}
				}

				}
				break;
			case 25:
				{
				State = 4970;
				if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
				State = 4971; _localctx.value = Match(CONTRIBUTORS_SYMBOL);
				}
				break;
			case 26:
				{
				State = 4972; _localctx.value = Match(PRIVILEGES_SYMBOL);
				}
				break;
			case 27:
				{
				State = 4973; _localctx.value = Match(GRANTS_SYMBOL);
				State = 4976;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 4974; Match(FOR_SYMBOL);
					State = 4975; user();
					}
				}

				}
				break;
			case 28:
				{
				State = 4978; _localctx.value = Match(GRANTS_SYMBOL);
				State = 4979; Match(FOR_SYMBOL);
				State = 4980; user();
				State = 4981; Match(USING_SYMBOL);
				State = 4982; userList();
				}
				break;
			case 29:
				{
				State = 4984; _localctx.value = Match(MASTER_SYMBOL);
				State = 4985; Match(STATUS_SYMBOL);
				}
				break;
			case 30:
				{
				State = 4986; _localctx.value = Match(CREATE_SYMBOL);
				State = 5007;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,624,Context) ) {
				case 1:
					{
					State = 4987; _localctx.@object = Match(DATABASE_SYMBOL);
					State = 4989;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,623,Context) ) {
					case 1:
						{
						State = 4988; ifNotExists();
						}
						break;
					}
					State = 4991; schemaRef();
					}
					break;
				case 2:
					{
					State = 4992; _localctx.@object = Match(EVENT_SYMBOL);
					State = 4993; eventRef();
					}
					break;
				case 3:
					{
					State = 4994; _localctx.@object = Match(FUNCTION_SYMBOL);
					State = 4995; functionRef();
					}
					break;
				case 4:
					{
					State = 4996; _localctx.@object = Match(PROCEDURE_SYMBOL);
					State = 4997; procedureRef();
					}
					break;
				case 5:
					{
					State = 4998; _localctx.@object = Match(TABLE_SYMBOL);
					State = 4999; tableRef();
					}
					break;
				case 6:
					{
					State = 5000; _localctx.@object = Match(TRIGGER_SYMBOL);
					State = 5001; triggerRef();
					}
					break;
				case 7:
					{
					State = 5002; _localctx.@object = Match(VIEW_SYMBOL);
					State = 5003; viewRef();
					}
					break;
				case 8:
					{
					State = 5004;
					if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
					State = 5005; _localctx.@object = Match(USER_SYMBOL);
					State = 5006; user();
					}
					break;
				}
				}
				break;
			case 31:
				{
				State = 5009; _localctx.value = Match(PROCEDURE_SYMBOL);
				State = 5010; Match(STATUS_SYMBOL);
				State = 5012;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 5011; likeOrWhere();
					}
				}

				}
				break;
			case 32:
				{
				State = 5014; _localctx.value = Match(FUNCTION_SYMBOL);
				State = 5015; Match(STATUS_SYMBOL);
				State = 5017;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 5016; likeOrWhere();
					}
				}

				}
				break;
			case 33:
				{
				State = 5019; _localctx.value = Match(PROCEDURE_SYMBOL);
				State = 5020; Match(CODE_SYMBOL);
				State = 5021; procedureRef();
				}
				break;
			case 34:
				{
				State = 5022; _localctx.value = Match(FUNCTION_SYMBOL);
				State = 5023; Match(CODE_SYMBOL);
				State = 5024; functionRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCommandTypeContext : ParserRuleContext {
		public ITerminalNode FULL_SYMBOL() { return GetToken(MySQLParser.FULL_SYMBOL, 0); }
		public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public ShowCommandTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCommandType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowCommandType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowCommandType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCommandType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowCommandTypeContext showCommandType() {
		ShowCommandTypeContext _localctx = new ShowCommandTypeContext(Context, State);
		EnterRule(_localctx, 578, RULE_showCommandType);
		int _la;
		try {
			State = 5033;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,629,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5027; Match(FULL_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5028;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 5029; Match(EXTENDED_SYMBOL);
				State = 5031;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL_SYMBOL) {
					{
					State = 5030; Match(FULL_SYMBOL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonBlockingContext : ParserRuleContext {
		public ITerminalNode NONBLOCKING_SYMBOL() { return GetToken(MySQLParser.NONBLOCKING_SYMBOL, 0); }
		public NonBlockingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonBlocking; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNonBlocking(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNonBlocking(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonBlocking(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonBlockingContext nonBlocking() {
		NonBlockingContext _localctx = new NonBlockingContext(Context, State);
		EnterRule(_localctx, 580, RULE_nonBlocking);
		try {
			State = 5040;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,631,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5035;
				if (!(serverVersion >= 50700 && serverVersion < 50706)) throw new FailedPredicateException(this, "serverVersion >= 50700 && serverVersion < 50706");
				State = 5037;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,630,Context) ) {
				case 1:
					{
					State = 5036; Match(NONBLOCKING_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromOrInContext : ParserRuleContext {
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		public FromOrInContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromOrIn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFromOrIn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFromOrIn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromOrIn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromOrInContext fromOrIn() {
		FromOrInContext _localctx = new FromOrInContext(Context, State);
		EnterRule(_localctx, 582, RULE_fromOrIn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5042;
			_la = TokenStream.LA(1);
			if ( !(_la==FROM_SYMBOL || _la==IN_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InDbContext : ParserRuleContext {
		public FromOrInContext fromOrIn() {
			return GetRuleContext<FromOrInContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public InDbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inDb; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInDb(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInDb(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInDb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InDbContext inDb() {
		InDbContext _localctx = new InDbContext(Context, State);
		EnterRule(_localctx, 584, RULE_inDb);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5044; fromOrIn();
			State = 5045; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProfileTypeContext : ParserRuleContext {
		public ITerminalNode BLOCK_SYMBOL() { return GetToken(MySQLParser.BLOCK_SYMBOL, 0); }
		public ITerminalNode IO_SYMBOL() { return GetToken(MySQLParser.IO_SYMBOL, 0); }
		public ITerminalNode CONTEXT_SYMBOL() { return GetToken(MySQLParser.CONTEXT_SYMBOL, 0); }
		public ITerminalNode SWITCHES_SYMBOL() { return GetToken(MySQLParser.SWITCHES_SYMBOL, 0); }
		public ITerminalNode PAGE_SYMBOL() { return GetToken(MySQLParser.PAGE_SYMBOL, 0); }
		public ITerminalNode FAULTS_SYMBOL() { return GetToken(MySQLParser.FAULTS_SYMBOL, 0); }
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public ITerminalNode CPU_SYMBOL() { return GetToken(MySQLParser.CPU_SYMBOL, 0); }
		public ITerminalNode IPC_SYMBOL() { return GetToken(MySQLParser.IPC_SYMBOL, 0); }
		public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public ITerminalNode SOURCE_SYMBOL() { return GetToken(MySQLParser.SOURCE_SYMBOL, 0); }
		public ITerminalNode SWAPS_SYMBOL() { return GetToken(MySQLParser.SWAPS_SYMBOL, 0); }
		public ProfileTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_profileType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterProfileType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitProfileType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProfileType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProfileTypeContext profileType() {
		ProfileTypeContext _localctx = new ProfileTypeContext(Context, State);
		EnterRule(_localctx, 586, RULE_profileType);
		int _la;
		try {
			State = 5054;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BLOCK_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5047; Match(BLOCK_SYMBOL);
				State = 5048; Match(IO_SYMBOL);
				}
				break;
			case CONTEXT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5049; Match(CONTEXT_SYMBOL);
				State = 5050; Match(SWITCHES_SYMBOL);
				}
				break;
			case PAGE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5051; Match(PAGE_SYMBOL);
				State = 5052; Match(FAULTS_SYMBOL);
				}
				break;
			case CPU_SYMBOL:
			case IPC_SYMBOL:
			case MEMORY_SYMBOL:
			case SOURCE_SYMBOL:
			case SWAPS_SYMBOL:
			case ALL_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5053;
				_la = TokenStream.LA(1);
				if ( !(_la==CPU_SYMBOL || _la==IPC_SYMBOL || _la==MEMORY_SYMBOL || _la==SOURCE_SYMBOL || _la==SWAPS_SYMBOL || _la==ALL_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherAdministrativeStatementContext : ParserRuleContext {
		public IToken type;
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode BINLOG_SYMBOL() { return GetToken(MySQLParser.BINLOG_SYMBOL, 0); }
		public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		public KeyCacheListOrPartsContext keyCacheListOrParts() {
			return GetRuleContext<KeyCacheListOrPartsContext>(0);
		}
		public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		public ITerminalNode CACHE_SYMBOL() { return GetToken(MySQLParser.CACHE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ITerminalNode FLUSH_SYMBOL() { return GetToken(MySQLParser.FLUSH_SYMBOL, 0); }
		public FlushTablesContext flushTables() {
			return GetRuleContext<FlushTablesContext>(0);
		}
		public FlushOptionContext[] flushOption() {
			return GetRuleContexts<FlushOptionContext>();
		}
		public FlushOptionContext flushOption(int i) {
			return GetRuleContext<FlushOptionContext>(i);
		}
		public NoWriteToBinLogContext noWriteToBinLog() {
			return GetRuleContext<NoWriteToBinLogContext>(0);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode KILL_SYMBOL() { return GetToken(MySQLParser.KILL_SYMBOL, 0); }
		public ITerminalNode CONNECTION_SYMBOL() { return GetToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public ITerminalNode QUERY_SYMBOL() { return GetToken(MySQLParser.QUERY_SYMBOL, 0); }
		public ITerminalNode INTO_SYMBOL() { return GetToken(MySQLParser.INTO_SYMBOL, 0); }
		public PreloadTailContext preloadTail() {
			return GetRuleContext<PreloadTailContext>(0);
		}
		public ITerminalNode LOAD_SYMBOL() { return GetToken(MySQLParser.LOAD_SYMBOL, 0); }
		public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public OtherAdministrativeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherAdministrativeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOtherAdministrativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOtherAdministrativeStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherAdministrativeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherAdministrativeStatementContext otherAdministrativeStatement() {
		OtherAdministrativeStatementContext _localctx = new OtherAdministrativeStatementContext(Context, State);
		EnterRule(_localctx, 588, RULE_otherAdministrativeStatement);
		int _la;
		try {
			State = 5093;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,638,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5056; _localctx.type = Match(BINLOG_SYMBOL);
				State = 5057; textLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5058; _localctx.type = Match(CACHE_SYMBOL);
				State = 5059; Match(INDEX_SYMBOL);
				State = 5060; keyCacheListOrParts();
				State = 5061; Match(IN_SYMBOL);
				State = 5064;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,633,Context) ) {
				case 1:
					{
					State = 5062; identifier();
					}
					break;
				case 2:
					{
					State = 5063; Match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5066; _localctx.type = Match(FLUSH_SYMBOL);
				State = 5068;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,634,Context) ) {
				case 1:
					{
					State = 5067; noWriteToBinLog();
					}
					break;
				}
				State = 5079;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,636,Context) ) {
				case 1:
					{
					State = 5070; flushTables();
					}
					break;
				case 2:
					{
					State = 5071; flushOption();
					State = 5076;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA_SYMBOL) {
						{
						{
						State = 5072; Match(COMMA_SYMBOL);
						State = 5073; flushOption();
						}
						}
						State = 5078;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5081; _localctx.type = Match(KILL_SYMBOL);
				State = 5083;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,637,Context) ) {
				case 1:
					{
					State = 5082;
					_la = TokenStream.LA(1);
					if ( !(_la==CONNECTION_SYMBOL || _la==QUERY_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5085; expr(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5086; _localctx.type = Match(LOAD_SYMBOL);
				State = 5087; Match(INDEX_SYMBOL);
				State = 5088; Match(INTO_SYMBOL);
				State = 5089; Match(CACHE_SYMBOL);
				State = 5090; preloadTail();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5091;
				if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
				State = 5092; _localctx.type = Match(SHUTDOWN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyCacheListOrPartsContext : ParserRuleContext {
		public KeyCacheListContext keyCacheList() {
			return GetRuleContext<KeyCacheListContext>(0);
		}
		public AssignToKeycachePartitionContext assignToKeycachePartition() {
			return GetRuleContext<AssignToKeycachePartitionContext>(0);
		}
		public KeyCacheListOrPartsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyCacheListOrParts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyCacheListOrParts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyCacheListOrParts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyCacheListOrParts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyCacheListOrPartsContext keyCacheListOrParts() {
		KeyCacheListOrPartsContext _localctx = new KeyCacheListOrPartsContext(Context, State);
		EnterRule(_localctx, 590, RULE_keyCacheListOrParts);
		try {
			State = 5097;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,639,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5095; keyCacheList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5096; assignToKeycachePartition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyCacheListContext : ParserRuleContext {
		public AssignToKeycacheContext[] assignToKeycache() {
			return GetRuleContexts<AssignToKeycacheContext>();
		}
		public AssignToKeycacheContext assignToKeycache(int i) {
			return GetRuleContext<AssignToKeycacheContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyCacheListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyCacheList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyCacheList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyCacheList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyCacheList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyCacheListContext keyCacheList() {
		KeyCacheListContext _localctx = new KeyCacheListContext(Context, State);
		EnterRule(_localctx, 592, RULE_keyCacheList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5099; assignToKeycache();
			State = 5104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 5100; Match(COMMA_SYMBOL);
				State = 5101; assignToKeycache();
				}
				}
				State = 5106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignToKeycacheContext : ParserRuleContext {
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public CacheKeyListContext cacheKeyList() {
			return GetRuleContext<CacheKeyListContext>(0);
		}
		public AssignToKeycacheContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignToKeycache; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAssignToKeycache(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAssignToKeycache(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignToKeycache(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignToKeycacheContext assignToKeycache() {
		AssignToKeycacheContext _localctx = new AssignToKeycacheContext(Context, State);
		EnterRule(_localctx, 594, RULE_assignToKeycache);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5107; tableRef();
			State = 5109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				State = 5108; cacheKeyList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignToKeycachePartitionContext : ParserRuleContext {
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public AllOrPartitionNameListContext allOrPartitionNameList() {
			return GetRuleContext<AllOrPartitionNameListContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public CacheKeyListContext cacheKeyList() {
			return GetRuleContext<CacheKeyListContext>(0);
		}
		public AssignToKeycachePartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignToKeycachePartition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAssignToKeycachePartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAssignToKeycachePartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignToKeycachePartition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignToKeycachePartitionContext assignToKeycachePartition() {
		AssignToKeycachePartitionContext _localctx = new AssignToKeycachePartitionContext(Context, State);
		EnterRule(_localctx, 596, RULE_assignToKeycachePartition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5111; tableRef();
			State = 5112; Match(PARTITION_SYMBOL);
			State = 5113; Match(OPEN_PAR_SYMBOL);
			State = 5114; allOrPartitionNameList();
			State = 5115; Match(CLOSE_PAR_SYMBOL);
			State = 5117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				State = 5116; cacheKeyList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CacheKeyListContext : ParserRuleContext {
		public KeyOrIndexContext keyOrIndex() {
			return GetRuleContext<KeyOrIndexContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public KeyUsageListContext keyUsageList() {
			return GetRuleContext<KeyUsageListContext>(0);
		}
		public CacheKeyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cacheKeyList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCacheKeyList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCacheKeyList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCacheKeyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CacheKeyListContext cacheKeyList() {
		CacheKeyListContext _localctx = new CacheKeyListContext(Context, State);
		EnterRule(_localctx, 598, RULE_cacheKeyList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5119; keyOrIndex();
			State = 5120; Match(OPEN_PAR_SYMBOL);
			State = 5122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,643,Context) ) {
			case 1:
				{
				State = 5121; keyUsageList();
				}
				break;
			}
			State = 5124; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyUsageElementContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public KeyUsageElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyUsageElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyUsageElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyUsageElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyUsageElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyUsageElementContext keyUsageElement() {
		KeyUsageElementContext _localctx = new KeyUsageElementContext(Context, State);
		EnterRule(_localctx, 600, RULE_keyUsageElement);
		try {
			State = 5128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,644,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5126; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5127; Match(PRIMARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyUsageListContext : ParserRuleContext {
		public KeyUsageElementContext[] keyUsageElement() {
			return GetRuleContexts<KeyUsageElementContext>();
		}
		public KeyUsageElementContext keyUsageElement(int i) {
			return GetRuleContext<KeyUsageElementContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyUsageListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyUsageList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyUsageList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyUsageList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyUsageList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyUsageListContext keyUsageList() {
		KeyUsageListContext _localctx = new KeyUsageListContext(Context, State);
		EnterRule(_localctx, 602, RULE_keyUsageList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5130; keyUsageElement();
			State = 5135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 5131; Match(COMMA_SYMBOL);
				State = 5132; keyUsageElement();
				}
				}
				State = 5137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushOptionContext : ParserRuleContext {
		public IToken option;
		public ITerminalNode DES_KEY_FILE_SYMBOL() { return GetToken(MySQLParser.DES_KEY_FILE_SYMBOL, 0); }
		public ITerminalNode HOSTS_SYMBOL() { return GetToken(MySQLParser.HOSTS_SYMBOL, 0); }
		public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public ITerminalNode STATUS_SYMBOL() { return GetToken(MySQLParser.STATUS_SYMBOL, 0); }
		public ITerminalNode USER_RESOURCES_SYMBOL() { return GetToken(MySQLParser.USER_RESOURCES_SYMBOL, 0); }
		public ITerminalNode LOGS_SYMBOL() { return GetToken(MySQLParser.LOGS_SYMBOL, 0); }
		public LogTypeContext logType() {
			return GetRuleContext<LogTypeContext>(0);
		}
		public ITerminalNode RELAY_SYMBOL() { return GetToken(MySQLParser.RELAY_SYMBOL, 0); }
		public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ITerminalNode CACHE_SYMBOL() { return GetToken(MySQLParser.CACHE_SYMBOL, 0); }
		public ITerminalNode QUERY_SYMBOL() { return GetToken(MySQLParser.QUERY_SYMBOL, 0); }
		public ITerminalNode OPTIMIZER_COSTS_SYMBOL() { return GetToken(MySQLParser.OPTIMIZER_COSTS_SYMBOL, 0); }
		public FlushOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFlushOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFlushOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlushOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlushOptionContext flushOption() {
		FlushOptionContext _localctx = new FlushOptionContext(Context, State);
		EnterRule(_localctx, 604, RULE_flushOption);
		int _la;
		try {
			State = 5153;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,648,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5138;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DES_KEY_FILE_SYMBOL || _la==HOSTS_SYMBOL || _la==PRIVILEGES_SYMBOL || _la==STATUS_SYMBOL || _la==USER_RESOURCES_SYMBOL) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENGINE_SYMBOL - 128)) | (1L << (ERROR_SYMBOL - 128)) | (1L << (GENERAL_SYMBOL - 128)))) != 0) || _la==SLOW_SYMBOL || _la==BINARY_SYMBOL) {
					{
					State = 5139; logType();
					}
				}

				State = 5142; _localctx.option = Match(LOGS_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5143; _localctx.option = Match(RELAY_SYMBOL);
				State = 5144; Match(LOGS_SYMBOL);
				State = 5146;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,647,Context) ) {
				case 1:
					{
					State = 5145; channel();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5148;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 5149; _localctx.option = Match(QUERY_SYMBOL);
				State = 5150; Match(CACHE_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5151;
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				State = 5152; _localctx.option = Match(OPTIMIZER_COSTS_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogTypeContext : ParserRuleContext {
		public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public ITerminalNode ERROR_SYMBOL() { return GetToken(MySQLParser.ERROR_SYMBOL, 0); }
		public ITerminalNode GENERAL_SYMBOL() { return GetToken(MySQLParser.GENERAL_SYMBOL, 0); }
		public ITerminalNode SLOW_SYMBOL() { return GetToken(MySQLParser.SLOW_SYMBOL, 0); }
		public LogTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLogType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLogType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogTypeContext logType() {
		LogTypeContext _localctx = new LogTypeContext(Context, State);
		EnterRule(_localctx, 606, RULE_logType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5155;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENGINE_SYMBOL - 128)) | (1L << (ERROR_SYMBOL - 128)) | (1L << (GENERAL_SYMBOL - 128)))) != 0) || _la==SLOW_SYMBOL || _la==BINARY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushTablesContext : ParserRuleContext {
		public ITerminalNode TABLES_SYMBOL() { return GetToken(MySQLParser.TABLES_SYMBOL, 0); }
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode READ_SYMBOL() { return GetToken(MySQLParser.READ_SYMBOL, 0); }
		public ITerminalNode LOCK_SYMBOL() { return GetToken(MySQLParser.LOCK_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public FlushTablesOptionsContext flushTablesOptions() {
			return GetRuleContext<FlushTablesOptionsContext>(0);
		}
		public FlushTablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushTables; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFlushTables(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFlushTables(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlushTables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlushTablesContext flushTables() {
		FlushTablesContext _localctx = new FlushTablesContext(Context, State);
		EnterRule(_localctx, 608, RULE_flushTables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5157;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5165;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,650,Context) ) {
			case 1:
				{
				State = 5158; Match(WITH_SYMBOL);
				State = 5159; Match(READ_SYMBOL);
				State = 5160; Match(LOCK_SYMBOL);
				}
				break;
			case 2:
				{
				State = 5161; identifierList();
				State = 5163;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,649,Context) ) {
				case 1:
					{
					State = 5162; flushTablesOptions();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushTablesOptionsContext : ParserRuleContext {
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public ITerminalNode EXPORT_SYMBOL() { return GetToken(MySQLParser.EXPORT_SYMBOL, 0); }
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode READ_SYMBOL() { return GetToken(MySQLParser.READ_SYMBOL, 0); }
		public ITerminalNode LOCK_SYMBOL() { return GetToken(MySQLParser.LOCK_SYMBOL, 0); }
		public FlushTablesOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushTablesOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFlushTablesOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFlushTablesOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlushTablesOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlushTablesOptionsContext flushTablesOptions() {
		FlushTablesOptionsContext _localctx = new FlushTablesOptionsContext(Context, State);
		EnterRule(_localctx, 610, RULE_flushTablesOptions);
		try {
			State = 5173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,651,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5167;
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				State = 5168; Match(FOR_SYMBOL);
				State = 5169; Match(EXPORT_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5170; Match(WITH_SYMBOL);
				State = 5171; Match(READ_SYMBOL);
				State = 5172; Match(LOCK_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreloadTailContext : ParserRuleContext {
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public AdminPartitionContext adminPartition() {
			return GetRuleContext<AdminPartitionContext>(0);
		}
		public CacheKeyListContext cacheKeyList() {
			return GetRuleContext<CacheKeyListContext>(0);
		}
		public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public ITerminalNode LEAVES_SYMBOL() { return GetToken(MySQLParser.LEAVES_SYMBOL, 0); }
		public PreloadListContext preloadList() {
			return GetRuleContext<PreloadListContext>(0);
		}
		public PreloadTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preloadTail; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPreloadTail(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPreloadTail(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreloadTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreloadTailContext preloadTail() {
		PreloadTailContext _localctx = new PreloadTailContext(Context, State);
		EnterRule(_localctx, 612, RULE_preloadTail);
		int _la;
		try {
			State = 5185;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,654,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5175; tableRef();
				State = 5176; adminPartition();
				State = 5178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
					{
					State = 5177; cacheKeyList();
					}
				}

				State = 5182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE_SYMBOL) {
					{
					State = 5180; Match(IGNORE_SYMBOL);
					State = 5181; Match(LEAVES_SYMBOL);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5184; preloadList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreloadListContext : ParserRuleContext {
		public PreloadKeysContext[] preloadKeys() {
			return GetRuleContexts<PreloadKeysContext>();
		}
		public PreloadKeysContext preloadKeys(int i) {
			return GetRuleContext<PreloadKeysContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PreloadListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preloadList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPreloadList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPreloadList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreloadList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreloadListContext preloadList() {
		PreloadListContext _localctx = new PreloadListContext(Context, State);
		EnterRule(_localctx, 614, RULE_preloadList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5187; preloadKeys();
			State = 5192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 5188; Match(COMMA_SYMBOL);
				State = 5189; preloadKeys();
				}
				}
				State = 5194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreloadKeysContext : ParserRuleContext {
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public CacheKeyListContext cacheKeyList() {
			return GetRuleContext<CacheKeyListContext>(0);
		}
		public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public ITerminalNode LEAVES_SYMBOL() { return GetToken(MySQLParser.LEAVES_SYMBOL, 0); }
		public PreloadKeysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preloadKeys; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPreloadKeys(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPreloadKeys(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreloadKeys(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreloadKeysContext preloadKeys() {
		PreloadKeysContext _localctx = new PreloadKeysContext(Context, State);
		EnterRule(_localctx, 616, RULE_preloadKeys);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5195; tableRef();
			State = 5197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				State = 5196; cacheKeyList();
				}
			}

			State = 5201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE_SYMBOL) {
				{
				State = 5199; Match(IGNORE_SYMBOL);
				State = 5200; Match(LEAVES_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdminPartitionContext : ParserRuleContext {
		public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public AllOrPartitionNameListContext allOrPartitionNameList() {
			return GetRuleContext<AllOrPartitionNameListContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public AdminPartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_adminPartition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAdminPartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAdminPartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdminPartition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdminPartitionContext adminPartition() {
		AdminPartitionContext _localctx = new AdminPartitionContext(Context, State);
		EnterRule(_localctx, 618, RULE_adminPartition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5203; Match(PARTITION_SYMBOL);
			State = 5204; Match(OPEN_PAR_SYMBOL);
			State = 5205; allOrPartitionNameList();
			State = 5206; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceGroupManagementContext : ParserRuleContext {
		public CreateResourceGroupContext createResourceGroup() {
			return GetRuleContext<CreateResourceGroupContext>(0);
		}
		public AlterResourceGroupContext alterResourceGroup() {
			return GetRuleContext<AlterResourceGroupContext>(0);
		}
		public SetResourceGroupContext setResourceGroup() {
			return GetRuleContext<SetResourceGroupContext>(0);
		}
		public DropResourceGroupContext dropResourceGroup() {
			return GetRuleContext<DropResourceGroupContext>(0);
		}
		public ResourceGroupManagementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceGroupManagement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterResourceGroupManagement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitResourceGroupManagement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceGroupManagement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceGroupManagementContext resourceGroupManagement() {
		ResourceGroupManagementContext _localctx = new ResourceGroupManagementContext(Context, State);
		EnterRule(_localctx, 620, RULE_resourceGroupManagement);
		try {
			State = 5212;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CREATE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5208; createResourceGroup();
				}
				break;
			case ALTER_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5209; alterResourceGroup();
				}
				break;
			case SET_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5210; setResourceGroup();
				}
				break;
			case DROP_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5211; dropResourceGroup();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateResourceGroupContext : ParserRuleContext {
		public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TYPE_SYMBOL() { return GetToken(MySQLParser.TYPE_SYMBOL, 0); }
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public ITerminalNode SYSTEM_SYMBOL() { return GetToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public ResourceGroupVcpuListContext resourceGroupVcpuList() {
			return GetRuleContext<ResourceGroupVcpuListContext>(0);
		}
		public ResourceGroupPriorityContext resourceGroupPriority() {
			return GetRuleContext<ResourceGroupPriorityContext>(0);
		}
		public ResourceGroupEnableDisableContext resourceGroupEnableDisable() {
			return GetRuleContext<ResourceGroupEnableDisableContext>(0);
		}
		public CreateResourceGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createResourceGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateResourceGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateResourceGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateResourceGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateResourceGroupContext createResourceGroup() {
		CreateResourceGroupContext _localctx = new CreateResourceGroupContext(Context, State);
		EnterRule(_localctx, 622, RULE_createResourceGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5214; Match(CREATE_SYMBOL);
			State = 5215; Match(RESOURCE_SYMBOL);
			State = 5216; Match(GROUP_SYMBOL);
			State = 5217; identifier();
			State = 5218; Match(TYPE_SYMBOL);
			State = 5220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				State = 5219; equal();
				}
			}

			State = 5222;
			_la = TokenStream.LA(1);
			if ( !(_la==USER_SYMBOL || _la==SYSTEM_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VCPU_SYMBOL) {
				{
				State = 5223; resourceGroupVcpuList();
				}
			}

			State = 5227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THREAD_PRIORITY_SYMBOL) {
				{
				State = 5226; resourceGroupPriority();
				}
			}

			State = 5230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) {
				{
				State = 5229; resourceGroupEnableDisable();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceGroupVcpuListContext : ParserRuleContext {
		public ITerminalNode VCPU_SYMBOL() { return GetToken(MySQLParser.VCPU_SYMBOL, 0); }
		public VcpuNumOrRangeContext[] vcpuNumOrRange() {
			return GetRuleContexts<VcpuNumOrRangeContext>();
		}
		public VcpuNumOrRangeContext vcpuNumOrRange(int i) {
			return GetRuleContext<VcpuNumOrRangeContext>(i);
		}
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ResourceGroupVcpuListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceGroupVcpuList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterResourceGroupVcpuList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitResourceGroupVcpuList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceGroupVcpuList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceGroupVcpuListContext resourceGroupVcpuList() {
		ResourceGroupVcpuListContext _localctx = new ResourceGroupVcpuListContext(Context, State);
		EnterRule(_localctx, 624, RULE_resourceGroupVcpuList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5232; Match(VCPU_SYMBOL);
			State = 5234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				State = 5233; equal();
				}
			}

			State = 5236; vcpuNumOrRange();
			State = 5243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INT_NUMBER || _la==COMMA_SYMBOL) {
				{
				{
				State = 5238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 5237; Match(COMMA_SYMBOL);
					}
				}

				State = 5240; vcpuNumOrRange();
				}
				}
				State = 5245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VcpuNumOrRangeContext : ParserRuleContext {
		public ITerminalNode[] INT_NUMBER() { return GetTokens(MySQLParser.INT_NUMBER); }
		public ITerminalNode INT_NUMBER(int i) {
			return GetToken(MySQLParser.INT_NUMBER, i);
		}
		public ITerminalNode MINUS_OPERATOR() { return GetToken(MySQLParser.MINUS_OPERATOR, 0); }
		public VcpuNumOrRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vcpuNumOrRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterVcpuNumOrRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitVcpuNumOrRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVcpuNumOrRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VcpuNumOrRangeContext vcpuNumOrRange() {
		VcpuNumOrRangeContext _localctx = new VcpuNumOrRangeContext(Context, State);
		EnterRule(_localctx, 626, RULE_vcpuNumOrRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5246; Match(INT_NUMBER);
			State = 5249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS_OPERATOR) {
				{
				State = 5247; Match(MINUS_OPERATOR);
				State = 5248; Match(INT_NUMBER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceGroupPriorityContext : ParserRuleContext {
		public ITerminalNode THREAD_PRIORITY_SYMBOL() { return GetToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
		public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public ResourceGroupPriorityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceGroupPriority; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterResourceGroupPriority(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitResourceGroupPriority(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceGroupPriority(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceGroupPriorityContext resourceGroupPriority() {
		ResourceGroupPriorityContext _localctx = new ResourceGroupPriorityContext(Context, State);
		EnterRule(_localctx, 628, RULE_resourceGroupPriority);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5251; Match(THREAD_PRIORITY_SYMBOL);
			State = 5253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				State = 5252; equal();
				}
			}

			State = 5255; Match(INT_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceGroupEnableDisableContext : ParserRuleContext {
		public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public ResourceGroupEnableDisableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceGroupEnableDisable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterResourceGroupEnableDisable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitResourceGroupEnableDisable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceGroupEnableDisable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceGroupEnableDisableContext resourceGroupEnableDisable() {
		ResourceGroupEnableDisableContext _localctx = new ResourceGroupEnableDisableContext(Context, State);
		EnterRule(_localctx, 630, RULE_resourceGroupEnableDisable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5257;
			_la = TokenStream.LA(1);
			if ( !(_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterResourceGroupContext : ParserRuleContext {
		public ITerminalNode ALTER_SYMBOL() { return GetToken(MySQLParser.ALTER_SYMBOL, 0); }
		public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		public ResourceGroupRefContext resourceGroupRef() {
			return GetRuleContext<ResourceGroupRefContext>(0);
		}
		public ResourceGroupVcpuListContext resourceGroupVcpuList() {
			return GetRuleContext<ResourceGroupVcpuListContext>(0);
		}
		public ResourceGroupPriorityContext resourceGroupPriority() {
			return GetRuleContext<ResourceGroupPriorityContext>(0);
		}
		public ResourceGroupEnableDisableContext resourceGroupEnableDisable() {
			return GetRuleContext<ResourceGroupEnableDisableContext>(0);
		}
		public ITerminalNode FORCE_SYMBOL() { return GetToken(MySQLParser.FORCE_SYMBOL, 0); }
		public AlterResourceGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterResourceGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterResourceGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterResourceGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterResourceGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterResourceGroupContext alterResourceGroup() {
		AlterResourceGroupContext _localctx = new AlterResourceGroupContext(Context, State);
		EnterRule(_localctx, 632, RULE_alterResourceGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5259; Match(ALTER_SYMBOL);
			State = 5260; Match(RESOURCE_SYMBOL);
			State = 5261; Match(GROUP_SYMBOL);
			State = 5262; resourceGroupRef();
			State = 5264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VCPU_SYMBOL) {
				{
				State = 5263; resourceGroupVcpuList();
				}
			}

			State = 5267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THREAD_PRIORITY_SYMBOL) {
				{
				State = 5266; resourceGroupPriority();
				}
			}

			State = 5270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) {
				{
				State = 5269; resourceGroupEnableDisable();
				}
			}

			State = 5273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORCE_SYMBOL) {
				{
				State = 5272; Match(FORCE_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetResourceGroupContext : ParserRuleContext {
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public ThreadIdListContext threadIdList() {
			return GetRuleContext<ThreadIdListContext>(0);
		}
		public SetResourceGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setResourceGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSetResourceGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSetResourceGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetResourceGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetResourceGroupContext setResourceGroup() {
		SetResourceGroupContext _localctx = new SetResourceGroupContext(Context, State);
		EnterRule(_localctx, 634, RULE_setResourceGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5275; Match(SET_SYMBOL);
			State = 5276; Match(RESOURCE_SYMBOL);
			State = 5277; Match(GROUP_SYMBOL);
			State = 5278; identifier();
			State = 5281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				State = 5279; Match(FOR_SYMBOL);
				State = 5280; threadIdList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThreadIdListContext : ParserRuleContext {
		public Real_ulong_numberContext[] real_ulong_number() {
			return GetRuleContexts<Real_ulong_numberContext>();
		}
		public Real_ulong_numberContext real_ulong_number(int i) {
			return GetRuleContext<Real_ulong_numberContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ThreadIdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_threadIdList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterThreadIdList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitThreadIdList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThreadIdList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThreadIdListContext threadIdList() {
		ThreadIdListContext _localctx = new ThreadIdListContext(Context, State);
		EnterRule(_localctx, 636, RULE_threadIdList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5283; real_ulong_number();
			State = 5290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (COMMA_SYMBOL - 380)) | (1L << (HEX_NUMBER - 380)))) != 0)) {
				{
				{
				State = 5285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 5284; Match(COMMA_SYMBOL);
					}
				}

				State = 5287; real_ulong_number();
				}
				}
				State = 5292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropResourceGroupContext : ParserRuleContext {
		public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		public ResourceGroupRefContext resourceGroupRef() {
			return GetRuleContext<ResourceGroupRefContext>(0);
		}
		public ITerminalNode FORCE_SYMBOL() { return GetToken(MySQLParser.FORCE_SYMBOL, 0); }
		public DropResourceGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropResourceGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropResourceGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropResourceGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropResourceGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropResourceGroupContext dropResourceGroup() {
		DropResourceGroupContext _localctx = new DropResourceGroupContext(Context, State);
		EnterRule(_localctx, 638, RULE_dropResourceGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5293; Match(DROP_SYMBOL);
			State = 5294; Match(RESOURCE_SYMBOL);
			State = 5295; Match(GROUP_SYMBOL);
			State = 5296; resourceGroupRef();
			State = 5298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORCE_SYMBOL) {
				{
				State = 5297; Match(FORCE_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UtilityStatementContext : ParserRuleContext {
		public DescribeCommandContext describeCommand() {
			return GetRuleContext<DescribeCommandContext>(0);
		}
		public ExplainCommandContext explainCommand() {
			return GetRuleContext<ExplainCommandContext>(0);
		}
		public HelpCommandContext helpCommand() {
			return GetRuleContext<HelpCommandContext>(0);
		}
		public UseCommandContext useCommand() {
			return GetRuleContext<UseCommandContext>(0);
		}
		public RestartServerContext restartServer() {
			return GetRuleContext<RestartServerContext>(0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_utilityStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUtilityStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUtilityStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUtilityStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UtilityStatementContext utilityStatement() {
		UtilityStatementContext _localctx = new UtilityStatementContext(Context, State);
		EnterRule(_localctx, 640, RULE_utilityStatement);
		try {
			State = 5306;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,676,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5300; describeCommand();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5301; explainCommand();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5302; helpCommand();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5303; useCommand();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5304;
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				State = 5305; restartServer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescribeCommandContext : ParserRuleContext {
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ITerminalNode DESCRIBE_SYMBOL() { return GetToken(MySQLParser.DESCRIBE_SYMBOL, 0); }
		public ITerminalNode DESC_SYMBOL() { return GetToken(MySQLParser.DESC_SYMBOL, 0); }
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public ColumnRefContext columnRef() {
			return GetRuleContext<ColumnRefContext>(0);
		}
		public DescribeCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_describeCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDescribeCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDescribeCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescribeCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescribeCommandContext describeCommand() {
		DescribeCommandContext _localctx = new DescribeCommandContext(Context, State);
		EnterRule(_localctx, 642, RULE_describeCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5308;
			_la = TokenStream.LA(1);
			if ( !(_la==DESC_SYMBOL || _la==DESCRIBE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5309; tableRef();
			State = 5312;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,677,Context) ) {
			case 1:
				{
				State = 5310; textString();
				}
				break;
			case 2:
				{
				State = 5311; columnRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainCommandContext : ParserRuleContext {
		public ExplainableStatementContext explainableStatement() {
			return GetRuleContext<ExplainableStatementContext>(0);
		}
		public ITerminalNode DESCRIBE_SYMBOL() { return GetToken(MySQLParser.DESCRIBE_SYMBOL, 0); }
		public ITerminalNode DESC_SYMBOL() { return GetToken(MySQLParser.DESC_SYMBOL, 0); }
		public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public ITerminalNode PARTITIONS_SYMBOL() { return GetToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public ITerminalNode FORMAT_SYMBOL() { return GetToken(MySQLParser.FORMAT_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ExplainCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExplainCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExplainCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplainCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplainCommandContext explainCommand() {
		ExplainCommandContext _localctx = new ExplainCommandContext(Context, State);
		EnterRule(_localctx, 644, RULE_explainCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5314;
			_la = TokenStream.LA(1);
			if ( !(_la==DESC_SYMBOL || _la==DESCRIBE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5323;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,678,Context) ) {
			case 1:
				{
				State = 5315;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 5316; Match(EXTENDED_SYMBOL);
				}
				break;
			case 2:
				{
				State = 5317;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 5318; Match(PARTITIONS_SYMBOL);
				}
				break;
			case 3:
				{
				State = 5319;
				if (!(serverVersion >= 50605)) throw new FailedPredicateException(this, "serverVersion >= 50605");
				State = 5320; Match(FORMAT_SYMBOL);
				State = 5321; Match(EQUAL_OPERATOR);
				State = 5322; textOrIdentifier();
				}
				break;
			}
			State = 5325; explainableStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainableStatementContext : ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		public ReplaceStatementContext replaceStatement() {
			return GetRuleContext<ReplaceStatementContext>(0);
		}
		public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public ITerminalNode CONNECTION_SYMBOL() { return GetToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public ExplainableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainableStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExplainableStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExplainableStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplainableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplainableStatementContext explainableStatement() {
		ExplainableStatementContext _localctx = new ExplainableStatementContext(Context, State);
		EnterRule(_localctx, 646, RULE_explainableStatement);
		try {
			State = 5339;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,680,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5327; selectStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5328;
				if (!(serverVersion >= 50603)) throw new FailedPredicateException(this, "serverVersion >= 50603");
				State = 5333;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,679,Context) ) {
				case 1:
					{
					State = 5329; deleteStatement();
					}
					break;
				case 2:
					{
					State = 5330; insertStatement();
					}
					break;
				case 3:
					{
					State = 5331; replaceStatement();
					}
					break;
				case 4:
					{
					State = 5332; updateStatement();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5335;
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				State = 5336; Match(FOR_SYMBOL);
				State = 5337; Match(CONNECTION_SYMBOL);
				State = 5338; real_ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HelpCommandContext : ParserRuleContext {
		public ITerminalNode HELP_SYMBOL() { return GetToken(MySQLParser.HELP_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public HelpCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_helpCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterHelpCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitHelpCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHelpCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HelpCommandContext helpCommand() {
		HelpCommandContext _localctx = new HelpCommandContext(Context, State);
		EnterRule(_localctx, 648, RULE_helpCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5341; Match(HELP_SYMBOL);
			State = 5342; textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseCommandContext : ParserRuleContext {
		public ITerminalNode USE_SYMBOL() { return GetToken(MySQLParser.USE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UseCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUseCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUseCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseCommandContext useCommand() {
		UseCommandContext _localctx = new UseCommandContext(Context, State);
		EnterRule(_localctx, 650, RULE_useCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5344; Match(USE_SYMBOL);
			State = 5345; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestartServerContext : ParserRuleContext {
		public ITerminalNode RESTART_SYMBOL() { return GetToken(MySQLParser.RESTART_SYMBOL, 0); }
		public RestartServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restartServer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRestartServer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRestartServer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestartServer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestartServerContext restartServer() {
		RestartServerContext _localctx = new RestartServerContext(Context, State);
		EnterRule(_localctx, 652, RULE_restartServer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5347; Match(RESTART_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprOrContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode OR_SYMBOL() { return GetToken(MySQLParser.OR_SYMBOL, 0); }
		public ITerminalNode LOGICAL_OR_OPERATOR() { return GetToken(MySQLParser.LOGICAL_OR_OPERATOR, 0); }
		public ExprOrContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExprOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExprOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprNotContext : ExprContext {
		public ITerminalNode NOT_SYMBOL() { return GetToken(MySQLParser.NOT_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprNotContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExprNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExprNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprIsContext : ExprContext {
		public IToken type;
		public BoolPriContext boolPri() {
			return GetRuleContext<BoolPriContext>(0);
		}
		public ITerminalNode IS_SYMBOL() { return GetToken(MySQLParser.IS_SYMBOL, 0); }
		public ITerminalNode TRUE_SYMBOL() { return GetToken(MySQLParser.TRUE_SYMBOL, 0); }
		public ITerminalNode FALSE_SYMBOL() { return GetToken(MySQLParser.FALSE_SYMBOL, 0); }
		public ITerminalNode UNKNOWN_SYMBOL() { return GetToken(MySQLParser.UNKNOWN_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		public ExprIsContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExprIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExprIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprIs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprAndContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode AND_SYMBOL() { return GetToken(MySQLParser.AND_SYMBOL, 0); }
		public ITerminalNode LOGICAL_AND_OPERATOR() { return GetToken(MySQLParser.LOGICAL_AND_OPERATOR, 0); }
		public ExprAndContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExprAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExprAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprXorContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode XOR_SYMBOL() { return GetToken(MySQLParser.XOR_SYMBOL, 0); }
		public ExprXorContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExprXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExprXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprXor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 654;
		EnterRecursionRule(_localctx, 654, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5360;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,683,Context) ) {
			case 1:
				{
				_localctx = new ExprIsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 5350; boolPri(0);
				State = 5356;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,682,Context) ) {
				case 1:
					{
					State = 5351; Match(IS_SYMBOL);
					State = 5353;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
						{
						State = 5352; notRule();
						}
					}

					State = 5355;
					((ExprIsContext)_localctx).type = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==UNKNOWN_SYMBOL || _la==FALSE_SYMBOL || _la==TRUE_SYMBOL) ) {
						((ExprIsContext)_localctx).type = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new ExprNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5358; Match(NOT_SYMBOL);
				State = 5359; expr(4);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5373;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,685,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 5371;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,684,Context) ) {
					case 1:
						{
						_localctx = new ExprAndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 5362;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 5363;
						((ExprAndContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==LOGICAL_AND_OPERATOR || _la==AND_SYMBOL) ) {
							((ExprAndContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5364; expr(4);
						}
						break;
					case 2:
						{
						_localctx = new ExprXorContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 5365;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 5366; Match(XOR_SYMBOL);
						State = 5367; expr(3);
						}
						break;
					case 3:
						{
						_localctx = new ExprOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 5368;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 5369;
						((ExprOrContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==LOGICAL_OR_OPERATOR || _la==OR_SYMBOL) ) {
							((ExprOrContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5370; expr(2);
						}
						break;
					}
					} 
				}
				State = 5375;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,685,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BoolPriContext : ParserRuleContext {
		public BoolPriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolPri; } }
	 
		public BoolPriContext() { }
		public virtual void CopyFrom(BoolPriContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryExprPredicateContext : BoolPriContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PrimaryExprPredicateContext(BoolPriContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExprPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExprPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExprPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryExprCompareContext : BoolPriContext {
		public BoolPriContext boolPri() {
			return GetRuleContext<BoolPriContext>(0);
		}
		public CompOpContext compOp() {
			return GetRuleContext<CompOpContext>(0);
		}
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PrimaryExprCompareContext(BoolPriContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExprCompare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExprCompare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExprCompare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryExprAllAnyContext : BoolPriContext {
		public BoolPriContext boolPri() {
			return GetRuleContext<BoolPriContext>(0);
		}
		public CompOpContext compOp() {
			return GetRuleContext<CompOpContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public ITerminalNode ANY_SYMBOL() { return GetToken(MySQLParser.ANY_SYMBOL, 0); }
		public PrimaryExprAllAnyContext(BoolPriContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExprAllAny(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExprAllAny(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExprAllAny(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryExprIsNullContext : BoolPriContext {
		public BoolPriContext boolPri() {
			return GetRuleContext<BoolPriContext>(0);
		}
		public ITerminalNode IS_SYMBOL() { return GetToken(MySQLParser.IS_SYMBOL, 0); }
		public ITerminalNode NULL_SYMBOL() { return GetToken(MySQLParser.NULL_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		public PrimaryExprIsNullContext(BoolPriContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExprIsNull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExprIsNull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExprIsNull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolPriContext boolPri() {
		return boolPri(0);
	}

	private BoolPriContext boolPri(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BoolPriContext _localctx = new BoolPriContext(Context, _parentState);
		BoolPriContext _prevctx = _localctx;
		int _startState = 656;
		EnterRecursionRule(_localctx, 656, RULE_boolPri, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PrimaryExprPredicateContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 5377; predicate();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5396;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,688,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 5394;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,687,Context) ) {
					case 1:
						{
						_localctx = new PrimaryExprIsNullContext(new BoolPriContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						State = 5379;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 5380; Match(IS_SYMBOL);
						State = 5382;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
							{
							State = 5381; notRule();
							}
						}

						State = 5384; Match(NULL_SYMBOL);
						}
						break;
					case 2:
						{
						_localctx = new PrimaryExprCompareContext(new BoolPriContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						State = 5385;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 5386; compOp();
						State = 5387; predicate();
						}
						break;
					case 3:
						{
						_localctx = new PrimaryExprAllAnyContext(new BoolPriContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						State = 5389;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 5390; compOp();
						State = 5391;
						_la = TokenStream.LA(1);
						if ( !(_la==ANY_SYMBOL || _la==ALL_SYMBOL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5392; subquery();
						}
						break;
					}
					} 
				}
				State = 5398;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,688,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CompOpContext : ParserRuleContext {
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public ITerminalNode NULL_SAFE_EQUAL_OPERATOR() { return GetToken(MySQLParser.NULL_SAFE_EQUAL_OPERATOR, 0); }
		public ITerminalNode GREATER_OR_EQUAL_OPERATOR() { return GetToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0); }
		public ITerminalNode GREATER_THAN_OPERATOR() { return GetToken(MySQLParser.GREATER_THAN_OPERATOR, 0); }
		public ITerminalNode LESS_OR_EQUAL_OPERATOR() { return GetToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0); }
		public ITerminalNode LESS_THAN_OPERATOR() { return GetToken(MySQLParser.LESS_THAN_OPERATOR, 0); }
		public ITerminalNode NOT_EQUAL_OPERATOR() { return GetToken(MySQLParser.NOT_EQUAL_OPERATOR, 0); }
		public CompOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCompOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCompOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompOpContext compOp() {
		CompOpContext _localctx = new CompOpContext(Context, State);
		EnterRule(_localctx, 658, RULE_compOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5399;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (EQUAL_OPERATOR - 383)) | (1L << (NULL_SAFE_EQUAL_OPERATOR - 383)) | (1L << (GREATER_OR_EQUAL_OPERATOR - 383)) | (1L << (GREATER_THAN_OPERATOR - 383)) | (1L << (LESS_OR_EQUAL_OPERATOR - 383)) | (1L << (LESS_THAN_OPERATOR - 383)) | (1L << (NOT_EQUAL_OPERATOR - 383)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public BitExprContext[] bitExpr() {
			return GetRuleContexts<BitExprContext>();
		}
		public BitExprContext bitExpr(int i) {
			return GetRuleContext<BitExprContext>(i);
		}
		public PredicateOperationsContext predicateOperations() {
			return GetRuleContext<PredicateOperationsContext>(0);
		}
		public ITerminalNode MEMBER_SYMBOL() { return GetToken(MySQLParser.MEMBER_SYMBOL, 0); }
		public SimpleExprWithParenthesesContext simpleExprWithParentheses() {
			return GetRuleContext<SimpleExprWithParenthesesContext>(0);
		}
		public ITerminalNode SOUNDS_SYMBOL() { return GetToken(MySQLParser.SOUNDS_SYMBOL, 0); }
		public ITerminalNode LIKE_SYMBOL() { return GetToken(MySQLParser.LIKE_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		public ITerminalNode OF_SYMBOL() { return GetToken(MySQLParser.OF_SYMBOL, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 660, RULE_predicate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5401; bitExpr(0);
			State = 5415;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,691,Context) ) {
			case 1:
				{
				State = 5403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
					{
					State = 5402; notRule();
					}
				}

				State = 5405; predicateOperations();
				}
				break;
			case 2:
				{
				State = 5406;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 5407; Match(MEMBER_SYMBOL);
				State = 5409;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OF_SYMBOL) {
					{
					State = 5408; Match(OF_SYMBOL);
					}
				}

				State = 5411; simpleExprWithParentheses();
				}
				break;
			case 3:
				{
				State = 5412; Match(SOUNDS_SYMBOL);
				State = 5413; Match(LIKE_SYMBOL);
				State = 5414; bitExpr(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateOperationsContext : ParserRuleContext {
		public PredicateOperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateOperations; } }
	 
		public PredicateOperationsContext() { }
		public virtual void CopyFrom(PredicateOperationsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PredicateExprRegexContext : PredicateOperationsContext {
		public ITerminalNode REGEXP_SYMBOL() { return GetToken(MySQLParser.REGEXP_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		public PredicateExprRegexContext(PredicateOperationsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPredicateExprRegex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPredicateExprRegex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateExprRegex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredicateExprBetweenContext : PredicateOperationsContext {
		public ITerminalNode BETWEEN_SYMBOL() { return GetToken(MySQLParser.BETWEEN_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		public ITerminalNode AND_SYMBOL() { return GetToken(MySQLParser.AND_SYMBOL, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PredicateExprBetweenContext(PredicateOperationsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPredicateExprBetween(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPredicateExprBetween(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateExprBetween(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredicateExprInContext : PredicateOperationsContext {
		public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PredicateExprInContext(PredicateOperationsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPredicateExprIn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPredicateExprIn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateExprIn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredicateExprLikeContext : PredicateOperationsContext {
		public ITerminalNode LIKE_SYMBOL() { return GetToken(MySQLParser.LIKE_SYMBOL, 0); }
		public SimpleExprContext[] simpleExpr() {
			return GetRuleContexts<SimpleExprContext>();
		}
		public SimpleExprContext simpleExpr(int i) {
			return GetRuleContext<SimpleExprContext>(i);
		}
		public ITerminalNode ESCAPE_SYMBOL() { return GetToken(MySQLParser.ESCAPE_SYMBOL, 0); }
		public PredicateExprLikeContext(PredicateOperationsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPredicateExprLike(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPredicateExprLike(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateExprLike(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateOperationsContext predicateOperations() {
		PredicateOperationsContext _localctx = new PredicateOperationsContext(Context, State);
		EnterRule(_localctx, 662, RULE_predicateOperations);
		try {
			State = 5438;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IN_SYMBOL:
				_localctx = new PredicateExprInContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5417; Match(IN_SYMBOL);
				State = 5423;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,692,Context) ) {
				case 1:
					{
					State = 5418; subquery();
					}
					break;
				case 2:
					{
					State = 5419; Match(OPEN_PAR_SYMBOL);
					State = 5420; exprList();
					State = 5421; Match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case BETWEEN_SYMBOL:
				_localctx = new PredicateExprBetweenContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5425; Match(BETWEEN_SYMBOL);
				State = 5426; bitExpr(0);
				State = 5427; Match(AND_SYMBOL);
				State = 5428; predicate();
				}
				break;
			case LIKE_SYMBOL:
				_localctx = new PredicateExprLikeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5430; Match(LIKE_SYMBOL);
				State = 5431; simpleExpr(0);
				State = 5434;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,693,Context) ) {
				case 1:
					{
					State = 5432; Match(ESCAPE_SYMBOL);
					State = 5433; simpleExpr(0);
					}
					break;
				}
				}
				break;
			case REGEXP_SYMBOL:
				_localctx = new PredicateExprRegexContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5436; Match(REGEXP_SYMBOL);
				State = 5437; bitExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitExprContext : ParserRuleContext {
		public IToken op;
		public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		public BitExprContext[] bitExpr() {
			return GetRuleContexts<BitExprContext>();
		}
		public BitExprContext bitExpr(int i) {
			return GetRuleContext<BitExprContext>(i);
		}
		public ITerminalNode BITWISE_XOR_OPERATOR() { return GetToken(MySQLParser.BITWISE_XOR_OPERATOR, 0); }
		public ITerminalNode MULT_OPERATOR() { return GetToken(MySQLParser.MULT_OPERATOR, 0); }
		public ITerminalNode DIV_OPERATOR() { return GetToken(MySQLParser.DIV_OPERATOR, 0); }
		public ITerminalNode MOD_OPERATOR() { return GetToken(MySQLParser.MOD_OPERATOR, 0); }
		public ITerminalNode DIV_SYMBOL() { return GetToken(MySQLParser.DIV_SYMBOL, 0); }
		public ITerminalNode MOD_SYMBOL() { return GetToken(MySQLParser.MOD_SYMBOL, 0); }
		public ITerminalNode PLUS_OPERATOR() { return GetToken(MySQLParser.PLUS_OPERATOR, 0); }
		public ITerminalNode MINUS_OPERATOR() { return GetToken(MySQLParser.MINUS_OPERATOR, 0); }
		public ITerminalNode SHIFT_LEFT_OPERATOR() { return GetToken(MySQLParser.SHIFT_LEFT_OPERATOR, 0); }
		public ITerminalNode SHIFT_RIGHT_OPERATOR() { return GetToken(MySQLParser.SHIFT_RIGHT_OPERATOR, 0); }
		public ITerminalNode BITWISE_AND_OPERATOR() { return GetToken(MySQLParser.BITWISE_AND_OPERATOR, 0); }
		public ITerminalNode BITWISE_OR_OPERATOR() { return GetToken(MySQLParser.BITWISE_OR_OPERATOR, 0); }
		public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		public BitExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterBitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitBitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitExprContext bitExpr() {
		return bitExpr(0);
	}

	private BitExprContext bitExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BitExprContext _localctx = new BitExprContext(Context, _parentState);
		BitExprContext _prevctx = _localctx;
		int _startState = 664;
		EnterRecursionRule(_localctx, 664, RULE_bitExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 5441; simpleExpr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5469;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,696,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 5467;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,695,Context) ) {
					case 1:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 5443;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 5444; _localctx.op = Match(BITWISE_XOR_OPERATOR);
						State = 5445; bitExpr(8);
						}
						break;
					case 2:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 5446;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 5447;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (MULT_OPERATOR - 393)) | (1L << (DIV_OPERATOR - 393)) | (1L << (MOD_OPERATOR - 393)))) != 0) || _la==DIV_SYMBOL || _la==MOD_SYMBOL) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5448; bitExpr(7);
						}
						break;
					case 3:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 5449;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 5450;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS_OPERATOR || _la==MINUS_OPERATOR) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5451; bitExpr(6);
						}
						break;
					case 4:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 5452;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 5453;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==SHIFT_LEFT_OPERATOR || _la==SHIFT_RIGHT_OPERATOR) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5454; bitExpr(4);
						}
						break;
					case 5:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 5455;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 5456; _localctx.op = Match(BITWISE_AND_OPERATOR);
						State = 5457; bitExpr(3);
						}
						break;
					case 6:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 5458;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 5459; _localctx.op = Match(BITWISE_OR_OPERATOR);
						State = 5460; bitExpr(2);
						}
						break;
					case 7:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 5461;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 5462;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS_OPERATOR || _la==MINUS_OPERATOR) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5463; Match(INTERVAL_SYMBOL);
						State = 5464; expr(0);
						State = 5465; interval();
						}
						break;
					}
					} 
				}
				State = 5471;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,696,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SimpleExprContext : ParserRuleContext {
		public SimpleExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpr; } }
	 
		public SimpleExprContext() { }
		public virtual void CopyFrom(SimpleExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleExprConvertContext : SimpleExprContext {
		public ITerminalNode CONVERT_SYMBOL() { return GetToken(MySQLParser.CONVERT_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public CastTypeContext castType() {
			return GetRuleContext<CastTypeContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprConvertContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprConvert(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprConvert(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprConvert(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprVariableContext : SimpleExprContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public SimpleExprVariableContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprCastContext : SimpleExprContext {
		public ITerminalNode CAST_SYMBOL() { return GetToken(MySQLParser.CAST_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public CastTypeContext castType() {
			return GetRuleContext<CastTypeContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ArrayCastContext arrayCast() {
			return GetRuleContext<ArrayCastContext>(0);
		}
		public SimpleExprCastContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprCast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprCast(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprUnaryContext : SimpleExprContext {
		public IToken op;
		public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		public ITerminalNode PLUS_OPERATOR() { return GetToken(MySQLParser.PLUS_OPERATOR, 0); }
		public ITerminalNode MINUS_OPERATOR() { return GetToken(MySQLParser.MINUS_OPERATOR, 0); }
		public ITerminalNode BITWISE_NOT_OPERATOR() { return GetToken(MySQLParser.BITWISE_NOT_OPERATOR, 0); }
		public SimpleExprUnaryContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprUnary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprOdbcContext : SimpleExprContext {
		public ITerminalNode OPEN_CURLY_SYMBOL() { return GetToken(MySQLParser.OPEN_CURLY_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CLOSE_CURLY_SYMBOL() { return GetToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0); }
		public SimpleExprOdbcContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprOdbc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprOdbc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprOdbc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprRuntimeFunctionContext : SimpleExprContext {
		public RuntimeFunctionCallContext runtimeFunctionCall() {
			return GetRuleContext<RuntimeFunctionCallContext>(0);
		}
		public SimpleExprRuntimeFunctionContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprRuntimeFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprRuntimeFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprRuntimeFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprFunctionContext : SimpleExprContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public SimpleExprFunctionContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprCollateContext : SimpleExprContext {
		public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		public ITerminalNode COLLATE_SYMBOL() { return GetToken(MySQLParser.COLLATE_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public SimpleExprCollateContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprCollate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprCollate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprCollate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprMatchContext : SimpleExprContext {
		public ITerminalNode MATCH_SYMBOL() { return GetToken(MySQLParser.MATCH_SYMBOL, 0); }
		public IdentListArgContext identListArg() {
			return GetRuleContext<IdentListArgContext>(0);
		}
		public ITerminalNode AGAINST_SYMBOL() { return GetToken(MySQLParser.AGAINST_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FulltextOptionsContext fulltextOptions() {
			return GetRuleContext<FulltextOptionsContext>(0);
		}
		public SimpleExprMatchContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprMatch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprMatch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprMatch(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprWindowingFunctionContext : SimpleExprContext {
		public WindowFunctionCallContext windowFunctionCall() {
			return GetRuleContext<WindowFunctionCallContext>(0);
		}
		public SimpleExprWindowingFunctionContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprWindowingFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprWindowingFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprWindowingFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprBinaryContext : SimpleExprContext {
		public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		public SimpleExprBinaryContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprBinary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprBinary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprColumnRefContext : SimpleExprContext {
		public ColumnRefContext columnRef() {
			return GetRuleContext<ColumnRefContext>(0);
		}
		public JsonOperatorContext jsonOperator() {
			return GetRuleContext<JsonOperatorContext>(0);
		}
		public SimpleExprColumnRefContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprColumnRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprColumnRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprColumnRef(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprParamMarkerContext : SimpleExprContext {
		public ITerminalNode PARAM_MARKER() { return GetToken(MySQLParser.PARAM_MARKER, 0); }
		public SimpleExprParamMarkerContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprParamMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprParamMarker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprParamMarker(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprSumContext : SimpleExprContext {
		public SumExprContext sumExpr() {
			return GetRuleContext<SumExprContext>(0);
		}
		public SimpleExprSumContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprSum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprSum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprSum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprConvertUsingContext : SimpleExprContext {
		public ITerminalNode CONVERT_SYMBOL() { return GetToken(MySQLParser.CONVERT_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode USING_SYMBOL() { return GetToken(MySQLParser.USING_SYMBOL, 0); }
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprConvertUsingContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprConvertUsing(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprConvertUsing(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprConvertUsing(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprSubQueryContext : SimpleExprContext {
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode EXISTS_SYMBOL() { return GetToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public SimpleExprSubQueryContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprSubQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprSubQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprSubQuery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprGroupingOperationContext : SimpleExprContext {
		public GroupingOperationContext groupingOperation() {
			return GetRuleContext<GroupingOperationContext>(0);
		}
		public SimpleExprGroupingOperationContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprGroupingOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprGroupingOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprGroupingOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprNotContext : SimpleExprContext {
		public Not2RuleContext not2Rule() {
			return GetRuleContext<Not2RuleContext>(0);
		}
		public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		public SimpleExprNotContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprValuesContext : SimpleExprContext {
		public ITerminalNode VALUES_SYMBOL() { return GetToken(MySQLParser.VALUES_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprValuesContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprValues(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprValues(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprValues(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprDefaultContext : SimpleExprContext {
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprDefaultContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprDefault(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprDefault(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprDefault(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprListContext : SimpleExprContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode ROW_SYMBOL() { return GetToken(MySQLParser.ROW_SYMBOL, 0); }
		public SimpleExprListContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprIntervalContext : SimpleExprContext {
		public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		public ITerminalNode PLUS_OPERATOR() { return GetToken(MySQLParser.PLUS_OPERATOR, 0); }
		public SimpleExprIntervalContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprInterval(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprInterval(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprInterval(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprCaseContext : SimpleExprContext {
		public ITerminalNode CASE_SYMBOL() { return GetToken(MySQLParser.CASE_SYMBOL, 0); }
		public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public WhenExpressionContext[] whenExpression() {
			return GetRuleContexts<WhenExpressionContext>();
		}
		public WhenExpressionContext whenExpression(int i) {
			return GetRuleContext<WhenExpressionContext>(i);
		}
		public ThenExpressionContext[] thenExpression() {
			return GetRuleContexts<ThenExpressionContext>();
		}
		public ThenExpressionContext thenExpression(int i) {
			return GetRuleContext<ThenExpressionContext>(i);
		}
		public ElseExpressionContext elseExpression() {
			return GetRuleContext<ElseExpressionContext>(0);
		}
		public SimpleExprCaseContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprCase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprCase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprConcatContext : SimpleExprContext {
		public SimpleExprContext[] simpleExpr() {
			return GetRuleContexts<SimpleExprContext>();
		}
		public SimpleExprContext simpleExpr(int i) {
			return GetRuleContext<SimpleExprContext>(i);
		}
		public ITerminalNode CONCAT_PIPES_SYMBOL() { return GetToken(MySQLParser.CONCAT_PIPES_SYMBOL, 0); }
		public SimpleExprConcatContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprConcat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprConcat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprConcat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprLiteralContext : SimpleExprContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public SimpleExprLiteralContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExprContext simpleExpr() {
		return simpleExpr(0);
	}

	private SimpleExprContext simpleExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SimpleExprContext _localctx = new SimpleExprContext(Context, _parentState);
		SimpleExprContext _prevctx = _localctx;
		int _startState = 666;
		EnterRecursionRule(_localctx, 666, RULE_simpleExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,705,Context) ) {
			case 1:
				{
				_localctx = new SimpleExprVariableContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 5473; variable();
				}
				break;
			case 2:
				{
				_localctx = new SimpleExprColumnRefContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5474; columnRef();
				State = 5476;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,697,Context) ) {
				case 1:
					{
					State = 5475; jsonOperator();
					}
					break;
				}
				}
				break;
			case 3:
				{
				_localctx = new SimpleExprRuntimeFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5478; runtimeFunctionCall();
				}
				break;
			case 4:
				{
				_localctx = new SimpleExprFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5479; functionCall();
				}
				break;
			case 5:
				{
				_localctx = new SimpleExprLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5480; literal();
				}
				break;
			case 6:
				{
				_localctx = new SimpleExprParamMarkerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5481; Match(PARAM_MARKER);
				}
				break;
			case 7:
				{
				_localctx = new SimpleExprSumContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5482; sumExpr();
				}
				break;
			case 8:
				{
				_localctx = new SimpleExprGroupingOperationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5483;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 5484; groupingOperation();
				}
				break;
			case 9:
				{
				_localctx = new SimpleExprWindowingFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5485;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 5486; windowFunctionCall();
				}
				break;
			case 10:
				{
				_localctx = new SimpleExprUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5487;
				((SimpleExprUnaryContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (PLUS_OPERATOR - 391)) | (1L << (MINUS_OPERATOR - 391)) | (1L << (BITWISE_NOT_OPERATOR - 391)))) != 0)) ) {
					((SimpleExprUnaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5488; simpleExpr(14);
				}
				break;
			case 11:
				{
				_localctx = new SimpleExprNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5489; not2Rule();
				State = 5490; simpleExpr(13);
				}
				break;
			case 12:
				{
				_localctx = new SimpleExprListContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5493;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ROW_SYMBOL) {
					{
					State = 5492; Match(ROW_SYMBOL);
					}
				}

				State = 5495; Match(OPEN_PAR_SYMBOL);
				State = 5496; exprList();
				State = 5497; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 13:
				{
				_localctx = new SimpleExprSubQueryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXISTS_SYMBOL) {
					{
					State = 5499; Match(EXISTS_SYMBOL);
					}
				}

				State = 5502; subquery();
				}
				break;
			case 14:
				{
				_localctx = new SimpleExprOdbcContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5503; Match(OPEN_CURLY_SYMBOL);
				State = 5504; identifier();
				State = 5505; expr(0);
				State = 5506; Match(CLOSE_CURLY_SYMBOL);
				}
				break;
			case 15:
				{
				_localctx = new SimpleExprMatchContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5508; Match(MATCH_SYMBOL);
				State = 5509; identListArg();
				State = 5510; Match(AGAINST_SYMBOL);
				State = 5511; Match(OPEN_PAR_SYMBOL);
				State = 5512; bitExpr(0);
				State = 5514;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IN_SYMBOL || _la==WITH_SYMBOL) {
					{
					State = 5513; fulltextOptions();
					}
				}

				State = 5516; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 16:
				{
				_localctx = new SimpleExprBinaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5518; Match(BINARY_SYMBOL);
				State = 5519; simpleExpr(8);
				}
				break;
			case 17:
				{
				_localctx = new SimpleExprCastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5520; Match(CAST_SYMBOL);
				State = 5521; Match(OPEN_PAR_SYMBOL);
				State = 5522; expr(0);
				State = 5523; Match(AS_SYMBOL);
				State = 5524; castType();
				State = 5526;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,701,Context) ) {
				case 1:
					{
					State = 5525; arrayCast();
					}
					break;
				}
				State = 5528; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 18:
				{
				_localctx = new SimpleExprCaseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5530; Match(CASE_SYMBOL);
				State = 5532;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,702,Context) ) {
				case 1:
					{
					State = 5531; expr(0);
					}
					break;
				}
				State = 5537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 5534; whenExpression();
					State = 5535; thenExpression();
					}
					}
					State = 5539;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN_SYMBOL );
				State = 5542;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE_SYMBOL) {
					{
					State = 5541; elseExpression();
					}
				}

				State = 5544; Match(END_SYMBOL);
				}
				break;
			case 19:
				{
				_localctx = new SimpleExprConvertContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5546; Match(CONVERT_SYMBOL);
				State = 5547; Match(OPEN_PAR_SYMBOL);
				State = 5548; expr(0);
				State = 5549; Match(COMMA_SYMBOL);
				State = 5550; castType();
				State = 5551; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 20:
				{
				_localctx = new SimpleExprConvertUsingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5553; Match(CONVERT_SYMBOL);
				State = 5554; Match(OPEN_PAR_SYMBOL);
				State = 5555; expr(0);
				State = 5556; Match(USING_SYMBOL);
				State = 5557; charsetName();
				State = 5558; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 21:
				{
				_localctx = new SimpleExprDefaultContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5560; Match(DEFAULT_SYMBOL);
				State = 5561; Match(OPEN_PAR_SYMBOL);
				State = 5562; simpleIdentifier();
				State = 5563; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 22:
				{
				_localctx = new SimpleExprValuesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5565; Match(VALUES_SYMBOL);
				State = 5566; Match(OPEN_PAR_SYMBOL);
				State = 5567; simpleIdentifier();
				State = 5568; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 23:
				{
				_localctx = new SimpleExprIntervalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5570; Match(INTERVAL_SYMBOL);
				State = 5571; expr(0);
				State = 5572; interval();
				State = 5573; Match(PLUS_OPERATOR);
				State = 5574; expr(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5586;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,707,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 5584;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,706,Context) ) {
					case 1:
						{
						_localctx = new SimpleExprConcatContext(new SimpleExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpr);
						State = 5578;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 5579; Match(CONCAT_PIPES_SYMBOL);
						State = 5580; simpleExpr(16);
						}
						break;
					case 2:
						{
						_localctx = new SimpleExprCollateContext(new SimpleExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpr);
						State = 5581;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 5582; Match(COLLATE_SYMBOL);
						State = 5583; textOrIdentifier();
						}
						break;
					}
					} 
				}
				State = 5588;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,707,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArrayCastContext : ParserRuleContext {
		public ITerminalNode ARRAY_SYMBOL() { return GetToken(MySQLParser.ARRAY_SYMBOL, 0); }
		public ArrayCastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCast; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterArrayCast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitArrayCast(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayCast(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCastContext arrayCast() {
		ArrayCastContext _localctx = new ArrayCastContext(Context, State);
		EnterRule(_localctx, 668, RULE_arrayCast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5589;
			if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
			State = 5590; Match(ARRAY_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonOperatorContext : ParserRuleContext {
		public ITerminalNode JSON_SEPARATOR_SYMBOL() { return GetToken(MySQLParser.JSON_SEPARATOR_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ITerminalNode JSON_UNQUOTED_SEPARATOR_SYMBOL() { return GetToken(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL, 0); }
		public JsonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterJsonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitJsonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonOperatorContext jsonOperator() {
		JsonOperatorContext _localctx = new JsonOperatorContext(Context, State);
		EnterRule(_localctx, 670, RULE_jsonOperator);
		try {
			State = 5598;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,708,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5592;
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				State = 5593; Match(JSON_SEPARATOR_SYMBOL);
				State = 5594; textStringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5595;
				if (!(serverVersion >= 50713)) throw new FailedPredicateException(this, "serverVersion >= 50713");
				State = 5596; Match(JSON_UNQUOTED_SEPARATOR_SYMBOL);
				State = 5597; textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumExprContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public InSumExprContext inSumExpr() {
			return GetRuleContext<InSumExprContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode AVG_SYMBOL() { return GetToken(MySQLParser.AVG_SYMBOL, 0); }
		public ITerminalNode DISTINCT_SYMBOL() { return GetToken(MySQLParser.DISTINCT_SYMBOL, 0); }
		public WindowingClauseContext windowingClause() {
			return GetRuleContext<WindowingClauseContext>(0);
		}
		public ITerminalNode BIT_AND_SYMBOL() { return GetToken(MySQLParser.BIT_AND_SYMBOL, 0); }
		public ITerminalNode BIT_OR_SYMBOL() { return GetToken(MySQLParser.BIT_OR_SYMBOL, 0); }
		public ITerminalNode BIT_XOR_SYMBOL() { return GetToken(MySQLParser.BIT_XOR_SYMBOL, 0); }
		public JsonFunctionContext jsonFunction() {
			return GetRuleContext<JsonFunctionContext>(0);
		}
		public ITerminalNode MULT_OPERATOR() { return GetToken(MySQLParser.MULT_OPERATOR, 0); }
		public ITerminalNode COUNT_SYMBOL() { return GetToken(MySQLParser.COUNT_SYMBOL, 0); }
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ITerminalNode MIN_SYMBOL() { return GetToken(MySQLParser.MIN_SYMBOL, 0); }
		public ITerminalNode MAX_SYMBOL() { return GetToken(MySQLParser.MAX_SYMBOL, 0); }
		public ITerminalNode STD_SYMBOL() { return GetToken(MySQLParser.STD_SYMBOL, 0); }
		public ITerminalNode VARIANCE_SYMBOL() { return GetToken(MySQLParser.VARIANCE_SYMBOL, 0); }
		public ITerminalNode STDDEV_SAMP_SYMBOL() { return GetToken(MySQLParser.STDDEV_SAMP_SYMBOL, 0); }
		public ITerminalNode VAR_SAMP_SYMBOL() { return GetToken(MySQLParser.VAR_SAMP_SYMBOL, 0); }
		public ITerminalNode SUM_SYMBOL() { return GetToken(MySQLParser.SUM_SYMBOL, 0); }
		public ITerminalNode GROUP_CONCAT_SYMBOL() { return GetToken(MySQLParser.GROUP_CONCAT_SYMBOL, 0); }
		public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		public ITerminalNode SEPARATOR_SYMBOL() { return GetToken(MySQLParser.SEPARATOR_SYMBOL, 0); }
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public SumExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sumExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSumExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSumExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SumExprContext sumExpr() {
		SumExprContext _localctx = new SumExprContext(Context, State);
		EnterRule(_localctx, 672, RULE_sumExpr);
		int _la;
		try {
			State = 5731;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,731,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5600; _localctx.name = Match(AVG_SYMBOL);
				State = 5601; Match(OPEN_PAR_SYMBOL);
				State = 5603;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,709,Context) ) {
				case 1:
					{
					State = 5602; Match(DISTINCT_SYMBOL);
					}
					break;
				}
				State = 5605; inSumExpr();
				State = 5606; Match(CLOSE_PAR_SYMBOL);
				State = 5609;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,710,Context) ) {
				case 1:
					{
					State = 5607;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5608; windowingClause();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5611;
				_localctx.name = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 439)) & ~0x3f) == 0 && ((1L << (_la - 439)) & ((1L << (BIT_AND_SYMBOL - 439)) | (1L << (BIT_OR_SYMBOL - 439)) | (1L << (BIT_XOR_SYMBOL - 439)))) != 0)) ) {
					_localctx.name = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5612; Match(OPEN_PAR_SYMBOL);
				State = 5613; inSumExpr();
				State = 5614; Match(CLOSE_PAR_SYMBOL);
				State = 5617;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,711,Context) ) {
				case 1:
					{
					State = 5615;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5616; windowingClause();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5619;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 5620; jsonFunction();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5621; _localctx.name = Match(COUNT_SYMBOL);
				State = 5622; Match(OPEN_PAR_SYMBOL);
				State = 5624;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL_SYMBOL) {
					{
					State = 5623; Match(ALL_SYMBOL);
					}
				}

				State = 5626; Match(MULT_OPERATOR);
				State = 5627; Match(CLOSE_PAR_SYMBOL);
				State = 5630;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,713,Context) ) {
				case 1:
					{
					State = 5628;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5629; windowingClause();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5632; _localctx.name = Match(COUNT_SYMBOL);
				State = 5633; Match(OPEN_PAR_SYMBOL);
				State = 5641;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,715,Context) ) {
				case 1:
					{
					State = 5635;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALL_SYMBOL) {
						{
						State = 5634; Match(ALL_SYMBOL);
						}
					}

					State = 5637; Match(MULT_OPERATOR);
					}
					break;
				case 2:
					{
					State = 5638; inSumExpr();
					}
					break;
				case 3:
					{
					State = 5639; Match(DISTINCT_SYMBOL);
					State = 5640; exprList();
					}
					break;
				}
				State = 5643; Match(CLOSE_PAR_SYMBOL);
				State = 5646;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,716,Context) ) {
				case 1:
					{
					State = 5644;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5645; windowingClause();
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5648; _localctx.name = Match(MIN_SYMBOL);
				State = 5649; Match(OPEN_PAR_SYMBOL);
				State = 5651;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,717,Context) ) {
				case 1:
					{
					State = 5650; Match(DISTINCT_SYMBOL);
					}
					break;
				}
				State = 5653; inSumExpr();
				State = 5654; Match(CLOSE_PAR_SYMBOL);
				State = 5657;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,718,Context) ) {
				case 1:
					{
					State = 5655;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5656; windowingClause();
					}
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5659; _localctx.name = Match(MAX_SYMBOL);
				State = 5660; Match(OPEN_PAR_SYMBOL);
				State = 5662;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,719,Context) ) {
				case 1:
					{
					State = 5661; Match(DISTINCT_SYMBOL);
					}
					break;
				}
				State = 5664; inSumExpr();
				State = 5665; Match(CLOSE_PAR_SYMBOL);
				State = 5668;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,720,Context) ) {
				case 1:
					{
					State = 5666;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5667; windowingClause();
					}
					break;
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5670; _localctx.name = Match(STD_SYMBOL);
				State = 5671; Match(OPEN_PAR_SYMBOL);
				State = 5672; inSumExpr();
				State = 5673; Match(CLOSE_PAR_SYMBOL);
				State = 5676;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,721,Context) ) {
				case 1:
					{
					State = 5674;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5675; windowingClause();
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5678; _localctx.name = Match(VARIANCE_SYMBOL);
				State = 5679; Match(OPEN_PAR_SYMBOL);
				State = 5680; inSumExpr();
				State = 5681; Match(CLOSE_PAR_SYMBOL);
				State = 5684;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,722,Context) ) {
				case 1:
					{
					State = 5682;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5683; windowingClause();
					}
					break;
				}
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5686; _localctx.name = Match(STDDEV_SAMP_SYMBOL);
				State = 5687; Match(OPEN_PAR_SYMBOL);
				State = 5688; inSumExpr();
				State = 5689; Match(CLOSE_PAR_SYMBOL);
				State = 5692;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,723,Context) ) {
				case 1:
					{
					State = 5690;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5691; windowingClause();
					}
					break;
				}
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5694; _localctx.name = Match(VAR_SAMP_SYMBOL);
				State = 5695; Match(OPEN_PAR_SYMBOL);
				State = 5696; inSumExpr();
				State = 5697; Match(CLOSE_PAR_SYMBOL);
				State = 5700;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,724,Context) ) {
				case 1:
					{
					State = 5698;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5699; windowingClause();
					}
					break;
				}
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 5702; _localctx.name = Match(SUM_SYMBOL);
				State = 5703; Match(OPEN_PAR_SYMBOL);
				State = 5705;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,725,Context) ) {
				case 1:
					{
					State = 5704; Match(DISTINCT_SYMBOL);
					}
					break;
				}
				State = 5707; inSumExpr();
				State = 5708; Match(CLOSE_PAR_SYMBOL);
				State = 5711;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,726,Context) ) {
				case 1:
					{
					State = 5709;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5710; windowingClause();
					}
					break;
				}
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 5713; _localctx.name = Match(GROUP_CONCAT_SYMBOL);
				State = 5714; Match(OPEN_PAR_SYMBOL);
				State = 5716;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,727,Context) ) {
				case 1:
					{
					State = 5715; Match(DISTINCT_SYMBOL);
					}
					break;
				}
				State = 5718; exprList();
				State = 5720;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER_SYMBOL) {
					{
					State = 5719; orderClause();
					}
				}

				State = 5724;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEPARATOR_SYMBOL) {
					{
					State = 5722; Match(SEPARATOR_SYMBOL);
					State = 5723; textString();
					}
				}

				State = 5726; Match(CLOSE_PAR_SYMBOL);
				State = 5729;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,730,Context) ) {
				case 1:
					{
					State = 5727;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5728; windowingClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingOperationContext : ParserRuleContext {
		public ITerminalNode GROUPING_SYMBOL() { return GetToken(MySQLParser.GROUPING_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public GroupingOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupingOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGroupingOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGroupingOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupingOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupingOperationContext groupingOperation() {
		GroupingOperationContext _localctx = new GroupingOperationContext(Context, State);
		EnterRule(_localctx, 674, RULE_groupingOperation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5733; Match(GROUPING_SYMBOL);
			State = 5734; Match(OPEN_PAR_SYMBOL);
			State = 5735; exprList();
			State = 5736; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFunctionCallContext : ParserRuleContext {
		public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		public WindowingClauseContext windowingClause() {
			return GetRuleContext<WindowingClauseContext>(0);
		}
		public ITerminalNode ROW_NUMBER_SYMBOL() { return GetToken(MySQLParser.ROW_NUMBER_SYMBOL, 0); }
		public ITerminalNode RANK_SYMBOL() { return GetToken(MySQLParser.RANK_SYMBOL, 0); }
		public ITerminalNode DENSE_RANK_SYMBOL() { return GetToken(MySQLParser.DENSE_RANK_SYMBOL, 0); }
		public ITerminalNode CUME_DIST_SYMBOL() { return GetToken(MySQLParser.CUME_DIST_SYMBOL, 0); }
		public ITerminalNode PERCENT_RANK_SYMBOL() { return GetToken(MySQLParser.PERCENT_RANK_SYMBOL, 0); }
		public ITerminalNode NTILE_SYMBOL() { return GetToken(MySQLParser.NTILE_SYMBOL, 0); }
		public SimpleExprWithParenthesesContext simpleExprWithParentheses() {
			return GetRuleContext<SimpleExprWithParenthesesContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode LEAD_SYMBOL() { return GetToken(MySQLParser.LEAD_SYMBOL, 0); }
		public ITerminalNode LAG_SYMBOL() { return GetToken(MySQLParser.LAG_SYMBOL, 0); }
		public LeadLagInfoContext leadLagInfo() {
			return GetRuleContext<LeadLagInfoContext>(0);
		}
		public NullTreatmentContext nullTreatment() {
			return GetRuleContext<NullTreatmentContext>(0);
		}
		public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		public ITerminalNode FIRST_VALUE_SYMBOL() { return GetToken(MySQLParser.FIRST_VALUE_SYMBOL, 0); }
		public ITerminalNode LAST_VALUE_SYMBOL() { return GetToken(MySQLParser.LAST_VALUE_SYMBOL, 0); }
		public ITerminalNode NTH_VALUE_SYMBOL() { return GetToken(MySQLParser.NTH_VALUE_SYMBOL, 0); }
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public ITerminalNode FIRST_SYMBOL() { return GetToken(MySQLParser.FIRST_SYMBOL, 0); }
		public ITerminalNode LAST_SYMBOL() { return GetToken(MySQLParser.LAST_SYMBOL, 0); }
		public WindowFunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFunctionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowFunctionCallContext windowFunctionCall() {
		WindowFunctionCallContext _localctx = new WindowFunctionCallContext(Context, State);
		EnterRule(_localctx, 676, RULE_windowFunctionCall);
		int _la;
		try {
			State = 5780;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CUME_DIST_SYMBOL:
			case DENSE_RANK_SYMBOL:
			case PERCENT_RANK_SYMBOL:
			case RANK_SYMBOL:
			case ROW_NUMBER_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5738;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 709)) & ~0x3f) == 0 && ((1L << (_la - 709)) & ((1L << (CUME_DIST_SYMBOL - 709)) | (1L << (DENSE_RANK_SYMBOL - 709)) | (1L << (PERCENT_RANK_SYMBOL - 709)) | (1L << (RANK_SYMBOL - 709)) | (1L << (ROW_NUMBER_SYMBOL - 709)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5739; parentheses();
				State = 5740; windowingClause();
				}
				break;
			case NTILE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5742; Match(NTILE_SYMBOL);
				State = 5743; simpleExprWithParentheses();
				State = 5744; windowingClause();
				}
				break;
			case LAG_SYMBOL:
			case LEAD_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5746;
				_la = TokenStream.LA(1);
				if ( !(_la==LAG_SYMBOL || _la==LEAD_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5747; Match(OPEN_PAR_SYMBOL);
				State = 5748; expr(0);
				State = 5750;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 5749; leadLagInfo();
					}
				}

				State = 5752; Match(CLOSE_PAR_SYMBOL);
				State = 5754;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					State = 5753; nullTreatment();
					}
				}

				State = 5756; windowingClause();
				}
				break;
			case FIRST_VALUE_SYMBOL:
			case LAST_VALUE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5758;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_VALUE_SYMBOL || _la==LAST_VALUE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5759; exprWithParentheses();
				State = 5761;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					State = 5760; nullTreatment();
					}
				}

				State = 5763; windowingClause();
				}
				break;
			case NTH_VALUE_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5765; Match(NTH_VALUE_SYMBOL);
				State = 5766; Match(OPEN_PAR_SYMBOL);
				State = 5767; expr(0);
				State = 5768; Match(COMMA_SYMBOL);
				State = 5769; simpleExpr(0);
				State = 5770; Match(CLOSE_PAR_SYMBOL);
				State = 5773;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL) {
					{
					State = 5771; Match(FROM_SYMBOL);
					State = 5772;
					_la = TokenStream.LA(1);
					if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 5776;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					State = 5775; nullTreatment();
					}
				}

				State = 5778; windowingClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowingClauseContext : ParserRuleContext {
		public ITerminalNode OVER_SYMBOL() { return GetToken(MySQLParser.OVER_SYMBOL, 0); }
		public WindowNameContext windowName() {
			return GetRuleContext<WindowNameContext>(0);
		}
		public WindowSpecContext windowSpec() {
			return GetRuleContext<WindowSpecContext>(0);
		}
		public WindowingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowingClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowingClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowingClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowingClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowingClauseContext windowingClause() {
		WindowingClauseContext _localctx = new WindowingClauseContext(Context, State);
		EnterRule(_localctx, 678, RULE_windowingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5782; Match(OVER_SYMBOL);
			State = 5785;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,738,Context) ) {
			case 1:
				{
				State = 5783; windowName();
				}
				break;
			case 2:
				{
				State = 5784; windowSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeadLagInfoContext : ParserRuleContext {
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public Ulonglong_numberContext ulonglong_number() {
			return GetRuleContext<Ulonglong_numberContext>(0);
		}
		public ITerminalNode PARAM_MARKER() { return GetToken(MySQLParser.PARAM_MARKER, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LeadLagInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leadLagInfo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLeadLagInfo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLeadLagInfo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeadLagInfo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeadLagInfoContext leadLagInfo() {
		LeadLagInfoContext _localctx = new LeadLagInfoContext(Context, State);
		EnterRule(_localctx, 680, RULE_leadLagInfo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5787; Match(COMMA_SYMBOL);
			State = 5790;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				{
				State = 5788; ulonglong_number();
				}
				break;
			case PARAM_MARKER:
				{
				State = 5789; Match(PARAM_MARKER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 5794;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA_SYMBOL) {
				{
				State = 5792; Match(COMMA_SYMBOL);
				State = 5793; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullTreatmentContext : ParserRuleContext {
		public ITerminalNode NULLS_SYMBOL() { return GetToken(MySQLParser.NULLS_SYMBOL, 0); }
		public ITerminalNode RESPECT_SYMBOL() { return GetToken(MySQLParser.RESPECT_SYMBOL, 0); }
		public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public NullTreatmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullTreatment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNullTreatment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNullTreatment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullTreatment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullTreatmentContext nullTreatment() {
		NullTreatmentContext _localctx = new NullTreatmentContext(Context, State);
		EnterRule(_localctx, 682, RULE_nullTreatment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5796;
			_la = TokenStream.LA(1);
			if ( !(_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5797; Match(NULLS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonFunctionContext : ParserRuleContext {
		public ITerminalNode JSON_ARRAYAGG_SYMBOL() { return GetToken(MySQLParser.JSON_ARRAYAGG_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public InSumExprContext[] inSumExpr() {
			return GetRuleContexts<InSumExprContext>();
		}
		public InSumExprContext inSumExpr(int i) {
			return GetRuleContext<InSumExprContext>(i);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public WindowingClauseContext windowingClause() {
			return GetRuleContext<WindowingClauseContext>(0);
		}
		public ITerminalNode JSON_OBJECTAGG_SYMBOL() { return GetToken(MySQLParser.JSON_OBJECTAGG_SYMBOL, 0); }
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public JsonFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterJsonFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitJsonFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonFunctionContext jsonFunction() {
		JsonFunctionContext _localctx = new JsonFunctionContext(Context, State);
		EnterRule(_localctx, 684, RULE_jsonFunction);
		try {
			State = 5815;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON_ARRAYAGG_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5799; Match(JSON_ARRAYAGG_SYMBOL);
				State = 5800; Match(OPEN_PAR_SYMBOL);
				State = 5801; inSumExpr();
				State = 5802; Match(CLOSE_PAR_SYMBOL);
				State = 5804;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,741,Context) ) {
				case 1:
					{
					State = 5803; windowingClause();
					}
					break;
				}
				}
				break;
			case JSON_OBJECTAGG_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5806; Match(JSON_OBJECTAGG_SYMBOL);
				State = 5807; Match(OPEN_PAR_SYMBOL);
				State = 5808; inSumExpr();
				State = 5809; Match(COMMA_SYMBOL);
				State = 5810; inSumExpr();
				State = 5811; Match(CLOSE_PAR_SYMBOL);
				State = 5813;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,742,Context) ) {
				case 1:
					{
					State = 5812; windowingClause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InSumExprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public InSumExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inSumExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInSumExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInSumExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInSumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InSumExprContext inSumExpr() {
		InSumExprContext _localctx = new InSumExprContext(Context, State);
		EnterRule(_localctx, 686, RULE_inSumExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5818;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,744,Context) ) {
			case 1:
				{
				State = 5817; Match(ALL_SYMBOL);
				}
				break;
			}
			State = 5820; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentListArgContext : ParserRuleContext {
		public IdentListContext identList() {
			return GetRuleContext<IdentListContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public IdentListArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identListArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentListArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentListArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentListArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentListArgContext identListArg() {
		IdentListArgContext _localctx = new IdentListArgContext(Context, State);
		EnterRule(_localctx, 688, RULE_identListArg);
		try {
			State = 5827;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,745,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5822; identList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5823; Match(OPEN_PAR_SYMBOL);
				State = 5824; identList();
				State = 5825; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentListContext : ParserRuleContext {
		public SimpleIdentifierContext[] simpleIdentifier() {
			return GetRuleContexts<SimpleIdentifierContext>();
		}
		public SimpleIdentifierContext simpleIdentifier(int i) {
			return GetRuleContext<SimpleIdentifierContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IdentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentListContext identList() {
		IdentListContext _localctx = new IdentListContext(Context, State);
		EnterRule(_localctx, 690, RULE_identList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5829; simpleIdentifier();
			State = 5834;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 5830; Match(COMMA_SYMBOL);
				State = 5831; simpleIdentifier();
				}
				}
				State = 5836;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FulltextOptionsContext : ParserRuleContext {
		public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		public ITerminalNode BOOLEAN_SYMBOL() { return GetToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		public ITerminalNode MODE_SYMBOL() { return GetToken(MySQLParser.MODE_SYMBOL, 0); }
		public ITerminalNode NATURAL_SYMBOL() { return GetToken(MySQLParser.NATURAL_SYMBOL, 0); }
		public ITerminalNode LANGUAGE_SYMBOL() { return GetToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode QUERY_SYMBOL() { return GetToken(MySQLParser.QUERY_SYMBOL, 0); }
		public ITerminalNode EXPANSION_SYMBOL() { return GetToken(MySQLParser.EXPANSION_SYMBOL, 0); }
		public FulltextOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fulltextOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFulltextOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFulltextOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFulltextOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FulltextOptionsContext fulltextOptions() {
		FulltextOptionsContext _localctx = new FulltextOptionsContext(Context, State);
		EnterRule(_localctx, 692, RULE_fulltextOptions);
		int _la;
		try {
			State = 5852;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,748,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5837; Match(IN_SYMBOL);
				State = 5838; Match(BOOLEAN_SYMBOL);
				State = 5839; Match(MODE_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5840; Match(IN_SYMBOL);
				State = 5841; Match(NATURAL_SYMBOL);
				State = 5842; Match(LANGUAGE_SYMBOL);
				State = 5843; Match(MODE_SYMBOL);
				State = 5847;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					State = 5844; Match(WITH_SYMBOL);
					State = 5845; Match(QUERY_SYMBOL);
					State = 5846; Match(EXPANSION_SYMBOL);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5849; Match(WITH_SYMBOL);
				State = 5850; Match(QUERY_SYMBOL);
				State = 5851; Match(EXPANSION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeFunctionCallContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode CHAR_SYMBOL() { return GetToken(MySQLParser.CHAR_SYMBOL, 0); }
		public ITerminalNode USING_SYMBOL() { return GetToken(MySQLParser.USING_SYMBOL, 0); }
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public ITerminalNode CURRENT_USER_SYMBOL() { return GetToken(MySQLParser.CURRENT_USER_SYMBOL, 0); }
		public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		public ITerminalNode DATE_SYMBOL() { return GetToken(MySQLParser.DATE_SYMBOL, 0); }
		public ITerminalNode DAY_SYMBOL() { return GetToken(MySQLParser.DAY_SYMBOL, 0); }
		public ITerminalNode HOUR_SYMBOL() { return GetToken(MySQLParser.HOUR_SYMBOL, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ITerminalNode INSERT_SYMBOL() { return GetToken(MySQLParser.INSERT_SYMBOL, 0); }
		public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public ITerminalNode LEFT_SYMBOL() { return GetToken(MySQLParser.LEFT_SYMBOL, 0); }
		public ITerminalNode MINUTE_SYMBOL() { return GetToken(MySQLParser.MINUTE_SYMBOL, 0); }
		public ITerminalNode MONTH_SYMBOL() { return GetToken(MySQLParser.MONTH_SYMBOL, 0); }
		public ITerminalNode RIGHT_SYMBOL() { return GetToken(MySQLParser.RIGHT_SYMBOL, 0); }
		public ITerminalNode SECOND_SYMBOL() { return GetToken(MySQLParser.SECOND_SYMBOL, 0); }
		public ITerminalNode TIME_SYMBOL() { return GetToken(MySQLParser.TIME_SYMBOL, 0); }
		public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TrimFunctionContext trimFunction() {
			return GetRuleContext<TrimFunctionContext>(0);
		}
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public ITerminalNode VALUES_SYMBOL() { return GetToken(MySQLParser.VALUES_SYMBOL, 0); }
		public ITerminalNode YEAR_SYMBOL() { return GetToken(MySQLParser.YEAR_SYMBOL, 0); }
		public ITerminalNode ADDDATE_SYMBOL() { return GetToken(MySQLParser.ADDDATE_SYMBOL, 0); }
		public ITerminalNode SUBDATE_SYMBOL() { return GetToken(MySQLParser.SUBDATE_SYMBOL, 0); }
		public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		public ITerminalNode CURDATE_SYMBOL() { return GetToken(MySQLParser.CURDATE_SYMBOL, 0); }
		public ITerminalNode CURTIME_SYMBOL() { return GetToken(MySQLParser.CURTIME_SYMBOL, 0); }
		public TimeFunctionParametersContext timeFunctionParameters() {
			return GetRuleContext<TimeFunctionParametersContext>(0);
		}
		public ITerminalNode DATE_ADD_SYMBOL() { return GetToken(MySQLParser.DATE_ADD_SYMBOL, 0); }
		public ITerminalNode DATE_SUB_SYMBOL() { return GetToken(MySQLParser.DATE_SUB_SYMBOL, 0); }
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public ITerminalNode EXTRACT_SYMBOL() { return GetToken(MySQLParser.EXTRACT_SYMBOL, 0); }
		public DateTimeTtypeContext dateTimeTtype() {
			return GetRuleContext<DateTimeTtypeContext>(0);
		}
		public ITerminalNode GET_FORMAT_SYMBOL() { return GetToken(MySQLParser.GET_FORMAT_SYMBOL, 0); }
		public ITerminalNode NOW_SYMBOL() { return GetToken(MySQLParser.NOW_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		public ITerminalNode POSITION_SYMBOL() { return GetToken(MySQLParser.POSITION_SYMBOL, 0); }
		public SubstringFunctionContext substringFunction() {
			return GetRuleContext<SubstringFunctionContext>(0);
		}
		public ITerminalNode SYSDATE_SYMBOL() { return GetToken(MySQLParser.SYSDATE_SYMBOL, 0); }
		public IntervalTimeStampContext intervalTimeStamp() {
			return GetRuleContext<IntervalTimeStampContext>(0);
		}
		public ITerminalNode TIMESTAMP_ADD_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0); }
		public ITerminalNode TIMESTAMP_DIFF_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0); }
		public ITerminalNode UTC_DATE_SYMBOL() { return GetToken(MySQLParser.UTC_DATE_SYMBOL, 0); }
		public ITerminalNode UTC_TIME_SYMBOL() { return GetToken(MySQLParser.UTC_TIME_SYMBOL, 0); }
		public ITerminalNode UTC_TIMESTAMP_SYMBOL() { return GetToken(MySQLParser.UTC_TIMESTAMP_SYMBOL, 0); }
		public ITerminalNode ASCII_SYMBOL() { return GetToken(MySQLParser.ASCII_SYMBOL, 0); }
		public ITerminalNode CHARSET_SYMBOL() { return GetToken(MySQLParser.CHARSET_SYMBOL, 0); }
		public ExprListWithParenthesesContext exprListWithParentheses() {
			return GetRuleContext<ExprListWithParenthesesContext>(0);
		}
		public ITerminalNode COALESCE_SYMBOL() { return GetToken(MySQLParser.COALESCE_SYMBOL, 0); }
		public ITerminalNode COLLATION_SYMBOL() { return GetToken(MySQLParser.COLLATION_SYMBOL, 0); }
		public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public ITerminalNode IF_SYMBOL() { return GetToken(MySQLParser.IF_SYMBOL, 0); }
		public ITerminalNode FORMAT_SYMBOL() { return GetToken(MySQLParser.FORMAT_SYMBOL, 0); }
		public ITerminalNode MICROSECOND_SYMBOL() { return GetToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		public ITerminalNode MOD_SYMBOL() { return GetToken(MySQLParser.MOD_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode OLD_PASSWORD_SYMBOL() { return GetToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0); }
		public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public ITerminalNode QUARTER_SYMBOL() { return GetToken(MySQLParser.QUARTER_SYMBOL, 0); }
		public ITerminalNode REPEAT_SYMBOL() { return GetToken(MySQLParser.REPEAT_SYMBOL, 0); }
		public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public ITerminalNode REVERSE_SYMBOL() { return GetToken(MySQLParser.REVERSE_SYMBOL, 0); }
		public ITerminalNode ROW_COUNT_SYMBOL() { return GetToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		public ITerminalNode TRUNCATE_SYMBOL() { return GetToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public ITerminalNode WEEK_SYMBOL() { return GetToken(MySQLParser.WEEK_SYMBOL, 0); }
		public ITerminalNode WEIGHT_STRING_SYMBOL() { return GetToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0); }
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public WsNumCodepointsContext wsNumCodepoints() {
			return GetRuleContext<WsNumCodepointsContext>(0);
		}
		public Ulong_numberContext[] ulong_number() {
			return GetRuleContexts<Ulong_numberContext>();
		}
		public Ulong_numberContext ulong_number(int i) {
			return GetRuleContext<Ulong_numberContext>(i);
		}
		public WeightStringLevelsContext weightStringLevels() {
			return GetRuleContext<WeightStringLevelsContext>(0);
		}
		public GeometryFunctionContext geometryFunction() {
			return GetRuleContext<GeometryFunctionContext>(0);
		}
		public RuntimeFunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeFunctionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRuntimeFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRuntimeFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuntimeFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuntimeFunctionCallContext runtimeFunctionCall() {
		RuntimeFunctionCallContext _localctx = new RuntimeFunctionCallContext(Context, State);
		EnterRule(_localctx, 694, RULE_runtimeFunctionCall);
		int _la;
		try {
			State = 6128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,766,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5854; _localctx.name = Match(CHAR_SYMBOL);
				State = 5855; Match(OPEN_PAR_SYMBOL);
				State = 5856; exprList();
				State = 5859;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING_SYMBOL) {
					{
					State = 5857; Match(USING_SYMBOL);
					State = 5858; charsetName();
					}
				}

				State = 5861; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5863; _localctx.name = Match(CURRENT_USER_SYMBOL);
				State = 5865;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,750,Context) ) {
				case 1:
					{
					State = 5864; parentheses();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5867; _localctx.name = Match(DATE_SYMBOL);
				State = 5868; exprWithParentheses();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5869; _localctx.name = Match(DAY_SYMBOL);
				State = 5870; exprWithParentheses();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5871; _localctx.name = Match(HOUR_SYMBOL);
				State = 5872; exprWithParentheses();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5873; _localctx.name = Match(INSERT_SYMBOL);
				State = 5874; Match(OPEN_PAR_SYMBOL);
				State = 5875; expr(0);
				State = 5876; Match(COMMA_SYMBOL);
				State = 5877; expr(0);
				State = 5878; Match(COMMA_SYMBOL);
				State = 5879; expr(0);
				State = 5880; Match(COMMA_SYMBOL);
				State = 5881; expr(0);
				State = 5882; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5884; _localctx.name = Match(INTERVAL_SYMBOL);
				State = 5885; Match(OPEN_PAR_SYMBOL);
				State = 5886; expr(0);
				State = 5889;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 5887; Match(COMMA_SYMBOL);
					State = 5888; expr(0);
					}
					}
					State = 5891;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA_SYMBOL );
				State = 5893; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5895; _localctx.name = Match(LEFT_SYMBOL);
				State = 5896; Match(OPEN_PAR_SYMBOL);
				State = 5897; expr(0);
				State = 5898; Match(COMMA_SYMBOL);
				State = 5899; expr(0);
				State = 5900; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5902; _localctx.name = Match(MINUTE_SYMBOL);
				State = 5903; exprWithParentheses();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5904; _localctx.name = Match(MONTH_SYMBOL);
				State = 5905; exprWithParentheses();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5906; _localctx.name = Match(RIGHT_SYMBOL);
				State = 5907; Match(OPEN_PAR_SYMBOL);
				State = 5908; expr(0);
				State = 5909; Match(COMMA_SYMBOL);
				State = 5910; expr(0);
				State = 5911; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 5913; _localctx.name = Match(SECOND_SYMBOL);
				State = 5914; exprWithParentheses();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 5915; _localctx.name = Match(TIME_SYMBOL);
				State = 5916; exprWithParentheses();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 5917; _localctx.name = Match(TIMESTAMP_SYMBOL);
				State = 5918; Match(OPEN_PAR_SYMBOL);
				State = 5919; expr(0);
				State = 5922;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 5920; Match(COMMA_SYMBOL);
					State = 5921; expr(0);
					}
				}

				State = 5924; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 5926; trimFunction();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 5927; _localctx.name = Match(USER_SYMBOL);
				State = 5928; parentheses();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 5929; _localctx.name = Match(VALUES_SYMBOL);
				State = 5930; exprWithParentheses();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 5931; _localctx.name = Match(YEAR_SYMBOL);
				State = 5932; exprWithParentheses();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 5933;
				_localctx.name = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ADDDATE_SYMBOL || _la==SUBDATE_SYMBOL) ) {
					_localctx.name = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5934; Match(OPEN_PAR_SYMBOL);
				State = 5935; expr(0);
				State = 5936; Match(COMMA_SYMBOL);
				State = 5942;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,753,Context) ) {
				case 1:
					{
					State = 5937; expr(0);
					}
					break;
				case 2:
					{
					State = 5938; Match(INTERVAL_SYMBOL);
					State = 5939; expr(0);
					State = 5940; interval();
					}
					break;
				}
				State = 5944; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 5946; _localctx.name = Match(CURDATE_SYMBOL);
				State = 5948;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,754,Context) ) {
				case 1:
					{
					State = 5947; parentheses();
					}
					break;
				}
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 5950; _localctx.name = Match(CURTIME_SYMBOL);
				State = 5952;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,755,Context) ) {
				case 1:
					{
					State = 5951; timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 5954;
				_localctx.name = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATE_ADD_SYMBOL || _la==DATE_SUB_SYMBOL) ) {
					_localctx.name = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5955; Match(OPEN_PAR_SYMBOL);
				State = 5956; expr(0);
				State = 5957; Match(COMMA_SYMBOL);
				State = 5958; Match(INTERVAL_SYMBOL);
				State = 5959; expr(0);
				State = 5960; interval();
				State = 5961; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 5963; _localctx.name = Match(EXTRACT_SYMBOL);
				State = 5964; Match(OPEN_PAR_SYMBOL);
				State = 5965; interval();
				State = 5966; Match(FROM_SYMBOL);
				State = 5967; expr(0);
				State = 5968; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 5970; _localctx.name = Match(GET_FORMAT_SYMBOL);
				State = 5971; Match(OPEN_PAR_SYMBOL);
				State = 5972; dateTimeTtype();
				State = 5973; Match(COMMA_SYMBOL);
				State = 5974; expr(0);
				State = 5975; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 5977; _localctx.name = Match(NOW_SYMBOL);
				State = 5979;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,756,Context) ) {
				case 1:
					{
					State = 5978; timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 5981; _localctx.name = Match(POSITION_SYMBOL);
				State = 5982; Match(OPEN_PAR_SYMBOL);
				State = 5983; bitExpr(0);
				State = 5984; Match(IN_SYMBOL);
				State = 5985; expr(0);
				State = 5986; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 5988; substringFunction();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 5989; _localctx.name = Match(SYSDATE_SYMBOL);
				State = 5991;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,757,Context) ) {
				case 1:
					{
					State = 5990; timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 5993;
				_localctx.name = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==TIMESTAMP_ADD_SYMBOL || _la==TIMESTAMP_DIFF_SYMBOL) ) {
					_localctx.name = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5994; Match(OPEN_PAR_SYMBOL);
				State = 5995; intervalTimeStamp();
				State = 5996; Match(COMMA_SYMBOL);
				State = 5997; expr(0);
				State = 5998; Match(COMMA_SYMBOL);
				State = 5999; expr(0);
				State = 6000; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 6002; _localctx.name = Match(UTC_DATE_SYMBOL);
				State = 6004;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,758,Context) ) {
				case 1:
					{
					State = 6003; parentheses();
					}
					break;
				}
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 6006; _localctx.name = Match(UTC_TIME_SYMBOL);
				State = 6008;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,759,Context) ) {
				case 1:
					{
					State = 6007; timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 6010; _localctx.name = Match(UTC_TIMESTAMP_SYMBOL);
				State = 6012;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,760,Context) ) {
				case 1:
					{
					State = 6011; timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 6014; _localctx.name = Match(ASCII_SYMBOL);
				State = 6015; exprWithParentheses();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 6016; _localctx.name = Match(CHARSET_SYMBOL);
				State = 6017; exprWithParentheses();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 6018; _localctx.name = Match(COALESCE_SYMBOL);
				State = 6019; exprListWithParentheses();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 6020; _localctx.name = Match(COLLATION_SYMBOL);
				State = 6021; exprWithParentheses();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 6022; _localctx.name = Match(DATABASE_SYMBOL);
				State = 6023; parentheses();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 6024; _localctx.name = Match(IF_SYMBOL);
				State = 6025; Match(OPEN_PAR_SYMBOL);
				State = 6026; expr(0);
				State = 6027; Match(COMMA_SYMBOL);
				State = 6028; expr(0);
				State = 6029; Match(COMMA_SYMBOL);
				State = 6030; expr(0);
				State = 6031; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 6033; _localctx.name = Match(FORMAT_SYMBOL);
				State = 6034; Match(OPEN_PAR_SYMBOL);
				State = 6035; expr(0);
				State = 6036; Match(COMMA_SYMBOL);
				State = 6037; expr(0);
				State = 6040;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 6038; Match(COMMA_SYMBOL);
					State = 6039; expr(0);
					}
				}

				State = 6042; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 6044; _localctx.name = Match(MICROSECOND_SYMBOL);
				State = 6045; exprWithParentheses();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 6046; _localctx.name = Match(MOD_SYMBOL);
				State = 6047; Match(OPEN_PAR_SYMBOL);
				State = 6048; expr(0);
				State = 6049; Match(COMMA_SYMBOL);
				State = 6050; expr(0);
				State = 6051; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 6053;
				if (!(serverVersion < 50607)) throw new FailedPredicateException(this, "serverVersion < 50607");
				State = 6054; _localctx.name = Match(OLD_PASSWORD_SYMBOL);
				State = 6055; Match(OPEN_PAR_SYMBOL);
				State = 6056; textLiteral();
				State = 6057; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 6059;
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				State = 6060; _localctx.name = Match(PASSWORD_SYMBOL);
				State = 6061; exprWithParentheses();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 6062; _localctx.name = Match(QUARTER_SYMBOL);
				State = 6063; exprWithParentheses();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 6064; _localctx.name = Match(REPEAT_SYMBOL);
				State = 6065; Match(OPEN_PAR_SYMBOL);
				State = 6066; expr(0);
				State = 6067; Match(COMMA_SYMBOL);
				State = 6068; expr(0);
				State = 6069; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 6071; _localctx.name = Match(REPLACE_SYMBOL);
				State = 6072; Match(OPEN_PAR_SYMBOL);
				State = 6073; expr(0);
				State = 6074; Match(COMMA_SYMBOL);
				State = 6075; expr(0);
				State = 6076; Match(COMMA_SYMBOL);
				State = 6077; expr(0);
				State = 6078; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 6080; _localctx.name = Match(REVERSE_SYMBOL);
				State = 6081; exprWithParentheses();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 6082; _localctx.name = Match(ROW_COUNT_SYMBOL);
				State = 6083; parentheses();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 6084; _localctx.name = Match(TRUNCATE_SYMBOL);
				State = 6085; Match(OPEN_PAR_SYMBOL);
				State = 6086; expr(0);
				State = 6087; Match(COMMA_SYMBOL);
				State = 6088; expr(0);
				State = 6089; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 6091; _localctx.name = Match(WEEK_SYMBOL);
				State = 6092; Match(OPEN_PAR_SYMBOL);
				State = 6093; expr(0);
				State = 6096;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 6094; Match(COMMA_SYMBOL);
					State = 6095; expr(0);
					}
				}

				State = 6098; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 6100;
				if (!(serverVersion >= 50600)) throw new FailedPredicateException(this, "serverVersion >= 50600");
				State = 6101; _localctx.name = Match(WEIGHT_STRING_SYMBOL);
				State = 6102; Match(OPEN_PAR_SYMBOL);
				State = 6103; expr(0);
				State = 6123;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,765,Context) ) {
				case 1:
					{
					State = 6107;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,763,Context) ) {
					case 1:
						{
						State = 6104; Match(AS_SYMBOL);
						State = 6105; Match(CHAR_SYMBOL);
						State = 6106; wsNumCodepoints();
						}
						break;
					}
					State = 6111;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,764,Context) ) {
					case 1:
						{
						State = 6109;
						if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
						State = 6110; weightStringLevels();
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 6113; Match(AS_SYMBOL);
					State = 6114; Match(BINARY_SYMBOL);
					State = 6115; wsNumCodepoints();
					}
					break;
				case 3:
					{
					State = 6116; Match(COMMA_SYMBOL);
					State = 6117; ulong_number();
					State = 6118; Match(COMMA_SYMBOL);
					State = 6119; ulong_number();
					State = 6120; Match(COMMA_SYMBOL);
					State = 6121; ulong_number();
					}
					break;
				}
				State = 6125; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 6127; geometryFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeometryFunctionContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode CONTAINS_SYMBOL() { return GetToken(MySQLParser.CONTAINS_SYMBOL, 0); }
		public ITerminalNode GEOMETRYCOLLECTION_SYMBOL() { return GetToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ExprListWithParenthesesContext exprListWithParentheses() {
			return GetRuleContext<ExprListWithParenthesesContext>(0);
		}
		public ITerminalNode LINESTRING_SYMBOL() { return GetToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		public ITerminalNode MULTILINESTRING_SYMBOL() { return GetToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public ITerminalNode MULTIPOINT_SYMBOL() { return GetToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		public ITerminalNode MULTIPOLYGON_SYMBOL() { return GetToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public ITerminalNode POINT_SYMBOL() { return GetToken(MySQLParser.POINT_SYMBOL, 0); }
		public ITerminalNode POLYGON_SYMBOL() { return GetToken(MySQLParser.POLYGON_SYMBOL, 0); }
		public GeometryFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_geometryFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGeometryFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGeometryFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeometryFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeometryFunctionContext geometryFunction() {
		GeometryFunctionContext _localctx = new GeometryFunctionContext(Context, State);
		EnterRule(_localctx, 696, RULE_geometryFunction);
		try {
			State = 6161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,768,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6130;
				if (!(serverVersion < 50706)) throw new FailedPredicateException(this, "serverVersion < 50706");
				State = 6131; _localctx.name = Match(CONTAINS_SYMBOL);
				State = 6132; Match(OPEN_PAR_SYMBOL);
				State = 6133; expr(0);
				State = 6134; Match(COMMA_SYMBOL);
				State = 6135; expr(0);
				State = 6136; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6138; _localctx.name = Match(GEOMETRYCOLLECTION_SYMBOL);
				State = 6139; Match(OPEN_PAR_SYMBOL);
				State = 6141;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,767,Context) ) {
				case 1:
					{
					State = 6140; exprList();
					}
					break;
				}
				State = 6143; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6144; _localctx.name = Match(LINESTRING_SYMBOL);
				State = 6145; exprListWithParentheses();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6146; _localctx.name = Match(MULTILINESTRING_SYMBOL);
				State = 6147; exprListWithParentheses();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6148; _localctx.name = Match(MULTIPOINT_SYMBOL);
				State = 6149; exprListWithParentheses();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6150; _localctx.name = Match(MULTIPOLYGON_SYMBOL);
				State = 6151; exprListWithParentheses();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6152; _localctx.name = Match(POINT_SYMBOL);
				State = 6153; Match(OPEN_PAR_SYMBOL);
				State = 6154; expr(0);
				State = 6155; Match(COMMA_SYMBOL);
				State = 6156; expr(0);
				State = 6157; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6159; _localctx.name = Match(POLYGON_SYMBOL);
				State = 6160; exprListWithParentheses();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeFunctionParametersContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FractionalPrecisionContext fractionalPrecision() {
			return GetRuleContext<FractionalPrecisionContext>(0);
		}
		public TimeFunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeFunctionParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTimeFunctionParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTimeFunctionParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeFunctionParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeFunctionParametersContext timeFunctionParameters() {
		TimeFunctionParametersContext _localctx = new TimeFunctionParametersContext(Context, State);
		EnterRule(_localctx, 698, RULE_timeFunctionParameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6163; Match(OPEN_PAR_SYMBOL);
			State = 6165;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,769,Context) ) {
			case 1:
				{
				State = 6164; fractionalPrecision();
				}
				break;
			}
			State = 6167; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FractionalPrecisionContext : ParserRuleContext {
		public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public FractionalPrecisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fractionalPrecision; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFractionalPrecision(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFractionalPrecision(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFractionalPrecision(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FractionalPrecisionContext fractionalPrecision() {
		FractionalPrecisionContext _localctx = new FractionalPrecisionContext(Context, State);
		EnterRule(_localctx, 700, RULE_fractionalPrecision);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6169;
			if (!(serverVersion >= 50604)) throw new FailedPredicateException(this, "serverVersion >= 50604");
			State = 6170; Match(INT_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeightStringLevelsContext : ParserRuleContext {
		public ITerminalNode LEVEL_SYMBOL() { return GetToken(MySQLParser.LEVEL_SYMBOL, 0); }
		public Real_ulong_numberContext[] real_ulong_number() {
			return GetRuleContexts<Real_ulong_numberContext>();
		}
		public Real_ulong_numberContext real_ulong_number(int i) {
			return GetRuleContext<Real_ulong_numberContext>(i);
		}
		public ITerminalNode MINUS_OPERATOR() { return GetToken(MySQLParser.MINUS_OPERATOR, 0); }
		public WeightStringLevelListItemContext[] weightStringLevelListItem() {
			return GetRuleContexts<WeightStringLevelListItemContext>();
		}
		public WeightStringLevelListItemContext weightStringLevelListItem(int i) {
			return GetRuleContext<WeightStringLevelListItemContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public WeightStringLevelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weightStringLevels; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWeightStringLevels(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWeightStringLevels(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeightStringLevels(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WeightStringLevelsContext weightStringLevels() {
		WeightStringLevelsContext _localctx = new WeightStringLevelsContext(Context, State);
		EnterRule(_localctx, 702, RULE_weightStringLevels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6172; Match(LEVEL_SYMBOL);
			State = 6185;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,771,Context) ) {
			case 1:
				{
				State = 6173; real_ulong_number();
				State = 6174; Match(MINUS_OPERATOR);
				State = 6175; real_ulong_number();
				}
				break;
			case 2:
				{
				State = 6177; weightStringLevelListItem();
				State = 6182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 6178; Match(COMMA_SYMBOL);
					State = 6179; weightStringLevelListItem();
					}
					}
					State = 6184;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeightStringLevelListItemContext : ParserRuleContext {
		public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public ITerminalNode REVERSE_SYMBOL() { return GetToken(MySQLParser.REVERSE_SYMBOL, 0); }
		public ITerminalNode ASC_SYMBOL() { return GetToken(MySQLParser.ASC_SYMBOL, 0); }
		public ITerminalNode DESC_SYMBOL() { return GetToken(MySQLParser.DESC_SYMBOL, 0); }
		public WeightStringLevelListItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weightStringLevelListItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWeightStringLevelListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWeightStringLevelListItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeightStringLevelListItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WeightStringLevelListItemContext weightStringLevelListItem() {
		WeightStringLevelListItemContext _localctx = new WeightStringLevelListItemContext(Context, State);
		EnterRule(_localctx, 704, RULE_weightStringLevelListItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6187; real_ulong_number();
			State = 6193;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASC_SYMBOL:
			case DESC_SYMBOL:
				{
				State = 6188;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC_SYMBOL || _la==DESC_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REVERSE_SYMBOL) {
					{
					State = 6189; Match(REVERSE_SYMBOL);
					}
				}

				}
				break;
			case REVERSE_SYMBOL:
				{
				State = 6192; Match(REVERSE_SYMBOL);
				}
				break;
			case COMMA_SYMBOL:
			case CLOSE_PAR_SYMBOL:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimeTtypeContext : ParserRuleContext {
		public ITerminalNode DATE_SYMBOL() { return GetToken(MySQLParser.DATE_SYMBOL, 0); }
		public ITerminalNode TIME_SYMBOL() { return GetToken(MySQLParser.TIME_SYMBOL, 0); }
		public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public DateTimeTtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimeTtype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDateTimeTtype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDateTimeTtype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimeTtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTimeTtypeContext dateTimeTtype() {
		DateTimeTtypeContext _localctx = new DateTimeTtypeContext(Context, State);
		EnterRule(_localctx, 706, RULE_dateTimeTtype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6195;
			_la = TokenStream.LA(1);
			if ( !(_la==DATETIME_SYMBOL || _la==DATE_SYMBOL || _la==TIMESTAMP_SYMBOL || _la==TIME_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrimFunctionContext : ParserRuleContext {
		public ITerminalNode TRIM_SYMBOL() { return GetToken(MySQLParser.TRIM_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LEADING_SYMBOL() { return GetToken(MySQLParser.LEADING_SYMBOL, 0); }
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public ITerminalNode TRAILING_SYMBOL() { return GetToken(MySQLParser.TRAILING_SYMBOL, 0); }
		public ITerminalNode BOTH_SYMBOL() { return GetToken(MySQLParser.BOTH_SYMBOL, 0); }
		public TrimFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trimFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTrimFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTrimFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrimFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrimFunctionContext trimFunction() {
		TrimFunctionContext _localctx = new TrimFunctionContext(Context, State);
		EnterRule(_localctx, 708, RULE_trimFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6197; Match(TRIM_SYMBOL);
			State = 6198; Match(OPEN_PAR_SYMBOL);
			State = 6222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,778,Context) ) {
			case 1:
				{
				State = 6199; expr(0);
				State = 6202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL) {
					{
					State = 6200; Match(FROM_SYMBOL);
					State = 6201; expr(0);
					}
				}

				}
				break;
			case 2:
				{
				State = 6204; Match(LEADING_SYMBOL);
				State = 6206;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,775,Context) ) {
				case 1:
					{
					State = 6205; expr(0);
					}
					break;
				}
				State = 6208; Match(FROM_SYMBOL);
				State = 6209; expr(0);
				}
				break;
			case 3:
				{
				State = 6210; Match(TRAILING_SYMBOL);
				State = 6212;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,776,Context) ) {
				case 1:
					{
					State = 6211; expr(0);
					}
					break;
				}
				State = 6214; Match(FROM_SYMBOL);
				State = 6215; expr(0);
				}
				break;
			case 4:
				{
				State = 6216; Match(BOTH_SYMBOL);
				State = 6218;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,777,Context) ) {
				case 1:
					{
					State = 6217; expr(0);
					}
					break;
				}
				State = 6220; Match(FROM_SYMBOL);
				State = 6221; expr(0);
				}
				break;
			}
			State = 6224; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubstringFunctionContext : ParserRuleContext {
		public ITerminalNode SUBSTRING_SYMBOL() { return GetToken(MySQLParser.SUBSTRING_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public SubstringFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substringFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSubstringFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSubstringFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstringFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubstringFunctionContext substringFunction() {
		SubstringFunctionContext _localctx = new SubstringFunctionContext(Context, State);
		EnterRule(_localctx, 710, RULE_substringFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6226; Match(SUBSTRING_SYMBOL);
			State = 6227; Match(OPEN_PAR_SYMBOL);
			State = 6228; expr(0);
			State = 6241;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMA_SYMBOL:
				{
				State = 6229; Match(COMMA_SYMBOL);
				State = 6230; expr(0);
				State = 6233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 6231; Match(COMMA_SYMBOL);
					State = 6232; expr(0);
					}
				}

				}
				break;
			case FROM_SYMBOL:
				{
				State = 6235; Match(FROM_SYMBOL);
				State = 6236; expr(0);
				State = 6239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 6237; Match(FOR_SYMBOL);
					State = 6238; expr(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6243; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public UdfExprListContext udfExprList() {
			return GetRuleContext<UdfExprListContext>(0);
		}
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 712, RULE_functionCall);
		try {
			State = 6259;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,784,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6245; pureIdentifier();
				State = 6246; Match(OPEN_PAR_SYMBOL);
				State = 6248;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,782,Context) ) {
				case 1:
					{
					State = 6247; udfExprList();
					}
					break;
				}
				State = 6250; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6252; qualifiedIdentifier();
				State = 6253; Match(OPEN_PAR_SYMBOL);
				State = 6255;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,783,Context) ) {
				case 1:
					{
					State = 6254; exprList();
					}
					break;
				}
				State = 6257; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdfExprListContext : ParserRuleContext {
		public UdfExprContext[] udfExpr() {
			return GetRuleContexts<UdfExprContext>();
		}
		public UdfExprContext udfExpr(int i) {
			return GetRuleContext<UdfExprContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UdfExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udfExprList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUdfExprList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUdfExprList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdfExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UdfExprListContext udfExprList() {
		UdfExprListContext _localctx = new UdfExprListContext(Context, State);
		EnterRule(_localctx, 714, RULE_udfExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6261; udfExpr();
			State = 6266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 6262; Match(COMMA_SYMBOL);
				State = 6263; udfExpr();
				}
				}
				State = 6268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdfExprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public UdfExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udfExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUdfExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUdfExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdfExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UdfExprContext udfExpr() {
		UdfExprContext _localctx = new UdfExprContext(Context, State);
		EnterRule(_localctx, 716, RULE_udfExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6269; expr(0);
			State = 6271;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,786,Context) ) {
			case 1:
				{
				State = 6270; selectAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		public ITerminalNode ASSIGN_OPERATOR() { return GetToken(MySQLParser.ASSIGN_OPERATOR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SystemVariableContext systemVariable() {
			return GetRuleContext<SystemVariableContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 718, RULE_variable);
		try {
			State = 6279;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT_SIGN_SYMBOL:
			case AT_TEXT_SUFFIX:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6273; userVariable();
				State = 6276;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,787,Context) ) {
				case 1:
					{
					State = 6274; Match(ASSIGN_OPERATOR);
					State = 6275; expr(0);
					}
					break;
				}
				}
				break;
			case AT_AT_SIGN_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6278; systemVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserVariableContext : ParserRuleContext {
		public ITerminalNode AT_SIGN_SYMBOL() { return GetToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ITerminalNode AT_TEXT_SUFFIX() { return GetToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
		public UserVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUserVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUserVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserVariableContext userVariable() {
		UserVariableContext _localctx = new UserVariableContext(Context, State);
		EnterRule(_localctx, 720, RULE_userVariable);
		try {
			State = 6284;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT_SIGN_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 6281; Match(AT_SIGN_SYMBOL);
				State = 6282; textOrIdentifier();
				}
				}
				break;
			case AT_TEXT_SUFFIX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6283; Match(AT_TEXT_SUFFIX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SystemVariableContext : ParserRuleContext {
		public ITerminalNode AT_AT_SIGN_SYMBOL() { return GetToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public VarIdentTypeContext varIdentType() {
			return GetRuleContext<VarIdentTypeContext>(0);
		}
		public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public SystemVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_systemVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSystemVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSystemVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSystemVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SystemVariableContext systemVariable() {
		SystemVariableContext _localctx = new SystemVariableContext(Context, State);
		EnterRule(_localctx, 722, RULE_systemVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6286; Match(AT_AT_SIGN_SYMBOL);
			State = 6288;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,790,Context) ) {
			case 1:
				{
				State = 6287; varIdentType();
				}
				break;
			}
			State = 6290; textOrIdentifier();
			State = 6292;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,791,Context) ) {
			case 1:
				{
				State = 6291; dotIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InternalVariableNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LValueIdentifierContext lValueIdentifier() {
			return GetRuleContext<LValueIdentifierContext>(0);
		}
		public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public InternalVariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_internalVariableName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInternalVariableName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInternalVariableName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInternalVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InternalVariableNameContext internalVariableName() {
		InternalVariableNameContext _localctx = new InternalVariableNameContext(Context, State);
		EnterRule(_localctx, 724, RULE_internalVariableName);
		int _la;
		try {
			State = 6308;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,795,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6304;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,794,Context) ) {
				case 1:
					{
					State = 6294;
					if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
					State = 6295; identifier();
					State = 6297;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT_SYMBOL) {
						{
						State = 6296; dotIdentifier();
						}
					}

					}
					break;
				case 2:
					{
					State = 6299;
					if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
					State = 6300; lValueIdentifier();
					State = 6302;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT_SYMBOL) {
						{
						State = 6301; dotIdentifier();
						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6306; Match(DEFAULT_SYMBOL);
				State = 6307; dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenExpressionContext : ParserRuleContext {
		public ITerminalNode WHEN_SYMBOL() { return GetToken(MySQLParser.WHEN_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public WhenExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWhenExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWhenExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenExpressionContext whenExpression() {
		WhenExpressionContext _localctx = new WhenExpressionContext(Context, State);
		EnterRule(_localctx, 726, RULE_whenExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6310; Match(WHEN_SYMBOL);
			State = 6311; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThenExpressionContext : ParserRuleContext {
		public ITerminalNode THEN_SYMBOL() { return GetToken(MySQLParser.THEN_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ThenExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thenExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterThenExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitThenExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThenExpressionContext thenExpression() {
		ThenExpressionContext _localctx = new ThenExpressionContext(Context, State);
		EnterRule(_localctx, 728, RULE_thenExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6313; Match(THEN_SYMBOL);
			State = 6314; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseExpressionContext : ParserRuleContext {
		public ITerminalNode ELSE_SYMBOL() { return GetToken(MySQLParser.ELSE_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ElseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterElseExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitElseExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseExpressionContext elseExpression() {
		ElseExpressionContext _localctx = new ElseExpressionContext(Context, State);
		EnterRule(_localctx, 730, RULE_elseExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6316; Match(ELSE_SYMBOL);
			State = 6317; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastTypeContext : ParserRuleContext {
		public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public ITerminalNode CHAR_SYMBOL() { return GetToken(MySQLParser.CHAR_SYMBOL, 0); }
		public CharsetWithOptBinaryContext charsetWithOptBinary() {
			return GetRuleContext<CharsetWithOptBinaryContext>(0);
		}
		public NcharContext nchar() {
			return GetRuleContext<NcharContext>(0);
		}
		public ITerminalNode SIGNED_SYMBOL() { return GetToken(MySQLParser.SIGNED_SYMBOL, 0); }
		public ITerminalNode INT_SYMBOL() { return GetToken(MySQLParser.INT_SYMBOL, 0); }
		public ITerminalNode UNSIGNED_SYMBOL() { return GetToken(MySQLParser.UNSIGNED_SYMBOL, 0); }
		public ITerminalNode DATE_SYMBOL() { return GetToken(MySQLParser.DATE_SYMBOL, 0); }
		public ITerminalNode TIME_SYMBOL() { return GetToken(MySQLParser.TIME_SYMBOL, 0); }
		public TypeDatetimePrecisionContext typeDatetimePrecision() {
			return GetRuleContext<TypeDatetimePrecisionContext>(0);
		}
		public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public ITerminalNode DECIMAL_SYMBOL() { return GetToken(MySQLParser.DECIMAL_SYMBOL, 0); }
		public FloatOptionsContext floatOptions() {
			return GetRuleContext<FloatOptionsContext>(0);
		}
		public ITerminalNode JSON_SYMBOL() { return GetToken(MySQLParser.JSON_SYMBOL, 0); }
		public RealTypeContext realType() {
			return GetRuleContext<RealTypeContext>(0);
		}
		public ITerminalNode FLOAT_SYMBOL() { return GetToken(MySQLParser.FLOAT_SYMBOL, 0); }
		public StandardFloatOptionsContext standardFloatOptions() {
			return GetRuleContext<StandardFloatOptionsContext>(0);
		}
		public CastTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCastType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCastType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastTypeContext castType() {
		CastTypeContext _localctx = new CastTypeContext(Context, State);
		EnterRule(_localctx, 732, RULE_castType);
		try {
			State = 6364;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,806,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6319; Match(BINARY_SYMBOL);
				State = 6321;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,796,Context) ) {
				case 1:
					{
					State = 6320; fieldLength();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6323; Match(CHAR_SYMBOL);
				State = 6325;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,797,Context) ) {
				case 1:
					{
					State = 6324; fieldLength();
					}
					break;
				}
				State = 6328;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,798,Context) ) {
				case 1:
					{
					State = 6327; charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6330; nchar();
				State = 6332;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,799,Context) ) {
				case 1:
					{
					State = 6331; fieldLength();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6334; Match(SIGNED_SYMBOL);
				State = 6336;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,800,Context) ) {
				case 1:
					{
					State = 6335; Match(INT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6338; Match(UNSIGNED_SYMBOL);
				State = 6340;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,801,Context) ) {
				case 1:
					{
					State = 6339; Match(INT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6342; Match(DATE_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6343; Match(TIME_SYMBOL);
				State = 6345;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,802,Context) ) {
				case 1:
					{
					State = 6344; typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6347; Match(DATETIME_SYMBOL);
				State = 6349;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,803,Context) ) {
				case 1:
					{
					State = 6348; typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6351; Match(DECIMAL_SYMBOL);
				State = 6353;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,804,Context) ) {
				case 1:
					{
					State = 6352; floatOptions();
					}
					break;
				}
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6355;
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				State = 6356; Match(JSON_SYMBOL);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6357;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 6358; realType();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6359;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 6360; Match(FLOAT_SYMBOL);
				State = 6362;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,805,Context) ) {
				case 1:
					{
					State = 6361; standardFloatOptions();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExprList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExprList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 734, RULE_exprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6366; expr(0);
			State = 6371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 6367; Match(COMMA_SYMBOL);
				State = 6368; expr(0);
				}
				}
				State = 6373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetContext : ParserRuleContext {
		public ITerminalNode CHAR_SYMBOL() { return GetToken(MySQLParser.CHAR_SYMBOL, 0); }
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public ITerminalNode CHARSET_SYMBOL() { return GetToken(MySQLParser.CHARSET_SYMBOL, 0); }
		public CharsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charset; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCharset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCharset(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharsetContext charset() {
		CharsetContext _localctx = new CharsetContext(Context, State);
		EnterRule(_localctx, 736, RULE_charset);
		try {
			State = 6377;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6374; Match(CHAR_SYMBOL);
				State = 6375; Match(SET_SYMBOL);
				}
				break;
			case CHARSET_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6376; Match(CHARSET_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotRuleContext : ParserRuleContext {
		public ITerminalNode NOT_SYMBOL() { return GetToken(MySQLParser.NOT_SYMBOL, 0); }
		public ITerminalNode NOT2_SYMBOL() { return GetToken(MySQLParser.NOT2_SYMBOL, 0); }
		public NotRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNotRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNotRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotRuleContext notRule() {
		NotRuleContext _localctx = new NotRuleContext(Context, State);
		EnterRule(_localctx, 738, RULE_notRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6379;
			_la = TokenStream.LA(1);
			if ( !(_la==NOT2_SYMBOL || _la==NOT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Not2RuleContext : ParserRuleContext {
		public ITerminalNode LOGICAL_NOT_OPERATOR() { return GetToken(MySQLParser.LOGICAL_NOT_OPERATOR, 0); }
		public ITerminalNode NOT2_SYMBOL() { return GetToken(MySQLParser.NOT2_SYMBOL, 0); }
		public Not2RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_not2Rule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNot2Rule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNot2Rule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot2Rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Not2RuleContext not2Rule() {
		Not2RuleContext _localctx = new Not2RuleContext(Context, State);
		EnterRule(_localctx, 740, RULE_not2Rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6381;
			_la = TokenStream.LA(1);
			if ( !(_la==NOT2_SYMBOL || _la==LOGICAL_NOT_OPERATOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalContext : ParserRuleContext {
		public IntervalTimeStampContext intervalTimeStamp() {
			return GetRuleContext<IntervalTimeStampContext>(0);
		}
		public ITerminalNode SECOND_MICROSECOND_SYMBOL() { return GetToken(MySQLParser.SECOND_MICROSECOND_SYMBOL, 0); }
		public ITerminalNode MINUTE_MICROSECOND_SYMBOL() { return GetToken(MySQLParser.MINUTE_MICROSECOND_SYMBOL, 0); }
		public ITerminalNode MINUTE_SECOND_SYMBOL() { return GetToken(MySQLParser.MINUTE_SECOND_SYMBOL, 0); }
		public ITerminalNode HOUR_MICROSECOND_SYMBOL() { return GetToken(MySQLParser.HOUR_MICROSECOND_SYMBOL, 0); }
		public ITerminalNode HOUR_SECOND_SYMBOL() { return GetToken(MySQLParser.HOUR_SECOND_SYMBOL, 0); }
		public ITerminalNode HOUR_MINUTE_SYMBOL() { return GetToken(MySQLParser.HOUR_MINUTE_SYMBOL, 0); }
		public ITerminalNode DAY_MICROSECOND_SYMBOL() { return GetToken(MySQLParser.DAY_MICROSECOND_SYMBOL, 0); }
		public ITerminalNode DAY_SECOND_SYMBOL() { return GetToken(MySQLParser.DAY_SECOND_SYMBOL, 0); }
		public ITerminalNode DAY_MINUTE_SYMBOL() { return GetToken(MySQLParser.DAY_MINUTE_SYMBOL, 0); }
		public ITerminalNode DAY_HOUR_SYMBOL() { return GetToken(MySQLParser.DAY_HOUR_SYMBOL, 0); }
		public ITerminalNode YEAR_MONTH_SYMBOL() { return GetToken(MySQLParser.YEAR_MONTH_SYMBOL, 0); }
		public IntervalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interval; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInterval(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInterval(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalContext interval() {
		IntervalContext _localctx = new IntervalContext(Context, State);
		EnterRule(_localctx, 742, RULE_interval);
		int _la;
		try {
			State = 6385;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DAY_SYMBOL:
			case HOUR_SYMBOL:
			case MICROSECOND_SYMBOL:
			case MINUTE_SYMBOL:
			case MONTH_SYMBOL:
			case QUARTER_SYMBOL:
			case SECOND_SYMBOL:
			case WEEK_SYMBOL:
			case YEAR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6383; intervalTimeStamp();
				}
				break;
			case DAY_HOUR_SYMBOL:
			case DAY_MICROSECOND_SYMBOL:
			case DAY_MINUTE_SYMBOL:
			case DAY_SECOND_SYMBOL:
			case HOUR_MICROSECOND_SYMBOL:
			case HOUR_MINUTE_SYMBOL:
			case HOUR_SECOND_SYMBOL:
			case MINUTE_MICROSECOND_SYMBOL:
			case MINUTE_SECOND_SYMBOL:
			case SECOND_MICROSECOND_SYMBOL:
			case YEAR_MONTH_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6384;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & ((1L << (DAY_HOUR_SYMBOL - 471)) | (1L << (DAY_MICROSECOND_SYMBOL - 471)) | (1L << (DAY_MINUTE_SYMBOL - 471)) | (1L << (DAY_SECOND_SYMBOL - 471)) | (1L << (HOUR_MICROSECOND_SYMBOL - 471)) | (1L << (HOUR_MINUTE_SYMBOL - 471)) | (1L << (HOUR_SECOND_SYMBOL - 471)))) != 0) || ((((_la - 563)) & ~0x3f) == 0 && ((1L << (_la - 563)) & ((1L << (MINUTE_MICROSECOND_SYMBOL - 563)) | (1L << (MINUTE_SECOND_SYMBOL - 563)) | (1L << (SECOND_MICROSECOND_SYMBOL - 563)))) != 0) || _la==YEAR_MONTH_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalTimeStampContext : ParserRuleContext {
		public ITerminalNode MICROSECOND_SYMBOL() { return GetToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		public ITerminalNode SECOND_SYMBOL() { return GetToken(MySQLParser.SECOND_SYMBOL, 0); }
		public ITerminalNode MINUTE_SYMBOL() { return GetToken(MySQLParser.MINUTE_SYMBOL, 0); }
		public ITerminalNode HOUR_SYMBOL() { return GetToken(MySQLParser.HOUR_SYMBOL, 0); }
		public ITerminalNode DAY_SYMBOL() { return GetToken(MySQLParser.DAY_SYMBOL, 0); }
		public ITerminalNode WEEK_SYMBOL() { return GetToken(MySQLParser.WEEK_SYMBOL, 0); }
		public ITerminalNode MONTH_SYMBOL() { return GetToken(MySQLParser.MONTH_SYMBOL, 0); }
		public ITerminalNode QUARTER_SYMBOL() { return GetToken(MySQLParser.QUARTER_SYMBOL, 0); }
		public ITerminalNode YEAR_SYMBOL() { return GetToken(MySQLParser.YEAR_SYMBOL, 0); }
		public IntervalTimeStampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalTimeStamp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIntervalTimeStamp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIntervalTimeStamp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalTimeStamp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalTimeStampContext intervalTimeStamp() {
		IntervalTimeStampContext _localctx = new IntervalTimeStampContext(Context, State);
		EnterRule(_localctx, 744, RULE_intervalTimeStamp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6387;
			_la = TokenStream.LA(1);
			if ( !(_la==DAY_SYMBOL || _la==HOUR_SYMBOL || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (MICROSECOND_SYMBOL - 217)) | (1L << (MINUTE_SYMBOL - 217)) | (1L << (MONTH_SYMBOL - 217)) | (1L << (QUARTER_SYMBOL - 217)))) != 0) || _la==SECOND_SYMBOL || _la==WEEK_SYMBOL || _la==YEAR_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListWithParenthesesContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprListWithParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprListWithParentheses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExprListWithParentheses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExprListWithParentheses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprListWithParentheses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListWithParenthesesContext exprListWithParentheses() {
		ExprListWithParenthesesContext _localctx = new ExprListWithParenthesesContext(Context, State);
		EnterRule(_localctx, 746, RULE_exprListWithParentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6389; Match(OPEN_PAR_SYMBOL);
			State = 6390; exprList();
			State = 6391; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprWithParenthesesContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprWithParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprWithParentheses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExprWithParentheses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExprWithParentheses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprWithParentheses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprWithParenthesesContext exprWithParentheses() {
		ExprWithParenthesesContext _localctx = new ExprWithParenthesesContext(Context, State);
		EnterRule(_localctx, 748, RULE_exprWithParentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6393; Match(OPEN_PAR_SYMBOL);
			State = 6394; expr(0);
			State = 6395; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExprWithParenthesesContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprWithParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExprWithParentheses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprWithParentheses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprWithParentheses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprWithParentheses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExprWithParenthesesContext simpleExprWithParentheses() {
		SimpleExprWithParenthesesContext _localctx = new SimpleExprWithParenthesesContext(Context, State);
		EnterRule(_localctx, 750, RULE_simpleExprWithParentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6397; Match(OPEN_PAR_SYMBOL);
			State = 6398; simpleExpr(0);
			State = 6399; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderListContext : ParserRuleContext {
		public OrderExpressionContext[] orderExpression() {
			return GetRuleContexts<OrderExpressionContext>();
		}
		public OrderExpressionContext orderExpression(int i) {
			return GetRuleContext<OrderExpressionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public OrderListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOrderList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOrderList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderListContext orderList() {
		OrderListContext _localctx = new OrderListContext(Context, State);
		EnterRule(_localctx, 752, RULE_orderList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6401; orderExpression();
			State = 6406;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,810,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6402; Match(COMMA_SYMBOL);
					State = 6403; orderExpression();
					}
					} 
				}
				State = 6408;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,810,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderExpressionContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public OrderExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOrderExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOrderExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderExpressionContext orderExpression() {
		OrderExpressionContext _localctx = new OrderExpressionContext(Context, State);
		EnterRule(_localctx, 754, RULE_orderExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6409; expr(0);
			State = 6411;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,811,Context) ) {
			case 1:
				{
				State = 6410; direction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupListContext : ParserRuleContext {
		public GroupingExpressionContext[] groupingExpression() {
			return GetRuleContexts<GroupingExpressionContext>();
		}
		public GroupingExpressionContext groupingExpression(int i) {
			return GetRuleContext<GroupingExpressionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public GroupListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGroupList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGroupList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupListContext groupList() {
		GroupListContext _localctx = new GroupListContext(Context, State);
		EnterRule(_localctx, 756, RULE_groupList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6413; groupingExpression();
			State = 6418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 6414; Match(COMMA_SYMBOL);
				State = 6415; groupingExpression();
				}
				}
				State = 6420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingExpressionContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public GroupingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupingExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGroupingExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGroupingExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupingExpressionContext groupingExpression() {
		GroupingExpressionContext _localctx = new GroupingExpressionContext(Context, State);
		EnterRule(_localctx, 758, RULE_groupingExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6421; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelContext : ParserRuleContext {
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public ITerminalNode CHANNEL_SYMBOL() { return GetToken(MySQLParser.CHANNEL_SYMBOL, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		public ChannelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChannel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChannel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChannelContext channel() {
		ChannelContext _localctx = new ChannelContext(Context, State);
		EnterRule(_localctx, 760, RULE_channel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6423;
			if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
			State = 6424; Match(FOR_SYMBOL);
			State = 6425; Match(CHANNEL_SYMBOL);
			State = 6426; textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		public LabeledBlockContext labeledBlock() {
			return GetRuleContext<LabeledBlockContext>(0);
		}
		public UnlabeledBlockContext unlabeledBlock() {
			return GetRuleContext<UnlabeledBlockContext>(0);
		}
		public LabeledControlContext labeledControl() {
			return GetRuleContext<LabeledControlContext>(0);
		}
		public UnlabeledControlContext unlabeledControl() {
			return GetRuleContext<UnlabeledControlContext>(0);
		}
		public LeaveStatementContext leaveStatement() {
			return GetRuleContext<LeaveStatementContext>(0);
		}
		public IterateStatementContext iterateStatement() {
			return GetRuleContext<IterateStatementContext>(0);
		}
		public CursorOpenContext cursorOpen() {
			return GetRuleContext<CursorOpenContext>(0);
		}
		public CursorFetchContext cursorFetch() {
			return GetRuleContext<CursorFetchContext>(0);
		}
		public CursorCloseContext cursorClose() {
			return GetRuleContext<CursorCloseContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 762, RULE_compoundStatement);
		try {
			State = 6441;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,813,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6428; simpleStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6429; returnStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6430; ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6431; caseStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6432; labeledBlock();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6433; unlabeledBlock();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6434; labeledControl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6435; unlabeledControl();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6436; leaveStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6437; iterateStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6438; cursorOpen();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6439; cursorFetch();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6440; cursorClose();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode RETURN_SYMBOL() { return GetToken(MySQLParser.RETURN_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 764, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6443; Match(RETURN_SYMBOL);
			State = 6444; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode[] IF_SYMBOL() { return GetTokens(MySQLParser.IF_SYMBOL); }
		public ITerminalNode IF_SYMBOL(int i) {
			return GetToken(MySQLParser.IF_SYMBOL, i);
		}
		public IfBodyContext ifBody() {
			return GetRuleContext<IfBodyContext>(0);
		}
		public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 766, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6446; Match(IF_SYMBOL);
			State = 6447; ifBody();
			State = 6448; Match(END_SYMBOL);
			State = 6449; Match(IF_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBodyContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ThenStatementContext thenStatement() {
			return GetRuleContext<ThenStatementContext>(0);
		}
		public ITerminalNode ELSEIF_SYMBOL() { return GetToken(MySQLParser.ELSEIF_SYMBOL, 0); }
		public IfBodyContext ifBody() {
			return GetRuleContext<IfBodyContext>(0);
		}
		public ITerminalNode ELSE_SYMBOL() { return GetToken(MySQLParser.ELSE_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public IfBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIfBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIfBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBodyContext ifBody() {
		IfBodyContext _localctx = new IfBodyContext(Context, State);
		EnterRule(_localctx, 768, RULE_ifBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6451; expr(0);
			State = 6452; thenStatement();
			State = 6457;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELSEIF_SYMBOL:
				{
				State = 6453; Match(ELSEIF_SYMBOL);
				State = 6454; ifBody();
				}
				break;
			case ELSE_SYMBOL:
				{
				State = 6455; Match(ELSE_SYMBOL);
				State = 6456; compoundStatementList();
				}
				break;
			case END_SYMBOL:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThenStatementContext : ParserRuleContext {
		public ITerminalNode THEN_SYMBOL() { return GetToken(MySQLParser.THEN_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public ThenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thenStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterThenStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitThenStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThenStatementContext thenStatement() {
		ThenStatementContext _localctx = new ThenStatementContext(Context, State);
		EnterRule(_localctx, 770, RULE_thenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6459; Match(THEN_SYMBOL);
			State = 6460; compoundStatementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementListContext : ParserRuleContext {
		public CompoundStatementContext[] compoundStatement() {
			return GetRuleContexts<CompoundStatementContext>();
		}
		public CompoundStatementContext compoundStatement(int i) {
			return GetRuleContext<CompoundStatementContext>(i);
		}
		public ITerminalNode[] SEMICOLON_SYMBOL() { return GetTokens(MySQLParser.SEMICOLON_SYMBOL); }
		public ITerminalNode SEMICOLON_SYMBOL(int i) {
			return GetToken(MySQLParser.SEMICOLON_SYMBOL, i);
		}
		public CompoundStatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCompoundStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCompoundStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementListContext compoundStatementList() {
		CompoundStatementListContext _localctx = new CompoundStatementListContext(Context, State);
		EnterRule(_localctx, 772, RULE_compoundStatementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6465;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 6462; compoundStatement();
					State = 6463; Match(SEMICOLON_SYMBOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6467;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,815,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		public ITerminalNode[] CASE_SYMBOL() { return GetTokens(MySQLParser.CASE_SYMBOL); }
		public ITerminalNode CASE_SYMBOL(int i) {
			return GetToken(MySQLParser.CASE_SYMBOL, i);
		}
		public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public WhenExpressionContext[] whenExpression() {
			return GetRuleContexts<WhenExpressionContext>();
		}
		public WhenExpressionContext whenExpression(int i) {
			return GetRuleContext<WhenExpressionContext>(i);
		}
		public ThenStatementContext[] thenStatement() {
			return GetRuleContexts<ThenStatementContext>();
		}
		public ThenStatementContext thenStatement(int i) {
			return GetRuleContext<ThenStatementContext>(i);
		}
		public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 774, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6469; Match(CASE_SYMBOL);
			State = 6471;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,816,Context) ) {
			case 1:
				{
				State = 6470; expr(0);
				}
				break;
			}
			State = 6476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 6473; whenExpression();
				State = 6474; thenStatement();
				}
				}
				State = 6478;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN_SYMBOL );
			State = 6481;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE_SYMBOL) {
				{
				State = 6480; elseStatement();
				}
			}

			State = 6483; Match(END_SYMBOL);
			State = 6484; Match(CASE_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public ITerminalNode ELSE_SYMBOL() { return GetToken(MySQLParser.ELSE_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 776, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6486; Match(ELSE_SYMBOL);
			State = 6487; compoundStatementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledBlockContext : ParserRuleContext {
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public BeginEndBlockContext beginEndBlock() {
			return GetRuleContext<BeginEndBlockContext>(0);
		}
		public LabelRefContext labelRef() {
			return GetRuleContext<LabelRefContext>(0);
		}
		public LabeledBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLabeledBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLabeledBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledBlockContext labeledBlock() {
		LabeledBlockContext _localctx = new LabeledBlockContext(Context, State);
		EnterRule(_localctx, 778, RULE_labeledBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6489; label();
			State = 6490; beginEndBlock();
			State = 6492;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,819,Context) ) {
			case 1:
				{
				State = 6491; labelRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlabeledBlockContext : ParserRuleContext {
		public BeginEndBlockContext beginEndBlock() {
			return GetRuleContext<BeginEndBlockContext>(0);
		}
		public UnlabeledBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlabeledBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUnlabeledBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUnlabeledBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlabeledBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlabeledBlockContext unlabeledBlock() {
		UnlabeledBlockContext _localctx = new UnlabeledBlockContext(Context, State);
		EnterRule(_localctx, 780, RULE_unlabeledBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6494; beginEndBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public LabelIdentifierContext labelIdentifier() {
			return GetRuleContext<LabelIdentifierContext>(0);
		}
		public ITerminalNode COLON_SYMBOL() { return GetToken(MySQLParser.COLON_SYMBOL, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 782, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6496; labelIdentifier();
			State = 6497; Match(COLON_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeginEndBlockContext : ParserRuleContext {
		public ITerminalNode BEGIN_SYMBOL() { return GetToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		public SpDeclarationsContext spDeclarations() {
			return GetRuleContext<SpDeclarationsContext>(0);
		}
		public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public BeginEndBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beginEndBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterBeginEndBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitBeginEndBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeginEndBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeginEndBlockContext beginEndBlock() {
		BeginEndBlockContext _localctx = new BeginEndBlockContext(Context, State);
		EnterRule(_localctx, 784, RULE_beginEndBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6499; Match(BEGIN_SYMBOL);
			State = 6501;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,820,Context) ) {
			case 1:
				{
				State = 6500; spDeclarations();
				}
				break;
			}
			State = 6504;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,821,Context) ) {
			case 1:
				{
				State = 6503; compoundStatementList();
				}
				break;
			}
			State = 6506; Match(END_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledControlContext : ParserRuleContext {
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public UnlabeledControlContext unlabeledControl() {
			return GetRuleContext<UnlabeledControlContext>(0);
		}
		public LabelRefContext labelRef() {
			return GetRuleContext<LabelRefContext>(0);
		}
		public LabeledControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledControl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLabeledControl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLabeledControl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledControlContext labeledControl() {
		LabeledControlContext _localctx = new LabeledControlContext(Context, State);
		EnterRule(_localctx, 786, RULE_labeledControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6508; label();
			State = 6509; unlabeledControl();
			State = 6511;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,822,Context) ) {
			case 1:
				{
				State = 6510; labelRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlabeledControlContext : ParserRuleContext {
		public LoopBlockContext loopBlock() {
			return GetRuleContext<LoopBlockContext>(0);
		}
		public WhileDoBlockContext whileDoBlock() {
			return GetRuleContext<WhileDoBlockContext>(0);
		}
		public RepeatUntilBlockContext repeatUntilBlock() {
			return GetRuleContext<RepeatUntilBlockContext>(0);
		}
		public UnlabeledControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlabeledControl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUnlabeledControl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUnlabeledControl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlabeledControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlabeledControlContext unlabeledControl() {
		UnlabeledControlContext _localctx = new UnlabeledControlContext(Context, State);
		EnterRule(_localctx, 788, RULE_unlabeledControl);
		try {
			State = 6516;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOOP_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6513; loopBlock();
				}
				break;
			case WHILE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6514; whileDoBlock();
				}
				break;
			case REPEAT_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6515; repeatUntilBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopBlockContext : ParserRuleContext {
		public ITerminalNode[] LOOP_SYMBOL() { return GetTokens(MySQLParser.LOOP_SYMBOL); }
		public ITerminalNode LOOP_SYMBOL(int i) {
			return GetToken(MySQLParser.LOOP_SYMBOL, i);
		}
		public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		public LoopBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLoopBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLoopBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopBlockContext loopBlock() {
		LoopBlockContext _localctx = new LoopBlockContext(Context, State);
		EnterRule(_localctx, 790, RULE_loopBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6518; Match(LOOP_SYMBOL);
			State = 6519; compoundStatementList();
			State = 6520; Match(END_SYMBOL);
			State = 6521; Match(LOOP_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileDoBlockContext : ParserRuleContext {
		public ITerminalNode[] WHILE_SYMBOL() { return GetTokens(MySQLParser.WHILE_SYMBOL); }
		public ITerminalNode WHILE_SYMBOL(int i) {
			return GetToken(MySQLParser.WHILE_SYMBOL, i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode DO_SYMBOL() { return GetToken(MySQLParser.DO_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		public WhileDoBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileDoBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWhileDoBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWhileDoBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileDoBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileDoBlockContext whileDoBlock() {
		WhileDoBlockContext _localctx = new WhileDoBlockContext(Context, State);
		EnterRule(_localctx, 792, RULE_whileDoBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6523; Match(WHILE_SYMBOL);
			State = 6524; expr(0);
			State = 6525; Match(DO_SYMBOL);
			State = 6526; compoundStatementList();
			State = 6527; Match(END_SYMBOL);
			State = 6528; Match(WHILE_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatUntilBlockContext : ParserRuleContext {
		public ITerminalNode[] REPEAT_SYMBOL() { return GetTokens(MySQLParser.REPEAT_SYMBOL); }
		public ITerminalNode REPEAT_SYMBOL(int i) {
			return GetToken(MySQLParser.REPEAT_SYMBOL, i);
		}
		public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public ITerminalNode UNTIL_SYMBOL() { return GetToken(MySQLParser.UNTIL_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		public RepeatUntilBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatUntilBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRepeatUntilBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRepeatUntilBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatUntilBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatUntilBlockContext repeatUntilBlock() {
		RepeatUntilBlockContext _localctx = new RepeatUntilBlockContext(Context, State);
		EnterRule(_localctx, 794, RULE_repeatUntilBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6530; Match(REPEAT_SYMBOL);
			State = 6531; compoundStatementList();
			State = 6532; Match(UNTIL_SYMBOL);
			State = 6533; expr(0);
			State = 6534; Match(END_SYMBOL);
			State = 6535; Match(REPEAT_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpDeclarationsContext : ParserRuleContext {
		public SpDeclarationContext[] spDeclaration() {
			return GetRuleContexts<SpDeclarationContext>();
		}
		public SpDeclarationContext spDeclaration(int i) {
			return GetRuleContext<SpDeclarationContext>(i);
		}
		public ITerminalNode[] SEMICOLON_SYMBOL() { return GetTokens(MySQLParser.SEMICOLON_SYMBOL); }
		public ITerminalNode SEMICOLON_SYMBOL(int i) {
			return GetToken(MySQLParser.SEMICOLON_SYMBOL, i);
		}
		public SpDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSpDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSpDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpDeclarationsContext spDeclarations() {
		SpDeclarationsContext _localctx = new SpDeclarationsContext(Context, State);
		EnterRule(_localctx, 796, RULE_spDeclarations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6540;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 6537; spDeclaration();
					State = 6538; Match(SEMICOLON_SYMBOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6542;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,824,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpDeclarationContext : ParserRuleContext {
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ConditionDeclarationContext conditionDeclaration() {
			return GetRuleContext<ConditionDeclarationContext>(0);
		}
		public HandlerDeclarationContext handlerDeclaration() {
			return GetRuleContext<HandlerDeclarationContext>(0);
		}
		public CursorDeclarationContext cursorDeclaration() {
			return GetRuleContext<CursorDeclarationContext>(0);
		}
		public SpDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSpDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSpDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpDeclarationContext spDeclaration() {
		SpDeclarationContext _localctx = new SpDeclarationContext(Context, State);
		EnterRule(_localctx, 798, RULE_spDeclaration);
		try {
			State = 6548;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,825,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6544; variableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6545; conditionDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6546; handlerDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6547; cursorDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public ITerminalNode DECLARE_SYMBOL() { return GetToken(MySQLParser.DECLARE_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 800, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6550; Match(DECLARE_SYMBOL);
			State = 6551; identifierList();
			State = 6552; dataType();
			State = 6554;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLLATE_SYMBOL) {
				{
				State = 6553; collate();
				}
			}

			State = 6558;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				State = 6556; Match(DEFAULT_SYMBOL);
				State = 6557; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionDeclarationContext : ParserRuleContext {
		public ITerminalNode DECLARE_SYMBOL() { return GetToken(MySQLParser.DECLARE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode CONDITION_SYMBOL() { return GetToken(MySQLParser.CONDITION_SYMBOL, 0); }
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public SpConditionContext spCondition() {
			return GetRuleContext<SpConditionContext>(0);
		}
		public ConditionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterConditionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitConditionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionDeclarationContext conditionDeclaration() {
		ConditionDeclarationContext _localctx = new ConditionDeclarationContext(Context, State);
		EnterRule(_localctx, 802, RULE_conditionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6560; Match(DECLARE_SYMBOL);
			State = 6561; identifier();
			State = 6562; Match(CONDITION_SYMBOL);
			State = 6563; Match(FOR_SYMBOL);
			State = 6564; spCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpConditionContext : ParserRuleContext {
		public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public SqlstateContext sqlstate() {
			return GetRuleContext<SqlstateContext>(0);
		}
		public SpConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSpCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSpCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpConditionContext spCondition() {
		SpConditionContext _localctx = new SpConditionContext(Context, State);
		EnterRule(_localctx, 804, RULE_spCondition);
		try {
			State = 6568;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case HEX_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6566; ulong_number();
				}
				break;
			case SQLSTATE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6567; sqlstate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqlstateContext : ParserRuleContext {
		public ITerminalNode SQLSTATE_SYMBOL() { return GetToken(MySQLParser.SQLSTATE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode VALUE_SYMBOL() { return GetToken(MySQLParser.VALUE_SYMBOL, 0); }
		public SqlstateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlstate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSqlstate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSqlstate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlstate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqlstateContext sqlstate() {
		SqlstateContext _localctx = new SqlstateContext(Context, State);
		EnterRule(_localctx, 806, RULE_sqlstate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6570; Match(SQLSTATE_SYMBOL);
			State = 6572;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,829,Context) ) {
			case 1:
				{
				State = 6571; Match(VALUE_SYMBOL);
				}
				break;
			}
			State = 6574; textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerDeclarationContext : ParserRuleContext {
		public ITerminalNode DECLARE_SYMBOL() { return GetToken(MySQLParser.DECLARE_SYMBOL, 0); }
		public ITerminalNode HANDLER_SYMBOL() { return GetToken(MySQLParser.HANDLER_SYMBOL, 0); }
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public HandlerConditionContext[] handlerCondition() {
			return GetRuleContexts<HandlerConditionContext>();
		}
		public HandlerConditionContext handlerCondition(int i) {
			return GetRuleContext<HandlerConditionContext>(i);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public ITerminalNode CONTINUE_SYMBOL() { return GetToken(MySQLParser.CONTINUE_SYMBOL, 0); }
		public ITerminalNode EXIT_SYMBOL() { return GetToken(MySQLParser.EXIT_SYMBOL, 0); }
		public ITerminalNode UNDO_SYMBOL() { return GetToken(MySQLParser.UNDO_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public HandlerDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterHandlerDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitHandlerDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerDeclarationContext handlerDeclaration() {
		HandlerDeclarationContext _localctx = new HandlerDeclarationContext(Context, State);
		EnterRule(_localctx, 808, RULE_handlerDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6576; Match(DECLARE_SYMBOL);
			State = 6577;
			_la = TokenStream.LA(1);
			if ( !(_la==CONTINUE_SYMBOL || _la==EXIT_SYMBOL || _la==UNDO_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6578; Match(HANDLER_SYMBOL);
			State = 6579; Match(FOR_SYMBOL);
			State = 6580; handlerCondition();
			State = 6585;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,830,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6581; Match(COMMA_SYMBOL);
					State = 6582; handlerCondition();
					}
					} 
				}
				State = 6587;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,830,Context);
			}
			State = 6588; compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerConditionContext : ParserRuleContext {
		public SpConditionContext spCondition() {
			return GetRuleContext<SpConditionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SQLWARNING_SYMBOL() { return GetToken(MySQLParser.SQLWARNING_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		public ITerminalNode FOUND_SYMBOL() { return GetToken(MySQLParser.FOUND_SYMBOL, 0); }
		public ITerminalNode SQLEXCEPTION_SYMBOL() { return GetToken(MySQLParser.SQLEXCEPTION_SYMBOL, 0); }
		public HandlerConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterHandlerCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitHandlerCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerConditionContext handlerCondition() {
		HandlerConditionContext _localctx = new HandlerConditionContext(Context, State);
		EnterRule(_localctx, 810, RULE_handlerCondition);
		try {
			State = 6597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,831,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6590; spCondition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6591; identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6592; Match(SQLWARNING_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6593; notRule();
				State = 6594; Match(FOUND_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6596; Match(SQLEXCEPTION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorDeclarationContext : ParserRuleContext {
		public ITerminalNode DECLARE_SYMBOL() { return GetToken(MySQLParser.DECLARE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode CURSOR_SYMBOL() { return GetToken(MySQLParser.CURSOR_SYMBOL, 0); }
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public CursorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCursorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCursorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorDeclarationContext cursorDeclaration() {
		CursorDeclarationContext _localctx = new CursorDeclarationContext(Context, State);
		EnterRule(_localctx, 812, RULE_cursorDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6599; Match(DECLARE_SYMBOL);
			State = 6600; identifier();
			State = 6601; Match(CURSOR_SYMBOL);
			State = 6602; Match(FOR_SYMBOL);
			State = 6603; selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterateStatementContext : ParserRuleContext {
		public ITerminalNode ITERATE_SYMBOL() { return GetToken(MySQLParser.ITERATE_SYMBOL, 0); }
		public LabelRefContext labelRef() {
			return GetRuleContext<LabelRefContext>(0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterateStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIterateStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIterateStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterateStatementContext iterateStatement() {
		IterateStatementContext _localctx = new IterateStatementContext(Context, State);
		EnterRule(_localctx, 814, RULE_iterateStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6605; Match(ITERATE_SYMBOL);
			State = 6606; labelRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeaveStatementContext : ParserRuleContext {
		public ITerminalNode LEAVE_SYMBOL() { return GetToken(MySQLParser.LEAVE_SYMBOL, 0); }
		public LabelRefContext labelRef() {
			return GetRuleContext<LabelRefContext>(0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leaveStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLeaveStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLeaveStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeaveStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeaveStatementContext leaveStatement() {
		LeaveStatementContext _localctx = new LeaveStatementContext(Context, State);
		EnterRule(_localctx, 816, RULE_leaveStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6608; Match(LEAVE_SYMBOL);
			State = 6609; labelRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetDiagnosticsContext : ParserRuleContext {
		public ITerminalNode GET_SYMBOL() { return GetToken(MySQLParser.GET_SYMBOL, 0); }
		public ITerminalNode DIAGNOSTICS_SYMBOL() { return GetToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0); }
		public StatementInformationItemContext[] statementInformationItem() {
			return GetRuleContexts<StatementInformationItemContext>();
		}
		public StatementInformationItemContext statementInformationItem(int i) {
			return GetRuleContext<StatementInformationItemContext>(i);
		}
		public ITerminalNode CONDITION_SYMBOL() { return GetToken(MySQLParser.CONDITION_SYMBOL, 0); }
		public SignalAllowedExprContext signalAllowedExpr() {
			return GetRuleContext<SignalAllowedExprContext>(0);
		}
		public ConditionInformationItemContext[] conditionInformationItem() {
			return GetRuleContexts<ConditionInformationItemContext>();
		}
		public ConditionInformationItemContext conditionInformationItem(int i) {
			return GetRuleContext<ConditionInformationItemContext>(i);
		}
		public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public ITerminalNode STACKED_SYMBOL() { return GetToken(MySQLParser.STACKED_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public GetDiagnosticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getDiagnostics; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGetDiagnostics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGetDiagnostics(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetDiagnostics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetDiagnosticsContext getDiagnostics() {
		GetDiagnosticsContext _localctx = new GetDiagnosticsContext(Context, State);
		EnterRule(_localctx, 818, RULE_getDiagnostics);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6611; Match(GET_SYMBOL);
			State = 6615;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,832,Context) ) {
			case 1:
				{
				State = 6612; Match(CURRENT_SYMBOL);
				}
				break;
			case 2:
				{
				State = 6613;
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				State = 6614; Match(STACKED_SYMBOL);
				}
				break;
			}
			State = 6617; Match(DIAGNOSTICS_SYMBOL);
			State = 6636;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,835,Context) ) {
			case 1:
				{
				State = 6618; statementInformationItem();
				State = 6623;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 6619; Match(COMMA_SYMBOL);
					State = 6620; statementInformationItem();
					}
					}
					State = 6625;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 6626; Match(CONDITION_SYMBOL);
				State = 6627; signalAllowedExpr();
				State = 6628; conditionInformationItem();
				State = 6633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 6629; Match(COMMA_SYMBOL);
					State = 6630; conditionInformationItem();
					}
					}
					State = 6635;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalAllowedExprContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public SignalAllowedExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalAllowedExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSignalAllowedExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSignalAllowedExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignalAllowedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignalAllowedExprContext signalAllowedExpr() {
		SignalAllowedExprContext _localctx = new SignalAllowedExprContext(Context, State);
		EnterRule(_localctx, 820, RULE_signalAllowedExpr);
		try {
			State = 6641;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,836,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6638; literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6639; variable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6640; qualifiedIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementInformationItemContext : ParserRuleContext {
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public ITerminalNode NUMBER_SYMBOL() { return GetToken(MySQLParser.NUMBER_SYMBOL, 0); }
		public ITerminalNode ROW_COUNT_SYMBOL() { return GetToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StatementInformationItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementInformationItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterStatementInformationItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitStatementInformationItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementInformationItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementInformationItemContext statementInformationItem() {
		StatementInformationItemContext _localctx = new StatementInformationItemContext(Context, State);
		EnterRule(_localctx, 822, RULE_statementInformationItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6645;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,837,Context) ) {
			case 1:
				{
				State = 6643; variable();
				}
				break;
			case 2:
				{
				State = 6644; identifier();
				}
				break;
			}
			State = 6647; Match(EQUAL_OPERATOR);
			State = 6648;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER_SYMBOL || _la==ROW_COUNT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionInformationItemContext : ParserRuleContext {
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SignalInformationItemNameContext signalInformationItemName() {
			return GetRuleContext<SignalInformationItemNameContext>(0);
		}
		public ITerminalNode RETURNED_SQLSTATE_SYMBOL() { return GetToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		public ConditionInformationItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionInformationItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterConditionInformationItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitConditionInformationItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionInformationItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionInformationItemContext conditionInformationItem() {
		ConditionInformationItemContext _localctx = new ConditionInformationItemContext(Context, State);
		EnterRule(_localctx, 824, RULE_conditionInformationItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6652;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,838,Context) ) {
			case 1:
				{
				State = 6650; variable();
				}
				break;
			case 2:
				{
				State = 6651; identifier();
				}
				break;
			}
			State = 6654; Match(EQUAL_OPERATOR);
			State = 6657;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CATALOG_NAME_SYMBOL:
			case CLASS_ORIGIN_SYMBOL:
			case COLUMN_NAME_SYMBOL:
			case CONSTRAINT_CATALOG_SYMBOL:
			case CONSTRAINT_SCHEMA_SYMBOL:
			case CONSTRAINT_NAME_SYMBOL:
			case CURSOR_NAME_SYMBOL:
			case MESSAGE_TEXT_SYMBOL:
			case MYSQL_ERRNO_SYMBOL:
			case SCHEMA_NAME_SYMBOL:
			case SUBCLASS_ORIGIN_SYMBOL:
			case TABLE_NAME_SYMBOL:
				{
				State = 6655; signalInformationItemName();
				}
				break;
			case RETURNED_SQLSTATE_SYMBOL:
				{
				State = 6656; Match(RETURNED_SQLSTATE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalInformationItemNameContext : ParserRuleContext {
		public ITerminalNode CLASS_ORIGIN_SYMBOL() { return GetToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
		public ITerminalNode SUBCLASS_ORIGIN_SYMBOL() { return GetToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		public ITerminalNode CONSTRAINT_CATALOG_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		public ITerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		public ITerminalNode CONSTRAINT_NAME_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
		public ITerminalNode CATALOG_NAME_SYMBOL() { return GetToken(MySQLParser.CATALOG_NAME_SYMBOL, 0); }
		public ITerminalNode SCHEMA_NAME_SYMBOL() { return GetToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0); }
		public ITerminalNode TABLE_NAME_SYMBOL() { return GetToken(MySQLParser.TABLE_NAME_SYMBOL, 0); }
		public ITerminalNode COLUMN_NAME_SYMBOL() { return GetToken(MySQLParser.COLUMN_NAME_SYMBOL, 0); }
		public ITerminalNode CURSOR_NAME_SYMBOL() { return GetToken(MySQLParser.CURSOR_NAME_SYMBOL, 0); }
		public ITerminalNode MESSAGE_TEXT_SYMBOL() { return GetToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
		public ITerminalNode MYSQL_ERRNO_SYMBOL() { return GetToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
		public SignalInformationItemNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalInformationItemName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSignalInformationItemName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSignalInformationItemName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignalInformationItemName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignalInformationItemNameContext signalInformationItemName() {
		SignalInformationItemNameContext _localctx = new SignalInformationItemNameContext(Context, State);
		EnterRule(_localctx, 826, RULE_signalInformationItemName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6659;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (CATALOG_NAME_SYMBOL - 78)) | (1L << (CLASS_ORIGIN_SYMBOL - 78)) | (1L << (COLUMN_NAME_SYMBOL - 78)) | (1L << (CONSTRAINT_CATALOG_SYMBOL - 78)) | (1L << (CONSTRAINT_SCHEMA_SYMBOL - 78)) | (1L << (CONSTRAINT_NAME_SYMBOL - 78)) | (1L << (CURSOR_NAME_SYMBOL - 78)))) != 0) || _la==MESSAGE_TEXT_SYMBOL || _la==MYSQL_ERRNO_SYMBOL || ((((_la - 304)) & ~0x3f) == 0 && ((1L << (_la - 304)) & ((1L << (SCHEMA_NAME_SYMBOL - 304)) | (1L << (SUBCLASS_ORIGIN_SYMBOL - 304)) | (1L << (TABLE_NAME_SYMBOL - 304)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalStatementContext : ParserRuleContext {
		public ITerminalNode SIGNAL_SYMBOL() { return GetToken(MySQLParser.SIGNAL_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SqlstateContext sqlstate() {
			return GetRuleContext<SqlstateContext>(0);
		}
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public SignalInformationItemContext[] signalInformationItem() {
			return GetRuleContexts<SignalInformationItemContext>();
		}
		public SignalInformationItemContext signalInformationItem(int i) {
			return GetRuleContext<SignalInformationItemContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SignalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSignalStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSignalStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignalStatementContext signalStatement() {
		SignalStatementContext _localctx = new SignalStatementContext(Context, State);
		EnterRule(_localctx, 828, RULE_signalStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6661; Match(SIGNAL_SYMBOL);
			State = 6664;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,840,Context) ) {
			case 1:
				{
				State = 6662; identifier();
				}
				break;
			case 2:
				{
				State = 6663; sqlstate();
				}
				break;
			}
			State = 6675;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SET_SYMBOL) {
				{
				State = 6666; Match(SET_SYMBOL);
				State = 6667; signalInformationItem();
				State = 6672;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 6668; Match(COMMA_SYMBOL);
					State = 6669; signalInformationItem();
					}
					}
					State = 6674;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResignalStatementContext : ParserRuleContext {
		public ITerminalNode RESIGNAL_SYMBOL() { return GetToken(MySQLParser.RESIGNAL_SYMBOL, 0); }
		public ITerminalNode SQLSTATE_SYMBOL() { return GetToken(MySQLParser.SQLSTATE_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public SignalInformationItemContext[] signalInformationItem() {
			return GetRuleContexts<SignalInformationItemContext>();
		}
		public SignalInformationItemContext signalInformationItem(int i) {
			return GetRuleContext<SignalInformationItemContext>(i);
		}
		public ITerminalNode VALUE_SYMBOL() { return GetToken(MySQLParser.VALUE_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ResignalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resignalStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterResignalStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitResignalStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResignalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResignalStatementContext resignalStatement() {
		ResignalStatementContext _localctx = new ResignalStatementContext(Context, State);
		EnterRule(_localctx, 830, RULE_resignalStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6677; Match(RESIGNAL_SYMBOL);
			State = 6683;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SQLSTATE_SYMBOL) {
				{
				State = 6678; Match(SQLSTATE_SYMBOL);
				State = 6680;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,843,Context) ) {
				case 1:
					{
					State = 6679; Match(VALUE_SYMBOL);
					}
					break;
				}
				State = 6682; textOrIdentifier();
				}
			}

			State = 6694;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SET_SYMBOL) {
				{
				State = 6685; Match(SET_SYMBOL);
				State = 6686; signalInformationItem();
				State = 6691;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 6687; Match(COMMA_SYMBOL);
					State = 6688; signalInformationItem();
					}
					}
					State = 6693;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalInformationItemContext : ParserRuleContext {
		public SignalInformationItemNameContext signalInformationItemName() {
			return GetRuleContext<SignalInformationItemNameContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public SignalAllowedExprContext signalAllowedExpr() {
			return GetRuleContext<SignalAllowedExprContext>(0);
		}
		public SignalInformationItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalInformationItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSignalInformationItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSignalInformationItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignalInformationItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignalInformationItemContext signalInformationItem() {
		SignalInformationItemContext _localctx = new SignalInformationItemContext(Context, State);
		EnterRule(_localctx, 832, RULE_signalInformationItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6696; signalInformationItemName();
			State = 6697; Match(EQUAL_OPERATOR);
			State = 6698; signalAllowedExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorOpenContext : ParserRuleContext {
		public ITerminalNode OPEN_SYMBOL() { return GetToken(MySQLParser.OPEN_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public CursorOpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorOpen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCursorOpen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCursorOpen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorOpen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorOpenContext cursorOpen() {
		CursorOpenContext _localctx = new CursorOpenContext(Context, State);
		EnterRule(_localctx, 834, RULE_cursorOpen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6700; Match(OPEN_SYMBOL);
			State = 6701; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorCloseContext : ParserRuleContext {
		public ITerminalNode CLOSE_SYMBOL() { return GetToken(MySQLParser.CLOSE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public CursorCloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorClose; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCursorClose(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCursorClose(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorClose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorCloseContext cursorClose() {
		CursorCloseContext _localctx = new CursorCloseContext(Context, State);
		EnterRule(_localctx, 836, RULE_cursorClose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6703; Match(CLOSE_SYMBOL);
			State = 6704; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorFetchContext : ParserRuleContext {
		public ITerminalNode FETCH_SYMBOL() { return GetToken(MySQLParser.FETCH_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode INTO_SYMBOL() { return GetToken(MySQLParser.INTO_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public ITerminalNode NEXT_SYMBOL() { return GetToken(MySQLParser.NEXT_SYMBOL, 0); }
		public CursorFetchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorFetch; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCursorFetch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCursorFetch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorFetch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorFetchContext cursorFetch() {
		CursorFetchContext _localctx = new CursorFetchContext(Context, State);
		EnterRule(_localctx, 838, RULE_cursorFetch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6706; Match(FETCH_SYMBOL);
			State = 6711;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,848,Context) ) {
			case 1:
				{
				State = 6708;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEXT_SYMBOL) {
					{
					State = 6707; Match(NEXT_SYMBOL);
					}
				}

				State = 6710; Match(FROM_SYMBOL);
				}
				break;
			}
			State = 6713; identifier();
			State = 6714; Match(INTO_SYMBOL);
			State = 6715; identifierList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScheduleContext : ParserRuleContext {
		public ITerminalNode AT_SYMBOL() { return GetToken(MySQLParser.AT_SYMBOL, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode EVERY_SYMBOL() { return GetToken(MySQLParser.EVERY_SYMBOL, 0); }
		public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		public ITerminalNode STARTS_SYMBOL() { return GetToken(MySQLParser.STARTS_SYMBOL, 0); }
		public ITerminalNode ENDS_SYMBOL() { return GetToken(MySQLParser.ENDS_SYMBOL, 0); }
		public ScheduleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schedule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSchedule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSchedule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchedule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScheduleContext schedule() {
		ScheduleContext _localctx = new ScheduleContext(Context, State);
		EnterRule(_localctx, 840, RULE_schedule);
		int _la;
		try {
			State = 6730;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6717; Match(AT_SYMBOL);
				State = 6718; expr(0);
				}
				break;
			case EVERY_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6719; Match(EVERY_SYMBOL);
				State = 6720; expr(0);
				State = 6721; interval();
				State = 6724;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STARTS_SYMBOL) {
					{
					State = 6722; Match(STARTS_SYMBOL);
					State = 6723; expr(0);
					}
				}

				State = 6728;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ENDS_SYMBOL) {
					{
					State = 6726; Match(ENDS_SYMBOL);
					State = 6727; expr(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefinitionContext : ParserRuleContext {
		public ColumnNameContext columnName() {
			return GetRuleContext<ColumnNameContext>(0);
		}
		public FieldDefinitionContext fieldDefinition() {
			return GetRuleContext<FieldDefinitionContext>(0);
		}
		public CheckOrReferencesContext checkOrReferences() {
			return GetRuleContext<CheckOrReferencesContext>(0);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumnDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumnDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefinitionContext columnDefinition() {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(Context, State);
		EnterRule(_localctx, 842, RULE_columnDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6732; columnName();
			State = 6733; fieldDefinition();
			State = 6735;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,852,Context) ) {
			case 1:
				{
				State = 6734; checkOrReferences();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckOrReferencesContext : ParserRuleContext {
		public CheckConstraintContext checkConstraint() {
			return GetRuleContext<CheckConstraintContext>(0);
		}
		public ReferencesContext references() {
			return GetRuleContext<ReferencesContext>(0);
		}
		public CheckOrReferencesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkOrReferences; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCheckOrReferences(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCheckOrReferences(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckOrReferences(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckOrReferencesContext checkOrReferences() {
		CheckOrReferencesContext _localctx = new CheckOrReferencesContext(Context, State);
		EnterRule(_localctx, 844, RULE_checkOrReferences);
		try {
			State = 6740;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,853,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6737;
				if (!(serverVersion < 80016)) throw new FailedPredicateException(this, "serverVersion < 80016");
				State = 6738; checkConstraint();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6739; references();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckConstraintContext : ParserRuleContext {
		public ITerminalNode CHECK_SYMBOL() { return GetToken(MySQLParser.CHECK_SYMBOL, 0); }
		public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		public CheckConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkConstraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCheckConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCheckConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckConstraintContext checkConstraint() {
		CheckConstraintContext _localctx = new CheckConstraintContext(Context, State);
		EnterRule(_localctx, 846, RULE_checkConstraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6742; Match(CHECK_SYMBOL);
			State = 6743; exprWithParentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintEnforcementContext : ParserRuleContext {
		public ITerminalNode ENFORCED_SYMBOL() { return GetToken(MySQLParser.ENFORCED_SYMBOL, 0); }
		public ITerminalNode NOT_SYMBOL() { return GetToken(MySQLParser.NOT_SYMBOL, 0); }
		public ConstraintEnforcementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintEnforcement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintEnforcement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintEnforcement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraintEnforcement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintEnforcementContext constraintEnforcement() {
		ConstraintEnforcementContext _localctx = new ConstraintEnforcementContext(Context, State);
		EnterRule(_localctx, 848, RULE_constraintEnforcement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6746;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT_SYMBOL) {
				{
				State = 6745; Match(NOT_SYMBOL);
				}
			}

			State = 6748; Match(ENFORCED_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableConstraintDefContext : ParserRuleContext {
		public IToken type;
		public KeyListVariantsContext keyListVariants() {
			return GetRuleContext<KeyListVariantsContext>(0);
		}
		public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		public IndexNameAndTypeContext indexNameAndType() {
			return GetRuleContext<IndexNameAndTypeContext>(0);
		}
		public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		public ITerminalNode FULLTEXT_SYMBOL() { return GetToken(MySQLParser.FULLTEXT_SYMBOL, 0); }
		public KeyOrIndexContext keyOrIndex() {
			return GetRuleContext<KeyOrIndexContext>(0);
		}
		public IndexNameContext indexName() {
			return GetRuleContext<IndexNameContext>(0);
		}
		public FulltextIndexOptionContext[] fulltextIndexOption() {
			return GetRuleContexts<FulltextIndexOptionContext>();
		}
		public FulltextIndexOptionContext fulltextIndexOption(int i) {
			return GetRuleContext<FulltextIndexOptionContext>(i);
		}
		public ITerminalNode SPATIAL_SYMBOL() { return GetToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		public SpatialIndexOptionContext[] spatialIndexOption() {
			return GetRuleContexts<SpatialIndexOptionContext>();
		}
		public SpatialIndexOptionContext spatialIndexOption(int i) {
			return GetRuleContext<SpatialIndexOptionContext>(i);
		}
		public KeyListContext keyList() {
			return GetRuleContext<KeyListContext>(0);
		}
		public ReferencesContext references() {
			return GetRuleContext<ReferencesContext>(0);
		}
		public CheckConstraintContext checkConstraint() {
			return GetRuleContext<CheckConstraintContext>(0);
		}
		public ConstraintNameContext constraintName() {
			return GetRuleContext<ConstraintNameContext>(0);
		}
		public ITerminalNode FOREIGN_SYMBOL() { return GetToken(MySQLParser.FOREIGN_SYMBOL, 0); }
		public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public ConstraintEnforcementContext constraintEnforcement() {
			return GetRuleContext<ConstraintEnforcementContext>(0);
		}
		public TableConstraintDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableConstraintDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableConstraintDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableConstraintDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableConstraintDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableConstraintDefContext tableConstraintDef() {
		TableConstraintDefContext _localctx = new TableConstraintDefContext(Context, State);
		EnterRule(_localctx, 850, RULE_tableConstraintDef);
		int _la;
		try {
			int _alt;
			State = 6825;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDEX_SYMBOL:
			case KEY_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6750;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX_SYMBOL || _la==KEY_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6752;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,855,Context) ) {
				case 1:
					{
					State = 6751; indexNameAndType();
					}
					break;
				}
				State = 6754; keyListVariants();
				State = 6758;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,856,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6755; indexOption();
						}
						} 
					}
					State = 6760;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,856,Context);
				}
				}
				break;
			case FULLTEXT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6761; _localctx.type = Match(FULLTEXT_SYMBOL);
				State = 6763;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,857,Context) ) {
				case 1:
					{
					State = 6762; keyOrIndex();
					}
					break;
				}
				State = 6766;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,858,Context) ) {
				case 1:
					{
					State = 6765; indexName();
					}
					break;
				}
				State = 6768; keyListVariants();
				State = 6772;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,859,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6769; fulltextIndexOption();
						}
						} 
					}
					State = 6774;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,859,Context);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6775; _localctx.type = Match(SPATIAL_SYMBOL);
				State = 6777;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,860,Context) ) {
				case 1:
					{
					State = 6776; keyOrIndex();
					}
					break;
				}
				State = 6780;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,861,Context) ) {
				case 1:
					{
					State = 6779; indexName();
					}
					break;
				}
				State = 6782; keyListVariants();
				State = 6786;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,862,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6783; spatialIndexOption();
						}
						} 
					}
					State = 6788;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,862,Context);
				}
				}
				break;
			case CHECK_SYMBOL:
			case CONSTRAINT_SYMBOL:
			case FOREIGN_SYMBOL:
			case PRIMARY_SYMBOL:
			case UNIQUE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6790;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT_SYMBOL) {
					{
					State = 6789; constraintName();
					}
				}

				State = 6823;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PRIMARY_SYMBOL:
				case UNIQUE_SYMBOL:
					{
					State = 6798;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PRIMARY_SYMBOL:
						{
						State = 6792; _localctx.type = Match(PRIMARY_SYMBOL);
						State = 6793; Match(KEY_SYMBOL);
						}
						break;
					case UNIQUE_SYMBOL:
						{
						State = 6794; _localctx.type = Match(UNIQUE_SYMBOL);
						State = 6796;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,864,Context) ) {
						case 1:
							{
							State = 6795; keyOrIndex();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6801;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,866,Context) ) {
					case 1:
						{
						State = 6800; indexNameAndType();
						}
						break;
					}
					State = 6803; keyListVariants();
					State = 6807;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,867,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 6804; indexOption();
							}
							} 
						}
						State = 6809;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,867,Context);
					}
					}
					break;
				case FOREIGN_SYMBOL:
					{
					State = 6810; _localctx.type = Match(FOREIGN_SYMBOL);
					State = 6811; Match(KEY_SYMBOL);
					State = 6813;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,868,Context) ) {
					case 1:
						{
						State = 6812; indexName();
						}
						break;
					}
					State = 6815; keyList();
					State = 6816; references();
					}
					break;
				case CHECK_SYMBOL:
					{
					State = 6818; checkConstraint();
					State = 6821;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,869,Context) ) {
					case 1:
						{
						State = 6819;
						if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
						State = 6820; constraintEnforcement();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintNameContext : ParserRuleContext {
		public ITerminalNode CONSTRAINT_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstraintNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraintName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintNameContext constraintName() {
		ConstraintNameContext _localctx = new ConstraintNameContext(Context, State);
		EnterRule(_localctx, 852, RULE_constraintName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6827; Match(CONSTRAINT_SYMBOL);
			State = 6829;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,872,Context) ) {
			case 1:
				{
				State = 6828; identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefinitionContext : ParserRuleContext {
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		public ColumnAttributeContext[] columnAttribute() {
			return GetRuleContexts<ColumnAttributeContext>();
		}
		public ColumnAttributeContext columnAttribute(int i) {
			return GetRuleContext<ColumnAttributeContext>(i);
		}
		public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public ITerminalNode GENERATED_SYMBOL() { return GetToken(MySQLParser.GENERATED_SYMBOL, 0); }
		public ITerminalNode ALWAYS_SYMBOL() { return GetToken(MySQLParser.ALWAYS_SYMBOL, 0); }
		public ITerminalNode VIRTUAL_SYMBOL() { return GetToken(MySQLParser.VIRTUAL_SYMBOL, 0); }
		public ITerminalNode STORED_SYMBOL() { return GetToken(MySQLParser.STORED_SYMBOL, 0); }
		public GcolAttributeContext[] gcolAttribute() {
			return GetRuleContexts<GcolAttributeContext>();
		}
		public GcolAttributeContext gcolAttribute(int i) {
			return GetRuleContext<GcolAttributeContext>(i);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFieldDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFieldDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefinitionContext fieldDefinition() {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(Context, State);
		EnterRule(_localctx, 854, RULE_fieldDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6831; dataType();
			State = 6867;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,880,Context) ) {
			case 1:
				{
				State = 6835;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,873,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6832; columnAttribute();
						}
						} 
					}
					State = 6837;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,873,Context);
				}
				}
				break;
			case 2:
				{
				State = 6838;
				if (!(serverVersion >= 50707)) throw new FailedPredicateException(this, "serverVersion >= 50707");
				State = 6840;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE_SYMBOL) {
					{
					State = 6839; collate();
					}
				}

				State = 6844;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GENERATED_SYMBOL) {
					{
					State = 6842; Match(GENERATED_SYMBOL);
					State = 6843; Match(ALWAYS_SYMBOL);
					}
				}

				State = 6846; Match(AS_SYMBOL);
				State = 6847; exprWithParentheses();
				State = 6849;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,876,Context) ) {
				case 1:
					{
					State = 6848;
					_la = TokenStream.LA(1);
					if ( !(_la==STORED_SYMBOL || _la==VIRTUAL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 6865;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,879,Context) ) {
				case 1:
					{
					State = 6851;
					if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
					State = 6855;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,877,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 6852; gcolAttribute();
							}
							} 
						}
						State = 6857;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,877,Context);
					}
					}
					break;
				case 2:
					{
					State = 6858;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 6862;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,878,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 6859; columnAttribute();
							}
							} 
						}
						State = 6864;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,878,Context);
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnAttributeContext : ParserRuleContext {
		public IToken value;
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public ITerminalNode NOT_SYMBOL() { return GetToken(MySQLParser.NOT_SYMBOL, 0); }
		public ITerminalNode SECONDARY_SYMBOL() { return GetToken(MySQLParser.SECONDARY_SYMBOL, 0); }
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public SignedLiteralContext signedLiteral() {
			return GetRuleContext<SignedLiteralContext>(0);
		}
		public ITerminalNode NOW_SYMBOL() { return GetToken(MySQLParser.NOW_SYMBOL, 0); }
		public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		public TimeFunctionParametersContext timeFunctionParameters() {
			return GetRuleContext<TimeFunctionParametersContext>(0);
		}
		public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public ITerminalNode AUTO_INCREMENT_SYMBOL() { return GetToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public ITerminalNode VALUE_SYMBOL() { return GetToken(MySQLParser.VALUE_SYMBOL, 0); }
		public ITerminalNode SERIAL_SYMBOL() { return GetToken(MySQLParser.SERIAL_SYMBOL, 0); }
		public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public ColumnFormatContext columnFormat() {
			return GetRuleContext<ColumnFormatContext>(0);
		}
		public ITerminalNode COLUMN_FORMAT_SYMBOL() { return GetToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
		public StorageMediaContext storageMedia() {
			return GetRuleContext<StorageMediaContext>(0);
		}
		public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		public ITerminalNode SRID_SYMBOL() { return GetToken(MySQLParser.SRID_SYMBOL, 0); }
		public CheckConstraintContext checkConstraint() {
			return GetRuleContext<CheckConstraintContext>(0);
		}
		public ConstraintNameContext constraintName() {
			return GetRuleContext<ConstraintNameContext>(0);
		}
		public ConstraintEnforcementContext constraintEnforcement() {
			return GetRuleContext<ConstraintEnforcementContext>(0);
		}
		public ColumnAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumnAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumnAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnAttributeContext columnAttribute() {
		ColumnAttributeContext _localctx = new ColumnAttributeContext(Context, State);
		EnterRule(_localctx, 856, RULE_columnAttribute);
		int _la;
		try {
			State = 6921;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,888,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6870;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					State = 6869; Match(NOT_SYMBOL);
					}
				}

				State = 6872; nullLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6873;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 6874; Match(NOT_SYMBOL);
				State = 6875; Match(SECONDARY_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6876; _localctx.value = Match(DEFAULT_SYMBOL);
				State = 6884;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,883,Context) ) {
				case 1:
					{
					State = 6877; signedLiteral();
					}
					break;
				case 2:
					{
					State = 6878; Match(NOW_SYMBOL);
					State = 6880;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,882,Context) ) {
					case 1:
						{
						State = 6879; timeFunctionParameters();
						}
						break;
					}
					}
					break;
				case 3:
					{
					State = 6882;
					if (!(serverVersion >= 80013)) throw new FailedPredicateException(this, "serverVersion >= 80013");
					State = 6883; exprWithParentheses();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6886; _localctx.value = Match(ON_SYMBOL);
				State = 6887; Match(UPDATE_SYMBOL);
				State = 6888; Match(NOW_SYMBOL);
				State = 6890;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,884,Context) ) {
				case 1:
					{
					State = 6889; timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6892; _localctx.value = Match(AUTO_INCREMENT_SYMBOL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6893; _localctx.value = Match(SERIAL_SYMBOL);
				State = 6894; Match(DEFAULT_SYMBOL);
				State = 6895; Match(VALUE_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIMARY_SYMBOL) {
					{
					State = 6896; Match(PRIMARY_SYMBOL);
					}
				}

				State = 6899; _localctx.value = Match(KEY_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6900; _localctx.value = Match(UNIQUE_SYMBOL);
				State = 6902;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,886,Context) ) {
				case 1:
					{
					State = 6901; Match(KEY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6904; _localctx.value = Match(COMMENT_SYMBOL);
				State = 6905; textLiteral();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6906; collate();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6907; _localctx.value = Match(COLUMN_FORMAT_SYMBOL);
				State = 6908; columnFormat();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6909; _localctx.value = Match(STORAGE_SYMBOL);
				State = 6910; storageMedia();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6911;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 6912; _localctx.value = Match(SRID_SYMBOL);
				State = 6913; real_ulonglong_number();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6914;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 6916;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT_SYMBOL) {
					{
					State = 6915; constraintName();
					}
				}

				State = 6918; checkConstraint();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6919;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 6920; constraintEnforcement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnFormatContext : ParserRuleContext {
		public ITerminalNode FIXED_SYMBOL() { return GetToken(MySQLParser.FIXED_SYMBOL, 0); }
		public ITerminalNode DYNAMIC_SYMBOL() { return GetToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ColumnFormatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnFormat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumnFormat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumnFormat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnFormat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnFormatContext columnFormat() {
		ColumnFormatContext _localctx = new ColumnFormatContext(Context, State);
		EnterRule(_localctx, 858, RULE_columnFormat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6923;
			_la = TokenStream.LA(1);
			if ( !(_la==DYNAMIC_SYMBOL || _la==FIXED_SYMBOL || _la==DEFAULT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorageMediaContext : ParserRuleContext {
		public ITerminalNode DISK_SYMBOL() { return GetToken(MySQLParser.DISK_SYMBOL, 0); }
		public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public StorageMediaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storageMedia; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterStorageMedia(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitStorageMedia(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorageMedia(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorageMediaContext storageMedia() {
		StorageMediaContext _localctx = new StorageMediaContext(Context, State);
		EnterRule(_localctx, 860, RULE_storageMedia);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6925;
			_la = TokenStream.LA(1);
			if ( !(_la==DISK_SYMBOL || _la==MEMORY_SYMBOL || _la==DEFAULT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GcolAttributeContext : ParserRuleContext {
		public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public ITerminalNode NULL_SYMBOL() { return GetToken(MySQLParser.NULL_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public GcolAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gcolAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGcolAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGcolAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGcolAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GcolAttributeContext gcolAttribute() {
		GcolAttributeContext _localctx = new GcolAttributeContext(Context, State);
		EnterRule(_localctx, 862, RULE_gcolAttribute);
		int _la;
		try {
			State = 6941;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNIQUE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6927; Match(UNIQUE_SYMBOL);
				State = 6929;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,889,Context) ) {
				case 1:
					{
					State = 6928; Match(KEY_SYMBOL);
					}
					break;
				}
				}
				break;
			case COMMENT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6931; Match(COMMENT_SYMBOL);
				State = 6932; textString();
				}
				break;
			case NOT2_SYMBOL:
			case NOT_SYMBOL:
			case NULL_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6934;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
					{
					State = 6933; notRule();
					}
				}

				State = 6936; Match(NULL_SYMBOL);
				}
				break;
			case KEY_SYMBOL:
			case PRIMARY_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6938;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIMARY_SYMBOL) {
					{
					State = 6937; Match(PRIMARY_SYMBOL);
					}
				}

				State = 6940; Match(KEY_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferencesContext : ParserRuleContext {
		public IToken match;
		public IToken option;
		public ITerminalNode REFERENCES_SYMBOL() { return GetToken(MySQLParser.REFERENCES_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return GetRuleContext<IdentifierListWithParenthesesContext>(0);
		}
		public ITerminalNode MATCH_SYMBOL() { return GetToken(MySQLParser.MATCH_SYMBOL, 0); }
		public ITerminalNode[] ON_SYMBOL() { return GetTokens(MySQLParser.ON_SYMBOL); }
		public ITerminalNode ON_SYMBOL(int i) {
			return GetToken(MySQLParser.ON_SYMBOL, i);
		}
		public DeleteOptionContext[] deleteOption() {
			return GetRuleContexts<DeleteOptionContext>();
		}
		public DeleteOptionContext deleteOption(int i) {
			return GetRuleContext<DeleteOptionContext>(i);
		}
		public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public ITerminalNode DELETE_SYMBOL() { return GetToken(MySQLParser.DELETE_SYMBOL, 0); }
		public ITerminalNode FULL_SYMBOL() { return GetToken(MySQLParser.FULL_SYMBOL, 0); }
		public ITerminalNode PARTIAL_SYMBOL() { return GetToken(MySQLParser.PARTIAL_SYMBOL, 0); }
		public ITerminalNode SIMPLE_SYMBOL() { return GetToken(MySQLParser.SIMPLE_SYMBOL, 0); }
		public ReferencesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_references; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReferences(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReferences(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferences(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferencesContext references() {
		ReferencesContext _localctx = new ReferencesContext(Context, State);
		EnterRule(_localctx, 864, RULE_references);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6943; Match(REFERENCES_SYMBOL);
			State = 6944; tableRef();
			State = 6946;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 6945; identifierListWithParentheses();
				}
			}

			State = 6950;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MATCH_SYMBOL) {
				{
				State = 6948; Match(MATCH_SYMBOL);
				State = 6949;
				_localctx.match = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FULL_SYMBOL || _la==PARTIAL_SYMBOL || _la==SIMPLE_SYMBOL) ) {
					_localctx.match = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 6968;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,897,Context) ) {
			case 1:
				{
				State = 6952; Match(ON_SYMBOL);
				State = 6953; _localctx.option = Match(UPDATE_SYMBOL);
				State = 6954; deleteOption();
				State = 6958;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_SYMBOL) {
					{
					State = 6955; Match(ON_SYMBOL);
					State = 6956; Match(DELETE_SYMBOL);
					State = 6957; deleteOption();
					}
				}

				}
				break;
			case 2:
				{
				State = 6960; Match(ON_SYMBOL);
				State = 6961; _localctx.option = Match(DELETE_SYMBOL);
				State = 6962; deleteOption();
				State = 6966;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_SYMBOL) {
					{
					State = 6963; Match(ON_SYMBOL);
					State = 6964; Match(UPDATE_SYMBOL);
					State = 6965; deleteOption();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteOptionContext : ParserRuleContext {
		public ITerminalNode RESTRICT_SYMBOL() { return GetToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		public ITerminalNode CASCADE_SYMBOL() { return GetToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public ITerminalNode NO_SYMBOL() { return GetToken(MySQLParser.NO_SYMBOL, 0); }
		public ITerminalNode ACTION_SYMBOL() { return GetToken(MySQLParser.ACTION_SYMBOL, 0); }
		public DeleteOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDeleteOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDeleteOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteOptionContext deleteOption() {
		DeleteOptionContext _localctx = new DeleteOptionContext(Context, State);
		EnterRule(_localctx, 866, RULE_deleteOption);
		int _la;
		try {
			State = 6975;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASCADE_SYMBOL:
			case RESTRICT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6970;
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SET_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6971; Match(SET_SYMBOL);
				State = 6972; nullLiteral();
				}
				break;
			case NO_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6973; Match(NO_SYMBOL);
				State = 6974; Match(ACTION_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyListContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public KeyPartContext[] keyPart() {
			return GetRuleContexts<KeyPartContext>();
		}
		public KeyPartContext keyPart(int i) {
			return GetRuleContext<KeyPartContext>(i);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyListContext keyList() {
		KeyListContext _localctx = new KeyListContext(Context, State);
		EnterRule(_localctx, 868, RULE_keyList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6977; Match(OPEN_PAR_SYMBOL);
			State = 6978; keyPart();
			State = 6983;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 6979; Match(COMMA_SYMBOL);
				State = 6980; keyPart();
				}
				}
				State = 6985;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6986; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyPartContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public KeyPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyPartContext keyPart() {
		KeyPartContext _localctx = new KeyPartContext(Context, State);
		EnterRule(_localctx, 870, RULE_keyPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6988; identifier();
			State = 6990;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 6989; fieldLength();
				}
			}

			State = 6993;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
				{
				State = 6992; direction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyListWithExpressionContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public KeyPartOrExpressionContext[] keyPartOrExpression() {
			return GetRuleContexts<KeyPartOrExpressionContext>();
		}
		public KeyPartOrExpressionContext keyPartOrExpression(int i) {
			return GetRuleContext<KeyPartOrExpressionContext>(i);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyListWithExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyListWithExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyListWithExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyListWithExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyListWithExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyListWithExpressionContext keyListWithExpression() {
		KeyListWithExpressionContext _localctx = new KeyListWithExpressionContext(Context, State);
		EnterRule(_localctx, 872, RULE_keyListWithExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6995; Match(OPEN_PAR_SYMBOL);
			State = 6996; keyPartOrExpression();
			State = 7001;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 6997; Match(COMMA_SYMBOL);
				State = 6998; keyPartOrExpression();
				}
				}
				State = 7003;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7004; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyPartOrExpressionContext : ParserRuleContext {
		public KeyPartContext keyPart() {
			return GetRuleContext<KeyPartContext>(0);
		}
		public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public KeyPartOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyPartOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyPartOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyPartOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyPartOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyPartOrExpressionContext keyPartOrExpression() {
		KeyPartOrExpressionContext _localctx = new KeyPartOrExpressionContext(Context, State);
		EnterRule(_localctx, 874, RULE_keyPartOrExpression);
		int _la;
		try {
			State = 7011;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,904,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7006; keyPart();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7007; exprWithParentheses();
				State = 7009;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
					{
					State = 7008; direction();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyListVariantsContext : ParserRuleContext {
		public KeyListWithExpressionContext keyListWithExpression() {
			return GetRuleContext<KeyListWithExpressionContext>(0);
		}
		public KeyListContext keyList() {
			return GetRuleContext<KeyListContext>(0);
		}
		public KeyListVariantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyListVariants; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyListVariants(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyListVariants(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyListVariants(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyListVariantsContext keyListVariants() {
		KeyListVariantsContext _localctx = new KeyListVariantsContext(Context, State);
		EnterRule(_localctx, 876, RULE_keyListVariants);
		try {
			State = 7017;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,905,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7013;
				if (!(serverVersion >= 80013)) throw new FailedPredicateException(this, "serverVersion >= 80013");
				State = 7014; keyListWithExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7015;
				if (!(serverVersion < 80013)) throw new FailedPredicateException(this, "serverVersion < 80013");
				State = 7016; keyList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexTypeContext : ParserRuleContext {
		public IToken algorithm;
		public ITerminalNode BTREE_SYMBOL() { return GetToken(MySQLParser.BTREE_SYMBOL, 0); }
		public ITerminalNode RTREE_SYMBOL() { return GetToken(MySQLParser.RTREE_SYMBOL, 0); }
		public ITerminalNode HASH_SYMBOL() { return GetToken(MySQLParser.HASH_SYMBOL, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexTypeContext indexType() {
		IndexTypeContext _localctx = new IndexTypeContext(Context, State);
		EnterRule(_localctx, 878, RULE_indexType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7019;
			_localctx.algorithm = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BTREE_SYMBOL || _la==HASH_SYMBOL || _la==RTREE_SYMBOL) ) {
				_localctx.algorithm = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexOptionContext : ParserRuleContext {
		public CommonIndexOptionContext commonIndexOption() {
			return GetRuleContext<CommonIndexOptionContext>(0);
		}
		public IndexTypeClauseContext indexTypeClause() {
			return GetRuleContext<IndexTypeClauseContext>(0);
		}
		public IndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexOptionContext indexOption() {
		IndexOptionContext _localctx = new IndexOptionContext(Context, State);
		EnterRule(_localctx, 880, RULE_indexOption);
		try {
			State = 7023;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,906,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7021; commonIndexOption();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7022; indexTypeClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonIndexOptionContext : ParserRuleContext {
		public ITerminalNode KEY_BLOCK_SIZE_SYMBOL() { return GetToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public CommonIndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonIndexOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCommonIndexOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCommonIndexOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommonIndexOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommonIndexOptionContext commonIndexOption() {
		CommonIndexOptionContext _localctx = new CommonIndexOptionContext(Context, State);
		EnterRule(_localctx, 882, RULE_commonIndexOption);
		int _la;
		try {
			State = 7035;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,908,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7025; Match(KEY_BLOCK_SIZE_SYMBOL);
				State = 7027;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7026; Match(EQUAL_OPERATOR);
					}
				}

				State = 7029; ulong_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7030;
				if (!(serverVersion >= 50600)) throw new FailedPredicateException(this, "serverVersion >= 50600");
				State = 7031; Match(COMMENT_SYMBOL);
				State = 7032; textLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7033;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 7034; visibility();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public ITerminalNode VISIBLE_SYMBOL() { return GetToken(MySQLParser.VISIBLE_SYMBOL, 0); }
		public ITerminalNode INVISIBLE_SYMBOL() { return GetToken(MySQLParser.INVISIBLE_SYMBOL, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(Context, State);
		EnterRule(_localctx, 884, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7037;
			_la = TokenStream.LA(1);
			if ( !(_la==INVISIBLE_SYMBOL || _la==VISIBLE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexTypeClauseContext : ParserRuleContext {
		public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		public ITerminalNode USING_SYMBOL() { return GetToken(MySQLParser.USING_SYMBOL, 0); }
		public ITerminalNode TYPE_SYMBOL() { return GetToken(MySQLParser.TYPE_SYMBOL, 0); }
		public IndexTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexTypeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexTypeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexTypeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexTypeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexTypeClauseContext indexTypeClause() {
		IndexTypeClauseContext _localctx = new IndexTypeClauseContext(Context, State);
		EnterRule(_localctx, 886, RULE_indexTypeClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7039;
			_la = TokenStream.LA(1);
			if ( !(_la==TYPE_SYMBOL || _la==USING_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 7040; indexType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FulltextIndexOptionContext : ParserRuleContext {
		public CommonIndexOptionContext commonIndexOption() {
			return GetRuleContext<CommonIndexOptionContext>(0);
		}
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode PARSER_SYMBOL() { return GetToken(MySQLParser.PARSER_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FulltextIndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fulltextIndexOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFulltextIndexOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFulltextIndexOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFulltextIndexOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FulltextIndexOptionContext fulltextIndexOption() {
		FulltextIndexOptionContext _localctx = new FulltextIndexOptionContext(Context, State);
		EnterRule(_localctx, 888, RULE_fulltextIndexOption);
		try {
			State = 7046;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,909,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7042; commonIndexOption();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7043; Match(WITH_SYMBOL);
				State = 7044; Match(PARSER_SYMBOL);
				State = 7045; identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpatialIndexOptionContext : ParserRuleContext {
		public CommonIndexOptionContext commonIndexOption() {
			return GetRuleContext<CommonIndexOptionContext>(0);
		}
		public SpatialIndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spatialIndexOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSpatialIndexOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSpatialIndexOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpatialIndexOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpatialIndexOptionContext spatialIndexOption() {
		SpatialIndexOptionContext _localctx = new SpatialIndexOptionContext(Context, State);
		EnterRule(_localctx, 890, RULE_spatialIndexOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7048; commonIndexOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeDefinitionContext : ParserRuleContext {
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MySQLParser.Eof, 0); }
		public DataTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataTypeDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDataTypeDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDataTypeDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataTypeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeDefinitionContext dataTypeDefinition() {
		DataTypeDefinitionContext _localctx = new DataTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 892, RULE_dataTypeDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7050; dataType();
			State = 7051; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public IToken type;
		public ITerminalNode INT_SYMBOL() { return GetToken(MySQLParser.INT_SYMBOL, 0); }
		public ITerminalNode TINYINT_SYMBOL() { return GetToken(MySQLParser.TINYINT_SYMBOL, 0); }
		public ITerminalNode SMALLINT_SYMBOL() { return GetToken(MySQLParser.SMALLINT_SYMBOL, 0); }
		public ITerminalNode MEDIUMINT_SYMBOL() { return GetToken(MySQLParser.MEDIUMINT_SYMBOL, 0); }
		public ITerminalNode BIGINT_SYMBOL() { return GetToken(MySQLParser.BIGINT_SYMBOL, 0); }
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public FieldOptionsContext fieldOptions() {
			return GetRuleContext<FieldOptionsContext>(0);
		}
		public ITerminalNode REAL_SYMBOL() { return GetToken(MySQLParser.REAL_SYMBOL, 0); }
		public ITerminalNode DOUBLE_SYMBOL() { return GetToken(MySQLParser.DOUBLE_SYMBOL, 0); }
		public PrecisionContext precision() {
			return GetRuleContext<PrecisionContext>(0);
		}
		public ITerminalNode PRECISION_SYMBOL() { return GetToken(MySQLParser.PRECISION_SYMBOL, 0); }
		public ITerminalNode FLOAT_SYMBOL() { return GetToken(MySQLParser.FLOAT_SYMBOL, 0); }
		public ITerminalNode DECIMAL_SYMBOL() { return GetToken(MySQLParser.DECIMAL_SYMBOL, 0); }
		public ITerminalNode NUMERIC_SYMBOL() { return GetToken(MySQLParser.NUMERIC_SYMBOL, 0); }
		public ITerminalNode FIXED_SYMBOL() { return GetToken(MySQLParser.FIXED_SYMBOL, 0); }
		public FloatOptionsContext floatOptions() {
			return GetRuleContext<FloatOptionsContext>(0);
		}
		public ITerminalNode BIT_SYMBOL() { return GetToken(MySQLParser.BIT_SYMBOL, 0); }
		public ITerminalNode BOOL_SYMBOL() { return GetToken(MySQLParser.BOOL_SYMBOL, 0); }
		public ITerminalNode BOOLEAN_SYMBOL() { return GetToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		public ITerminalNode CHAR_SYMBOL() { return GetToken(MySQLParser.CHAR_SYMBOL, 0); }
		public CharsetWithOptBinaryContext charsetWithOptBinary() {
			return GetRuleContext<CharsetWithOptBinaryContext>(0);
		}
		public NcharContext nchar() {
			return GetRuleContext<NcharContext>(0);
		}
		public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public ITerminalNode VARYING_SYMBOL() { return GetToken(MySQLParser.VARYING_SYMBOL, 0); }
		public ITerminalNode VARCHAR_SYMBOL() { return GetToken(MySQLParser.VARCHAR_SYMBOL, 0); }
		public ITerminalNode NATIONAL_SYMBOL() { return GetToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public ITerminalNode NVARCHAR_SYMBOL() { return GetToken(MySQLParser.NVARCHAR_SYMBOL, 0); }
		public ITerminalNode NCHAR_SYMBOL() { return GetToken(MySQLParser.NCHAR_SYMBOL, 0); }
		public ITerminalNode VARBINARY_SYMBOL() { return GetToken(MySQLParser.VARBINARY_SYMBOL, 0); }
		public ITerminalNode YEAR_SYMBOL() { return GetToken(MySQLParser.YEAR_SYMBOL, 0); }
		public ITerminalNode DATE_SYMBOL() { return GetToken(MySQLParser.DATE_SYMBOL, 0); }
		public ITerminalNode TIME_SYMBOL() { return GetToken(MySQLParser.TIME_SYMBOL, 0); }
		public TypeDatetimePrecisionContext typeDatetimePrecision() {
			return GetRuleContext<TypeDatetimePrecisionContext>(0);
		}
		public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public ITerminalNode TINYBLOB_SYMBOL() { return GetToken(MySQLParser.TINYBLOB_SYMBOL, 0); }
		public ITerminalNode BLOB_SYMBOL() { return GetToken(MySQLParser.BLOB_SYMBOL, 0); }
		public ITerminalNode MEDIUMBLOB_SYMBOL() { return GetToken(MySQLParser.MEDIUMBLOB_SYMBOL, 0); }
		public ITerminalNode LONGBLOB_SYMBOL() { return GetToken(MySQLParser.LONGBLOB_SYMBOL, 0); }
		public ITerminalNode LONG_SYMBOL() { return GetToken(MySQLParser.LONG_SYMBOL, 0); }
		public ITerminalNode TINYTEXT_SYMBOL() { return GetToken(MySQLParser.TINYTEXT_SYMBOL, 0); }
		public ITerminalNode TEXT_SYMBOL() { return GetToken(MySQLParser.TEXT_SYMBOL, 0); }
		public ITerminalNode MEDIUMTEXT_SYMBOL() { return GetToken(MySQLParser.MEDIUMTEXT_SYMBOL, 0); }
		public ITerminalNode LONGTEXT_SYMBOL() { return GetToken(MySQLParser.LONGTEXT_SYMBOL, 0); }
		public StringListContext stringList() {
			return GetRuleContext<StringListContext>(0);
		}
		public ITerminalNode ENUM_SYMBOL() { return GetToken(MySQLParser.ENUM_SYMBOL, 0); }
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public ITerminalNode SERIAL_SYMBOL() { return GetToken(MySQLParser.SERIAL_SYMBOL, 0); }
		public ITerminalNode JSON_SYMBOL() { return GetToken(MySQLParser.JSON_SYMBOL, 0); }
		public ITerminalNode GEOMETRY_SYMBOL() { return GetToken(MySQLParser.GEOMETRY_SYMBOL, 0); }
		public ITerminalNode GEOMETRYCOLLECTION_SYMBOL() { return GetToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public ITerminalNode POINT_SYMBOL() { return GetToken(MySQLParser.POINT_SYMBOL, 0); }
		public ITerminalNode MULTIPOINT_SYMBOL() { return GetToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		public ITerminalNode LINESTRING_SYMBOL() { return GetToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		public ITerminalNode MULTILINESTRING_SYMBOL() { return GetToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public ITerminalNode POLYGON_SYMBOL() { return GetToken(MySQLParser.POLYGON_SYMBOL, 0); }
		public ITerminalNode MULTIPOLYGON_SYMBOL() { return GetToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDataType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDataType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 894, RULE_dataType);
		int _la;
		try {
			State = 7200;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,943,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7053;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BIGINT_SYMBOL || _la==INT_SYMBOL || _la==MEDIUMINT_SYMBOL || _la==SMALLINT_SYMBOL || _la==TINYINT_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7055;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,910,Context) ) {
				case 1:
					{
					State = 7054; fieldLength();
					}
					break;
				}
				State = 7058;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,911,Context) ) {
				case 1:
					{
					State = 7057; fieldOptions();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7065;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case REAL_SYMBOL:
					{
					State = 7060; _localctx.type = Match(REAL_SYMBOL);
					}
					break;
				case DOUBLE_SYMBOL:
					{
					State = 7061; _localctx.type = Match(DOUBLE_SYMBOL);
					State = 7063;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,912,Context) ) {
					case 1:
						{
						State = 7062; Match(PRECISION_SYMBOL);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7068;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,914,Context) ) {
				case 1:
					{
					State = 7067; precision();
					}
					break;
				}
				State = 7071;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,915,Context) ) {
				case 1:
					{
					State = 7070; fieldOptions();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7073;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FIXED_SYMBOL || _la==DECIMAL_SYMBOL || _la==FLOAT_SYMBOL || _la==NUMERIC_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7075;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,916,Context) ) {
				case 1:
					{
					State = 7074; floatOptions();
					}
					break;
				}
				State = 7078;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,917,Context) ) {
				case 1:
					{
					State = 7077; fieldOptions();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7080; _localctx.type = Match(BIT_SYMBOL);
				State = 7082;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,918,Context) ) {
				case 1:
					{
					State = 7081; fieldLength();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7084;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BOOL_SYMBOL || _la==BOOLEAN_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7085; _localctx.type = Match(CHAR_SYMBOL);
				State = 7087;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,919,Context) ) {
				case 1:
					{
					State = 7086; fieldLength();
					}
					break;
				}
				State = 7090;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,920,Context) ) {
				case 1:
					{
					State = 7089; charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7092; nchar();
				State = 7094;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,921,Context) ) {
				case 1:
					{
					State = 7093; fieldLength();
					}
					break;
				}
				State = 7097;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,922,Context) ) {
				case 1:
					{
					State = 7096; Match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7099; _localctx.type = Match(BINARY_SYMBOL);
				State = 7101;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,923,Context) ) {
				case 1:
					{
					State = 7100; fieldLength();
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7106;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CHAR_SYMBOL:
					{
					State = 7103; _localctx.type = Match(CHAR_SYMBOL);
					State = 7104; Match(VARYING_SYMBOL);
					}
					break;
				case VARCHAR_SYMBOL:
					{
					State = 7105; _localctx.type = Match(VARCHAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7108; fieldLength();
				State = 7110;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,925,Context) ) {
				case 1:
					{
					State = 7109; charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7122;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,926,Context) ) {
				case 1:
					{
					State = 7112; _localctx.type = Match(NATIONAL_SYMBOL);
					State = 7113; Match(VARCHAR_SYMBOL);
					}
					break;
				case 2:
					{
					State = 7114; _localctx.type = Match(NVARCHAR_SYMBOL);
					}
					break;
				case 3:
					{
					State = 7115; _localctx.type = Match(NCHAR_SYMBOL);
					State = 7116; Match(VARCHAR_SYMBOL);
					}
					break;
				case 4:
					{
					State = 7117; _localctx.type = Match(NATIONAL_SYMBOL);
					State = 7118; Match(CHAR_SYMBOL);
					State = 7119; Match(VARYING_SYMBOL);
					}
					break;
				case 5:
					{
					State = 7120; _localctx.type = Match(NCHAR_SYMBOL);
					State = 7121; Match(VARYING_SYMBOL);
					}
					break;
				}
				State = 7124; fieldLength();
				State = 7126;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,927,Context) ) {
				case 1:
					{
					State = 7125; Match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7128; _localctx.type = Match(VARBINARY_SYMBOL);
				State = 7129; fieldLength();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7130; _localctx.type = Match(YEAR_SYMBOL);
				State = 7132;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,928,Context) ) {
				case 1:
					{
					State = 7131; fieldLength();
					}
					break;
				}
				State = 7135;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,929,Context) ) {
				case 1:
					{
					State = 7134; fieldOptions();
					}
					break;
				}
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7137; _localctx.type = Match(DATE_SYMBOL);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 7138; _localctx.type = Match(TIME_SYMBOL);
				State = 7140;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,930,Context) ) {
				case 1:
					{
					State = 7139; typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 7142; _localctx.type = Match(TIMESTAMP_SYMBOL);
				State = 7144;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,931,Context) ) {
				case 1:
					{
					State = 7143; typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 7146; _localctx.type = Match(DATETIME_SYMBOL);
				State = 7148;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,932,Context) ) {
				case 1:
					{
					State = 7147; typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 7150; _localctx.type = Match(TINYBLOB_SYMBOL);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 7151; _localctx.type = Match(BLOB_SYMBOL);
				State = 7153;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,933,Context) ) {
				case 1:
					{
					State = 7152; fieldLength();
					}
					break;
				}
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 7155;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LONGBLOB_SYMBOL || _la==MEDIUMBLOB_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 7156; _localctx.type = Match(LONG_SYMBOL);
				State = 7157; Match(VARBINARY_SYMBOL);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 7158; _localctx.type = Match(LONG_SYMBOL);
				State = 7162;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,934,Context) ) {
				case 1:
					{
					State = 7159; Match(CHAR_SYMBOL);
					State = 7160; Match(VARYING_SYMBOL);
					}
					break;
				case 2:
					{
					State = 7161; Match(VARCHAR_SYMBOL);
					}
					break;
				}
				State = 7165;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,935,Context) ) {
				case 1:
					{
					State = 7164; charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 7167; _localctx.type = Match(TINYTEXT_SYMBOL);
				State = 7169;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,936,Context) ) {
				case 1:
					{
					State = 7168; charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 7171; _localctx.type = Match(TEXT_SYMBOL);
				State = 7173;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,937,Context) ) {
				case 1:
					{
					State = 7172; fieldLength();
					}
					break;
				}
				State = 7176;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,938,Context) ) {
				case 1:
					{
					State = 7175; charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 7178; _localctx.type = Match(MEDIUMTEXT_SYMBOL);
				State = 7180;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,939,Context) ) {
				case 1:
					{
					State = 7179; charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 7182; _localctx.type = Match(LONGTEXT_SYMBOL);
				State = 7184;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,940,Context) ) {
				case 1:
					{
					State = 7183; charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 7186; _localctx.type = Match(ENUM_SYMBOL);
				State = 7187; stringList();
				State = 7189;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,941,Context) ) {
				case 1:
					{
					State = 7188; charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 7191; _localctx.type = Match(SET_SYMBOL);
				State = 7192; stringList();
				State = 7194;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,942,Context) ) {
				case 1:
					{
					State = 7193; charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 7196; _localctx.type = Match(SERIAL_SYMBOL);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 7197;
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				State = 7198; _localctx.type = Match(JSON_SYMBOL);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 7199;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & ((1L << (GEOMETRY_SYMBOL - 151)) | (1L << (GEOMETRYCOLLECTION_SYMBOL - 151)) | (1L << (LINESTRING_SYMBOL - 151)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (MULTILINESTRING_SYMBOL - 224)) | (1L << (MULTIPOINT_SYMBOL - 224)) | (1L << (MULTIPOLYGON_SYMBOL - 224)) | (1L << (POINT_SYMBOL - 224)) | (1L << (POLYGON_SYMBOL - 224)))) != 0)) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NcharContext : ParserRuleContext {
		public IToken type;
		public ITerminalNode NCHAR_SYMBOL() { return GetToken(MySQLParser.NCHAR_SYMBOL, 0); }
		public ITerminalNode CHAR_SYMBOL() { return GetToken(MySQLParser.CHAR_SYMBOL, 0); }
		public ITerminalNode NATIONAL_SYMBOL() { return GetToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public NcharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nchar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNchar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNchar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNchar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NcharContext nchar() {
		NcharContext _localctx = new NcharContext(Context, State);
		EnterRule(_localctx, 896, RULE_nchar);
		try {
			State = 7205;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NCHAR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7202; _localctx.type = Match(NCHAR_SYMBOL);
				}
				break;
			case NATIONAL_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7203; _localctx.type = Match(NATIONAL_SYMBOL);
				State = 7204; Match(CHAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarcharContext : ParserRuleContext {
		public IToken type;
		public ITerminalNode VARYING_SYMBOL() { return GetToken(MySQLParser.VARYING_SYMBOL, 0); }
		public ITerminalNode CHAR_SYMBOL() { return GetToken(MySQLParser.CHAR_SYMBOL, 0); }
		public ITerminalNode VARCHAR_SYMBOL() { return GetToken(MySQLParser.VARCHAR_SYMBOL, 0); }
		public VarcharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varchar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterVarchar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitVarchar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarchar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarcharContext varchar() {
		VarcharContext _localctx = new VarcharContext(Context, State);
		EnterRule(_localctx, 898, RULE_varchar);
		try {
			State = 7210;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7207; _localctx.type = Match(CHAR_SYMBOL);
				State = 7208; Match(VARYING_SYMBOL);
				}
				break;
			case VARCHAR_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7209; _localctx.type = Match(VARCHAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NvarcharContext : ParserRuleContext {
		public IToken type;
		public ITerminalNode VARCHAR_SYMBOL() { return GetToken(MySQLParser.VARCHAR_SYMBOL, 0); }
		public ITerminalNode NATIONAL_SYMBOL() { return GetToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public ITerminalNode NVARCHAR_SYMBOL() { return GetToken(MySQLParser.NVARCHAR_SYMBOL, 0); }
		public ITerminalNode NCHAR_SYMBOL() { return GetToken(MySQLParser.NCHAR_SYMBOL, 0); }
		public ITerminalNode CHAR_SYMBOL() { return GetToken(MySQLParser.CHAR_SYMBOL, 0); }
		public ITerminalNode VARYING_SYMBOL() { return GetToken(MySQLParser.VARYING_SYMBOL, 0); }
		public NvarcharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nvarchar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNvarchar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNvarchar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNvarchar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NvarcharContext nvarchar() {
		NvarcharContext _localctx = new NvarcharContext(Context, State);
		EnterRule(_localctx, 900, RULE_nvarchar);
		try {
			State = 7222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,946,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7212; _localctx.type = Match(NATIONAL_SYMBOL);
				State = 7213; Match(VARCHAR_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7214; _localctx.type = Match(NVARCHAR_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7215; _localctx.type = Match(NCHAR_SYMBOL);
				State = 7216; Match(VARCHAR_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7217; _localctx.type = Match(NATIONAL_SYMBOL);
				State = 7218; Match(CHAR_SYMBOL);
				State = 7219; Match(VARYING_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7220; _localctx.type = Match(NCHAR_SYMBOL);
				State = 7221; Match(VARYING_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealTypeContext : ParserRuleContext {
		public IToken type;
		public ITerminalNode REAL_SYMBOL() { return GetToken(MySQLParser.REAL_SYMBOL, 0); }
		public ITerminalNode DOUBLE_SYMBOL() { return GetToken(MySQLParser.DOUBLE_SYMBOL, 0); }
		public ITerminalNode PRECISION_SYMBOL() { return GetToken(MySQLParser.PRECISION_SYMBOL, 0); }
		public RealTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRealType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRealType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealTypeContext realType() {
		RealTypeContext _localctx = new RealTypeContext(Context, State);
		EnterRule(_localctx, 902, RULE_realType);
		try {
			State = 7229;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REAL_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7224; _localctx.type = Match(REAL_SYMBOL);
				}
				break;
			case DOUBLE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7225; _localctx.type = Match(DOUBLE_SYMBOL);
				State = 7227;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,947,Context) ) {
				case 1:
					{
					State = 7226; Match(PRECISION_SYMBOL);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		public ITerminalNode DECIMAL_NUMBER() { return GetToken(MySQLParser.DECIMAL_NUMBER, 0); }
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(Context, State);
		EnterRule(_localctx, 904, RULE_fieldLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7231; Match(OPEN_PAR_SYMBOL);
			State = 7234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,949,Context) ) {
			case 1:
				{
				State = 7232; real_ulonglong_number();
				}
				break;
			case 2:
				{
				State = 7233; Match(DECIMAL_NUMBER);
				}
				break;
			}
			State = 7236; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldOptionsContext : ParserRuleContext {
		public ITerminalNode[] SIGNED_SYMBOL() { return GetTokens(MySQLParser.SIGNED_SYMBOL); }
		public ITerminalNode SIGNED_SYMBOL(int i) {
			return GetToken(MySQLParser.SIGNED_SYMBOL, i);
		}
		public ITerminalNode[] UNSIGNED_SYMBOL() { return GetTokens(MySQLParser.UNSIGNED_SYMBOL); }
		public ITerminalNode UNSIGNED_SYMBOL(int i) {
			return GetToken(MySQLParser.UNSIGNED_SYMBOL, i);
		}
		public ITerminalNode[] ZEROFILL_SYMBOL() { return GetTokens(MySQLParser.ZEROFILL_SYMBOL); }
		public ITerminalNode ZEROFILL_SYMBOL(int i) {
			return GetToken(MySQLParser.ZEROFILL_SYMBOL, i);
		}
		public FieldOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFieldOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFieldOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldOptionsContext fieldOptions() {
		FieldOptionsContext _localctx = new FieldOptionsContext(Context, State);
		EnterRule(_localctx, 906, RULE_fieldOptions);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7239;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 7238;
					_la = TokenStream.LA(1);
					if ( !(_la==SIGNED_SYMBOL || _la==UNSIGNED_SYMBOL || _la==ZEROFILL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7241;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,950,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetWithOptBinaryContext : ParserRuleContext {
		public AsciiContext ascii() {
			return GetRuleContext<AsciiContext>(0);
		}
		public UnicodeContext unicode() {
			return GetRuleContext<UnicodeContext>(0);
		}
		public ITerminalNode BYTE_SYMBOL() { return GetToken(MySQLParser.BYTE_SYMBOL, 0); }
		public CharsetContext charset() {
			return GetRuleContext<CharsetContext>(0);
		}
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public CharsetWithOptBinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetWithOptBinary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCharsetWithOptBinary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCharsetWithOptBinary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharsetWithOptBinary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharsetWithOptBinaryContext charsetWithOptBinary() {
		CharsetWithOptBinaryContext _localctx = new CharsetWithOptBinaryContext(Context, State);
		EnterRule(_localctx, 908, RULE_charsetWithOptBinary);
		try {
			State = 7257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,953,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7243; ascii();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7244; unicode();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7245; Match(BYTE_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7246; charset();
				State = 7247; charsetName();
				State = 7249;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,951,Context) ) {
				case 1:
					{
					State = 7248; Match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7251; Match(BINARY_SYMBOL);
				State = 7255;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,952,Context) ) {
				case 1:
					{
					State = 7252; charset();
					State = 7253; charsetName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsciiContext : ParserRuleContext {
		public ITerminalNode ASCII_SYMBOL() { return GetToken(MySQLParser.ASCII_SYMBOL, 0); }
		public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public AsciiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ascii; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAscii(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAscii(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAscii(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsciiContext ascii() {
		AsciiContext _localctx = new AsciiContext(Context, State);
		EnterRule(_localctx, 910, RULE_ascii);
		try {
			State = 7265;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASCII_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7259; Match(ASCII_SYMBOL);
				State = 7261;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,954,Context) ) {
				case 1:
					{
					State = 7260; Match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case BINARY_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7263; Match(BINARY_SYMBOL);
				State = 7264; Match(ASCII_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnicodeContext : ParserRuleContext {
		public ITerminalNode UNICODE_SYMBOL() { return GetToken(MySQLParser.UNICODE_SYMBOL, 0); }
		public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public UnicodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unicode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUnicode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUnicode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnicode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnicodeContext unicode() {
		UnicodeContext _localctx = new UnicodeContext(Context, State);
		EnterRule(_localctx, 912, RULE_unicode);
		try {
			State = 7273;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNICODE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7267; Match(UNICODE_SYMBOL);
				State = 7269;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,956,Context) ) {
				case 1:
					{
					State = 7268; Match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case BINARY_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7271; Match(BINARY_SYMBOL);
				State = 7272; Match(UNICODE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WsNumCodepointsContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public WsNumCodepointsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wsNumCodepoints; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWsNumCodepoints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWsNumCodepoints(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWsNumCodepoints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WsNumCodepointsContext wsNumCodepoints() {
		WsNumCodepointsContext _localctx = new WsNumCodepointsContext(Context, State);
		EnterRule(_localctx, 914, RULE_wsNumCodepoints);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7275; Match(OPEN_PAR_SYMBOL);
			State = 7276; real_ulong_number();
			State = 7277; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDatetimePrecisionContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TypeDatetimePrecisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDatetimePrecision; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTypeDatetimePrecision(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTypeDatetimePrecision(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDatetimePrecision(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDatetimePrecisionContext typeDatetimePrecision() {
		TypeDatetimePrecisionContext _localctx = new TypeDatetimePrecisionContext(Context, State);
		EnterRule(_localctx, 916, RULE_typeDatetimePrecision);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7279;
			if (!(serverVersion >= 50600)) throw new FailedPredicateException(this, "serverVersion >= 50600");
			State = 7280; Match(OPEN_PAR_SYMBOL);
			State = 7281; Match(INT_NUMBER);
			State = 7282; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetNameContext : ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCharsetName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCharsetName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharsetName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharsetNameContext charsetName() {
		CharsetNameContext _localctx = new CharsetNameContext(Context, State);
		EnterRule(_localctx, 918, RULE_charsetName);
		try {
			State = 7288;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,958,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7284; textOrIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7285; Match(BINARY_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7286;
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				State = 7287; Match(DEFAULT_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollationNameContext : ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collationName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCollationName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCollationName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollationNameContext collationName() {
		CollationNameContext _localctx = new CollationNameContext(Context, State);
		EnterRule(_localctx, 920, RULE_collationName);
		try {
			State = 7293;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,959,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7290; textOrIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7291;
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				State = 7292; Match(DEFAULT_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableOptionsContext : ParserRuleContext {
		public CreateTableOptionContext[] createTableOption() {
			return GetRuleContexts<CreateTableOptionContext>();
		}
		public CreateTableOptionContext createTableOption(int i) {
			return GetRuleContext<CreateTableOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateTableOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTableOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateTableOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateTableOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTableOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableOptionsContext createTableOptions() {
		CreateTableOptionsContext _localctx = new CreateTableOptionsContext(Context, State);
		EnterRule(_localctx, 922, RULE_createTableOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7295; createTableOption();
			State = 7302;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,961,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 7297;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,960,Context) ) {
					case 1:
						{
						State = 7296; Match(COMMA_SYMBOL);
						}
						break;
					}
					State = 7299; createTableOption();
					}
					} 
				}
				State = 7304;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,961,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableOptionsSpaceSeparatedContext : ParserRuleContext {
		public CreateTableOptionContext[] createTableOption() {
			return GetRuleContexts<CreateTableOptionContext>();
		}
		public CreateTableOptionContext createTableOption(int i) {
			return GetRuleContext<CreateTableOptionContext>(i);
		}
		public CreateTableOptionsSpaceSeparatedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTableOptionsSpaceSeparated; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateTableOptionsSpaceSeparated(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateTableOptionsSpaceSeparated(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTableOptionsSpaceSeparated(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableOptionsSpaceSeparatedContext createTableOptionsSpaceSeparated() {
		CreateTableOptionsSpaceSeparatedContext _localctx = new CreateTableOptionsSpaceSeparatedContext(Context, State);
		EnterRule(_localctx, 924, RULE_createTableOptionsSpaceSeparated);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7306;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 7305; createTableOption();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7308;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,962,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableOptionContext : ParserRuleContext {
		public IToken option;
		public IToken format;
		public IToken method;
		public EngineRefContext engineRef() {
			return GetRuleContext<EngineRefContext>(0);
		}
		public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public ITerminalNode SECONDARY_ENGINE_SYMBOL() { return GetToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
		public ITerminalNode NULL_SYMBOL() { return GetToken(MySQLParser.NULL_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public Ulonglong_numberContext ulonglong_number() {
			return GetRuleContext<Ulonglong_numberContext>(0);
		}
		public ITerminalNode MAX_ROWS_SYMBOL() { return GetToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		public ITerminalNode MIN_ROWS_SYMBOL() { return GetToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public ITerminalNode AVG_ROW_LENGTH_SYMBOL() { return GetToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public ITerminalNode COMPRESSION_SYMBOL() { return GetToken(MySQLParser.COMPRESSION_SYMBOL, 0); }
		public ITerminalNode ENCRYPTION_SYMBOL() { return GetToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public ITerminalNode AUTO_INCREMENT_SYMBOL() { return GetToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public TernaryOptionContext ternaryOption() {
			return GetRuleContext<TernaryOptionContext>(0);
		}
		public ITerminalNode PACK_KEYS_SYMBOL() { return GetToken(MySQLParser.PACK_KEYS_SYMBOL, 0); }
		public ITerminalNode STATS_AUTO_RECALC_SYMBOL() { return GetToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		public ITerminalNode STATS_PERSISTENT_SYMBOL() { return GetToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
		public ITerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return GetToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		public ITerminalNode CHECKSUM_SYMBOL() { return GetToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		public ITerminalNode TABLE_CHECKSUM_SYMBOL() { return GetToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
		public ITerminalNode DELAY_KEY_WRITE_SYMBOL() { return GetToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		public ITerminalNode ROW_FORMAT_SYMBOL() { return GetToken(MySQLParser.ROW_FORMAT_SYMBOL, 0); }
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ITerminalNode DYNAMIC_SYMBOL() { return GetToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		public ITerminalNode FIXED_SYMBOL() { return GetToken(MySQLParser.FIXED_SYMBOL, 0); }
		public ITerminalNode COMPRESSED_SYMBOL() { return GetToken(MySQLParser.COMPRESSED_SYMBOL, 0); }
		public ITerminalNode REDUNDANT_SYMBOL() { return GetToken(MySQLParser.REDUNDANT_SYMBOL, 0); }
		public ITerminalNode COMPACT_SYMBOL() { return GetToken(MySQLParser.COMPACT_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TableRefListContext tableRefList() {
			return GetRuleContext<TableRefListContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode UNION_SYMBOL() { return GetToken(MySQLParser.UNION_SYMBOL, 0); }
		public DefaultCharsetContext defaultCharset() {
			return GetRuleContext<DefaultCharsetContext>(0);
		}
		public DefaultCollationContext defaultCollation() {
			return GetRuleContext<DefaultCollationContext>(0);
		}
		public ITerminalNode INSERT_METHOD_SYMBOL() { return GetToken(MySQLParser.INSERT_METHOD_SYMBOL, 0); }
		public ITerminalNode NO_SYMBOL() { return GetToken(MySQLParser.NO_SYMBOL, 0); }
		public ITerminalNode FIRST_SYMBOL() { return GetToken(MySQLParser.FIRST_SYMBOL, 0); }
		public ITerminalNode LAST_SYMBOL() { return GetToken(MySQLParser.LAST_SYMBOL, 0); }
		public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public ITerminalNode DISK_SYMBOL() { return GetToken(MySQLParser.DISK_SYMBOL, 0); }
		public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public ITerminalNode CONNECTION_SYMBOL() { return GetToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public ITerminalNode KEY_BLOCK_SIZE_SYMBOL() { return GetToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public CreateTableOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTableOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateTableOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateTableOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTableOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableOptionContext createTableOption() {
		CreateTableOptionContext _localctx = new CreateTableOptionContext(Context, State);
		EnterRule(_localctx, 926, RULE_createTableOption);
		int _la;
		try {
			State = 7440;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,987,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7310; _localctx.option = Match(ENGINE_SYMBOL);
				State = 7312;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,963,Context) ) {
				case 1:
					{
					State = 7311; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7314; engineRef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7315;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 7316; _localctx.option = Match(SECONDARY_ENGINE_SYMBOL);
				State = 7318;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,964,Context) ) {
				case 1:
					{
					State = 7317; equal();
					}
					break;
				}
				State = 7322;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,965,Context) ) {
				case 1:
					{
					State = 7320; Match(NULL_SYMBOL);
					}
					break;
				case 2:
					{
					State = 7321; textOrIdentifier();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7324; _localctx.option = Match(MAX_ROWS_SYMBOL);
				State = 7326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7325; Match(EQUAL_OPERATOR);
					}
				}

				State = 7328; ulonglong_number();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7329; _localctx.option = Match(MIN_ROWS_SYMBOL);
				State = 7331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7330; Match(EQUAL_OPERATOR);
					}
				}

				State = 7333; ulonglong_number();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7334; _localctx.option = Match(AVG_ROW_LENGTH_SYMBOL);
				State = 7336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7335; Match(EQUAL_OPERATOR);
					}
				}

				State = 7338; ulong_number();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7339; _localctx.option = Match(PASSWORD_SYMBOL);
				State = 7341;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,969,Context) ) {
				case 1:
					{
					State = 7340; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7343; textStringLiteral();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7344; _localctx.option = Match(COMMENT_SYMBOL);
				State = 7346;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,970,Context) ) {
				case 1:
					{
					State = 7345; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7348; textStringLiteral();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7349;
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				State = 7350; _localctx.option = Match(COMPRESSION_SYMBOL);
				State = 7352;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,971,Context) ) {
				case 1:
					{
					State = 7351; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7354; textString();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7355;
				if (!(serverVersion >= 50711)) throw new FailedPredicateException(this, "serverVersion >= 50711");
				State = 7356; _localctx.option = Match(ENCRYPTION_SYMBOL);
				State = 7358;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,972,Context) ) {
				case 1:
					{
					State = 7357; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7360; textString();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7361; _localctx.option = Match(AUTO_INCREMENT_SYMBOL);
				State = 7363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7362; Match(EQUAL_OPERATOR);
					}
				}

				State = 7365; ulonglong_number();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7366; _localctx.option = Match(PACK_KEYS_SYMBOL);
				State = 7368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7367; Match(EQUAL_OPERATOR);
					}
				}

				State = 7370; ternaryOption();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7371;
				if (!(serverVersion >= 50600)) throw new FailedPredicateException(this, "serverVersion >= 50600");
				State = 7372;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 324)) & ~0x3f) == 0 && ((1L << (_la - 324)) & ((1L << (STATS_AUTO_RECALC_SYMBOL - 324)) | (1L << (STATS_PERSISTENT_SYMBOL - 324)) | (1L << (STATS_SAMPLE_PAGES_SYMBOL - 324)))) != 0)) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7373; Match(EQUAL_OPERATOR);
					}
				}

				State = 7376; ternaryOption();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7377;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CHECKSUM_SYMBOL || _la==TABLE_CHECKSUM_SYMBOL) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7378; Match(EQUAL_OPERATOR);
					}
				}

				State = 7381; ulong_number();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 7382; _localctx.option = Match(DELAY_KEY_WRITE_SYMBOL);
				State = 7384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7383; Match(EQUAL_OPERATOR);
					}
				}

				State = 7386; ulong_number();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 7387; _localctx.option = Match(ROW_FORMAT_SYMBOL);
				State = 7389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7388; Match(EQUAL_OPERATOR);
					}
				}

				State = 7391;
				_localctx.format = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & ((1L << (COMPACT_SYMBOL - 92)) | (1L << (COMPRESSED_SYMBOL - 92)) | (1L << (DYNAMIC_SYMBOL - 92)) | (1L << (FIXED_SYMBOL - 92)))) != 0) || _la==REDUNDANT_SYMBOL || _la==DEFAULT_SYMBOL) ) {
					_localctx.format = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 7392; _localctx.option = Match(UNION_SYMBOL);
				State = 7394;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7393; Match(EQUAL_OPERATOR);
					}
				}

				State = 7396; Match(OPEN_PAR_SYMBOL);
				State = 7397; tableRefList();
				State = 7398; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 7400; defaultCharset();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 7401; defaultCollation();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 7402; _localctx.option = Match(INSERT_METHOD_SYMBOL);
				State = 7404;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7403; Match(EQUAL_OPERATOR);
					}
				}

				State = 7406;
				_localctx.method = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NO_SYMBOL || _la==FIRST_SYMBOL || _la==LAST_SYMBOL) ) {
					_localctx.method = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 7407; _localctx.option = Match(DATA_SYMBOL);
				State = 7408; Match(DIRECTORY_SYMBOL);
				State = 7410;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,981,Context) ) {
				case 1:
					{
					State = 7409; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7412; textString();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 7413; _localctx.option = Match(INDEX_SYMBOL);
				State = 7414; Match(DIRECTORY_SYMBOL);
				State = 7416;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,982,Context) ) {
				case 1:
					{
					State = 7415; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7418; textString();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 7419; _localctx.option = Match(TABLESPACE_SYMBOL);
				State = 7425;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,984,Context) ) {
				case 1:
					{
					State = 7420;
					if (!(serverVersion >= 50707)) throw new FailedPredicateException(this, "serverVersion >= 50707");
					State = 7422;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,983,Context) ) {
					case 1:
						{
						State = 7421; Match(EQUAL_OPERATOR);
						}
						break;
					}
					}
					break;
				case 2:
					{
					}
					break;
				}
				State = 7427; identifier();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 7428; _localctx.option = Match(STORAGE_SYMBOL);
				State = 7429;
				_la = TokenStream.LA(1);
				if ( !(_la==DISK_SYMBOL || _la==MEMORY_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 7430; _localctx.option = Match(CONNECTION_SYMBOL);
				State = 7432;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,985,Context) ) {
				case 1:
					{
					State = 7431; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7434; textString();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 7435; _localctx.option = Match(KEY_BLOCK_SIZE_SYMBOL);
				State = 7437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7436; Match(EQUAL_OPERATOR);
					}
				}

				State = 7439; ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TernaryOptionContext : ParserRuleContext {
		public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TernaryOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternaryOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTernaryOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTernaryOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TernaryOptionContext ternaryOption() {
		TernaryOptionContext _localctx = new TernaryOptionContext(Context, State);
		EnterRule(_localctx, 928, RULE_ternaryOption);
		try {
			State = 7444;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case HEX_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7442; ulong_number();
				}
				break;
			case DEFAULT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7443; Match(DEFAULT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultCollationContext : ParserRuleContext {
		public ITerminalNode COLLATE_SYMBOL() { return GetToken(MySQLParser.COLLATE_SYMBOL, 0); }
		public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public DefaultCollationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultCollation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDefaultCollation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDefaultCollation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultCollation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultCollationContext defaultCollation() {
		DefaultCollationContext _localctx = new DefaultCollationContext(Context, State);
		EnterRule(_localctx, 930, RULE_defaultCollation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				State = 7446; Match(DEFAULT_SYMBOL);
				}
			}

			State = 7449; Match(COLLATE_SYMBOL);
			State = 7451;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,990,Context) ) {
			case 1:
				{
				State = 7450; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 7453; collationName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultEncryptionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION_SYMBOL() { return GetToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public DefaultEncryptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultEncryption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDefaultEncryption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDefaultEncryption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultEncryption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultEncryptionContext defaultEncryption() {
		DefaultEncryptionContext _localctx = new DefaultEncryptionContext(Context, State);
		EnterRule(_localctx, 932, RULE_defaultEncryption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7456;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				State = 7455; Match(DEFAULT_SYMBOL);
				}
			}

			State = 7458; Match(ENCRYPTION_SYMBOL);
			State = 7460;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,992,Context) ) {
			case 1:
				{
				State = 7459; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 7462; textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultCharsetContext : ParserRuleContext {
		public CharsetContext charset() {
			return GetRuleContext<CharsetContext>(0);
		}
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public DefaultCharsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultCharset; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDefaultCharset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDefaultCharset(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultCharset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultCharsetContext defaultCharset() {
		DefaultCharsetContext _localctx = new DefaultCharsetContext(Context, State);
		EnterRule(_localctx, 934, RULE_defaultCharset);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				State = 7464; Match(DEFAULT_SYMBOL);
				}
			}

			State = 7467; charset();
			State = 7469;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,994,Context) ) {
			case 1:
				{
				State = 7468; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 7471; charsetName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionClauseContext : ParserRuleContext {
		public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public PartitionTypeDefContext partitionTypeDef() {
			return GetRuleContext<PartitionTypeDefContext>(0);
		}
		public ITerminalNode PARTITIONS_SYMBOL() { return GetToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public SubPartitionsContext subPartitions() {
			return GetRuleContext<SubPartitionsContext>(0);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionClauseContext partitionClause() {
		PartitionClauseContext _localctx = new PartitionClauseContext(Context, State);
		EnterRule(_localctx, 936, RULE_partitionClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7473; Match(PARTITION_SYMBOL);
			State = 7474; Match(BY_SYMBOL);
			State = 7475; partitionTypeDef();
			State = 7478;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,995,Context) ) {
			case 1:
				{
				State = 7476; Match(PARTITIONS_SYMBOL);
				State = 7477; real_ulong_number();
				}
				break;
			}
			State = 7481;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,996,Context) ) {
			case 1:
				{
				State = 7480; subPartitions();
				}
				break;
			}
			State = 7484;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,997,Context) ) {
			case 1:
				{
				State = 7483; partitionDefinitions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionTypeDefContext : ParserRuleContext {
		public PartitionTypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionTypeDef; } }
	 
		public PartitionTypeDefContext() { }
		public virtual void CopyFrom(PartitionTypeDefContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PartitionDefRangeListContext : PartitionTypeDefContext {
		public ITerminalNode RANGE_SYMBOL() { return GetToken(MySQLParser.RANGE_SYMBOL, 0); }
		public ITerminalNode LIST_SYMBOL() { return GetToken(MySQLParser.LIST_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public PartitionDefRangeListContext(PartitionTypeDefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefRangeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefRangeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDefRangeList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionDefKeyContext : PartitionTypeDefContext {
		public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode LINEAR_SYMBOL() { return GetToken(MySQLParser.LINEAR_SYMBOL, 0); }
		public PartitionKeyAlgorithmContext partitionKeyAlgorithm() {
			return GetRuleContext<PartitionKeyAlgorithmContext>(0);
		}
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public PartitionDefKeyContext(PartitionTypeDefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefKey(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDefKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionDefHashContext : PartitionTypeDefContext {
		public ITerminalNode HASH_SYMBOL() { return GetToken(MySQLParser.HASH_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode LINEAR_SYMBOL() { return GetToken(MySQLParser.LINEAR_SYMBOL, 0); }
		public PartitionDefHashContext(PartitionTypeDefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefHash(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefHash(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDefHash(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionTypeDefContext partitionTypeDef() {
		PartitionTypeDefContext _localctx = new PartitionTypeDefContext(Context, State);
		EnterRule(_localctx, 938, RULE_partitionTypeDef);
		int _la;
		try {
			State = 7519;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1004,Context) ) {
			case 1:
				_localctx = new PartitionDefKeyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 7487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR_SYMBOL) {
					{
					State = 7486; Match(LINEAR_SYMBOL);
					}
				}

				State = 7489; Match(KEY_SYMBOL);
				State = 7491;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,999,Context) ) {
				case 1:
					{
					State = 7490; partitionKeyAlgorithm();
					}
					break;
				}
				State = 7493; Match(OPEN_PAR_SYMBOL);
				State = 7495;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1000,Context) ) {
				case 1:
					{
					State = 7494; identifierList();
					}
					break;
				}
				State = 7497; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				_localctx = new PartitionDefHashContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 7499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR_SYMBOL) {
					{
					State = 7498; Match(LINEAR_SYMBOL);
					}
				}

				State = 7501; Match(HASH_SYMBOL);
				State = 7502; Match(OPEN_PAR_SYMBOL);
				State = 7503; bitExpr(0);
				State = 7504; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 3:
				_localctx = new PartitionDefRangeListContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 7506;
				_la = TokenStream.LA(1);
				if ( !(_la==LIST_SYMBOL || _la==RANGE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7517;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					State = 7507; Match(OPEN_PAR_SYMBOL);
					State = 7508; bitExpr(0);
					State = 7509; Match(CLOSE_PAR_SYMBOL);
					}
					break;
				case COLUMNS_SYMBOL:
					{
					State = 7511; Match(COLUMNS_SYMBOL);
					State = 7512; Match(OPEN_PAR_SYMBOL);
					State = 7514;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1002,Context) ) {
					case 1:
						{
						State = 7513; identifierList();
						}
						break;
					}
					State = 7516; Match(CLOSE_PAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubPartitionsContext : ParserRuleContext {
		public ITerminalNode SUBPARTITION_SYMBOL() { return GetToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public ITerminalNode HASH_SYMBOL() { return GetToken(MySQLParser.HASH_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return GetRuleContext<IdentifierListWithParenthesesContext>(0);
		}
		public ITerminalNode LINEAR_SYMBOL() { return GetToken(MySQLParser.LINEAR_SYMBOL, 0); }
		public ITerminalNode SUBPARTITIONS_SYMBOL() { return GetToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public PartitionKeyAlgorithmContext partitionKeyAlgorithm() {
			return GetRuleContext<PartitionKeyAlgorithmContext>(0);
		}
		public SubPartitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subPartitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSubPartitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSubPartitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubPartitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubPartitionsContext subPartitions() {
		SubPartitionsContext _localctx = new SubPartitionsContext(Context, State);
		EnterRule(_localctx, 940, RULE_subPartitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7521; Match(SUBPARTITION_SYMBOL);
			State = 7522; Match(BY_SYMBOL);
			State = 7524;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LINEAR_SYMBOL) {
				{
				State = 7523; Match(LINEAR_SYMBOL);
				}
			}

			State = 7536;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HASH_SYMBOL:
				{
				State = 7526; Match(HASH_SYMBOL);
				State = 7527; Match(OPEN_PAR_SYMBOL);
				State = 7528; bitExpr(0);
				State = 7529; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case KEY_SYMBOL:
				{
				State = 7531; Match(KEY_SYMBOL);
				State = 7533;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1006,Context) ) {
				case 1:
					{
					State = 7532; partitionKeyAlgorithm();
					}
					break;
				}
				State = 7535; identifierListWithParentheses();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 7540;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1008,Context) ) {
			case 1:
				{
				State = 7538; Match(SUBPARTITIONS_SYMBOL);
				State = 7539; real_ulong_number();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionKeyAlgorithmContext : ParserRuleContext {
		public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public PartitionKeyAlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionKeyAlgorithm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionKeyAlgorithm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionKeyAlgorithm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionKeyAlgorithm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionKeyAlgorithmContext partitionKeyAlgorithm() {
		PartitionKeyAlgorithmContext _localctx = new PartitionKeyAlgorithmContext(Context, State);
		EnterRule(_localctx, 942, RULE_partitionKeyAlgorithm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7542;
			if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
			State = 7543; Match(ALGORITHM_SYMBOL);
			State = 7544; Match(EQUAL_OPERATOR);
			State = 7545; real_ulong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinitionsContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public PartitionDefinitionContext[] partitionDefinition() {
			return GetRuleContexts<PartitionDefinitionContext>();
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return GetRuleContext<PartitionDefinitionContext>(i);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefinitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefinitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinitionsContext partitionDefinitions() {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(Context, State);
		EnterRule(_localctx, 944, RULE_partitionDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7547; Match(OPEN_PAR_SYMBOL);
			State = 7548; partitionDefinition();
			State = 7553;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 7549; Match(COMMA_SYMBOL);
				State = 7550; partitionDefinition();
				}
				}
				State = 7555;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7556; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinitionContext : ParserRuleContext {
		public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode VALUES_SYMBOL() { return GetToken(MySQLParser.VALUES_SYMBOL, 0); }
		public ITerminalNode LESS_SYMBOL() { return GetToken(MySQLParser.LESS_SYMBOL, 0); }
		public ITerminalNode THAN_SYMBOL() { return GetToken(MySQLParser.THAN_SYMBOL, 0); }
		public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		public PartitionValuesInContext partitionValuesIn() {
			return GetRuleContext<PartitionValuesInContext>(0);
		}
		public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PartitionValueItemListParenContext partitionValueItemListParen() {
			return GetRuleContext<PartitionValueItemListParenContext>(0);
		}
		public ITerminalNode MAXVALUE_SYMBOL() { return GetToken(MySQLParser.MAXVALUE_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinitionContext partitionDefinition() {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(Context, State);
		EnterRule(_localctx, 946, RULE_partitionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7558; Match(PARTITION_SYMBOL);
			State = 7559; identifier();
			State = 7570;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1011,Context) ) {
			case 1:
				{
				State = 7560; Match(VALUES_SYMBOL);
				State = 7561; Match(LESS_SYMBOL);
				State = 7562; Match(THAN_SYMBOL);
				State = 7565;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					State = 7563; partitionValueItemListParen();
					}
					break;
				case MAXVALUE_SYMBOL:
					{
					State = 7564; Match(MAXVALUE_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				State = 7567; Match(VALUES_SYMBOL);
				State = 7568; Match(IN_SYMBOL);
				State = 7569; partitionValuesIn();
				}
				break;
			}
			State = 7575;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT_SYMBOL || _la==DATA_SYMBOL || _la==ENGINE_SYMBOL || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (MAX_ROWS_SYMBOL - 184)) | (1L << (MIN_ROWS_SYMBOL - 184)) | (1L << (NODEGROUP_SYMBOL - 184)))) != 0) || _la==STORAGE_SYMBOL || _la==TABLESPACE_SYMBOL || _la==INDEX_SYMBOL) {
				{
				{
				State = 7572; partitionOption();
				}
				}
				State = 7577;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7589;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 7578; Match(OPEN_PAR_SYMBOL);
				State = 7579; subpartitionDefinition();
				State = 7584;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 7580; Match(COMMA_SYMBOL);
					State = 7581; subpartitionDefinition();
					}
					}
					State = 7586;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 7587; Match(CLOSE_PAR_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionValuesInContext : ParserRuleContext {
		public PartitionValueItemListParenContext[] partitionValueItemListParen() {
			return GetRuleContexts<PartitionValueItemListParenContext>();
		}
		public PartitionValueItemListParenContext partitionValueItemListParen(int i) {
			return GetRuleContext<PartitionValueItemListParenContext>(i);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionValuesInContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionValuesIn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionValuesIn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionValuesIn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionValuesIn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionValuesInContext partitionValuesIn() {
		PartitionValuesInContext _localctx = new PartitionValuesInContext(Context, State);
		EnterRule(_localctx, 948, RULE_partitionValuesIn);
		int _la;
		try {
			State = 7603;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1016,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7591; partitionValueItemListParen();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7592; Match(OPEN_PAR_SYMBOL);
				State = 7593; partitionValueItemListParen();
				State = 7598;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 7594; Match(COMMA_SYMBOL);
					State = 7595; partitionValueItemListParen();
					}
					}
					State = 7600;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 7601; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionOptionContext : ParserRuleContext {
		public IToken option;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public EngineRefContext engineRef() {
			return GetRuleContext<EngineRefContext>(0);
		}
		public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public ITerminalNode NODEGROUP_SYMBOL() { return GetToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		public ITerminalNode MAX_ROWS_SYMBOL() { return GetToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		public ITerminalNode MIN_ROWS_SYMBOL() { return GetToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public PartitionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionOptionContext partitionOption() {
		PartitionOptionContext _localctx = new PartitionOptionContext(Context, State);
		EnterRule(_localctx, 950, RULE_partitionOption);
		int _la;
		try {
			State = 7639;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TABLESPACE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7605; _localctx.option = Match(TABLESPACE_SYMBOL);
				State = 7607;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1017,Context) ) {
				case 1:
					{
					State = 7606; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7609; identifier();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7611;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORAGE_SYMBOL) {
					{
					State = 7610; Match(STORAGE_SYMBOL);
					}
				}

				State = 7613; _localctx.option = Match(ENGINE_SYMBOL);
				State = 7615;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1019,Context) ) {
				case 1:
					{
					State = 7614; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7617; engineRef();
				}
				break;
			case NODEGROUP_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7618; _localctx.option = Match(NODEGROUP_SYMBOL);
				State = 7620;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7619; Match(EQUAL_OPERATOR);
					}
				}

				State = 7622; real_ulong_number();
				}
				break;
			case MAX_ROWS_SYMBOL:
			case MIN_ROWS_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7623;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MAX_ROWS_SYMBOL || _la==MIN_ROWS_SYMBOL) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7625;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7624; Match(EQUAL_OPERATOR);
					}
				}

				State = 7627; real_ulong_number();
				}
				break;
			case DATA_SYMBOL:
			case INDEX_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7628;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATA_SYMBOL || _la==INDEX_SYMBOL) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7629; Match(DIRECTORY_SYMBOL);
				State = 7631;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1022,Context) ) {
				case 1:
					{
					State = 7630; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7633; textLiteral();
				}
				break;
			case COMMENT_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7634; _localctx.option = Match(COMMENT_SYMBOL);
				State = 7636;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1023,Context) ) {
				case 1:
					{
					State = 7635; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7638; textLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubpartitionDefinitionContext : ParserRuleContext {
		public ITerminalNode SUBPARTITION_SYMBOL() { return GetToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subpartitionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSubpartitionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSubpartitionDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubpartitionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubpartitionDefinitionContext subpartitionDefinition() {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(Context, State);
		EnterRule(_localctx, 952, RULE_subpartitionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7641; Match(SUBPARTITION_SYMBOL);
			State = 7642; textOrIdentifier();
			State = 7646;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT_SYMBOL || _la==DATA_SYMBOL || _la==ENGINE_SYMBOL || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (MAX_ROWS_SYMBOL - 184)) | (1L << (MIN_ROWS_SYMBOL - 184)) | (1L << (NODEGROUP_SYMBOL - 184)))) != 0) || _la==STORAGE_SYMBOL || _la==TABLESPACE_SYMBOL || _la==INDEX_SYMBOL) {
				{
				{
				State = 7643; partitionOption();
				}
				}
				State = 7648;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionValueItemListParenContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public PartitionValueItemContext[] partitionValueItem() {
			return GetRuleContexts<PartitionValueItemContext>();
		}
		public PartitionValueItemContext partitionValueItem(int i) {
			return GetRuleContext<PartitionValueItemContext>(i);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionValueItemListParenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionValueItemListParen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionValueItemListParen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionValueItemListParen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionValueItemListParen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionValueItemListParenContext partitionValueItemListParen() {
		PartitionValueItemListParenContext _localctx = new PartitionValueItemListParenContext(Context, State);
		EnterRule(_localctx, 954, RULE_partitionValueItemListParen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7649; Match(OPEN_PAR_SYMBOL);
			State = 7650; partitionValueItem();
			State = 7655;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 7651; Match(COMMA_SYMBOL);
				State = 7652; partitionValueItem();
				}
				}
				State = 7657;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7658; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionValueItemContext : ParserRuleContext {
		public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		public ITerminalNode MAXVALUE_SYMBOL() { return GetToken(MySQLParser.MAXVALUE_SYMBOL, 0); }
		public PartitionValueItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionValueItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionValueItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionValueItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionValueItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionValueItemContext partitionValueItem() {
		PartitionValueItemContext _localctx = new PartitionValueItemContext(Context, State);
		EnterRule(_localctx, 956, RULE_partitionValueItem);
		try {
			State = 7662;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1027,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7660; bitExpr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7661; Match(MAXVALUE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinerClauseContext : ParserRuleContext {
		public ITerminalNode DEFINER_SYMBOL() { return GetToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		public DefinerClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definerClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDefinerClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDefinerClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinerClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinerClauseContext definerClause() {
		DefinerClauseContext _localctx = new DefinerClauseContext(Context, State);
		EnterRule(_localctx, 958, RULE_definerClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7664; Match(DEFINER_SYMBOL);
			State = 7665; Match(EQUAL_OPERATOR);
			State = 7666; user();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExistsContext : ParserRuleContext {
		public ITerminalNode IF_SYMBOL() { return GetToken(MySQLParser.IF_SYMBOL, 0); }
		public ITerminalNode EXISTS_SYMBOL() { return GetToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExists; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIfExists(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIfExists(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExists(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExistsContext ifExists() {
		IfExistsContext _localctx = new IfExistsContext(Context, State);
		EnterRule(_localctx, 960, RULE_ifExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7668; Match(IF_SYMBOL);
			State = 7669; Match(EXISTS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfNotExistsContext : ParserRuleContext {
		public ITerminalNode IF_SYMBOL() { return GetToken(MySQLParser.IF_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		public ITerminalNode EXISTS_SYMBOL() { return GetToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifNotExists; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIfNotExists(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIfNotExists(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfNotExists(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfNotExistsContext ifNotExists() {
		IfNotExistsContext _localctx = new IfNotExistsContext(Context, State);
		EnterRule(_localctx, 962, RULE_ifNotExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7671; Match(IF_SYMBOL);
			State = 7672; notRule();
			State = 7673; Match(EXISTS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterContext : ParserRuleContext {
		public IToken type;
		public FunctionParameterContext functionParameter() {
			return GetRuleContext<FunctionParameterContext>(0);
		}
		public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		public ITerminalNode OUT_SYMBOL() { return GetToken(MySQLParser.OUT_SYMBOL, 0); }
		public ITerminalNode INOUT_SYMBOL() { return GetToken(MySQLParser.INOUT_SYMBOL, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterProcedureParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitProcedureParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterContext procedureParameter() {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(Context, State);
		EnterRule(_localctx, 964, RULE_procedureParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7676;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1028,Context) ) {
			case 1:
				{
				State = 7675;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INOUT_SYMBOL || _la==IN_SYMBOL || _la==OUT_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 7678; functionParameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		public ParameterNameContext parameterName() {
			return GetRuleContext<ParameterNameContext>(0);
		}
		public TypeWithOptCollateContext typeWithOptCollate() {
			return GetRuleContext<TypeWithOptCollateContext>(0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFunctionParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFunctionParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 966, RULE_functionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7680; parameterName();
			State = 7681; typeWithOptCollate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollateContext : ParserRuleContext {
		public ITerminalNode COLLATE_SYMBOL() { return GetToken(MySQLParser.COLLATE_SYMBOL, 0); }
		public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public CollateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCollate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCollate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollateContext collate() {
		CollateContext _localctx = new CollateContext(Context, State);
		EnterRule(_localctx, 968, RULE_collate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7683; Match(COLLATE_SYMBOL);
			State = 7684; collationName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeWithOptCollateContext : ParserRuleContext {
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public TypeWithOptCollateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeWithOptCollate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTypeWithOptCollate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTypeWithOptCollate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeWithOptCollate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeWithOptCollateContext typeWithOptCollate() {
		TypeWithOptCollateContext _localctx = new TypeWithOptCollateContext(Context, State);
		EnterRule(_localctx, 970, RULE_typeWithOptCollate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7686; dataType();
			State = 7688;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1029,Context) ) {
			case 1:
				{
				State = 7687; collate();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaIdentifierPairContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SchemaRefContext[] schemaRef() {
			return GetRuleContexts<SchemaRefContext>();
		}
		public SchemaRefContext schemaRef(int i) {
			return GetRuleContext<SchemaRefContext>(i);
		}
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SchemaIdentifierPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaIdentifierPair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSchemaIdentifierPair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSchemaIdentifierPair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchemaIdentifierPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaIdentifierPairContext schemaIdentifierPair() {
		SchemaIdentifierPairContext _localctx = new SchemaIdentifierPairContext(Context, State);
		EnterRule(_localctx, 972, RULE_schemaIdentifierPair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7690; Match(OPEN_PAR_SYMBOL);
			State = 7691; schemaRef();
			State = 7692; Match(COMMA_SYMBOL);
			State = 7693; schemaRef();
			State = 7694; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewRefListContext : ParserRuleContext {
		public ViewRefContext[] viewRef() {
			return GetRuleContexts<ViewRefContext>();
		}
		public ViewRefContext viewRef(int i) {
			return GetRuleContext<ViewRefContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ViewRefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewRefList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewRefList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewRefList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewRefList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewRefListContext viewRefList() {
		ViewRefListContext _localctx = new ViewRefListContext(Context, State);
		EnterRule(_localctx, 974, RULE_viewRefList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7696; viewRef();
			State = 7701;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 7697; Match(COMMA_SYMBOL);
				State = 7698; viewRef();
				}
				}
				State = 7703;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateListContext : ParserRuleContext {
		public UpdateElementContext[] updateElement() {
			return GetRuleContexts<UpdateElementContext>();
		}
		public UpdateElementContext updateElement(int i) {
			return GetRuleContext<UpdateElementContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUpdateList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUpdateList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateListContext updateList() {
		UpdateListContext _localctx = new UpdateListContext(Context, State);
		EnterRule(_localctx, 976, RULE_updateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7704; updateElement();
			State = 7709;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 7705; Match(COMMA_SYMBOL);
				State = 7706; updateElement();
				}
				}
				State = 7711;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateElementContext : ParserRuleContext {
		public ColumnRefContext columnRef() {
			return GetRuleContext<ColumnRefContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public UpdateElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUpdateElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUpdateElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateElementContext updateElement() {
		UpdateElementContext _localctx = new UpdateElementContext(Context, State);
		EnterRule(_localctx, 978, RULE_updateElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7712; columnRef();
			State = 7713; Match(EQUAL_OPERATOR);
			State = 7716;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1032,Context) ) {
			case 1:
				{
				State = 7714; expr(0);
				}
				break;
			case 2:
				{
				State = 7715; Match(DEFAULT_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetClauseContext : ParserRuleContext {
		public CharsetContext charset() {
			return GetRuleContext<CharsetContext>(0);
		}
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public CharsetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCharsetClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCharsetClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharsetClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharsetClauseContext charsetClause() {
		CharsetClauseContext _localctx = new CharsetClauseContext(Context, State);
		EnterRule(_localctx, 980, RULE_charsetClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7718; charset();
			State = 7719; charsetName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsClauseContext : ParserRuleContext {
		public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public FieldTermContext[] fieldTerm() {
			return GetRuleContexts<FieldTermContext>();
		}
		public FieldTermContext fieldTerm(int i) {
			return GetRuleContext<FieldTermContext>(i);
		}
		public FieldsClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFieldsClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFieldsClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldsClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsClauseContext fieldsClause() {
		FieldsClauseContext _localctx = new FieldsClauseContext(Context, State);
		EnterRule(_localctx, 982, RULE_fieldsClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7721; Match(COLUMNS_SYMBOL);
			State = 7723;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 7722; fieldTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7725;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1033,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldTermContext : ParserRuleContext {
		public ITerminalNode TERMINATED_SYMBOL() { return GetToken(MySQLParser.TERMINATED_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public ITerminalNode ENCLOSED_SYMBOL() { return GetToken(MySQLParser.ENCLOSED_SYMBOL, 0); }
		public ITerminalNode OPTIONALLY_SYMBOL() { return GetToken(MySQLParser.OPTIONALLY_SYMBOL, 0); }
		public ITerminalNode ESCAPED_SYMBOL() { return GetToken(MySQLParser.ESCAPED_SYMBOL, 0); }
		public FieldTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldTerm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFieldTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFieldTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldTermContext fieldTerm() {
		FieldTermContext _localctx = new FieldTermContext(Context, State);
		EnterRule(_localctx, 984, RULE_fieldTerm);
		int _la;
		try {
			State = 7739;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TERMINATED_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7727; Match(TERMINATED_SYMBOL);
				State = 7728; Match(BY_SYMBOL);
				State = 7729; textString();
				}
				break;
			case ENCLOSED_SYMBOL:
			case OPTIONALLY_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7731;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONALLY_SYMBOL) {
					{
					State = 7730; Match(OPTIONALLY_SYMBOL);
					}
				}

				State = 7733; Match(ENCLOSED_SYMBOL);
				State = 7734; Match(BY_SYMBOL);
				State = 7735; textString();
				}
				break;
			case ESCAPED_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7736; Match(ESCAPED_SYMBOL);
				State = 7737; Match(BY_SYMBOL);
				State = 7738; textString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinesClauseContext : ParserRuleContext {
		public ITerminalNode LINES_SYMBOL() { return GetToken(MySQLParser.LINES_SYMBOL, 0); }
		public LineTermContext[] lineTerm() {
			return GetRuleContexts<LineTermContext>();
		}
		public LineTermContext lineTerm(int i) {
			return GetRuleContext<LineTermContext>(i);
		}
		public LinesClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linesClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLinesClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLinesClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinesClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinesClauseContext linesClause() {
		LinesClauseContext _localctx = new LinesClauseContext(Context, State);
		EnterRule(_localctx, 986, RULE_linesClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7741; Match(LINES_SYMBOL);
			State = 7743;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 7742; lineTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7745;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1036,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineTermContext : ParserRuleContext {
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public ITerminalNode TERMINATED_SYMBOL() { return GetToken(MySQLParser.TERMINATED_SYMBOL, 0); }
		public ITerminalNode STARTING_SYMBOL() { return GetToken(MySQLParser.STARTING_SYMBOL, 0); }
		public LineTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineTerm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLineTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLineTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineTermContext lineTerm() {
		LineTermContext _localctx = new LineTermContext(Context, State);
		EnterRule(_localctx, 988, RULE_lineTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7747;
			_la = TokenStream.LA(1);
			if ( !(_la==STARTING_SYMBOL || _la==TERMINATED_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 7748; Match(BY_SYMBOL);
			State = 7749; textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserListContext : ParserRuleContext {
		public UserContext[] user() {
			return GetRuleContexts<UserContext>();
		}
		public UserContext user(int i) {
			return GetRuleContext<UserContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UserListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUserList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUserList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserListContext userList() {
		UserListContext _localctx = new UserListContext(Context, State);
		EnterRule(_localctx, 990, RULE_userList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7751; user();
			State = 7756;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1037,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 7752; Match(COMMA_SYMBOL);
					State = 7753; user();
					}
					} 
				}
				State = 7758;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1037,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserListContext : ParserRuleContext {
		public CreateUserEntryContext[] createUserEntry() {
			return GetRuleContexts<CreateUserEntryContext>();
		}
		public CreateUserEntryContext createUserEntry(int i) {
			return GetRuleContext<CreateUserEntryContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateUserListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUserList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateUserList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateUserList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUserList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserListContext createUserList() {
		CreateUserListContext _localctx = new CreateUserListContext(Context, State);
		EnterRule(_localctx, 992, RULE_createUserList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7759; createUserEntry();
			State = 7764;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1038,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 7760; Match(COMMA_SYMBOL);
					State = 7761; createUserEntry();
					}
					} 
				}
				State = 7766;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1038,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUserListContext : ParserRuleContext {
		public AlterUserEntryContext[] alterUserEntry() {
			return GetRuleContexts<AlterUserEntryContext>();
		}
		public AlterUserEntryContext alterUserEntry(int i) {
			return GetRuleContext<AlterUserEntryContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterUserListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUserList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterUserList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterUserList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterUserList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterUserListContext alterUserList() {
		AlterUserListContext _localctx = new AlterUserListContext(Context, State);
		EnterRule(_localctx, 994, RULE_alterUserList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7767; alterUserEntry();
			State = 7772;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1039,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 7768; Match(COMMA_SYMBOL);
					State = 7769; alterUserEntry();
					}
					} 
				}
				State = 7774;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1039,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserEntryContext : ParserRuleContext {
		public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public TextStringHashContext textStringHash() {
			return GetRuleContext<TextStringHashContext>(0);
		}
		public CreateUserEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUserEntry; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateUserEntry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateUserEntry(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUserEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserEntryContext createUserEntry() {
		CreateUserEntryContext _localctx = new CreateUserEntryContext(Context, State);
		EnterRule(_localctx, 996, RULE_createUserEntry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7775; user();
			State = 7797;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1044,Context) ) {
			case 1:
				{
				State = 7776; Match(IDENTIFIED_SYMBOL);
				State = 7795;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1043,Context) ) {
				case 1:
					{
					State = 7777; Match(BY_SYMBOL);
					State = 7780;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1040,Context) ) {
					case 1:
						{
						State = 7778;
						if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
						State = 7779; Match(PASSWORD_SYMBOL);
						}
						break;
					}
					State = 7782; textString();
					}
					break;
				case 2:
					{
					State = 7783;
					if (!(serverVersion >= 50600)) throw new FailedPredicateException(this, "serverVersion >= 50600");
					State = 7784; Match(WITH_SYMBOL);
					State = 7785; textOrIdentifier();
					State = 7793;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1042,Context) ) {
					case 1:
						{
						State = 7791;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,1041,Context) ) {
						case 1:
							{
							State = 7786; Match(AS_SYMBOL);
							State = 7787; textStringHash();
							}
							break;
						case 2:
							{
							State = 7788;
							if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
							State = 7789; Match(BY_SYMBOL);
							State = 7790; textString();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUserEntryContext : ParserRuleContext {
		public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext[] textString() {
			return GetRuleContexts<TextStringContext>();
		}
		public TextStringContext textString(int i) {
			return GetRuleContext<TextStringContext>(i);
		}
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public DiscardOldPasswordContext discardOldPassword() {
			return GetRuleContext<DiscardOldPasswordContext>(0);
		}
		public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public RetainCurrentPasswordContext retainCurrentPassword() {
			return GetRuleContext<RetainCurrentPasswordContext>(0);
		}
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public TextStringHashContext textStringHash() {
			return GetRuleContext<TextStringHashContext>(0);
		}
		public AlterUserEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUserEntry; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterUserEntry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterUserEntry(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterUserEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterUserEntryContext alterUserEntry() {
		AlterUserEntryContext _localctx = new AlterUserEntryContext(Context, State);
		EnterRule(_localctx, 998, RULE_alterUserEntry);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7799; user();
			State = 7828;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1052,Context) ) {
			case 1:
				{
				State = 7800; Match(IDENTIFIED_SYMBOL);
				State = 7823;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1050,Context) ) {
				case 1:
					{
					State = 7803;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WITH_SYMBOL) {
						{
						State = 7801; Match(WITH_SYMBOL);
						State = 7802; textOrIdentifier();
						}
					}

					State = 7805; Match(BY_SYMBOL);
					State = 7806; textString();
					State = 7809;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1046,Context) ) {
					case 1:
						{
						State = 7807; Match(REPLACE_SYMBOL);
						State = 7808; textString();
						}
						break;
					}
					State = 7812;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1047,Context) ) {
					case 1:
						{
						State = 7811; retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 7814; Match(WITH_SYMBOL);
					State = 7815; textOrIdentifier();
					State = 7821;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1049,Context) ) {
					case 1:
						{
						State = 7816; Match(AS_SYMBOL);
						State = 7817; textStringHash();
						State = 7819;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,1048,Context) ) {
						case 1:
							{
							State = 7818; retainCurrentPassword();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 7826;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1051,Context) ) {
				case 1:
					{
					State = 7825; discardOldPassword();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetainCurrentPasswordContext : ParserRuleContext {
		public ITerminalNode RETAIN_SYMBOL() { return GetToken(MySQLParser.RETAIN_SYMBOL, 0); }
		public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public RetainCurrentPasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retainCurrentPassword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRetainCurrentPassword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRetainCurrentPassword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetainCurrentPassword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetainCurrentPasswordContext retainCurrentPassword() {
		RetainCurrentPasswordContext _localctx = new RetainCurrentPasswordContext(Context, State);
		EnterRule(_localctx, 1000, RULE_retainCurrentPassword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7830; Match(RETAIN_SYMBOL);
			State = 7831; Match(CURRENT_SYMBOL);
			State = 7832; Match(PASSWORD_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiscardOldPasswordContext : ParserRuleContext {
		public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public ITerminalNode OLD_SYMBOL() { return GetToken(MySQLParser.OLD_SYMBOL, 0); }
		public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public DiscardOldPasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_discardOldPassword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDiscardOldPassword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDiscardOldPassword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiscardOldPassword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiscardOldPasswordContext discardOldPassword() {
		DiscardOldPasswordContext _localctx = new DiscardOldPasswordContext(Context, State);
		EnterRule(_localctx, 1002, RULE_discardOldPassword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7834; Match(DISCARD_SYMBOL);
			State = 7835; Match(OLD_SYMBOL);
			State = 7836; Match(PASSWORD_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplacePasswordContext : ParserRuleContext {
		public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public ReplacePasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replacePassword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReplacePassword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReplacePassword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplacePassword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplacePasswordContext replacePassword() {
		ReplacePasswordContext _localctx = new ReplacePasswordContext(Context, State);
		EnterRule(_localctx, 1004, RULE_replacePassword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7838; Match(REPLACE_SYMBOL);
			State = 7839; textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserContext : ParserRuleContext {
		public TextOrIdentifierContext[] textOrIdentifier() {
			return GetRuleContexts<TextOrIdentifierContext>();
		}
		public TextOrIdentifierContext textOrIdentifier(int i) {
			return GetRuleContext<TextOrIdentifierContext>(i);
		}
		public ITerminalNode AT_SIGN_SYMBOL() { return GetToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		public ITerminalNode AT_TEXT_SUFFIX() { return GetToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
		public ITerminalNode CURRENT_USER_SYMBOL() { return GetToken(MySQLParser.CURRENT_USER_SYMBOL, 0); }
		public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		public UserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_user; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUser(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUser(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserContext user() {
		UserContext _localctx = new UserContext(Context, State);
		EnterRule(_localctx, 1006, RULE_user);
		try {
			State = 7851;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1055,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7841; textOrIdentifier();
				State = 7845;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1053,Context) ) {
				case 1:
					{
					State = 7842; Match(AT_SIGN_SYMBOL);
					State = 7843; textOrIdentifier();
					}
					break;
				case 2:
					{
					State = 7844; Match(AT_TEXT_SUFFIX);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7847; Match(CURRENT_USER_SYMBOL);
				State = 7849;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1054,Context) ) {
				case 1:
					{
					State = 7848; parentheses();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LikeClauseContext : ParserRuleContext {
		public ITerminalNode LIKE_SYMBOL() { return GetToken(MySQLParser.LIKE_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public LikeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_likeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLikeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLikeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLikeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LikeClauseContext likeClause() {
		LikeClauseContext _localctx = new LikeClauseContext(Context, State);
		EnterRule(_localctx, 1008, RULE_likeClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7853; Match(LIKE_SYMBOL);
			State = 7854; textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LikeOrWhereContext : ParserRuleContext {
		public LikeClauseContext likeClause() {
			return GetRuleContext<LikeClauseContext>(0);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public LikeOrWhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_likeOrWhere; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLikeOrWhere(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLikeOrWhere(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLikeOrWhere(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LikeOrWhereContext likeOrWhere() {
		LikeOrWhereContext _localctx = new LikeOrWhereContext(Context, State);
		EnterRule(_localctx, 1010, RULE_likeOrWhere);
		try {
			State = 7858;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIKE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7856; likeClause();
				}
				break;
			case WHERE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7857; whereClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnlineOptionContext : ParserRuleContext {
		public ITerminalNode ONLINE_SYMBOL() { return GetToken(MySQLParser.ONLINE_SYMBOL, 0); }
		public ITerminalNode OFFLINE_SYMBOL() { return GetToken(MySQLParser.OFFLINE_SYMBOL, 0); }
		public OnlineOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onlineOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOnlineOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOnlineOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnlineOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnlineOptionContext onlineOption() {
		OnlineOptionContext _localctx = new OnlineOptionContext(Context, State);
		EnterRule(_localctx, 1012, RULE_onlineOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7860;
			if (!(serverVersion < 50600)) throw new FailedPredicateException(this, "serverVersion < 50600");
			State = 7861;
			_la = TokenStream.LA(1);
			if ( !(_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoWriteToBinLogContext : ParserRuleContext {
		public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public ITerminalNode NO_WRITE_TO_BINLOG_SYMBOL() { return GetToken(MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL, 0); }
		public NoWriteToBinLogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noWriteToBinLog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNoWriteToBinLog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNoWriteToBinLog(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoWriteToBinLog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoWriteToBinLogContext noWriteToBinLog() {
		NoWriteToBinLogContext _localctx = new NoWriteToBinLogContext(Context, State);
		EnterRule(_localctx, 1014, RULE_noWriteToBinLog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7863;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsePartitionContext : ParserRuleContext {
		public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return GetRuleContext<IdentifierListWithParenthesesContext>(0);
		}
		public UsePartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usePartition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUsePartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUsePartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsePartition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsePartitionContext usePartition() {
		UsePartitionContext _localctx = new UsePartitionContext(Context, State);
		EnterRule(_localctx, 1016, RULE_usePartition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7865;
			if (!(serverVersion >= 50602)) throw new FailedPredicateException(this, "serverVersion >= 50602");
			State = 7866; Match(PARTITION_SYMBOL);
			State = 7867; identifierListWithParentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldIdentifierContext : ParserRuleContext {
		public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public FieldIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFieldIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFieldIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldIdentifierContext fieldIdentifier() {
		FieldIdentifierContext _localctx = new FieldIdentifierContext(Context, State);
		EnterRule(_localctx, 1018, RULE_fieldIdentifier);
		try {
			State = 7874;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1058,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7869; dotIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7870; qualifiedIdentifier();
				State = 7872;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1057,Context) ) {
				case 1:
					{
					State = 7871; dotIdentifier();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FieldIdentifierContext fieldIdentifier() {
			return GetRuleContext<FieldIdentifierContext>(0);
		}
		public ColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumnName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumnName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnNameContext columnName() {
		ColumnNameContext _localctx = new ColumnNameContext(Context, State);
		EnterRule(_localctx, 1020, RULE_columnName);
		try {
			State = 7880;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1059,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7876;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 7877; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7878;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 7879; fieldIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnInternalRefContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ColumnInternalRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnInternalRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumnInternalRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumnInternalRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnInternalRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnInternalRefContext columnInternalRef() {
		ColumnInternalRefContext _localctx = new ColumnInternalRefContext(Context, State);
		EnterRule(_localctx, 1022, RULE_columnInternalRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7882; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnInternalRefListContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ColumnInternalRefContext[] columnInternalRef() {
			return GetRuleContexts<ColumnInternalRefContext>();
		}
		public ColumnInternalRefContext columnInternalRef(int i) {
			return GetRuleContext<ColumnInternalRefContext>(i);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ColumnInternalRefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnInternalRefList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumnInternalRefList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumnInternalRefList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnInternalRefList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnInternalRefListContext columnInternalRefList() {
		ColumnInternalRefListContext _localctx = new ColumnInternalRefListContext(Context, State);
		EnterRule(_localctx, 1024, RULE_columnInternalRefList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7884; Match(OPEN_PAR_SYMBOL);
			State = 7885; columnInternalRef();
			State = 7890;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 7886; Match(COMMA_SYMBOL);
				State = 7887; columnInternalRef();
				}
				}
				State = 7892;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7893; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnRefContext : ParserRuleContext {
		public FieldIdentifierContext fieldIdentifier() {
			return GetRuleContext<FieldIdentifierContext>(0);
		}
		public ColumnRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumnRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumnRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnRefContext columnRef() {
		ColumnRefContext _localctx = new ColumnRefContext(Context, State);
		EnterRule(_localctx, 1026, RULE_columnRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7895; fieldIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertIdentifierContext : ParserRuleContext {
		public ColumnRefContext columnRef() {
			return GetRuleContext<ColumnRefContext>(0);
		}
		public TableWildContext tableWild() {
			return GetRuleContext<TableWildContext>(0);
		}
		public InsertIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInsertIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInsertIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertIdentifierContext insertIdentifier() {
		InsertIdentifierContext _localctx = new InsertIdentifierContext(Context, State);
		EnterRule(_localctx, 1028, RULE_insertIdentifier);
		try {
			State = 7899;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1061,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7897; columnRef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7898; tableWild();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IndexNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexNameContext indexName() {
		IndexNameContext _localctx = new IndexNameContext(Context, State);
		EnterRule(_localctx, 1030, RULE_indexName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7901; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexRefContext : ParserRuleContext {
		public FieldIdentifierContext fieldIdentifier() {
			return GetRuleContext<FieldIdentifierContext>(0);
		}
		public IndexRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexRefContext indexRef() {
		IndexRefContext _localctx = new IndexRefContext(Context, State);
		EnterRule(_localctx, 1032, RULE_indexRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7903; fieldIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableWildContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT_SYMBOL() { return GetTokens(MySQLParser.DOT_SYMBOL); }
		public ITerminalNode DOT_SYMBOL(int i) {
			return GetToken(MySQLParser.DOT_SYMBOL, i);
		}
		public ITerminalNode MULT_OPERATOR() { return GetToken(MySQLParser.MULT_OPERATOR, 0); }
		public TableWildContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableWild; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableWild(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableWild(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableWild(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableWildContext tableWild() {
		TableWildContext _localctx = new TableWildContext(Context, State);
		EnterRule(_localctx, 1034, RULE_tableWild);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7905; identifier();
			State = 7906; Match(DOT_SYMBOL);
			State = 7910;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1062,Context) ) {
			case 1:
				{
				State = 7907; identifier();
				State = 7908; Match(DOT_SYMBOL);
				}
				break;
			}
			State = 7912; Match(MULT_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SchemaNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSchemaName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSchemaName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchemaName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaNameContext schemaName() {
		SchemaNameContext _localctx = new SchemaNameContext(Context, State);
		EnterRule(_localctx, 1036, RULE_schemaName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7914; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaRefContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SchemaRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSchemaRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSchemaRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchemaRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaRefContext schemaRef() {
		SchemaRefContext _localctx = new SchemaRefContext(Context, State);
		EnterRule(_localctx, 1038, RULE_schemaRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7916; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureNameContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public ProcedureNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterProcedureName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitProcedureName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureNameContext procedureName() {
		ProcedureNameContext _localctx = new ProcedureNameContext(Context, State);
		EnterRule(_localctx, 1040, RULE_procedureName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7918; qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureRefContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public ProcedureRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterProcedureRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitProcedureRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureRefContext procedureRef() {
		ProcedureRefContext _localctx = new ProcedureRefContext(Context, State);
		EnterRule(_localctx, 1042, RULE_procedureRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7920; qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 1044, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7922; qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionRefContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public FunctionRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFunctionRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFunctionRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionRefContext functionRef() {
		FunctionRefContext _localctx = new FunctionRefContext(Context, State);
		EnterRule(_localctx, 1046, RULE_functionRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7924; qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerNameContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public TriggerNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriggerName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriggerNameContext triggerName() {
		TriggerNameContext _localctx = new TriggerNameContext(Context, State);
		EnterRule(_localctx, 1048, RULE_triggerName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7926; qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerRefContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public TriggerRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriggerRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriggerRefContext triggerRef() {
		TriggerRefContext _localctx = new TriggerRefContext(Context, State);
		EnterRule(_localctx, 1050, RULE_triggerRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7928; qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewNameContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public ViewNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewNameContext viewName() {
		ViewNameContext _localctx = new ViewNameContext(Context, State);
		EnterRule(_localctx, 1052, RULE_viewName);
		try {
			State = 7932;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1063,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7930; qualifiedIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7931; dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewRefContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public ViewRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewRefContext viewRef() {
		ViewRefContext _localctx = new ViewRefContext(Context, State);
		EnterRule(_localctx, 1054, RULE_viewRef);
		try {
			State = 7936;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1064,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7934; qualifiedIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7935; dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TablespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTablespaceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTablespaceName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceNameContext tablespaceName() {
		TablespaceNameContext _localctx = new TablespaceNameContext(Context, State);
		EnterRule(_localctx, 1056, RULE_tablespaceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7938; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceRefContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TablespaceRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTablespaceRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTablespaceRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespaceRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceRefContext tablespaceRef() {
		TablespaceRefContext _localctx = new TablespaceRefContext(Context, State);
		EnterRule(_localctx, 1058, RULE_tablespaceRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7940; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogfileGroupNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LogfileGroupNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logfileGroupName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLogfileGroupName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLogfileGroupName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogfileGroupName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogfileGroupNameContext logfileGroupName() {
		LogfileGroupNameContext _localctx = new LogfileGroupNameContext(Context, State);
		EnterRule(_localctx, 1060, RULE_logfileGroupName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7942; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogfileGroupRefContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LogfileGroupRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logfileGroupRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLogfileGroupRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLogfileGroupRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogfileGroupRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogfileGroupRefContext logfileGroupRef() {
		LogfileGroupRefContext _localctx = new LogfileGroupRefContext(Context, State);
		EnterRule(_localctx, 1062, RULE_logfileGroupRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7944; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventNameContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public EventNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterEventName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitEventName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventNameContext eventName() {
		EventNameContext _localctx = new EventNameContext(Context, State);
		EnterRule(_localctx, 1064, RULE_eventName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7946; qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventRefContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public EventRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterEventRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitEventRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventRefContext eventRef() {
		EventRefContext _localctx = new EventRefContext(Context, State);
		EnterRule(_localctx, 1066, RULE_eventRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7948; qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdfNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UdfNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udfName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUdfName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUdfName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdfName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UdfNameContext udfName() {
		UdfNameContext _localctx = new UdfNameContext(Context, State);
		EnterRule(_localctx, 1068, RULE_udfName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7950; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerNameContext : ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ServerNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterServerName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitServerName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServerName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServerNameContext serverName() {
		ServerNameContext _localctx = new ServerNameContext(Context, State);
		EnterRule(_localctx, 1070, RULE_serverName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7952; textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerRefContext : ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ServerRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterServerRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitServerRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServerRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServerRefContext serverRef() {
		ServerRefContext _localctx = new ServerRefContext(Context, State);
		EnterRule(_localctx, 1072, RULE_serverRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7954; textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EngineRefContext : ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public EngineRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_engineRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterEngineRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitEngineRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEngineRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EngineRefContext engineRef() {
		EngineRefContext _localctx = new EngineRefContext(Context, State);
		EnterRule(_localctx, 1074, RULE_engineRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7956; textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableNameContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableNameContext tableName() {
		TableNameContext _localctx = new TableNameContext(Context, State);
		EnterRule(_localctx, 1076, RULE_tableName);
		try {
			State = 7960;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1065,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7958; qualifiedIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7959; dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterTableRefContext : ParserRuleContext {
		public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public FilterTableRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterTableRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFilterTableRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFilterTableRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterTableRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterTableRefContext filterTableRef() {
		FilterTableRefContext _localctx = new FilterTableRefContext(Context, State);
		EnterRule(_localctx, 1078, RULE_filterTableRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7962; schemaRef();
			State = 7963; dotIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRefWithWildcardContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode DOT_SYMBOL() { return GetToken(MySQLParser.DOT_SYMBOL, 0); }
		public ITerminalNode MULT_OPERATOR() { return GetToken(MySQLParser.MULT_OPERATOR, 0); }
		public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public TableRefWithWildcardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRefWithWildcard; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableRefWithWildcard(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableRefWithWildcard(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableRefWithWildcard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableRefWithWildcardContext tableRefWithWildcard() {
		TableRefWithWildcardContext _localctx = new TableRefWithWildcardContext(Context, State);
		EnterRule(_localctx, 1080, RULE_tableRefWithWildcard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7965; identifier();
			State = 7973;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1067,Context) ) {
			case 1:
				{
				State = 7966; Match(DOT_SYMBOL);
				State = 7967; Match(MULT_OPERATOR);
				}
				break;
			case 2:
				{
				State = 7968; dotIdentifier();
				State = 7971;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1066,Context) ) {
				case 1:
					{
					State = 7969; Match(DOT_SYMBOL);
					State = 7970; Match(MULT_OPERATOR);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRefContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public TableRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableRefContext tableRef() {
		TableRefContext _localctx = new TableRefContext(Context, State);
		EnterRule(_localctx, 1082, RULE_tableRef);
		try {
			State = 7977;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1068,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7975; qualifiedIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7976; dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRefListContext : ParserRuleContext {
		public TableRefContext[] tableRef() {
			return GetRuleContexts<TableRefContext>();
		}
		public TableRefContext tableRef(int i) {
			return GetRuleContext<TableRefContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableRefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRefList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableRefList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableRefList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableRefList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableRefListContext tableRefList() {
		TableRefListContext _localctx = new TableRefListContext(Context, State);
		EnterRule(_localctx, 1084, RULE_tableRefList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7979; tableRef();
			State = 7984;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1069,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 7980; Match(COMMA_SYMBOL);
					State = 7981; tableRef();
					}
					} 
				}
				State = 7986;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1069,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableAliasRefListContext : ParserRuleContext {
		public TableRefWithWildcardContext[] tableRefWithWildcard() {
			return GetRuleContexts<TableRefWithWildcardContext>();
		}
		public TableRefWithWildcardContext tableRefWithWildcard(int i) {
			return GetRuleContext<TableRefWithWildcardContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableAliasRefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableAliasRefList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableAliasRefList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableAliasRefList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableAliasRefList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableAliasRefListContext tableAliasRefList() {
		TableAliasRefListContext _localctx = new TableAliasRefListContext(Context, State);
		EnterRule(_localctx, 1086, RULE_tableAliasRefList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7987; tableRefWithWildcard();
			State = 7992;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1070,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 7988; Match(COMMA_SYMBOL);
					State = 7989; tableRefWithWildcard();
					}
					} 
				}
				State = 7994;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1070,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterParameterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitParameterName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterNameContext parameterName() {
		ParameterNameContext _localctx = new ParameterNameContext(Context, State);
		EnterRule(_localctx, 1088, RULE_parameterName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7995; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelIdentifierContext : ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		public LabelKeywordContext labelKeyword() {
			return GetRuleContext<LabelKeywordContext>(0);
		}
		public LabelIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLabelIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLabelIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelIdentifierContext labelIdentifier() {
		LabelIdentifierContext _localctx = new LabelIdentifierContext(Context, State);
		EnterRule(_localctx, 1090, RULE_labelIdentifier);
		try {
			State = 7999;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1071,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7997; pureIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7998; labelKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelRefContext : ParserRuleContext {
		public LabelIdentifierContext labelIdentifier() {
			return GetRuleContext<LabelIdentifierContext>(0);
		}
		public LabelRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLabelRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLabelRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelRefContext labelRef() {
		LabelRefContext _localctx = new LabelRefContext(Context, State);
		EnterRule(_localctx, 1092, RULE_labelRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8001; labelIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleIdentifierContext : ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		public RoleKeywordContext roleKeyword() {
			return GetRuleContext<RoleKeywordContext>(0);
		}
		public RoleIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleIdentifierContext roleIdentifier() {
		RoleIdentifierContext _localctx = new RoleIdentifierContext(Context, State);
		EnterRule(_localctx, 1094, RULE_roleIdentifier);
		try {
			State = 8005;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1072,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8003; pureIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8004; roleKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleRefContext : ParserRuleContext {
		public RoleIdentifierContext roleIdentifier() {
			return GetRuleContext<RoleIdentifierContext>(0);
		}
		public RoleRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleRefContext roleRef() {
		RoleRefContext _localctx = new RoleRefContext(Context, State);
		EnterRule(_localctx, 1096, RULE_roleRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8007; roleIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PluginRefContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PluginRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pluginRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPluginRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPluginRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPluginRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PluginRefContext pluginRef() {
		PluginRefContext _localctx = new PluginRefContext(Context, State);
		EnterRule(_localctx, 1098, RULE_pluginRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8009; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentRefContext : ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ComponentRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterComponentRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitComponentRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentRefContext componentRef() {
		ComponentRefContext _localctx = new ComponentRefContext(Context, State);
		EnterRule(_localctx, 1100, RULE_componentRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8011; textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceGroupRefContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ResourceGroupRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceGroupRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterResourceGroupRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitResourceGroupRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceGroupRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceGroupRefContext resourceGroupRef() {
		ResourceGroupRefContext _localctx = new ResourceGroupRefContext(Context, State);
		EnterRule(_localctx, 1102, RULE_resourceGroupRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8013; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowNameContext windowName() {
		WindowNameContext _localctx = new WindowNameContext(Context, State);
		EnterRule(_localctx, 1104, RULE_windowName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8015; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PureIdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(MySQLParser.IDENTIFIER, 0); }
		public ITerminalNode BACK_TICK_QUOTED_ID() { return GetToken(MySQLParser.BACK_TICK_QUOTED_ID, 0); }
		public ITerminalNode DOUBLE_QUOTED_TEXT() { return GetToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0); }
		public PureIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pureIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPureIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPureIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPureIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PureIdentifierContext pureIdentifier() {
		PureIdentifierContext _localctx = new PureIdentifierContext(Context, State);
		EnterRule(_localctx, 1106, RULE_pureIdentifier);
		int _la;
		try {
			State = 8020;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1073,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8017;
				_la = TokenStream.LA(1);
				if ( !(_la==IDENTIFIER || _la==BACK_TICK_QUOTED_ID) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8018;
				if (!(isSqlModeActive(SqlMode.AnsiQuotes))) throw new FailedPredicateException(this, "isSqlModeActive(SqlMode.AnsiQuotes)");
				State = 8019; Match(DOUBLE_QUOTED_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		public IdentifierKeywordContext identifierKeyword() {
			return GetRuleContext<IdentifierKeywordContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 1108, RULE_identifier);
		try {
			State = 8024;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1074,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8022; pureIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8023; identifierKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 1110, RULE_identifierList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8026; identifier();
			State = 8031;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1075,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8027; Match(COMMA_SYMBOL);
					State = 8028; identifier();
					}
					} 
				}
				State = 8033;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1075,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListWithParenthesesContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierListWithParentheses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifierListWithParentheses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifierListWithParentheses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierListWithParentheses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListWithParenthesesContext identifierListWithParentheses() {
		IdentifierListWithParenthesesContext _localctx = new IdentifierListWithParenthesesContext(Context, State);
		EnterRule(_localctx, 1112, RULE_identifierListWithParentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8034; Match(OPEN_PAR_SYMBOL);
			State = 8035; identifierList();
			State = 8036; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentifierContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQualifiedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQualifiedIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentifierContext qualifiedIdentifier() {
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(Context, State);
		EnterRule(_localctx, 1114, RULE_qualifiedIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8038; identifier();
			State = 8040;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1076,Context) ) {
			case 1:
				{
				State = 8039; dotIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleIdentifierContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DotIdentifierContext[] dotIdentifier() {
			return GetRuleContexts<DotIdentifierContext>();
		}
		public DotIdentifierContext dotIdentifier(int i) {
			return GetRuleContext<DotIdentifierContext>(i);
		}
		public SimpleIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleIdentifierContext simpleIdentifier() {
		SimpleIdentifierContext _localctx = new SimpleIdentifierContext(Context, State);
		EnterRule(_localctx, 1116, RULE_simpleIdentifier);
		int _la;
		try {
			State = 8053;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1079,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8042; identifier();
				State = 8047;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					State = 8043; dotIdentifier();
					State = 8045;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT_SYMBOL) {
						{
						State = 8044; dotIdentifier();
						}
					}

					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8049;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 8050; dotIdentifier();
				State = 8051; dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotIdentifierContext : ParserRuleContext {
		public ITerminalNode DOT_SYMBOL() { return GetToken(MySQLParser.DOT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DotIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDotIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDotIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DotIdentifierContext dotIdentifier() {
		DotIdentifierContext _localctx = new DotIdentifierContext(Context, State);
		EnterRule(_localctx, 1118, RULE_dotIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8055; Match(DOT_SYMBOL);
			State = 8056; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ulong_numberContext : ParserRuleContext {
		public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public ITerminalNode HEX_NUMBER() { return GetToken(MySQLParser.HEX_NUMBER, 0); }
		public ITerminalNode LONG_NUMBER() { return GetToken(MySQLParser.LONG_NUMBER, 0); }
		public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public ITerminalNode DECIMAL_NUMBER() { return GetToken(MySQLParser.DECIMAL_NUMBER, 0); }
		public ITerminalNode FLOAT_NUMBER() { return GetToken(MySQLParser.FLOAT_NUMBER, 0); }
		public Ulong_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ulong_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUlong_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUlong_number(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUlong_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ulong_numberContext ulong_number() {
		Ulong_numberContext _localctx = new Ulong_numberContext(Context, State);
		EnterRule(_localctx, 1120, RULE_ulong_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8058;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (HEX_NUMBER - 380)) | (1L << (DECIMAL_NUMBER - 380)) | (1L << (FLOAT_NUMBER - 380)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Real_ulong_numberContext : ParserRuleContext {
		public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public ITerminalNode HEX_NUMBER() { return GetToken(MySQLParser.HEX_NUMBER, 0); }
		public ITerminalNode LONG_NUMBER() { return GetToken(MySQLParser.LONG_NUMBER, 0); }
		public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public Real_ulong_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real_ulong_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReal_ulong_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReal_ulong_number(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReal_ulong_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Real_ulong_numberContext real_ulong_number() {
		Real_ulong_numberContext _localctx = new Real_ulong_numberContext(Context, State);
		EnterRule(_localctx, 1122, RULE_real_ulong_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8060;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (HEX_NUMBER - 380)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ulonglong_numberContext : ParserRuleContext {
		public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public ITerminalNode LONG_NUMBER() { return GetToken(MySQLParser.LONG_NUMBER, 0); }
		public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public ITerminalNode DECIMAL_NUMBER() { return GetToken(MySQLParser.DECIMAL_NUMBER, 0); }
		public ITerminalNode FLOAT_NUMBER() { return GetToken(MySQLParser.FLOAT_NUMBER, 0); }
		public Ulonglong_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ulonglong_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUlonglong_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUlonglong_number(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUlonglong_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ulonglong_numberContext ulonglong_number() {
		Ulonglong_numberContext _localctx = new Ulonglong_numberContext(Context, State);
		EnterRule(_localctx, 1124, RULE_ulonglong_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8062;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (DECIMAL_NUMBER - 380)) | (1L << (FLOAT_NUMBER - 380)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Real_ulonglong_numberContext : ParserRuleContext {
		public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public ITerminalNode HEX_NUMBER() { return GetToken(MySQLParser.HEX_NUMBER, 0); }
		public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public ITerminalNode LONG_NUMBER() { return GetToken(MySQLParser.LONG_NUMBER, 0); }
		public Real_ulonglong_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real_ulonglong_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReal_ulonglong_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReal_ulonglong_number(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReal_ulonglong_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Real_ulonglong_numberContext real_ulonglong_number() {
		Real_ulonglong_numberContext _localctx = new Real_ulonglong_numberContext(Context, State);
		EnterRule(_localctx, 1126, RULE_real_ulonglong_number);
		try {
			State = 8069;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1080,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8064; Match(INT_NUMBER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8065;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 8066; Match(HEX_NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8067; Match(ULONGLONG_NUMBER);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8068; Match(LONG_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public NumLiteralContext numLiteral() {
			return GetRuleContext<NumLiteralContext>(0);
		}
		public TemporalLiteralContext temporalLiteral() {
			return GetRuleContext<TemporalLiteralContext>(0);
		}
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BoolLiteralContext boolLiteral() {
			return GetRuleContext<BoolLiteralContext>(0);
		}
		public ITerminalNode HEX_NUMBER() { return GetToken(MySQLParser.HEX_NUMBER, 0); }
		public ITerminalNode BIN_NUMBER() { return GetToken(MySQLParser.BIN_NUMBER, 0); }
		public ITerminalNode UNDERSCORE_CHARSET() { return GetToken(MySQLParser.UNDERSCORE_CHARSET, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 1128, RULE_literal);
		int _la;
		try {
			State = 8080;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1082,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8071; textLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8072; numLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8073; temporalLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8074; nullLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8075; boolLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8077;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNDERSCORE_CHARSET) {
					{
					State = 8076; Match(UNDERSCORE_CHARSET);
					}
				}

				State = 8079;
				_la = TokenStream.LA(1);
				if ( !(_la==HEX_NUMBER || _la==BIN_NUMBER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedLiteralContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode PLUS_OPERATOR() { return GetToken(MySQLParser.PLUS_OPERATOR, 0); }
		public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public ITerminalNode MINUS_OPERATOR() { return GetToken(MySQLParser.MINUS_OPERATOR, 0); }
		public SignedLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSignedLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSignedLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedLiteralContext signedLiteral() {
		SignedLiteralContext _localctx = new SignedLiteralContext(Context, State);
		EnterRule(_localctx, 1130, RULE_signedLiteral);
		try {
			State = 8087;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1083,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8082; literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8083; Match(PLUS_OPERATOR);
				State = 8084; ulong_number();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8085; Match(MINUS_OPERATOR);
				State = 8086; ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringListContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TextStringContext[] textString() {
			return GetRuleContexts<TextStringContext>();
		}
		public TextStringContext textString(int i) {
			return GetRuleContext<TextStringContext>(i);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public StringListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterStringList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitStringList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringListContext stringList() {
		StringListContext _localctx = new StringListContext(Context, State);
		EnterRule(_localctx, 1132, RULE_stringList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8089; Match(OPEN_PAR_SYMBOL);
			State = 8090; textString();
			State = 8095;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 8091; Match(COMMA_SYMBOL);
				State = 8092; textString();
				}
				}
				State = 8097;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 8098; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextStringLiteralContext : ParserRuleContext {
		public IToken value;
		public ITerminalNode SINGLE_QUOTED_TEXT() { return GetToken(MySQLParser.SINGLE_QUOTED_TEXT, 0); }
		public ITerminalNode DOUBLE_QUOTED_TEXT() { return GetToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0); }
		public TextStringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textStringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTextStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTextStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextStringLiteralContext textStringLiteral() {
		TextStringLiteralContext _localctx = new TextStringLiteralContext(Context, State);
		EnterRule(_localctx, 1134, RULE_textStringLiteral);
		try {
			State = 8103;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1085,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8100; _localctx.value = Match(SINGLE_QUOTED_TEXT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8101;
				if (!(!isSqlModeActive(SqlMode.AnsiQuotes))) throw new FailedPredicateException(this, "!isSqlModeActive(SqlMode.AnsiQuotes)");
				State = 8102; _localctx.value = Match(DOUBLE_QUOTED_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextStringContext : ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ITerminalNode HEX_NUMBER() { return GetToken(MySQLParser.HEX_NUMBER, 0); }
		public ITerminalNode BIN_NUMBER() { return GetToken(MySQLParser.BIN_NUMBER, 0); }
		public TextStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textString; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTextString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTextString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextStringContext textString() {
		TextStringContext _localctx = new TextStringContext(Context, State);
		EnterRule(_localctx, 1136, RULE_textString);
		try {
			State = 8108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1086,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8105; textStringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8106; Match(HEX_NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8107; Match(BIN_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextStringHashContext : ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ITerminalNode HEX_NUMBER() { return GetToken(MySQLParser.HEX_NUMBER, 0); }
		public TextStringHashContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textStringHash; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTextStringHash(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTextStringHash(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextStringHash(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextStringHashContext textStringHash() {
		TextStringHashContext _localctx = new TextStringHashContext(Context, State);
		EnterRule(_localctx, 1138, RULE_textStringHash);
		try {
			State = 8113;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1087,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8110; textStringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8111;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 8112; Match(HEX_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextLiteralContext : ParserRuleContext {
		public TextStringLiteralContext[] textStringLiteral() {
			return GetRuleContexts<TextStringLiteralContext>();
		}
		public TextStringLiteralContext textStringLiteral(int i) {
			return GetRuleContext<TextStringLiteralContext>(i);
		}
		public ITerminalNode NCHAR_TEXT() { return GetToken(MySQLParser.NCHAR_TEXT, 0); }
		public ITerminalNode UNDERSCORE_CHARSET() { return GetToken(MySQLParser.UNDERSCORE_CHARSET, 0); }
		public TextLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTextLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextLiteralContext textLiteral() {
		TextLiteralContext _localctx = new TextLiteralContext(Context, State);
		EnterRule(_localctx, 1140, RULE_textLiteral);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8120;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1089,Context) ) {
			case 1:
				{
				State = 8116;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1088,Context) ) {
				case 1:
					{
					State = 8115; Match(UNDERSCORE_CHARSET);
					}
					break;
				}
				State = 8118; textStringLiteral();
				}
				break;
			case 2:
				{
				State = 8119; Match(NCHAR_TEXT);
				}
				break;
			}
			State = 8125;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1090,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8122; textStringLiteral();
					}
					} 
				}
				State = 8127;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1090,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextStringNoLinebreakContext : ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public TextStringNoLinebreakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textStringNoLinebreak; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTextStringNoLinebreak(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTextStringNoLinebreak(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextStringNoLinebreak(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextStringNoLinebreakContext textStringNoLinebreak() {
		TextStringNoLinebreakContext _localctx = new TextStringNoLinebreakContext(Context, State);
		EnterRule(_localctx, 1142, RULE_textStringNoLinebreak);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8128; textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextStringLiteralListContext : ParserRuleContext {
		public TextStringLiteralContext[] textStringLiteral() {
			return GetRuleContexts<TextStringLiteralContext>();
		}
		public TextStringLiteralContext textStringLiteral(int i) {
			return GetRuleContext<TextStringLiteralContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TextStringLiteralListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textStringLiteralList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTextStringLiteralList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTextStringLiteralList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextStringLiteralList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextStringLiteralListContext textStringLiteralList() {
		TextStringLiteralListContext _localctx = new TextStringLiteralListContext(Context, State);
		EnterRule(_localctx, 1144, RULE_textStringLiteralList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8130; textStringLiteral();
			State = 8135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 8131; Match(COMMA_SYMBOL);
				State = 8132; textStringLiteral();
				}
				}
				State = 8137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumLiteralContext : ParserRuleContext {
		public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public ITerminalNode LONG_NUMBER() { return GetToken(MySQLParser.LONG_NUMBER, 0); }
		public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public ITerminalNode DECIMAL_NUMBER() { return GetToken(MySQLParser.DECIMAL_NUMBER, 0); }
		public ITerminalNode FLOAT_NUMBER() { return GetToken(MySQLParser.FLOAT_NUMBER, 0); }
		public NumLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNumLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNumLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumLiteralContext numLiteral() {
		NumLiteralContext _localctx = new NumLiteralContext(Context, State);
		EnterRule(_localctx, 1146, RULE_numLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8138;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (DECIMAL_NUMBER - 380)) | (1L << (FLOAT_NUMBER - 380)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolLiteralContext : ParserRuleContext {
		public ITerminalNode TRUE_SYMBOL() { return GetToken(MySQLParser.TRUE_SYMBOL, 0); }
		public ITerminalNode FALSE_SYMBOL() { return GetToken(MySQLParser.FALSE_SYMBOL, 0); }
		public BoolLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterBoolLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitBoolLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolLiteralContext boolLiteral() {
		BoolLiteralContext _localctx = new BoolLiteralContext(Context, State);
		EnterRule(_localctx, 1148, RULE_boolLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8140;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE_SYMBOL || _la==TRUE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		public ITerminalNode NULL_SYMBOL() { return GetToken(MySQLParser.NULL_SYMBOL, 0); }
		public ITerminalNode NULL2_SYMBOL() { return GetToken(MySQLParser.NULL2_SYMBOL, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 1150, RULE_nullLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8142;
			_la = TokenStream.LA(1);
			if ( !(_la==NULL2_SYMBOL || _la==NULL_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemporalLiteralContext : ParserRuleContext {
		public ITerminalNode DATE_SYMBOL() { return GetToken(MySQLParser.DATE_SYMBOL, 0); }
		public ITerminalNode SINGLE_QUOTED_TEXT() { return GetToken(MySQLParser.SINGLE_QUOTED_TEXT, 0); }
		public ITerminalNode TIME_SYMBOL() { return GetToken(MySQLParser.TIME_SYMBOL, 0); }
		public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TemporalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_temporalLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTemporalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTemporalLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemporalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemporalLiteralContext temporalLiteral() {
		TemporalLiteralContext _localctx = new TemporalLiteralContext(Context, State);
		EnterRule(_localctx, 1152, RULE_temporalLiteral);
		try {
			State = 8150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8144; Match(DATE_SYMBOL);
				State = 8145; Match(SINGLE_QUOTED_TEXT);
				}
				break;
			case TIME_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8146; Match(TIME_SYMBOL);
				State = 8147; Match(SINGLE_QUOTED_TEXT);
				}
				break;
			case TIMESTAMP_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8148; Match(TIMESTAMP_SYMBOL);
				State = 8149; Match(SINGLE_QUOTED_TEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatOptionsContext : ParserRuleContext {
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public PrecisionContext precision() {
			return GetRuleContext<PrecisionContext>(0);
		}
		public FloatOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFloatOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFloatOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatOptionsContext floatOptions() {
		FloatOptionsContext _localctx = new FloatOptionsContext(Context, State);
		EnterRule(_localctx, 1154, RULE_floatOptions);
		try {
			State = 8154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1093,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8152; fieldLength();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8153; precision();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandardFloatOptionsContext : ParserRuleContext {
		public PrecisionContext precision() {
			return GetRuleContext<PrecisionContext>(0);
		}
		public StandardFloatOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standardFloatOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterStandardFloatOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitStandardFloatOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFloatOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandardFloatOptionsContext standardFloatOptions() {
		StandardFloatOptionsContext _localctx = new StandardFloatOptionsContext(Context, State);
		EnterRule(_localctx, 1156, RULE_standardFloatOptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8156; precision();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecisionContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode[] INT_NUMBER() { return GetTokens(MySQLParser.INT_NUMBER); }
		public ITerminalNode INT_NUMBER(int i) {
			return GetToken(MySQLParser.INT_NUMBER, i);
		}
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PrecisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precision; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPrecision(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPrecision(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecision(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecisionContext precision() {
		PrecisionContext _localctx = new PrecisionContext(Context, State);
		EnterRule(_localctx, 1158, RULE_precision);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8158; Match(OPEN_PAR_SYMBOL);
			State = 8159; Match(INT_NUMBER);
			State = 8160; Match(COMMA_SYMBOL);
			State = 8161; Match(INT_NUMBER);
			State = 8162; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextOrIdentifierContext : ParserRuleContext {
		public ITerminalNode SINGLE_QUOTED_TEXT() { return GetToken(MySQLParser.SINGLE_QUOTED_TEXT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TextOrIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textOrIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTextOrIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTextOrIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextOrIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextOrIdentifierContext textOrIdentifier() {
		TextOrIdentifierContext _localctx = new TextOrIdentifierContext(Context, State);
		EnterRule(_localctx, 1160, RULE_textOrIdentifier);
		try {
			State = 8166;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1094,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8164; Match(SINGLE_QUOTED_TEXT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8165; identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LValueIdentifierContext : ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		public LValueKeywordContext lValueKeyword() {
			return GetRuleContext<LValueKeywordContext>(0);
		}
		public LValueIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lValueIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLValueIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLValueIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLValueIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LValueIdentifierContext lValueIdentifier() {
		LValueIdentifierContext _localctx = new LValueIdentifierContext(Context, State);
		EnterRule(_localctx, 1162, RULE_lValueIdentifier);
		try {
			State = 8170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1095,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8168; pureIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8169; lValueKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleIdentifierOrTextContext : ParserRuleContext {
		public RoleIdentifierContext roleIdentifier() {
			return GetRuleContext<RoleIdentifierContext>(0);
		}
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public RoleIdentifierOrTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleIdentifierOrText; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleIdentifierOrText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleIdentifierOrText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleIdentifierOrText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleIdentifierOrTextContext roleIdentifierOrText() {
		RoleIdentifierOrTextContext _localctx = new RoleIdentifierOrTextContext(Context, State);
		EnterRule(_localctx, 1164, RULE_roleIdentifierOrText);
		try {
			State = 8174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1096,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8172; roleIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8173; textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeNumberContext : ParserRuleContext {
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		public SizeNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSizeNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSizeNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SizeNumberContext sizeNumber() {
		SizeNumberContext _localctx = new SizeNumberContext(Context, State);
		EnterRule(_localctx, 1166, RULE_sizeNumber);
		try {
			State = 8178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1097,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8176; real_ulonglong_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8177; pureIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesesContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parentheses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterParentheses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitParentheses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentheses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesesContext parentheses() {
		ParenthesesContext _localctx = new ParenthesesContext(Context, State);
		EnterRule(_localctx, 1168, RULE_parentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8180; Match(OPEN_PAR_SYMBOL);
			State = 8181; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualContext : ParserRuleContext {
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public ITerminalNode ASSIGN_OPERATOR() { return GetToken(MySQLParser.ASSIGN_OPERATOR, 0); }
		public EqualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitEqual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqual(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualContext equal() {
		EqualContext _localctx = new EqualContext(Context, State);
		EnterRule(_localctx, 1170, RULE_equal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8183;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionTypeContext : ParserRuleContext {
		public ITerminalNode PERSIST_SYMBOL() { return GetToken(MySQLParser.PERSIST_SYMBOL, 0); }
		public ITerminalNode PERSIST_ONLY_SYMBOL() { return GetToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0); }
		public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public ITerminalNode SESSION_SYMBOL() { return GetToken(MySQLParser.SESSION_SYMBOL, 0); }
		public OptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOptionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOptionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionTypeContext optionType() {
		OptionTypeContext _localctx = new OptionTypeContext(Context, State);
		EnterRule(_localctx, 1172, RULE_optionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8185;
			_la = TokenStream.LA(1);
			if ( !(_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarIdentTypeContext : ParserRuleContext {
		public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public ITerminalNode DOT_SYMBOL() { return GetToken(MySQLParser.DOT_SYMBOL, 0); }
		public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public ITerminalNode SESSION_SYMBOL() { return GetToken(MySQLParser.SESSION_SYMBOL, 0); }
		public VarIdentTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varIdentType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterVarIdentType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitVarIdentType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarIdentType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarIdentTypeContext varIdentType() {
		VarIdentTypeContext _localctx = new VarIdentTypeContext(Context, State);
		EnterRule(_localctx, 1174, RULE_varIdentType);
		try {
			State = 8193;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GLOBAL_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8187; Match(GLOBAL_SYMBOL);
				State = 8188; Match(DOT_SYMBOL);
				}
				break;
			case LOCAL_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8189; Match(LOCAL_SYMBOL);
				State = 8190; Match(DOT_SYMBOL);
				}
				break;
			case SESSION_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8191; Match(SESSION_SYMBOL);
				State = 8192; Match(DOT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetVarIdentTypeContext : ParserRuleContext {
		public ITerminalNode PERSIST_SYMBOL() { return GetToken(MySQLParser.PERSIST_SYMBOL, 0); }
		public ITerminalNode DOT_SYMBOL() { return GetToken(MySQLParser.DOT_SYMBOL, 0); }
		public ITerminalNode PERSIST_ONLY_SYMBOL() { return GetToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0); }
		public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public ITerminalNode SESSION_SYMBOL() { return GetToken(MySQLParser.SESSION_SYMBOL, 0); }
		public SetVarIdentTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setVarIdentType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSetVarIdentType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSetVarIdentType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetVarIdentType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetVarIdentTypeContext setVarIdentType() {
		SetVarIdentTypeContext _localctx = new SetVarIdentTypeContext(Context, State);
		EnterRule(_localctx, 1176, RULE_setVarIdentType);
		try {
			State = 8205;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PERSIST_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8195; Match(PERSIST_SYMBOL);
				State = 8196; Match(DOT_SYMBOL);
				}
				break;
			case PERSIST_ONLY_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8197; Match(PERSIST_ONLY_SYMBOL);
				State = 8198; Match(DOT_SYMBOL);
				}
				break;
			case GLOBAL_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8199; Match(GLOBAL_SYMBOL);
				State = 8200; Match(DOT_SYMBOL);
				}
				break;
			case LOCAL_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8201; Match(LOCAL_SYMBOL);
				State = 8202; Match(DOT_SYMBOL);
				}
				break;
			case SESSION_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8203; Match(SESSION_SYMBOL);
				State = 8204; Match(DOT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordContext : ParserRuleContext {
		public LabelKeywordContext labelKeyword() {
			return GetRuleContext<LabelKeywordContext>(0);
		}
		public RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() {
			return GetRuleContext<RoleOrIdentifierKeywordContext>(0);
		}
		public ITerminalNode EXECUTE_SYMBOL() { return GetToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public ITerminalNode RESTART_SYMBOL() { return GetToken(MySQLParser.RESTART_SYMBOL, 0); }
		public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return GetRuleContext<IdentifierKeywordsUnambiguousContext>(0);
		}
		public IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() {
			return GetRuleContext<IdentifierKeywordsAmbiguous1RolesAndLabelsContext>(0);
		}
		public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return GetRuleContext<IdentifierKeywordsAmbiguous2LabelsContext>(0);
		}
		public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return GetRuleContext<IdentifierKeywordsAmbiguous3RolesContext>(0);
		}
		public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return GetRuleContext<IdentifierKeywordsAmbiguous4SystemVariablesContext>(0);
		}
		public IdentifierKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordContext identifierKeyword() {
		IdentifierKeywordContext _localctx = new IdentifierKeywordContext(Context, State);
		EnterRule(_localctx, 1178, RULE_identifierKeyword);
		try {
			State = 8224;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1102,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8207;
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				State = 8215;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1100,Context) ) {
				case 1:
					{
					State = 8208; labelKeyword();
					}
					break;
				case 2:
					{
					State = 8209; roleOrIdentifierKeyword();
					}
					break;
				case 3:
					{
					State = 8210; Match(EXECUTE_SYMBOL);
					}
					break;
				case 4:
					{
					State = 8211;
					if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
					State = 8212; Match(SHUTDOWN_SYMBOL);
					}
					break;
				case 5:
					{
					State = 8213;
					if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
					State = 8214; Match(RESTART_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8222;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ACCOUNT_SYMBOL:
				case ALWAYS_SYMBOL:
				case BACKUP_SYMBOL:
				case CLOSE_SYMBOL:
				case FORMAT_SYMBOL:
				case GROUP_REPLICATION_SYMBOL:
				case HOST_SYMBOL:
				case OPEN_SYMBOL:
				case OPTIONS_SYMBOL:
				case OWNER_SYMBOL:
				case PARSER_SYMBOL:
				case PORT_SYMBOL:
				case REMOVE_SYMBOL:
				case RESTORE_SYMBOL:
				case SECURITY_SYMBOL:
				case SERVER_SYMBOL:
				case SOCKET_SYMBOL:
				case SONAME_SYMBOL:
				case UPGRADE_SYMBOL:
				case WRAPPER_SYMBOL:
				case ACTION_SYMBOL:
				case ADDDATE_SYMBOL:
				case AFTER_SYMBOL:
				case AGAINST_SYMBOL:
				case AGGREGATE_SYMBOL:
				case ALGORITHM_SYMBOL:
				case ANY_SYMBOL:
				case AT_SYMBOL:
				case AUTO_INCREMENT_SYMBOL:
				case AUTOEXTEND_SIZE_SYMBOL:
				case AVG_ROW_LENGTH_SYMBOL:
				case AVG_SYMBOL:
				case BINLOG_SYMBOL:
				case BIT_SYMBOL:
				case BLOCK_SYMBOL:
				case BOOL_SYMBOL:
				case BOOLEAN_SYMBOL:
				case BTREE_SYMBOL:
				case CASCADED_SYMBOL:
				case CATALOG_NAME_SYMBOL:
				case CHAIN_SYMBOL:
				case CHANGED_SYMBOL:
				case CHANNEL_SYMBOL:
				case CIPHER_SYMBOL:
				case CLIENT_SYMBOL:
				case CLASS_ORIGIN_SYMBOL:
				case COALESCE_SYMBOL:
				case CODE_SYMBOL:
				case COLLATION_SYMBOL:
				case COLUMN_NAME_SYMBOL:
				case COLUMN_FORMAT_SYMBOL:
				case COLUMNS_SYMBOL:
				case COMMITTED_SYMBOL:
				case COMPACT_SYMBOL:
				case COMPLETION_SYMBOL:
				case COMPRESSED_SYMBOL:
				case COMPRESSION_SYMBOL:
				case ENCRYPTION_SYMBOL:
				case CONCURRENT_SYMBOL:
				case CONNECTION_SYMBOL:
				case CONSISTENT_SYMBOL:
				case CONSTRAINT_CATALOG_SYMBOL:
				case CONSTRAINT_SCHEMA_SYMBOL:
				case CONSTRAINT_NAME_SYMBOL:
				case CONTEXT_SYMBOL:
				case CPU_SYMBOL:
				case CURRENT_SYMBOL:
				case CURSOR_NAME_SYMBOL:
				case DATA_SYMBOL:
				case DATAFILE_SYMBOL:
				case DATETIME_SYMBOL:
				case DATE_SYMBOL:
				case DAY_SYMBOL:
				case DEFAULT_AUTH_SYMBOL:
				case DEFINER_SYMBOL:
				case DELAY_KEY_WRITE_SYMBOL:
				case DIAGNOSTICS_SYMBOL:
				case DIRECTORY_SYMBOL:
				case DISABLE_SYMBOL:
				case DISCARD_SYMBOL:
				case DISK_SYMBOL:
				case DUMPFILE_SYMBOL:
				case DUPLICATE_SYMBOL:
				case DYNAMIC_SYMBOL:
				case ENDS_SYMBOL:
				case ENUM_SYMBOL:
				case ENGINE_SYMBOL:
				case ENGINES_SYMBOL:
				case ERROR_SYMBOL:
				case ERRORS_SYMBOL:
				case ESCAPE_SYMBOL:
				case EVENTS_SYMBOL:
				case EVERY_SYMBOL:
				case EXPANSION_SYMBOL:
				case EXPORT_SYMBOL:
				case EXTENDED_SYMBOL:
				case EXTENT_SIZE_SYMBOL:
				case FAULTS_SYMBOL:
				case FAST_SYMBOL:
				case FOUND_SYMBOL:
				case ENABLE_SYMBOL:
				case FULL_SYMBOL:
				case FILE_BLOCK_SIZE_SYMBOL:
				case FILTER_SYMBOL:
				case FIRST_SYMBOL:
				case FIXED_SYMBOL:
				case GENERAL_SYMBOL:
				case GEOMETRY_SYMBOL:
				case GEOMETRYCOLLECTION_SYMBOL:
				case GET_FORMAT_SYMBOL:
				case GRANTS_SYMBOL:
				case HASH_SYMBOL:
				case HOSTS_SYMBOL:
				case HOUR_SYMBOL:
				case IDENTIFIED_SYMBOL:
				case IGNORE_SERVER_IDS_SYMBOL:
				case INVOKER_SYMBOL:
				case INDEXES_SYMBOL:
				case INITIAL_SIZE_SYMBOL:
				case INSTANCE_SYMBOL:
				case IO_SYMBOL:
				case IPC_SYMBOL:
				case ISOLATION_SYMBOL:
				case ISSUER_SYMBOL:
				case INSERT_METHOD_SYMBOL:
				case JSON_SYMBOL:
				case KEY_BLOCK_SIZE_SYMBOL:
				case LAST_SYMBOL:
				case LEAVES_SYMBOL:
				case LESS_SYMBOL:
				case LEVEL_SYMBOL:
				case LINESTRING_SYMBOL:
				case LIST_SYMBOL:
				case LOCKS_SYMBOL:
				case LOGFILE_SYMBOL:
				case LOGS_SYMBOL:
				case MAX_ROWS_SYMBOL:
				case MASTER_SYMBOL:
				case MASTER_HEARTBEAT_PERIOD_SYMBOL:
				case MASTER_HOST_SYMBOL:
				case MASTER_PORT_SYMBOL:
				case MASTER_LOG_FILE_SYMBOL:
				case MASTER_LOG_POS_SYMBOL:
				case MASTER_USER_SYMBOL:
				case MASTER_PASSWORD_SYMBOL:
				case MASTER_SERVER_ID_SYMBOL:
				case MASTER_CONNECT_RETRY_SYMBOL:
				case MASTER_RETRY_COUNT_SYMBOL:
				case MASTER_DELAY_SYMBOL:
				case MASTER_SSL_SYMBOL:
				case MASTER_SSL_CA_SYMBOL:
				case MASTER_SSL_CAPATH_SYMBOL:
				case MASTER_TLS_VERSION_SYMBOL:
				case MASTER_SSL_CERT_SYMBOL:
				case MASTER_SSL_CIPHER_SYMBOL:
				case MASTER_SSL_CRL_SYMBOL:
				case MASTER_SSL_CRLPATH_SYMBOL:
				case MASTER_SSL_KEY_SYMBOL:
				case MASTER_AUTO_POSITION_SYMBOL:
				case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
				case MAX_QUERIES_PER_HOUR_SYMBOL:
				case MAX_SIZE_SYMBOL:
				case MAX_UPDATES_PER_HOUR_SYMBOL:
				case MAX_USER_CONNECTIONS_SYMBOL:
				case MEDIUM_SYMBOL:
				case MEMORY_SYMBOL:
				case MERGE_SYMBOL:
				case MESSAGE_TEXT_SYMBOL:
				case MICROSECOND_SYMBOL:
				case MIGRATE_SYMBOL:
				case MINUTE_SYMBOL:
				case MIN_ROWS_SYMBOL:
				case MODIFY_SYMBOL:
				case MODE_SYMBOL:
				case MONTH_SYMBOL:
				case MULTILINESTRING_SYMBOL:
				case MULTIPOINT_SYMBOL:
				case MULTIPOLYGON_SYMBOL:
				case MUTEX_SYMBOL:
				case MYSQL_ERRNO_SYMBOL:
				case NAME_SYMBOL:
				case NAMES_SYMBOL:
				case NATIONAL_SYMBOL:
				case NCHAR_SYMBOL:
				case NDBCLUSTER_SYMBOL:
				case NEVER_SYMBOL:
				case NEXT_SYMBOL:
				case NEW_SYMBOL:
				case NO_WAIT_SYMBOL:
				case NODEGROUP_SYMBOL:
				case NUMBER_SYMBOL:
				case NVARCHAR_SYMBOL:
				case OFFSET_SYMBOL:
				case ONE_SYMBOL:
				case PACK_KEYS_SYMBOL:
				case PAGE_SYMBOL:
				case PARTIAL_SYMBOL:
				case PARTITIONING_SYMBOL:
				case PARTITIONS_SYMBOL:
				case PASSWORD_SYMBOL:
				case PHASE_SYMBOL:
				case PLUGIN_DIR_SYMBOL:
				case PLUGIN_SYMBOL:
				case PLUGINS_SYMBOL:
				case POINT_SYMBOL:
				case POLYGON_SYMBOL:
				case PRESERVE_SYMBOL:
				case PREV_SYMBOL:
				case PRIVILEGES_SYMBOL:
				case PROCESSLIST_SYMBOL:
				case PROFILE_SYMBOL:
				case PROFILES_SYMBOL:
				case QUARTER_SYMBOL:
				case QUERY_SYMBOL:
				case QUICK_SYMBOL:
				case READ_ONLY_SYMBOL:
				case REBUILD_SYMBOL:
				case RECOVER_SYMBOL:
				case REDO_BUFFER_SIZE_SYMBOL:
				case REDUNDANT_SYMBOL:
				case RELAY_SYMBOL:
				case RELAYLOG_SYMBOL:
				case RELAY_LOG_FILE_SYMBOL:
				case RELAY_LOG_POS_SYMBOL:
				case RELAY_THREAD_SYMBOL:
				case REORGANIZE_SYMBOL:
				case REPEATABLE_SYMBOL:
				case REPLICATE_DO_DB_SYMBOL:
				case REPLICATE_IGNORE_DB_SYMBOL:
				case REPLICATE_DO_TABLE_SYMBOL:
				case REPLICATE_IGNORE_TABLE_SYMBOL:
				case REPLICATE_WILD_DO_TABLE_SYMBOL:
				case REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
				case REPLICATE_REWRITE_DB_SYMBOL:
				case RESUME_SYMBOL:
				case RETURNED_SQLSTATE_SYMBOL:
				case RETURNS_SYMBOL:
				case REVERSE_SYMBOL:
				case ROLLUP_SYMBOL:
				case ROTATE_SYMBOL:
				case ROUTINE_SYMBOL:
				case ROW_COUNT_SYMBOL:
				case ROW_FORMAT_SYMBOL:
				case RTREE_SYMBOL:
				case SCHEDULE_SYMBOL:
				case SCHEMA_NAME_SYMBOL:
				case SECOND_SYMBOL:
				case SERIAL_SYMBOL:
				case SERIALIZABLE_SYMBOL:
				case SIMPLE_SYMBOL:
				case SHARE_SYMBOL:
				case SLOW_SYMBOL:
				case SNAPSHOT_SYMBOL:
				case SOUNDS_SYMBOL:
				case SOURCE_SYMBOL:
				case SQL_AFTER_GTIDS_SYMBOL:
				case SQL_AFTER_MTS_GAPS_SYMBOL:
				case SQL_BEFORE_GTIDS_SYMBOL:
				case SQL_BUFFER_RESULT_SYMBOL:
				case SQL_NO_CACHE_SYMBOL:
				case SQL_THREAD_SYMBOL:
				case STACKED_SYMBOL:
				case STARTS_SYMBOL:
				case STATS_AUTO_RECALC_SYMBOL:
				case STATS_PERSISTENT_SYMBOL:
				case STATS_SAMPLE_PAGES_SYMBOL:
				case STATUS_SYMBOL:
				case STORAGE_SYMBOL:
				case STRING_SYMBOL:
				case SUBCLASS_ORIGIN_SYMBOL:
				case SUBDATE_SYMBOL:
				case SUBJECT_SYMBOL:
				case SUBPARTITION_SYMBOL:
				case SUBPARTITIONS_SYMBOL:
				case SUSPEND_SYMBOL:
				case SWAPS_SYMBOL:
				case SWITCHES_SYMBOL:
				case TABLE_NAME_SYMBOL:
				case TABLES_SYMBOL:
				case TABLE_CHECKSUM_SYMBOL:
				case TABLESPACE_SYMBOL:
				case TEMPORARY_SYMBOL:
				case TEMPTABLE_SYMBOL:
				case TEXT_SYMBOL:
				case THAN_SYMBOL:
				case TRANSACTION_SYMBOL:
				case TRIGGERS_SYMBOL:
				case TIMESTAMP_SYMBOL:
				case TIMESTAMP_ADD_SYMBOL:
				case TIMESTAMP_DIFF_SYMBOL:
				case TIME_SYMBOL:
				case TYPES_SYMBOL:
				case TYPE_SYMBOL:
				case UNCOMMITTED_SYMBOL:
				case UNDEFINED_SYMBOL:
				case UNDO_BUFFER_SIZE_SYMBOL:
				case UNDOFILE_SYMBOL:
				case UNKNOWN_SYMBOL:
				case UNTIL_SYMBOL:
				case USER_RESOURCES_SYMBOL:
				case USER_SYMBOL:
				case USE_FRM_SYMBOL:
				case VARIABLES_SYMBOL:
				case VIEW_SYMBOL:
				case VALUE_SYMBOL:
				case WARNINGS_SYMBOL:
				case WAIT_SYMBOL:
				case WEEK_SYMBOL:
				case WORK_SYMBOL:
				case WEIGHT_STRING_SYMBOL:
				case X509_SYMBOL:
				case XID_SYMBOL:
				case XML_SYMBOL:
				case YEAR_SYMBOL:
				case EXCHANGE_SYMBOL:
				case EXPIRE_SYMBOL:
				case ONLY_SYMBOL:
				case VALIDATION_SYMBOL:
				case WITHOUT_SYMBOL:
				case ROLE_SYMBOL:
				case ADMIN_SYMBOL:
				case INVISIBLE_SYMBOL:
				case VISIBLE_SYMBOL:
				case COMPONENT_SYMBOL:
				case SKIP_SYMBOL:
				case LOCKED_SYMBOL:
				case NOWAIT_SYMBOL:
				case HISTOGRAM_SYMBOL:
				case BUCKETS_SYMBOL:
				case EXCLUDE_SYMBOL:
				case FOLLOWING_SYMBOL:
				case NULLS_SYMBOL:
				case OTHERS_SYMBOL:
				case PRECEDING_SYMBOL:
				case RESPECT_SYMBOL:
				case TIES_SYMBOL:
				case UNBOUNDED_SYMBOL:
				case NESTED_SYMBOL:
				case ORDINALITY_SYMBOL:
				case PATH_SYMBOL:
				case HISTORY_SYMBOL:
				case REUSE_SYMBOL:
				case SRID_SYMBOL:
				case THREAD_PRIORITY_SYMBOL:
				case VCPU_SYMBOL:
				case MASTER_PUBLIC_KEY_PATH_SYMBOL:
				case GET_MASTER_PUBLIC_KEY_SYMBOL:
				case DEFINITION_SYMBOL:
				case DESCRIPTION_SYMBOL:
				case ORGANIZATION_SYMBOL:
				case REFERENCE_SYMBOL:
				case OPTIONAL_SYMBOL:
				case SECONDARY_SYMBOL:
				case SECONDARY_ENGINE_SYMBOL:
				case SECONDARY_LOAD_SYMBOL:
				case SECONDARY_UNLOAD_SYMBOL:
				case ACTIVE_SYMBOL:
				case INACTIVE_SYMBOL:
				case RETAIN_SYMBOL:
				case OLD_SYMBOL:
				case NETWORK_NAMESPACE_SYMBOL:
				case ENFORCED_SYMBOL:
				case OJ_SYMBOL:
					{
					State = 8217; identifierKeywordsUnambiguous();
					}
					break;
				case EXECUTE_SYMBOL:
				case SHUTDOWN_SYMBOL:
				case RESTART_SYMBOL:
					{
					State = 8218; identifierKeywordsAmbiguous1RolesAndLabels();
					}
					break;
				case ASCII_SYMBOL:
				case BEGIN_SYMBOL:
				case BYTE_SYMBOL:
				case CACHE_SYMBOL:
				case CHARSET_SYMBOL:
				case CHECKSUM_SYMBOL:
				case COMMENT_SYMBOL:
				case COMMIT_SYMBOL:
				case CONTAINS_SYMBOL:
				case DEALLOCATE_SYMBOL:
				case DO_SYMBOL:
				case END_SYMBOL:
				case FLUSH_SYMBOL:
				case FOLLOWS_SYMBOL:
				case HANDLER_SYMBOL:
				case HELP_SYMBOL:
				case INSTALL_SYMBOL:
				case LANGUAGE_SYMBOL:
				case NO_SYMBOL:
				case PRECEDES_SYMBOL:
				case PREPARE_SYMBOL:
				case REPAIR_SYMBOL:
				case RESET_SYMBOL:
				case ROLLBACK_SYMBOL:
				case SAVEPOINT_SYMBOL:
				case SIGNED_SYMBOL:
				case SLAVE_SYMBOL:
				case START_SYMBOL:
				case STOP_SYMBOL:
				case TRUNCATE_SYMBOL:
				case UNICODE_SYMBOL:
				case UNINSTALL_SYMBOL:
				case XA_SYMBOL:
				case IMPORT_SYMBOL:
				case CLONE_SYMBOL:
					{
					State = 8219; identifierKeywordsAmbiguous2Labels();
					}
					break;
				case EVENT_SYMBOL:
				case FILE_SYMBOL:
				case NONE_SYMBOL:
				case PROCESS_SYMBOL:
				case PROXY_SYMBOL:
				case RELOAD_SYMBOL:
				case REPLICATION_SYMBOL:
				case SUPER_SYMBOL:
				case RESOURCE_SYMBOL:
					{
					State = 8220; identifierKeywordsAmbiguous3Roles();
					}
					break;
				case GLOBAL_SYMBOL:
				case LOCAL_SYMBOL:
				case SESSION_SYMBOL:
				case PERSIST_SYMBOL:
				case PERSIST_ONLY_SYMBOL:
					{
					State = 8221; identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordsAmbiguous1RolesAndLabelsContext : ParserRuleContext {
		public ITerminalNode EXECUTE_SYMBOL() { return GetToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		public ITerminalNode RESTART_SYMBOL() { return GetToken(MySQLParser.RESTART_SYMBOL, 0); }
		public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous1RolesAndLabelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeywordsAmbiguous1RolesAndLabels; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeywordsAmbiguous1RolesAndLabels(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeywordsAmbiguous1RolesAndLabels(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierKeywordsAmbiguous1RolesAndLabels(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() {
		IdentifierKeywordsAmbiguous1RolesAndLabelsContext _localctx = new IdentifierKeywordsAmbiguous1RolesAndLabelsContext(Context, State);
		EnterRule(_localctx, 1180, RULE_identifierKeywordsAmbiguous1RolesAndLabels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8226;
			_la = TokenStream.LA(1);
			if ( !(_la==EXECUTE_SYMBOL || _la==SHUTDOWN_SYMBOL || _la==RESTART_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordsAmbiguous2LabelsContext : ParserRuleContext {
		public ITerminalNode ASCII_SYMBOL() { return GetToken(MySQLParser.ASCII_SYMBOL, 0); }
		public ITerminalNode BEGIN_SYMBOL() { return GetToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public ITerminalNode BYTE_SYMBOL() { return GetToken(MySQLParser.BYTE_SYMBOL, 0); }
		public ITerminalNode CACHE_SYMBOL() { return GetToken(MySQLParser.CACHE_SYMBOL, 0); }
		public ITerminalNode CHARSET_SYMBOL() { return GetToken(MySQLParser.CHARSET_SYMBOL, 0); }
		public ITerminalNode CHECKSUM_SYMBOL() { return GetToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		public ITerminalNode CLONE_SYMBOL() { return GetToken(MySQLParser.CLONE_SYMBOL, 0); }
		public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public ITerminalNode COMMIT_SYMBOL() { return GetToken(MySQLParser.COMMIT_SYMBOL, 0); }
		public ITerminalNode CONTAINS_SYMBOL() { return GetToken(MySQLParser.CONTAINS_SYMBOL, 0); }
		public ITerminalNode DEALLOCATE_SYMBOL() { return GetToken(MySQLParser.DEALLOCATE_SYMBOL, 0); }
		public ITerminalNode DO_SYMBOL() { return GetToken(MySQLParser.DO_SYMBOL, 0); }
		public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		public ITerminalNode FLUSH_SYMBOL() { return GetToken(MySQLParser.FLUSH_SYMBOL, 0); }
		public ITerminalNode FOLLOWS_SYMBOL() { return GetToken(MySQLParser.FOLLOWS_SYMBOL, 0); }
		public ITerminalNode HANDLER_SYMBOL() { return GetToken(MySQLParser.HANDLER_SYMBOL, 0); }
		public ITerminalNode HELP_SYMBOL() { return GetToken(MySQLParser.HELP_SYMBOL, 0); }
		public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public ITerminalNode INSTALL_SYMBOL() { return GetToken(MySQLParser.INSTALL_SYMBOL, 0); }
		public ITerminalNode LANGUAGE_SYMBOL() { return GetToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		public ITerminalNode NO_SYMBOL() { return GetToken(MySQLParser.NO_SYMBOL, 0); }
		public ITerminalNode PRECEDES_SYMBOL() { return GetToken(MySQLParser.PRECEDES_SYMBOL, 0); }
		public ITerminalNode PREPARE_SYMBOL() { return GetToken(MySQLParser.PREPARE_SYMBOL, 0); }
		public ITerminalNode REPAIR_SYMBOL() { return GetToken(MySQLParser.REPAIR_SYMBOL, 0); }
		public ITerminalNode RESET_SYMBOL() { return GetToken(MySQLParser.RESET_SYMBOL, 0); }
		public ITerminalNode ROLLBACK_SYMBOL() { return GetToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		public ITerminalNode SAVEPOINT_SYMBOL() { return GetToken(MySQLParser.SAVEPOINT_SYMBOL, 0); }
		public ITerminalNode SIGNED_SYMBOL() { return GetToken(MySQLParser.SIGNED_SYMBOL, 0); }
		public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public ITerminalNode START_SYMBOL() { return GetToken(MySQLParser.START_SYMBOL, 0); }
		public ITerminalNode STOP_SYMBOL() { return GetToken(MySQLParser.STOP_SYMBOL, 0); }
		public ITerminalNode TRUNCATE_SYMBOL() { return GetToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public ITerminalNode UNICODE_SYMBOL() { return GetToken(MySQLParser.UNICODE_SYMBOL, 0); }
		public ITerminalNode UNINSTALL_SYMBOL() { return GetToken(MySQLParser.UNINSTALL_SYMBOL, 0); }
		public ITerminalNode XA_SYMBOL() { return GetToken(MySQLParser.XA_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous2LabelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeywordsAmbiguous2Labels; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeywordsAmbiguous2Labels(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeywordsAmbiguous2Labels(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierKeywordsAmbiguous2Labels(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
		IdentifierKeywordsAmbiguous2LabelsContext _localctx = new IdentifierKeywordsAmbiguous2LabelsContext(Context, State);
		EnterRule(_localctx, 1182, RULE_identifierKeywordsAmbiguous2Labels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8228;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASCII_SYMBOL) | (1L << BEGIN_SYMBOL) | (1L << BYTE_SYMBOL) | (1L << CACHE_SYMBOL) | (1L << CHARSET_SYMBOL) | (1L << CHECKSUM_SYMBOL) | (1L << COMMENT_SYMBOL) | (1L << COMMIT_SYMBOL) | (1L << CONTAINS_SYMBOL) | (1L << DEALLOCATE_SYMBOL) | (1L << DO_SYMBOL) | (1L << END_SYMBOL) | (1L << FLUSH_SYMBOL) | (1L << FOLLOWS_SYMBOL) | (1L << HANDLER_SYMBOL) | (1L << HELP_SYMBOL) | (1L << INSTALL_SYMBOL) | (1L << LANGUAGE_SYMBOL) | (1L << NO_SYMBOL) | (1L << PRECEDES_SYMBOL) | (1L << PREPARE_SYMBOL) | (1L << REPAIR_SYMBOL) | (1L << RESET_SYMBOL) | (1L << ROLLBACK_SYMBOL) | (1L << SAVEPOINT_SYMBOL) | (1L << SIGNED_SYMBOL) | (1L << SLAVE_SYMBOL) | (1L << START_SYMBOL) | (1L << STOP_SYMBOL) | (1L << TRUNCATE_SYMBOL) | (1L << UNICODE_SYMBOL) | (1L << UNINSTALL_SYMBOL) | (1L << XA_SYMBOL))) != 0) || _la==IMPORT_SYMBOL || _la==CLONE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelKeywordContext : ParserRuleContext {
		public RoleOrLabelKeywordContext roleOrLabelKeyword() {
			return GetRuleContext<RoleOrLabelKeywordContext>(0);
		}
		public ITerminalNode EVENT_SYMBOL() { return GetToken(MySQLParser.EVENT_SYMBOL, 0); }
		public ITerminalNode FILE_SYMBOL() { return GetToken(MySQLParser.FILE_SYMBOL, 0); }
		public ITerminalNode NONE_SYMBOL() { return GetToken(MySQLParser.NONE_SYMBOL, 0); }
		public ITerminalNode PROCESS_SYMBOL() { return GetToken(MySQLParser.PROCESS_SYMBOL, 0); }
		public ITerminalNode PROXY_SYMBOL() { return GetToken(MySQLParser.PROXY_SYMBOL, 0); }
		public ITerminalNode RELOAD_SYMBOL() { return GetToken(MySQLParser.RELOAD_SYMBOL, 0); }
		public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public ITerminalNode SUPER_SYMBOL() { return GetToken(MySQLParser.SUPER_SYMBOL, 0); }
		public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return GetRuleContext<IdentifierKeywordsUnambiguousContext>(0);
		}
		public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return GetRuleContext<IdentifierKeywordsAmbiguous3RolesContext>(0);
		}
		public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return GetRuleContext<IdentifierKeywordsAmbiguous4SystemVariablesContext>(0);
		}
		public LabelKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLabelKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLabelKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelKeywordContext labelKeyword() {
		LabelKeywordContext _localctx = new LabelKeywordContext(Context, State);
		EnterRule(_localctx, 1184, RULE_labelKeyword);
		try {
			State = 8248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1105,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8230;
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				State = 8241;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1103,Context) ) {
				case 1:
					{
					State = 8231; roleOrLabelKeyword();
					}
					break;
				case 2:
					{
					State = 8232; Match(EVENT_SYMBOL);
					}
					break;
				case 3:
					{
					State = 8233; Match(FILE_SYMBOL);
					}
					break;
				case 4:
					{
					State = 8234; Match(NONE_SYMBOL);
					}
					break;
				case 5:
					{
					State = 8235; Match(PROCESS_SYMBOL);
					}
					break;
				case 6:
					{
					State = 8236; Match(PROXY_SYMBOL);
					}
					break;
				case 7:
					{
					State = 8237; Match(RELOAD_SYMBOL);
					}
					break;
				case 8:
					{
					State = 8238; Match(REPLICATION_SYMBOL);
					}
					break;
				case 9:
					{
					State = 8239; Match(RESOURCE_SYMBOL);
					}
					break;
				case 10:
					{
					State = 8240; Match(SUPER_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8246;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ACCOUNT_SYMBOL:
				case ALWAYS_SYMBOL:
				case BACKUP_SYMBOL:
				case CLOSE_SYMBOL:
				case FORMAT_SYMBOL:
				case GROUP_REPLICATION_SYMBOL:
				case HOST_SYMBOL:
				case OPEN_SYMBOL:
				case OPTIONS_SYMBOL:
				case OWNER_SYMBOL:
				case PARSER_SYMBOL:
				case PORT_SYMBOL:
				case REMOVE_SYMBOL:
				case RESTORE_SYMBOL:
				case SECURITY_SYMBOL:
				case SERVER_SYMBOL:
				case SOCKET_SYMBOL:
				case SONAME_SYMBOL:
				case UPGRADE_SYMBOL:
				case WRAPPER_SYMBOL:
				case ACTION_SYMBOL:
				case ADDDATE_SYMBOL:
				case AFTER_SYMBOL:
				case AGAINST_SYMBOL:
				case AGGREGATE_SYMBOL:
				case ALGORITHM_SYMBOL:
				case ANY_SYMBOL:
				case AT_SYMBOL:
				case AUTO_INCREMENT_SYMBOL:
				case AUTOEXTEND_SIZE_SYMBOL:
				case AVG_ROW_LENGTH_SYMBOL:
				case AVG_SYMBOL:
				case BINLOG_SYMBOL:
				case BIT_SYMBOL:
				case BLOCK_SYMBOL:
				case BOOL_SYMBOL:
				case BOOLEAN_SYMBOL:
				case BTREE_SYMBOL:
				case CASCADED_SYMBOL:
				case CATALOG_NAME_SYMBOL:
				case CHAIN_SYMBOL:
				case CHANGED_SYMBOL:
				case CHANNEL_SYMBOL:
				case CIPHER_SYMBOL:
				case CLIENT_SYMBOL:
				case CLASS_ORIGIN_SYMBOL:
				case COALESCE_SYMBOL:
				case CODE_SYMBOL:
				case COLLATION_SYMBOL:
				case COLUMN_NAME_SYMBOL:
				case COLUMN_FORMAT_SYMBOL:
				case COLUMNS_SYMBOL:
				case COMMITTED_SYMBOL:
				case COMPACT_SYMBOL:
				case COMPLETION_SYMBOL:
				case COMPRESSED_SYMBOL:
				case COMPRESSION_SYMBOL:
				case ENCRYPTION_SYMBOL:
				case CONCURRENT_SYMBOL:
				case CONNECTION_SYMBOL:
				case CONSISTENT_SYMBOL:
				case CONSTRAINT_CATALOG_SYMBOL:
				case CONSTRAINT_SCHEMA_SYMBOL:
				case CONSTRAINT_NAME_SYMBOL:
				case CONTEXT_SYMBOL:
				case CPU_SYMBOL:
				case CURRENT_SYMBOL:
				case CURSOR_NAME_SYMBOL:
				case DATA_SYMBOL:
				case DATAFILE_SYMBOL:
				case DATETIME_SYMBOL:
				case DATE_SYMBOL:
				case DAY_SYMBOL:
				case DEFAULT_AUTH_SYMBOL:
				case DEFINER_SYMBOL:
				case DELAY_KEY_WRITE_SYMBOL:
				case DIAGNOSTICS_SYMBOL:
				case DIRECTORY_SYMBOL:
				case DISABLE_SYMBOL:
				case DISCARD_SYMBOL:
				case DISK_SYMBOL:
				case DUMPFILE_SYMBOL:
				case DUPLICATE_SYMBOL:
				case DYNAMIC_SYMBOL:
				case ENDS_SYMBOL:
				case ENUM_SYMBOL:
				case ENGINE_SYMBOL:
				case ENGINES_SYMBOL:
				case ERROR_SYMBOL:
				case ERRORS_SYMBOL:
				case ESCAPE_SYMBOL:
				case EVENTS_SYMBOL:
				case EVERY_SYMBOL:
				case EXPANSION_SYMBOL:
				case EXPORT_SYMBOL:
				case EXTENDED_SYMBOL:
				case EXTENT_SIZE_SYMBOL:
				case FAULTS_SYMBOL:
				case FAST_SYMBOL:
				case FOUND_SYMBOL:
				case ENABLE_SYMBOL:
				case FULL_SYMBOL:
				case FILE_BLOCK_SIZE_SYMBOL:
				case FILTER_SYMBOL:
				case FIRST_SYMBOL:
				case FIXED_SYMBOL:
				case GENERAL_SYMBOL:
				case GEOMETRY_SYMBOL:
				case GEOMETRYCOLLECTION_SYMBOL:
				case GET_FORMAT_SYMBOL:
				case GRANTS_SYMBOL:
				case HASH_SYMBOL:
				case HOSTS_SYMBOL:
				case HOUR_SYMBOL:
				case IDENTIFIED_SYMBOL:
				case IGNORE_SERVER_IDS_SYMBOL:
				case INVOKER_SYMBOL:
				case INDEXES_SYMBOL:
				case INITIAL_SIZE_SYMBOL:
				case INSTANCE_SYMBOL:
				case IO_SYMBOL:
				case IPC_SYMBOL:
				case ISOLATION_SYMBOL:
				case ISSUER_SYMBOL:
				case INSERT_METHOD_SYMBOL:
				case JSON_SYMBOL:
				case KEY_BLOCK_SIZE_SYMBOL:
				case LAST_SYMBOL:
				case LEAVES_SYMBOL:
				case LESS_SYMBOL:
				case LEVEL_SYMBOL:
				case LINESTRING_SYMBOL:
				case LIST_SYMBOL:
				case LOCKS_SYMBOL:
				case LOGFILE_SYMBOL:
				case LOGS_SYMBOL:
				case MAX_ROWS_SYMBOL:
				case MASTER_SYMBOL:
				case MASTER_HEARTBEAT_PERIOD_SYMBOL:
				case MASTER_HOST_SYMBOL:
				case MASTER_PORT_SYMBOL:
				case MASTER_LOG_FILE_SYMBOL:
				case MASTER_LOG_POS_SYMBOL:
				case MASTER_USER_SYMBOL:
				case MASTER_PASSWORD_SYMBOL:
				case MASTER_SERVER_ID_SYMBOL:
				case MASTER_CONNECT_RETRY_SYMBOL:
				case MASTER_RETRY_COUNT_SYMBOL:
				case MASTER_DELAY_SYMBOL:
				case MASTER_SSL_SYMBOL:
				case MASTER_SSL_CA_SYMBOL:
				case MASTER_SSL_CAPATH_SYMBOL:
				case MASTER_TLS_VERSION_SYMBOL:
				case MASTER_SSL_CERT_SYMBOL:
				case MASTER_SSL_CIPHER_SYMBOL:
				case MASTER_SSL_CRL_SYMBOL:
				case MASTER_SSL_CRLPATH_SYMBOL:
				case MASTER_SSL_KEY_SYMBOL:
				case MASTER_AUTO_POSITION_SYMBOL:
				case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
				case MAX_QUERIES_PER_HOUR_SYMBOL:
				case MAX_SIZE_SYMBOL:
				case MAX_UPDATES_PER_HOUR_SYMBOL:
				case MAX_USER_CONNECTIONS_SYMBOL:
				case MEDIUM_SYMBOL:
				case MEMORY_SYMBOL:
				case MERGE_SYMBOL:
				case MESSAGE_TEXT_SYMBOL:
				case MICROSECOND_SYMBOL:
				case MIGRATE_SYMBOL:
				case MINUTE_SYMBOL:
				case MIN_ROWS_SYMBOL:
				case MODIFY_SYMBOL:
				case MODE_SYMBOL:
				case MONTH_SYMBOL:
				case MULTILINESTRING_SYMBOL:
				case MULTIPOINT_SYMBOL:
				case MULTIPOLYGON_SYMBOL:
				case MUTEX_SYMBOL:
				case MYSQL_ERRNO_SYMBOL:
				case NAME_SYMBOL:
				case NAMES_SYMBOL:
				case NATIONAL_SYMBOL:
				case NCHAR_SYMBOL:
				case NDBCLUSTER_SYMBOL:
				case NEVER_SYMBOL:
				case NEXT_SYMBOL:
				case NEW_SYMBOL:
				case NO_WAIT_SYMBOL:
				case NODEGROUP_SYMBOL:
				case NUMBER_SYMBOL:
				case NVARCHAR_SYMBOL:
				case OFFSET_SYMBOL:
				case ONE_SYMBOL:
				case PACK_KEYS_SYMBOL:
				case PAGE_SYMBOL:
				case PARTIAL_SYMBOL:
				case PARTITIONING_SYMBOL:
				case PARTITIONS_SYMBOL:
				case PASSWORD_SYMBOL:
				case PHASE_SYMBOL:
				case PLUGIN_DIR_SYMBOL:
				case PLUGIN_SYMBOL:
				case PLUGINS_SYMBOL:
				case POINT_SYMBOL:
				case POLYGON_SYMBOL:
				case PRESERVE_SYMBOL:
				case PREV_SYMBOL:
				case PRIVILEGES_SYMBOL:
				case PROCESSLIST_SYMBOL:
				case PROFILE_SYMBOL:
				case PROFILES_SYMBOL:
				case QUARTER_SYMBOL:
				case QUERY_SYMBOL:
				case QUICK_SYMBOL:
				case READ_ONLY_SYMBOL:
				case REBUILD_SYMBOL:
				case RECOVER_SYMBOL:
				case REDO_BUFFER_SIZE_SYMBOL:
				case REDUNDANT_SYMBOL:
				case RELAY_SYMBOL:
				case RELAYLOG_SYMBOL:
				case RELAY_LOG_FILE_SYMBOL:
				case RELAY_LOG_POS_SYMBOL:
				case RELAY_THREAD_SYMBOL:
				case REORGANIZE_SYMBOL:
				case REPEATABLE_SYMBOL:
				case REPLICATE_DO_DB_SYMBOL:
				case REPLICATE_IGNORE_DB_SYMBOL:
				case REPLICATE_DO_TABLE_SYMBOL:
				case REPLICATE_IGNORE_TABLE_SYMBOL:
				case REPLICATE_WILD_DO_TABLE_SYMBOL:
				case REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
				case REPLICATE_REWRITE_DB_SYMBOL:
				case RESUME_SYMBOL:
				case RETURNED_SQLSTATE_SYMBOL:
				case RETURNS_SYMBOL:
				case REVERSE_SYMBOL:
				case ROLLUP_SYMBOL:
				case ROTATE_SYMBOL:
				case ROUTINE_SYMBOL:
				case ROW_COUNT_SYMBOL:
				case ROW_FORMAT_SYMBOL:
				case RTREE_SYMBOL:
				case SCHEDULE_SYMBOL:
				case SCHEMA_NAME_SYMBOL:
				case SECOND_SYMBOL:
				case SERIAL_SYMBOL:
				case SERIALIZABLE_SYMBOL:
				case SIMPLE_SYMBOL:
				case SHARE_SYMBOL:
				case SLOW_SYMBOL:
				case SNAPSHOT_SYMBOL:
				case SOUNDS_SYMBOL:
				case SOURCE_SYMBOL:
				case SQL_AFTER_GTIDS_SYMBOL:
				case SQL_AFTER_MTS_GAPS_SYMBOL:
				case SQL_BEFORE_GTIDS_SYMBOL:
				case SQL_BUFFER_RESULT_SYMBOL:
				case SQL_NO_CACHE_SYMBOL:
				case SQL_THREAD_SYMBOL:
				case STACKED_SYMBOL:
				case STARTS_SYMBOL:
				case STATS_AUTO_RECALC_SYMBOL:
				case STATS_PERSISTENT_SYMBOL:
				case STATS_SAMPLE_PAGES_SYMBOL:
				case STATUS_SYMBOL:
				case STORAGE_SYMBOL:
				case STRING_SYMBOL:
				case SUBCLASS_ORIGIN_SYMBOL:
				case SUBDATE_SYMBOL:
				case SUBJECT_SYMBOL:
				case SUBPARTITION_SYMBOL:
				case SUBPARTITIONS_SYMBOL:
				case SUSPEND_SYMBOL:
				case SWAPS_SYMBOL:
				case SWITCHES_SYMBOL:
				case TABLE_NAME_SYMBOL:
				case TABLES_SYMBOL:
				case TABLE_CHECKSUM_SYMBOL:
				case TABLESPACE_SYMBOL:
				case TEMPORARY_SYMBOL:
				case TEMPTABLE_SYMBOL:
				case TEXT_SYMBOL:
				case THAN_SYMBOL:
				case TRANSACTION_SYMBOL:
				case TRIGGERS_SYMBOL:
				case TIMESTAMP_SYMBOL:
				case TIMESTAMP_ADD_SYMBOL:
				case TIMESTAMP_DIFF_SYMBOL:
				case TIME_SYMBOL:
				case TYPES_SYMBOL:
				case TYPE_SYMBOL:
				case UNCOMMITTED_SYMBOL:
				case UNDEFINED_SYMBOL:
				case UNDO_BUFFER_SIZE_SYMBOL:
				case UNDOFILE_SYMBOL:
				case UNKNOWN_SYMBOL:
				case UNTIL_SYMBOL:
				case USER_RESOURCES_SYMBOL:
				case USER_SYMBOL:
				case USE_FRM_SYMBOL:
				case VARIABLES_SYMBOL:
				case VIEW_SYMBOL:
				case VALUE_SYMBOL:
				case WARNINGS_SYMBOL:
				case WAIT_SYMBOL:
				case WEEK_SYMBOL:
				case WORK_SYMBOL:
				case WEIGHT_STRING_SYMBOL:
				case X509_SYMBOL:
				case XID_SYMBOL:
				case XML_SYMBOL:
				case YEAR_SYMBOL:
				case EXCHANGE_SYMBOL:
				case EXPIRE_SYMBOL:
				case ONLY_SYMBOL:
				case VALIDATION_SYMBOL:
				case WITHOUT_SYMBOL:
				case ROLE_SYMBOL:
				case ADMIN_SYMBOL:
				case INVISIBLE_SYMBOL:
				case VISIBLE_SYMBOL:
				case COMPONENT_SYMBOL:
				case SKIP_SYMBOL:
				case LOCKED_SYMBOL:
				case NOWAIT_SYMBOL:
				case HISTOGRAM_SYMBOL:
				case BUCKETS_SYMBOL:
				case EXCLUDE_SYMBOL:
				case FOLLOWING_SYMBOL:
				case NULLS_SYMBOL:
				case OTHERS_SYMBOL:
				case PRECEDING_SYMBOL:
				case RESPECT_SYMBOL:
				case TIES_SYMBOL:
				case UNBOUNDED_SYMBOL:
				case NESTED_SYMBOL:
				case ORDINALITY_SYMBOL:
				case PATH_SYMBOL:
				case HISTORY_SYMBOL:
				case REUSE_SYMBOL:
				case SRID_SYMBOL:
				case THREAD_PRIORITY_SYMBOL:
				case VCPU_SYMBOL:
				case MASTER_PUBLIC_KEY_PATH_SYMBOL:
				case GET_MASTER_PUBLIC_KEY_SYMBOL:
				case DEFINITION_SYMBOL:
				case DESCRIPTION_SYMBOL:
				case ORGANIZATION_SYMBOL:
				case REFERENCE_SYMBOL:
				case OPTIONAL_SYMBOL:
				case SECONDARY_SYMBOL:
				case SECONDARY_ENGINE_SYMBOL:
				case SECONDARY_LOAD_SYMBOL:
				case SECONDARY_UNLOAD_SYMBOL:
				case ACTIVE_SYMBOL:
				case INACTIVE_SYMBOL:
				case RETAIN_SYMBOL:
				case OLD_SYMBOL:
				case NETWORK_NAMESPACE_SYMBOL:
				case ENFORCED_SYMBOL:
				case OJ_SYMBOL:
					{
					State = 8243; identifierKeywordsUnambiguous();
					}
					break;
				case EVENT_SYMBOL:
				case FILE_SYMBOL:
				case NONE_SYMBOL:
				case PROCESS_SYMBOL:
				case PROXY_SYMBOL:
				case RELOAD_SYMBOL:
				case REPLICATION_SYMBOL:
				case SUPER_SYMBOL:
				case RESOURCE_SYMBOL:
					{
					State = 8244; identifierKeywordsAmbiguous3Roles();
					}
					break;
				case GLOBAL_SYMBOL:
				case LOCAL_SYMBOL:
				case SESSION_SYMBOL:
				case PERSIST_SYMBOL:
				case PERSIST_ONLY_SYMBOL:
					{
					State = 8245; identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordsAmbiguous3RolesContext : ParserRuleContext {
		public ITerminalNode EVENT_SYMBOL() { return GetToken(MySQLParser.EVENT_SYMBOL, 0); }
		public ITerminalNode FILE_SYMBOL() { return GetToken(MySQLParser.FILE_SYMBOL, 0); }
		public ITerminalNode NONE_SYMBOL() { return GetToken(MySQLParser.NONE_SYMBOL, 0); }
		public ITerminalNode PROCESS_SYMBOL() { return GetToken(MySQLParser.PROCESS_SYMBOL, 0); }
		public ITerminalNode PROXY_SYMBOL() { return GetToken(MySQLParser.PROXY_SYMBOL, 0); }
		public ITerminalNode RELOAD_SYMBOL() { return GetToken(MySQLParser.RELOAD_SYMBOL, 0); }
		public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public ITerminalNode SUPER_SYMBOL() { return GetToken(MySQLParser.SUPER_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous3RolesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeywordsAmbiguous3Roles; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeywordsAmbiguous3Roles(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeywordsAmbiguous3Roles(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierKeywordsAmbiguous3Roles(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
		IdentifierKeywordsAmbiguous3RolesContext _localctx = new IdentifierKeywordsAmbiguous3RolesContext(Context, State);
		EnterRule(_localctx, 1186, RULE_identifierKeywordsAmbiguous3Roles);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8250;
			_la = TokenStream.LA(1);
			if ( !(_la==EVENT_SYMBOL || _la==FILE_SYMBOL || ((((_la - 239)) & ~0x3f) == 0 && ((1L << (_la - 239)) & ((1L << (NONE_SYMBOL - 239)) | (1L << (PROCESS_SYMBOL - 239)) | (1L << (PROXY_SYMBOL - 239)) | (1L << (RELOAD_SYMBOL - 239)) | (1L << (REPLICATION_SYMBOL - 239)))) != 0) || _la==SUPER_SYMBOL || _la==RESOURCE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordsUnambiguousContext : ParserRuleContext {
		public ITerminalNode ACTION_SYMBOL() { return GetToken(MySQLParser.ACTION_SYMBOL, 0); }
		public ITerminalNode ACCOUNT_SYMBOL() { return GetToken(MySQLParser.ACCOUNT_SYMBOL, 0); }
		public ITerminalNode ACTIVE_SYMBOL() { return GetToken(MySQLParser.ACTIVE_SYMBOL, 0); }
		public ITerminalNode ADDDATE_SYMBOL() { return GetToken(MySQLParser.ADDDATE_SYMBOL, 0); }
		public ITerminalNode ADMIN_SYMBOL() { return GetToken(MySQLParser.ADMIN_SYMBOL, 0); }
		public ITerminalNode AFTER_SYMBOL() { return GetToken(MySQLParser.AFTER_SYMBOL, 0); }
		public ITerminalNode AGAINST_SYMBOL() { return GetToken(MySQLParser.AGAINST_SYMBOL, 0); }
		public ITerminalNode AGGREGATE_SYMBOL() { return GetToken(MySQLParser.AGGREGATE_SYMBOL, 0); }
		public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public ITerminalNode ALWAYS_SYMBOL() { return GetToken(MySQLParser.ALWAYS_SYMBOL, 0); }
		public ITerminalNode ANY_SYMBOL() { return GetToken(MySQLParser.ANY_SYMBOL, 0); }
		public ITerminalNode AT_SYMBOL() { return GetToken(MySQLParser.AT_SYMBOL, 0); }
		public ITerminalNode AUTOEXTEND_SIZE_SYMBOL() { return GetToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		public ITerminalNode AUTO_INCREMENT_SYMBOL() { return GetToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public ITerminalNode AVG_ROW_LENGTH_SYMBOL() { return GetToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		public ITerminalNode AVG_SYMBOL() { return GetToken(MySQLParser.AVG_SYMBOL, 0); }
		public ITerminalNode BACKUP_SYMBOL() { return GetToken(MySQLParser.BACKUP_SYMBOL, 0); }
		public ITerminalNode BINLOG_SYMBOL() { return GetToken(MySQLParser.BINLOG_SYMBOL, 0); }
		public ITerminalNode BIT_SYMBOL() { return GetToken(MySQLParser.BIT_SYMBOL, 0); }
		public ITerminalNode BLOCK_SYMBOL() { return GetToken(MySQLParser.BLOCK_SYMBOL, 0); }
		public ITerminalNode BOOLEAN_SYMBOL() { return GetToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		public ITerminalNode BOOL_SYMBOL() { return GetToken(MySQLParser.BOOL_SYMBOL, 0); }
		public ITerminalNode BTREE_SYMBOL() { return GetToken(MySQLParser.BTREE_SYMBOL, 0); }
		public ITerminalNode BUCKETS_SYMBOL() { return GetToken(MySQLParser.BUCKETS_SYMBOL, 0); }
		public ITerminalNode CASCADED_SYMBOL() { return GetToken(MySQLParser.CASCADED_SYMBOL, 0); }
		public ITerminalNode CATALOG_NAME_SYMBOL() { return GetToken(MySQLParser.CATALOG_NAME_SYMBOL, 0); }
		public ITerminalNode CHAIN_SYMBOL() { return GetToken(MySQLParser.CHAIN_SYMBOL, 0); }
		public ITerminalNode CHANGED_SYMBOL() { return GetToken(MySQLParser.CHANGED_SYMBOL, 0); }
		public ITerminalNode CHANNEL_SYMBOL() { return GetToken(MySQLParser.CHANNEL_SYMBOL, 0); }
		public ITerminalNode CIPHER_SYMBOL() { return GetToken(MySQLParser.CIPHER_SYMBOL, 0); }
		public ITerminalNode CLASS_ORIGIN_SYMBOL() { return GetToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
		public ITerminalNode CLIENT_SYMBOL() { return GetToken(MySQLParser.CLIENT_SYMBOL, 0); }
		public ITerminalNode CLOSE_SYMBOL() { return GetToken(MySQLParser.CLOSE_SYMBOL, 0); }
		public ITerminalNode COALESCE_SYMBOL() { return GetToken(MySQLParser.COALESCE_SYMBOL, 0); }
		public ITerminalNode CODE_SYMBOL() { return GetToken(MySQLParser.CODE_SYMBOL, 0); }
		public ITerminalNode COLLATION_SYMBOL() { return GetToken(MySQLParser.COLLATION_SYMBOL, 0); }
		public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public ITerminalNode COLUMN_FORMAT_SYMBOL() { return GetToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
		public ITerminalNode COLUMN_NAME_SYMBOL() { return GetToken(MySQLParser.COLUMN_NAME_SYMBOL, 0); }
		public ITerminalNode COMMITTED_SYMBOL() { return GetToken(MySQLParser.COMMITTED_SYMBOL, 0); }
		public ITerminalNode COMPACT_SYMBOL() { return GetToken(MySQLParser.COMPACT_SYMBOL, 0); }
		public ITerminalNode COMPLETION_SYMBOL() { return GetToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		public ITerminalNode COMPONENT_SYMBOL() { return GetToken(MySQLParser.COMPONENT_SYMBOL, 0); }
		public ITerminalNode COMPRESSED_SYMBOL() { return GetToken(MySQLParser.COMPRESSED_SYMBOL, 0); }
		public ITerminalNode COMPRESSION_SYMBOL() { return GetToken(MySQLParser.COMPRESSION_SYMBOL, 0); }
		public ITerminalNode CONCURRENT_SYMBOL() { return GetToken(MySQLParser.CONCURRENT_SYMBOL, 0); }
		public ITerminalNode CONNECTION_SYMBOL() { return GetToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public ITerminalNode CONSISTENT_SYMBOL() { return GetToken(MySQLParser.CONSISTENT_SYMBOL, 0); }
		public ITerminalNode CONSTRAINT_CATALOG_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		public ITerminalNode CONSTRAINT_NAME_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
		public ITerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		public ITerminalNode CONTEXT_SYMBOL() { return GetToken(MySQLParser.CONTEXT_SYMBOL, 0); }
		public ITerminalNode CPU_SYMBOL() { return GetToken(MySQLParser.CPU_SYMBOL, 0); }
		public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public ITerminalNode CURSOR_NAME_SYMBOL() { return GetToken(MySQLParser.CURSOR_NAME_SYMBOL, 0); }
		public ITerminalNode DATAFILE_SYMBOL() { return GetToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public ITerminalNode DATE_SYMBOL() { return GetToken(MySQLParser.DATE_SYMBOL, 0); }
		public ITerminalNode DAY_SYMBOL() { return GetToken(MySQLParser.DAY_SYMBOL, 0); }
		public ITerminalNode DEFAULT_AUTH_SYMBOL() { return GetToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
		public ITerminalNode DEFINER_SYMBOL() { return GetToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public ITerminalNode DEFINITION_SYMBOL() { return GetToken(MySQLParser.DEFINITION_SYMBOL, 0); }
		public ITerminalNode DELAY_KEY_WRITE_SYMBOL() { return GetToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		public ITerminalNode DESCRIPTION_SYMBOL() { return GetToken(MySQLParser.DESCRIPTION_SYMBOL, 0); }
		public ITerminalNode DIAGNOSTICS_SYMBOL() { return GetToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0); }
		public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public ITerminalNode DISK_SYMBOL() { return GetToken(MySQLParser.DISK_SYMBOL, 0); }
		public ITerminalNode DUMPFILE_SYMBOL() { return GetToken(MySQLParser.DUMPFILE_SYMBOL, 0); }
		public ITerminalNode DUPLICATE_SYMBOL() { return GetToken(MySQLParser.DUPLICATE_SYMBOL, 0); }
		public ITerminalNode DYNAMIC_SYMBOL() { return GetToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public ITerminalNode ENCRYPTION_SYMBOL() { return GetToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public ITerminalNode ENDS_SYMBOL() { return GetToken(MySQLParser.ENDS_SYMBOL, 0); }
		public ITerminalNode ENFORCED_SYMBOL() { return GetToken(MySQLParser.ENFORCED_SYMBOL, 0); }
		public ITerminalNode ENGINES_SYMBOL() { return GetToken(MySQLParser.ENGINES_SYMBOL, 0); }
		public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public ITerminalNode ENUM_SYMBOL() { return GetToken(MySQLParser.ENUM_SYMBOL, 0); }
		public ITerminalNode ERRORS_SYMBOL() { return GetToken(MySQLParser.ERRORS_SYMBOL, 0); }
		public ITerminalNode ERROR_SYMBOL() { return GetToken(MySQLParser.ERROR_SYMBOL, 0); }
		public ITerminalNode ESCAPE_SYMBOL() { return GetToken(MySQLParser.ESCAPE_SYMBOL, 0); }
		public ITerminalNode EVENTS_SYMBOL() { return GetToken(MySQLParser.EVENTS_SYMBOL, 0); }
		public ITerminalNode EVERY_SYMBOL() { return GetToken(MySQLParser.EVERY_SYMBOL, 0); }
		public ITerminalNode EXCHANGE_SYMBOL() { return GetToken(MySQLParser.EXCHANGE_SYMBOL, 0); }
		public ITerminalNode EXCLUDE_SYMBOL() { return GetToken(MySQLParser.EXCLUDE_SYMBOL, 0); }
		public ITerminalNode EXPANSION_SYMBOL() { return GetToken(MySQLParser.EXPANSION_SYMBOL, 0); }
		public ITerminalNode EXPIRE_SYMBOL() { return GetToken(MySQLParser.EXPIRE_SYMBOL, 0); }
		public ITerminalNode EXPORT_SYMBOL() { return GetToken(MySQLParser.EXPORT_SYMBOL, 0); }
		public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public ITerminalNode EXTENT_SIZE_SYMBOL() { return GetToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0); }
		public ITerminalNode FAST_SYMBOL() { return GetToken(MySQLParser.FAST_SYMBOL, 0); }
		public ITerminalNode FAULTS_SYMBOL() { return GetToken(MySQLParser.FAULTS_SYMBOL, 0); }
		public ITerminalNode FILE_BLOCK_SIZE_SYMBOL() { return GetToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		public ITerminalNode FILTER_SYMBOL() { return GetToken(MySQLParser.FILTER_SYMBOL, 0); }
		public ITerminalNode FIRST_SYMBOL() { return GetToken(MySQLParser.FIRST_SYMBOL, 0); }
		public ITerminalNode FIXED_SYMBOL() { return GetToken(MySQLParser.FIXED_SYMBOL, 0); }
		public ITerminalNode FOLLOWING_SYMBOL() { return GetToken(MySQLParser.FOLLOWING_SYMBOL, 0); }
		public ITerminalNode FORMAT_SYMBOL() { return GetToken(MySQLParser.FORMAT_SYMBOL, 0); }
		public ITerminalNode FOUND_SYMBOL() { return GetToken(MySQLParser.FOUND_SYMBOL, 0); }
		public ITerminalNode FULL_SYMBOL() { return GetToken(MySQLParser.FULL_SYMBOL, 0); }
		public ITerminalNode GENERAL_SYMBOL() { return GetToken(MySQLParser.GENERAL_SYMBOL, 0); }
		public ITerminalNode GEOMETRYCOLLECTION_SYMBOL() { return GetToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public ITerminalNode GEOMETRY_SYMBOL() { return GetToken(MySQLParser.GEOMETRY_SYMBOL, 0); }
		public ITerminalNode GET_FORMAT_SYMBOL() { return GetToken(MySQLParser.GET_FORMAT_SYMBOL, 0); }
		public ITerminalNode GET_MASTER_PUBLIC_KEY_SYMBOL() { return GetToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0); }
		public ITerminalNode GRANTS_SYMBOL() { return GetToken(MySQLParser.GRANTS_SYMBOL, 0); }
		public ITerminalNode GROUP_REPLICATION_SYMBOL() { return GetToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
		public ITerminalNode HASH_SYMBOL() { return GetToken(MySQLParser.HASH_SYMBOL, 0); }
		public ITerminalNode HISTOGRAM_SYMBOL() { return GetToken(MySQLParser.HISTOGRAM_SYMBOL, 0); }
		public ITerminalNode HISTORY_SYMBOL() { return GetToken(MySQLParser.HISTORY_SYMBOL, 0); }
		public ITerminalNode HOSTS_SYMBOL() { return GetToken(MySQLParser.HOSTS_SYMBOL, 0); }
		public ITerminalNode HOST_SYMBOL() { return GetToken(MySQLParser.HOST_SYMBOL, 0); }
		public ITerminalNode HOUR_SYMBOL() { return GetToken(MySQLParser.HOUR_SYMBOL, 0); }
		public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public ITerminalNode IGNORE_SERVER_IDS_SYMBOL() { return GetToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		public ITerminalNode INACTIVE_SYMBOL() { return GetToken(MySQLParser.INACTIVE_SYMBOL, 0); }
		public ITerminalNode INDEXES_SYMBOL() { return GetToken(MySQLParser.INDEXES_SYMBOL, 0); }
		public ITerminalNode INITIAL_SIZE_SYMBOL() { return GetToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public ITerminalNode INSERT_METHOD_SYMBOL() { return GetToken(MySQLParser.INSERT_METHOD_SYMBOL, 0); }
		public ITerminalNode INSTANCE_SYMBOL() { return GetToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public ITerminalNode INVISIBLE_SYMBOL() { return GetToken(MySQLParser.INVISIBLE_SYMBOL, 0); }
		public ITerminalNode INVOKER_SYMBOL() { return GetToken(MySQLParser.INVOKER_SYMBOL, 0); }
		public ITerminalNode IO_SYMBOL() { return GetToken(MySQLParser.IO_SYMBOL, 0); }
		public ITerminalNode IPC_SYMBOL() { return GetToken(MySQLParser.IPC_SYMBOL, 0); }
		public ITerminalNode ISOLATION_SYMBOL() { return GetToken(MySQLParser.ISOLATION_SYMBOL, 0); }
		public ITerminalNode ISSUER_SYMBOL() { return GetToken(MySQLParser.ISSUER_SYMBOL, 0); }
		public ITerminalNode JSON_SYMBOL() { return GetToken(MySQLParser.JSON_SYMBOL, 0); }
		public ITerminalNode KEY_BLOCK_SIZE_SYMBOL() { return GetToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public ITerminalNode LAST_SYMBOL() { return GetToken(MySQLParser.LAST_SYMBOL, 0); }
		public ITerminalNode LEAVES_SYMBOL() { return GetToken(MySQLParser.LEAVES_SYMBOL, 0); }
		public ITerminalNode LESS_SYMBOL() { return GetToken(MySQLParser.LESS_SYMBOL, 0); }
		public ITerminalNode LEVEL_SYMBOL() { return GetToken(MySQLParser.LEVEL_SYMBOL, 0); }
		public ITerminalNode LINESTRING_SYMBOL() { return GetToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		public ITerminalNode LIST_SYMBOL() { return GetToken(MySQLParser.LIST_SYMBOL, 0); }
		public ITerminalNode LOCKED_SYMBOL() { return GetToken(MySQLParser.LOCKED_SYMBOL, 0); }
		public ITerminalNode LOCKS_SYMBOL() { return GetToken(MySQLParser.LOCKS_SYMBOL, 0); }
		public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public ITerminalNode LOGS_SYMBOL() { return GetToken(MySQLParser.LOGS_SYMBOL, 0); }
		public ITerminalNode MASTER_AUTO_POSITION_SYMBOL() { return GetToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		public ITerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return GetToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		public ITerminalNode MASTER_DELAY_SYMBOL() { return GetToken(MySQLParser.MASTER_DELAY_SYMBOL, 0); }
		public ITerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return GetToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		public ITerminalNode MASTER_HOST_SYMBOL() { return GetToken(MySQLParser.MASTER_HOST_SYMBOL, 0); }
		public ITerminalNode NETWORK_NAMESPACE_SYMBOL() { return GetToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0); }
		public ITerminalNode MASTER_LOG_FILE_SYMBOL() { return GetToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
		public ITerminalNode MASTER_LOG_POS_SYMBOL() { return GetToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
		public ITerminalNode MASTER_PASSWORD_SYMBOL() { return GetToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
		public ITerminalNode MASTER_PORT_SYMBOL() { return GetToken(MySQLParser.MASTER_PORT_SYMBOL, 0); }
		public ITerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return GetToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		public ITerminalNode MASTER_RETRY_COUNT_SYMBOL() { return GetToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		public ITerminalNode MASTER_SERVER_ID_SYMBOL() { return GetToken(MySQLParser.MASTER_SERVER_ID_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CAPATH_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CA_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CERT_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CIPHER_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CRL_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_KEY_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_SYMBOL, 0); }
		public ITerminalNode MASTER_SYMBOL() { return GetToken(MySQLParser.MASTER_SYMBOL, 0); }
		public ITerminalNode MASTER_TLS_VERSION_SYMBOL() { return GetToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		public ITerminalNode MASTER_USER_SYMBOL() { return GetToken(MySQLParser.MASTER_USER_SYMBOL, 0); }
		public ITerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		public ITerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		public ITerminalNode MAX_ROWS_SYMBOL() { return GetToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		public ITerminalNode MAX_SIZE_SYMBOL() { return GetToken(MySQLParser.MAX_SIZE_SYMBOL, 0); }
		public ITerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		public ITerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return GetToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		public ITerminalNode MEDIUM_SYMBOL() { return GetToken(MySQLParser.MEDIUM_SYMBOL, 0); }
		public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public ITerminalNode MERGE_SYMBOL() { return GetToken(MySQLParser.MERGE_SYMBOL, 0); }
		public ITerminalNode MESSAGE_TEXT_SYMBOL() { return GetToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
		public ITerminalNode MICROSECOND_SYMBOL() { return GetToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		public ITerminalNode MIGRATE_SYMBOL() { return GetToken(MySQLParser.MIGRATE_SYMBOL, 0); }
		public ITerminalNode MINUTE_SYMBOL() { return GetToken(MySQLParser.MINUTE_SYMBOL, 0); }
		public ITerminalNode MIN_ROWS_SYMBOL() { return GetToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		public ITerminalNode MODE_SYMBOL() { return GetToken(MySQLParser.MODE_SYMBOL, 0); }
		public ITerminalNode MODIFY_SYMBOL() { return GetToken(MySQLParser.MODIFY_SYMBOL, 0); }
		public ITerminalNode MONTH_SYMBOL() { return GetToken(MySQLParser.MONTH_SYMBOL, 0); }
		public ITerminalNode MULTILINESTRING_SYMBOL() { return GetToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public ITerminalNode MULTIPOINT_SYMBOL() { return GetToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		public ITerminalNode MULTIPOLYGON_SYMBOL() { return GetToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public ITerminalNode MUTEX_SYMBOL() { return GetToken(MySQLParser.MUTEX_SYMBOL, 0); }
		public ITerminalNode MYSQL_ERRNO_SYMBOL() { return GetToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
		public ITerminalNode NAMES_SYMBOL() { return GetToken(MySQLParser.NAMES_SYMBOL, 0); }
		public ITerminalNode NAME_SYMBOL() { return GetToken(MySQLParser.NAME_SYMBOL, 0); }
		public ITerminalNode NATIONAL_SYMBOL() { return GetToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public ITerminalNode NCHAR_SYMBOL() { return GetToken(MySQLParser.NCHAR_SYMBOL, 0); }
		public ITerminalNode NDBCLUSTER_SYMBOL() { return GetToken(MySQLParser.NDBCLUSTER_SYMBOL, 0); }
		public ITerminalNode NESTED_SYMBOL() { return GetToken(MySQLParser.NESTED_SYMBOL, 0); }
		public ITerminalNode NEVER_SYMBOL() { return GetToken(MySQLParser.NEVER_SYMBOL, 0); }
		public ITerminalNode NEW_SYMBOL() { return GetToken(MySQLParser.NEW_SYMBOL, 0); }
		public ITerminalNode NEXT_SYMBOL() { return GetToken(MySQLParser.NEXT_SYMBOL, 0); }
		public ITerminalNode NODEGROUP_SYMBOL() { return GetToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		public ITerminalNode NOWAIT_SYMBOL() { return GetToken(MySQLParser.NOWAIT_SYMBOL, 0); }
		public ITerminalNode NO_WAIT_SYMBOL() { return GetToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
		public ITerminalNode NULLS_SYMBOL() { return GetToken(MySQLParser.NULLS_SYMBOL, 0); }
		public ITerminalNode NUMBER_SYMBOL() { return GetToken(MySQLParser.NUMBER_SYMBOL, 0); }
		public ITerminalNode NVARCHAR_SYMBOL() { return GetToken(MySQLParser.NVARCHAR_SYMBOL, 0); }
		public ITerminalNode OFFSET_SYMBOL() { return GetToken(MySQLParser.OFFSET_SYMBOL, 0); }
		public ITerminalNode OJ_SYMBOL() { return GetToken(MySQLParser.OJ_SYMBOL, 0); }
		public ITerminalNode OLD_SYMBOL() { return GetToken(MySQLParser.OLD_SYMBOL, 0); }
		public ITerminalNode ONE_SYMBOL() { return GetToken(MySQLParser.ONE_SYMBOL, 0); }
		public ITerminalNode ONLY_SYMBOL() { return GetToken(MySQLParser.ONLY_SYMBOL, 0); }
		public ITerminalNode OPEN_SYMBOL() { return GetToken(MySQLParser.OPEN_SYMBOL, 0); }
		public ITerminalNode OPTIONAL_SYMBOL() { return GetToken(MySQLParser.OPTIONAL_SYMBOL, 0); }
		public ITerminalNode OPTIONS_SYMBOL() { return GetToken(MySQLParser.OPTIONS_SYMBOL, 0); }
		public ITerminalNode ORDINALITY_SYMBOL() { return GetToken(MySQLParser.ORDINALITY_SYMBOL, 0); }
		public ITerminalNode ORGANIZATION_SYMBOL() { return GetToken(MySQLParser.ORGANIZATION_SYMBOL, 0); }
		public ITerminalNode OTHERS_SYMBOL() { return GetToken(MySQLParser.OTHERS_SYMBOL, 0); }
		public ITerminalNode OWNER_SYMBOL() { return GetToken(MySQLParser.OWNER_SYMBOL, 0); }
		public ITerminalNode PACK_KEYS_SYMBOL() { return GetToken(MySQLParser.PACK_KEYS_SYMBOL, 0); }
		public ITerminalNode PAGE_SYMBOL() { return GetToken(MySQLParser.PAGE_SYMBOL, 0); }
		public ITerminalNode PARSER_SYMBOL() { return GetToken(MySQLParser.PARSER_SYMBOL, 0); }
		public ITerminalNode PARTIAL_SYMBOL() { return GetToken(MySQLParser.PARTIAL_SYMBOL, 0); }
		public ITerminalNode PARTITIONING_SYMBOL() { return GetToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
		public ITerminalNode PARTITIONS_SYMBOL() { return GetToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public ITerminalNode PATH_SYMBOL() { return GetToken(MySQLParser.PATH_SYMBOL, 0); }
		public ITerminalNode PHASE_SYMBOL() { return GetToken(MySQLParser.PHASE_SYMBOL, 0); }
		public ITerminalNode PLUGINS_SYMBOL() { return GetToken(MySQLParser.PLUGINS_SYMBOL, 0); }
		public ITerminalNode PLUGIN_DIR_SYMBOL() { return GetToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0); }
		public ITerminalNode PLUGIN_SYMBOL() { return GetToken(MySQLParser.PLUGIN_SYMBOL, 0); }
		public ITerminalNode POINT_SYMBOL() { return GetToken(MySQLParser.POINT_SYMBOL, 0); }
		public ITerminalNode POLYGON_SYMBOL() { return GetToken(MySQLParser.POLYGON_SYMBOL, 0); }
		public ITerminalNode PORT_SYMBOL() { return GetToken(MySQLParser.PORT_SYMBOL, 0); }
		public ITerminalNode PRECEDING_SYMBOL() { return GetToken(MySQLParser.PRECEDING_SYMBOL, 0); }
		public ITerminalNode PRESERVE_SYMBOL() { return GetToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		public ITerminalNode PREV_SYMBOL() { return GetToken(MySQLParser.PREV_SYMBOL, 0); }
		public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public ITerminalNode PROCESSLIST_SYMBOL() { return GetToken(MySQLParser.PROCESSLIST_SYMBOL, 0); }
		public ITerminalNode PROFILES_SYMBOL() { return GetToken(MySQLParser.PROFILES_SYMBOL, 0); }
		public ITerminalNode PROFILE_SYMBOL() { return GetToken(MySQLParser.PROFILE_SYMBOL, 0); }
		public ITerminalNode QUARTER_SYMBOL() { return GetToken(MySQLParser.QUARTER_SYMBOL, 0); }
		public ITerminalNode QUERY_SYMBOL() { return GetToken(MySQLParser.QUERY_SYMBOL, 0); }
		public ITerminalNode QUICK_SYMBOL() { return GetToken(MySQLParser.QUICK_SYMBOL, 0); }
		public ITerminalNode READ_ONLY_SYMBOL() { return GetToken(MySQLParser.READ_ONLY_SYMBOL, 0); }
		public ITerminalNode REBUILD_SYMBOL() { return GetToken(MySQLParser.REBUILD_SYMBOL, 0); }
		public ITerminalNode RECOVER_SYMBOL() { return GetToken(MySQLParser.RECOVER_SYMBOL, 0); }
		public ITerminalNode REDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		public ITerminalNode REDUNDANT_SYMBOL() { return GetToken(MySQLParser.REDUNDANT_SYMBOL, 0); }
		public ITerminalNode REFERENCE_SYMBOL() { return GetToken(MySQLParser.REFERENCE_SYMBOL, 0); }
		public ITerminalNode RELAY_SYMBOL() { return GetToken(MySQLParser.RELAY_SYMBOL, 0); }
		public ITerminalNode RELAYLOG_SYMBOL() { return GetToken(MySQLParser.RELAYLOG_SYMBOL, 0); }
		public ITerminalNode RELAY_LOG_FILE_SYMBOL() { return GetToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
		public ITerminalNode RELAY_LOG_POS_SYMBOL() { return GetToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
		public ITerminalNode RELAY_THREAD_SYMBOL() { return GetToken(MySQLParser.RELAY_THREAD_SYMBOL, 0); }
		public ITerminalNode REMOVE_SYMBOL() { return GetToken(MySQLParser.REMOVE_SYMBOL, 0); }
		public ITerminalNode REORGANIZE_SYMBOL() { return GetToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
		public ITerminalNode REPEATABLE_SYMBOL() { return GetToken(MySQLParser.REPEATABLE_SYMBOL, 0); }
		public ITerminalNode REPLICATE_DO_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
		public ITerminalNode REPLICATE_DO_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		public ITerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		public ITerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		public ITerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		public ITerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		public ITerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		public ITerminalNode USER_RESOURCES_SYMBOL() { return GetToken(MySQLParser.USER_RESOURCES_SYMBOL, 0); }
		public ITerminalNode RESPECT_SYMBOL() { return GetToken(MySQLParser.RESPECT_SYMBOL, 0); }
		public ITerminalNode RESTORE_SYMBOL() { return GetToken(MySQLParser.RESTORE_SYMBOL, 0); }
		public ITerminalNode RESUME_SYMBOL() { return GetToken(MySQLParser.RESUME_SYMBOL, 0); }
		public ITerminalNode RETAIN_SYMBOL() { return GetToken(MySQLParser.RETAIN_SYMBOL, 0); }
		public ITerminalNode RETURNED_SQLSTATE_SYMBOL() { return GetToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		public ITerminalNode RETURNS_SYMBOL() { return GetToken(MySQLParser.RETURNS_SYMBOL, 0); }
		public ITerminalNode REUSE_SYMBOL() { return GetToken(MySQLParser.REUSE_SYMBOL, 0); }
		public ITerminalNode REVERSE_SYMBOL() { return GetToken(MySQLParser.REVERSE_SYMBOL, 0); }
		public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		public ITerminalNode ROLLUP_SYMBOL() { return GetToken(MySQLParser.ROLLUP_SYMBOL, 0); }
		public ITerminalNode ROTATE_SYMBOL() { return GetToken(MySQLParser.ROTATE_SYMBOL, 0); }
		public ITerminalNode ROUTINE_SYMBOL() { return GetToken(MySQLParser.ROUTINE_SYMBOL, 0); }
		public ITerminalNode ROW_COUNT_SYMBOL() { return GetToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		public ITerminalNode ROW_FORMAT_SYMBOL() { return GetToken(MySQLParser.ROW_FORMAT_SYMBOL, 0); }
		public ITerminalNode RTREE_SYMBOL() { return GetToken(MySQLParser.RTREE_SYMBOL, 0); }
		public ITerminalNode SCHEDULE_SYMBOL() { return GetToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		public ITerminalNode SCHEMA_NAME_SYMBOL() { return GetToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0); }
		public ITerminalNode SECONDARY_ENGINE_SYMBOL() { return GetToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
		public ITerminalNode SECONDARY_LOAD_SYMBOL() { return GetToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
		public ITerminalNode SECONDARY_SYMBOL() { return GetToken(MySQLParser.SECONDARY_SYMBOL, 0); }
		public ITerminalNode SECONDARY_UNLOAD_SYMBOL() { return GetToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		public ITerminalNode SECOND_SYMBOL() { return GetToken(MySQLParser.SECOND_SYMBOL, 0); }
		public ITerminalNode SECURITY_SYMBOL() { return GetToken(MySQLParser.SECURITY_SYMBOL, 0); }
		public ITerminalNode SERIALIZABLE_SYMBOL() { return GetToken(MySQLParser.SERIALIZABLE_SYMBOL, 0); }
		public ITerminalNode SERIAL_SYMBOL() { return GetToken(MySQLParser.SERIAL_SYMBOL, 0); }
		public ITerminalNode SERVER_SYMBOL() { return GetToken(MySQLParser.SERVER_SYMBOL, 0); }
		public ITerminalNode SHARE_SYMBOL() { return GetToken(MySQLParser.SHARE_SYMBOL, 0); }
		public ITerminalNode SIMPLE_SYMBOL() { return GetToken(MySQLParser.SIMPLE_SYMBOL, 0); }
		public ITerminalNode SKIP_SYMBOL() { return GetToken(MySQLParser.SKIP_SYMBOL, 0); }
		public ITerminalNode SLOW_SYMBOL() { return GetToken(MySQLParser.SLOW_SYMBOL, 0); }
		public ITerminalNode SNAPSHOT_SYMBOL() { return GetToken(MySQLParser.SNAPSHOT_SYMBOL, 0); }
		public ITerminalNode SOCKET_SYMBOL() { return GetToken(MySQLParser.SOCKET_SYMBOL, 0); }
		public ITerminalNode SONAME_SYMBOL() { return GetToken(MySQLParser.SONAME_SYMBOL, 0); }
		public ITerminalNode SOUNDS_SYMBOL() { return GetToken(MySQLParser.SOUNDS_SYMBOL, 0); }
		public ITerminalNode SOURCE_SYMBOL() { return GetToken(MySQLParser.SOURCE_SYMBOL, 0); }
		public ITerminalNode SQL_AFTER_GTIDS_SYMBOL() { return GetToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		public ITerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return GetToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		public ITerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return GetToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		public ITerminalNode SQL_BUFFER_RESULT_SYMBOL() { return GetToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		public ITerminalNode SQL_NO_CACHE_SYMBOL() { return GetToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
		public ITerminalNode SQL_THREAD_SYMBOL() { return GetToken(MySQLParser.SQL_THREAD_SYMBOL, 0); }
		public ITerminalNode SRID_SYMBOL() { return GetToken(MySQLParser.SRID_SYMBOL, 0); }
		public ITerminalNode STACKED_SYMBOL() { return GetToken(MySQLParser.STACKED_SYMBOL, 0); }
		public ITerminalNode STARTS_SYMBOL() { return GetToken(MySQLParser.STARTS_SYMBOL, 0); }
		public ITerminalNode STATS_AUTO_RECALC_SYMBOL() { return GetToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		public ITerminalNode STATS_PERSISTENT_SYMBOL() { return GetToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
		public ITerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return GetToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		public ITerminalNode STATUS_SYMBOL() { return GetToken(MySQLParser.STATUS_SYMBOL, 0); }
		public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public ITerminalNode STRING_SYMBOL() { return GetToken(MySQLParser.STRING_SYMBOL, 0); }
		public ITerminalNode SUBCLASS_ORIGIN_SYMBOL() { return GetToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		public ITerminalNode SUBDATE_SYMBOL() { return GetToken(MySQLParser.SUBDATE_SYMBOL, 0); }
		public ITerminalNode SUBJECT_SYMBOL() { return GetToken(MySQLParser.SUBJECT_SYMBOL, 0); }
		public ITerminalNode SUBPARTITIONS_SYMBOL() { return GetToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0); }
		public ITerminalNode SUBPARTITION_SYMBOL() { return GetToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		public ITerminalNode SUSPEND_SYMBOL() { return GetToken(MySQLParser.SUSPEND_SYMBOL, 0); }
		public ITerminalNode SWAPS_SYMBOL() { return GetToken(MySQLParser.SWAPS_SYMBOL, 0); }
		public ITerminalNode SWITCHES_SYMBOL() { return GetToken(MySQLParser.SWITCHES_SYMBOL, 0); }
		public ITerminalNode TABLES_SYMBOL() { return GetToken(MySQLParser.TABLES_SYMBOL, 0); }
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public ITerminalNode TABLE_CHECKSUM_SYMBOL() { return GetToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
		public ITerminalNode TABLE_NAME_SYMBOL() { return GetToken(MySQLParser.TABLE_NAME_SYMBOL, 0); }
		public ITerminalNode TEMPORARY_SYMBOL() { return GetToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public ITerminalNode TEMPTABLE_SYMBOL() { return GetToken(MySQLParser.TEMPTABLE_SYMBOL, 0); }
		public ITerminalNode TEXT_SYMBOL() { return GetToken(MySQLParser.TEXT_SYMBOL, 0); }
		public ITerminalNode THAN_SYMBOL() { return GetToken(MySQLParser.THAN_SYMBOL, 0); }
		public ITerminalNode THREAD_PRIORITY_SYMBOL() { return GetToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
		public ITerminalNode TIES_SYMBOL() { return GetToken(MySQLParser.TIES_SYMBOL, 0); }
		public ITerminalNode TIMESTAMP_ADD_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0); }
		public ITerminalNode TIMESTAMP_DIFF_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0); }
		public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public ITerminalNode TIME_SYMBOL() { return GetToken(MySQLParser.TIME_SYMBOL, 0); }
		public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public ITerminalNode TRIGGERS_SYMBOL() { return GetToken(MySQLParser.TRIGGERS_SYMBOL, 0); }
		public ITerminalNode TYPES_SYMBOL() { return GetToken(MySQLParser.TYPES_SYMBOL, 0); }
		public ITerminalNode TYPE_SYMBOL() { return GetToken(MySQLParser.TYPE_SYMBOL, 0); }
		public ITerminalNode UNBOUNDED_SYMBOL() { return GetToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public ITerminalNode UNCOMMITTED_SYMBOL() { return GetToken(MySQLParser.UNCOMMITTED_SYMBOL, 0); }
		public ITerminalNode UNDEFINED_SYMBOL() { return GetToken(MySQLParser.UNDEFINED_SYMBOL, 0); }
		public ITerminalNode UNDOFILE_SYMBOL() { return GetToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		public ITerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		public ITerminalNode UNKNOWN_SYMBOL() { return GetToken(MySQLParser.UNKNOWN_SYMBOL, 0); }
		public ITerminalNode UNTIL_SYMBOL() { return GetToken(MySQLParser.UNTIL_SYMBOL, 0); }
		public ITerminalNode UPGRADE_SYMBOL() { return GetToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public ITerminalNode USE_FRM_SYMBOL() { return GetToken(MySQLParser.USE_FRM_SYMBOL, 0); }
		public ITerminalNode VALIDATION_SYMBOL() { return GetToken(MySQLParser.VALIDATION_SYMBOL, 0); }
		public ITerminalNode VALUE_SYMBOL() { return GetToken(MySQLParser.VALUE_SYMBOL, 0); }
		public ITerminalNode VARIABLES_SYMBOL() { return GetToken(MySQLParser.VARIABLES_SYMBOL, 0); }
		public ITerminalNode VCPU_SYMBOL() { return GetToken(MySQLParser.VCPU_SYMBOL, 0); }
		public ITerminalNode VIEW_SYMBOL() { return GetToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ITerminalNode VISIBLE_SYMBOL() { return GetToken(MySQLParser.VISIBLE_SYMBOL, 0); }
		public ITerminalNode WAIT_SYMBOL() { return GetToken(MySQLParser.WAIT_SYMBOL, 0); }
		public ITerminalNode WARNINGS_SYMBOL() { return GetToken(MySQLParser.WARNINGS_SYMBOL, 0); }
		public ITerminalNode WEEK_SYMBOL() { return GetToken(MySQLParser.WEEK_SYMBOL, 0); }
		public ITerminalNode WEIGHT_STRING_SYMBOL() { return GetToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0); }
		public ITerminalNode WITHOUT_SYMBOL() { return GetToken(MySQLParser.WITHOUT_SYMBOL, 0); }
		public ITerminalNode WORK_SYMBOL() { return GetToken(MySQLParser.WORK_SYMBOL, 0); }
		public ITerminalNode WRAPPER_SYMBOL() { return GetToken(MySQLParser.WRAPPER_SYMBOL, 0); }
		public ITerminalNode X509_SYMBOL() { return GetToken(MySQLParser.X509_SYMBOL, 0); }
		public ITerminalNode XID_SYMBOL() { return GetToken(MySQLParser.XID_SYMBOL, 0); }
		public ITerminalNode XML_SYMBOL() { return GetToken(MySQLParser.XML_SYMBOL, 0); }
		public ITerminalNode YEAR_SYMBOL() { return GetToken(MySQLParser.YEAR_SYMBOL, 0); }
		public IdentifierKeywordsUnambiguousContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeywordsUnambiguous; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeywordsUnambiguous(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeywordsUnambiguous(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierKeywordsUnambiguous(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
		IdentifierKeywordsUnambiguousContext _localctx = new IdentifierKeywordsUnambiguousContext(Context, State);
		EnterRule(_localctx, 1188, RULE_identifierKeywordsUnambiguous);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8252;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT_SYMBOL) | (1L << ALWAYS_SYMBOL) | (1L << BACKUP_SYMBOL) | (1L << CLOSE_SYMBOL) | (1L << FORMAT_SYMBOL) | (1L << GROUP_REPLICATION_SYMBOL) | (1L << HOST_SYMBOL) | (1L << OPEN_SYMBOL) | (1L << OPTIONS_SYMBOL) | (1L << OWNER_SYMBOL) | (1L << PARSER_SYMBOL) | (1L << PORT_SYMBOL) | (1L << REMOVE_SYMBOL) | (1L << RESTORE_SYMBOL) | (1L << SECURITY_SYMBOL) | (1L << SERVER_SYMBOL) | (1L << SOCKET_SYMBOL) | (1L << SONAME_SYMBOL) | (1L << UPGRADE_SYMBOL) | (1L << WRAPPER_SYMBOL) | (1L << ACTION_SYMBOL) | (1L << ADDDATE_SYMBOL) | (1L << AFTER_SYMBOL) | (1L << AGAINST_SYMBOL) | (1L << AGGREGATE_SYMBOL) | (1L << ALGORITHM_SYMBOL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ANY_SYMBOL - 64)) | (1L << (AT_SYMBOL - 64)) | (1L << (AUTO_INCREMENT_SYMBOL - 64)) | (1L << (AUTOEXTEND_SIZE_SYMBOL - 64)) | (1L << (AVG_ROW_LENGTH_SYMBOL - 64)) | (1L << (AVG_SYMBOL - 64)) | (1L << (BINLOG_SYMBOL - 64)) | (1L << (BIT_SYMBOL - 64)) | (1L << (BLOCK_SYMBOL - 64)) | (1L << (BOOL_SYMBOL - 64)) | (1L << (BOOLEAN_SYMBOL - 64)) | (1L << (BTREE_SYMBOL - 64)) | (1L << (CASCADED_SYMBOL - 64)) | (1L << (CATALOG_NAME_SYMBOL - 64)) | (1L << (CHAIN_SYMBOL - 64)) | (1L << (CHANGED_SYMBOL - 64)) | (1L << (CHANNEL_SYMBOL - 64)) | (1L << (CIPHER_SYMBOL - 64)) | (1L << (CLIENT_SYMBOL - 64)) | (1L << (CLASS_ORIGIN_SYMBOL - 64)) | (1L << (COALESCE_SYMBOL - 64)) | (1L << (CODE_SYMBOL - 64)) | (1L << (COLLATION_SYMBOL - 64)) | (1L << (COLUMN_NAME_SYMBOL - 64)) | (1L << (COLUMN_FORMAT_SYMBOL - 64)) | (1L << (COLUMNS_SYMBOL - 64)) | (1L << (COMMITTED_SYMBOL - 64)) | (1L << (COMPACT_SYMBOL - 64)) | (1L << (COMPLETION_SYMBOL - 64)) | (1L << (COMPRESSED_SYMBOL - 64)) | (1L << (COMPRESSION_SYMBOL - 64)) | (1L << (ENCRYPTION_SYMBOL - 64)) | (1L << (CONCURRENT_SYMBOL - 64)) | (1L << (CONNECTION_SYMBOL - 64)) | (1L << (CONSISTENT_SYMBOL - 64)) | (1L << (CONSTRAINT_CATALOG_SYMBOL - 64)) | (1L << (CONSTRAINT_SCHEMA_SYMBOL - 64)) | (1L << (CONSTRAINT_NAME_SYMBOL - 64)) | (1L << (CONTEXT_SYMBOL - 64)) | (1L << (CPU_SYMBOL - 64)) | (1L << (CURRENT_SYMBOL - 64)) | (1L << (CURSOR_NAME_SYMBOL - 64)) | (1L << (DATA_SYMBOL - 64)) | (1L << (DATAFILE_SYMBOL - 64)) | (1L << (DATETIME_SYMBOL - 64)) | (1L << (DATE_SYMBOL - 64)) | (1L << (DAY_SYMBOL - 64)) | (1L << (DEFAULT_AUTH_SYMBOL - 64)) | (1L << (DEFINER_SYMBOL - 64)) | (1L << (DELAY_KEY_WRITE_SYMBOL - 64)) | (1L << (DIAGNOSTICS_SYMBOL - 64)) | (1L << (DIRECTORY_SYMBOL - 64)) | (1L << (DISABLE_SYMBOL - 64)) | (1L << (DISCARD_SYMBOL - 64)) | (1L << (DISK_SYMBOL - 64)) | (1L << (DUMPFILE_SYMBOL - 64)) | (1L << (DUPLICATE_SYMBOL - 64)) | (1L << (DYNAMIC_SYMBOL - 64)) | (1L << (ENDS_SYMBOL - 64)) | (1L << (ENUM_SYMBOL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENGINE_SYMBOL - 128)) | (1L << (ENGINES_SYMBOL - 128)) | (1L << (ERROR_SYMBOL - 128)) | (1L << (ERRORS_SYMBOL - 128)) | (1L << (ESCAPE_SYMBOL - 128)) | (1L << (EVENTS_SYMBOL - 128)) | (1L << (EVERY_SYMBOL - 128)) | (1L << (EXPANSION_SYMBOL - 128)) | (1L << (EXPORT_SYMBOL - 128)) | (1L << (EXTENDED_SYMBOL - 128)) | (1L << (EXTENT_SIZE_SYMBOL - 128)) | (1L << (FAULTS_SYMBOL - 128)) | (1L << (FAST_SYMBOL - 128)) | (1L << (FOUND_SYMBOL - 128)) | (1L << (ENABLE_SYMBOL - 128)) | (1L << (FULL_SYMBOL - 128)) | (1L << (FILE_BLOCK_SIZE_SYMBOL - 128)) | (1L << (FILTER_SYMBOL - 128)) | (1L << (FIRST_SYMBOL - 128)) | (1L << (FIXED_SYMBOL - 128)) | (1L << (GENERAL_SYMBOL - 128)) | (1L << (GEOMETRY_SYMBOL - 128)) | (1L << (GEOMETRYCOLLECTION_SYMBOL - 128)) | (1L << (GET_FORMAT_SYMBOL - 128)) | (1L << (GRANTS_SYMBOL - 128)) | (1L << (HASH_SYMBOL - 128)) | (1L << (HOSTS_SYMBOL - 128)) | (1L << (HOUR_SYMBOL - 128)) | (1L << (IDENTIFIED_SYMBOL - 128)) | (1L << (IGNORE_SERVER_IDS_SYMBOL - 128)) | (1L << (INVOKER_SYMBOL - 128)) | (1L << (INDEXES_SYMBOL - 128)) | (1L << (INITIAL_SIZE_SYMBOL - 128)) | (1L << (INSTANCE_SYMBOL - 128)) | (1L << (IO_SYMBOL - 128)) | (1L << (IPC_SYMBOL - 128)) | (1L << (ISOLATION_SYMBOL - 128)) | (1L << (ISSUER_SYMBOL - 128)) | (1L << (INSERT_METHOD_SYMBOL - 128)) | (1L << (JSON_SYMBOL - 128)) | (1L << (KEY_BLOCK_SIZE_SYMBOL - 128)) | (1L << (LAST_SYMBOL - 128)) | (1L << (LEAVES_SYMBOL - 128)) | (1L << (LESS_SYMBOL - 128)) | (1L << (LEVEL_SYMBOL - 128)) | (1L << (LINESTRING_SYMBOL - 128)) | (1L << (LIST_SYMBOL - 128)) | (1L << (LOCKS_SYMBOL - 128)) | (1L << (LOGFILE_SYMBOL - 128)) | (1L << (LOGS_SYMBOL - 128)) | (1L << (MAX_ROWS_SYMBOL - 128)) | (1L << (MASTER_SYMBOL - 128)) | (1L << (MASTER_HEARTBEAT_PERIOD_SYMBOL - 128)) | (1L << (MASTER_HOST_SYMBOL - 128)) | (1L << (MASTER_PORT_SYMBOL - 128)) | (1L << (MASTER_LOG_FILE_SYMBOL - 128)) | (1L << (MASTER_LOG_POS_SYMBOL - 128)) | (1L << (MASTER_USER_SYMBOL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (MASTER_PASSWORD_SYMBOL - 192)) | (1L << (MASTER_SERVER_ID_SYMBOL - 192)) | (1L << (MASTER_CONNECT_RETRY_SYMBOL - 192)) | (1L << (MASTER_RETRY_COUNT_SYMBOL - 192)) | (1L << (MASTER_DELAY_SYMBOL - 192)) | (1L << (MASTER_SSL_SYMBOL - 192)) | (1L << (MASTER_SSL_CA_SYMBOL - 192)) | (1L << (MASTER_SSL_CAPATH_SYMBOL - 192)) | (1L << (MASTER_TLS_VERSION_SYMBOL - 192)) | (1L << (MASTER_SSL_CERT_SYMBOL - 192)) | (1L << (MASTER_SSL_CIPHER_SYMBOL - 192)) | (1L << (MASTER_SSL_CRL_SYMBOL - 192)) | (1L << (MASTER_SSL_CRLPATH_SYMBOL - 192)) | (1L << (MASTER_SSL_KEY_SYMBOL - 192)) | (1L << (MASTER_AUTO_POSITION_SYMBOL - 192)) | (1L << (MAX_CONNECTIONS_PER_HOUR_SYMBOL - 192)) | (1L << (MAX_QUERIES_PER_HOUR_SYMBOL - 192)) | (1L << (MAX_SIZE_SYMBOL - 192)) | (1L << (MAX_UPDATES_PER_HOUR_SYMBOL - 192)) | (1L << (MAX_USER_CONNECTIONS_SYMBOL - 192)) | (1L << (MEDIUM_SYMBOL - 192)) | (1L << (MEMORY_SYMBOL - 192)) | (1L << (MERGE_SYMBOL - 192)) | (1L << (MESSAGE_TEXT_SYMBOL - 192)) | (1L << (MICROSECOND_SYMBOL - 192)) | (1L << (MIGRATE_SYMBOL - 192)) | (1L << (MINUTE_SYMBOL - 192)) | (1L << (MIN_ROWS_SYMBOL - 192)) | (1L << (MODIFY_SYMBOL - 192)) | (1L << (MODE_SYMBOL - 192)) | (1L << (MONTH_SYMBOL - 192)) | (1L << (MULTILINESTRING_SYMBOL - 192)) | (1L << (MULTIPOINT_SYMBOL - 192)) | (1L << (MULTIPOLYGON_SYMBOL - 192)) | (1L << (MUTEX_SYMBOL - 192)) | (1L << (MYSQL_ERRNO_SYMBOL - 192)) | (1L << (NAME_SYMBOL - 192)) | (1L << (NAMES_SYMBOL - 192)) | (1L << (NATIONAL_SYMBOL - 192)) | (1L << (NCHAR_SYMBOL - 192)) | (1L << (NDBCLUSTER_SYMBOL - 192)) | (1L << (NEVER_SYMBOL - 192)) | (1L << (NEXT_SYMBOL - 192)) | (1L << (NEW_SYMBOL - 192)) | (1L << (NO_WAIT_SYMBOL - 192)) | (1L << (NODEGROUP_SYMBOL - 192)) | (1L << (NUMBER_SYMBOL - 192)) | (1L << (NVARCHAR_SYMBOL - 192)) | (1L << (OFFSET_SYMBOL - 192)) | (1L << (ONE_SYMBOL - 192)) | (1L << (PACK_KEYS_SYMBOL - 192)) | (1L << (PAGE_SYMBOL - 192)) | (1L << (PARTIAL_SYMBOL - 192)) | (1L << (PARTITIONING_SYMBOL - 192)) | (1L << (PARTITIONS_SYMBOL - 192)) | (1L << (PASSWORD_SYMBOL - 192)) | (1L << (PHASE_SYMBOL - 192)) | (1L << (PLUGIN_DIR_SYMBOL - 192)) | (1L << (PLUGIN_SYMBOL - 192)) | (1L << (PLUGINS_SYMBOL - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (POINT_SYMBOL - 256)) | (1L << (POLYGON_SYMBOL - 256)) | (1L << (PRESERVE_SYMBOL - 256)) | (1L << (PREV_SYMBOL - 256)) | (1L << (PRIVILEGES_SYMBOL - 256)) | (1L << (PROCESSLIST_SYMBOL - 256)) | (1L << (PROFILE_SYMBOL - 256)) | (1L << (PROFILES_SYMBOL - 256)) | (1L << (QUARTER_SYMBOL - 256)) | (1L << (QUERY_SYMBOL - 256)) | (1L << (QUICK_SYMBOL - 256)) | (1L << (READ_ONLY_SYMBOL - 256)) | (1L << (REBUILD_SYMBOL - 256)) | (1L << (RECOVER_SYMBOL - 256)) | (1L << (REDO_BUFFER_SIZE_SYMBOL - 256)) | (1L << (REDUNDANT_SYMBOL - 256)) | (1L << (RELAY_SYMBOL - 256)) | (1L << (RELAYLOG_SYMBOL - 256)) | (1L << (RELAY_LOG_FILE_SYMBOL - 256)) | (1L << (RELAY_LOG_POS_SYMBOL - 256)) | (1L << (RELAY_THREAD_SYMBOL - 256)) | (1L << (REORGANIZE_SYMBOL - 256)) | (1L << (REPEATABLE_SYMBOL - 256)) | (1L << (REPLICATE_DO_DB_SYMBOL - 256)) | (1L << (REPLICATE_IGNORE_DB_SYMBOL - 256)) | (1L << (REPLICATE_DO_TABLE_SYMBOL - 256)) | (1L << (REPLICATE_IGNORE_TABLE_SYMBOL - 256)) | (1L << (REPLICATE_WILD_DO_TABLE_SYMBOL - 256)) | (1L << (REPLICATE_WILD_IGNORE_TABLE_SYMBOL - 256)) | (1L << (REPLICATE_REWRITE_DB_SYMBOL - 256)) | (1L << (RESUME_SYMBOL - 256)) | (1L << (RETURNED_SQLSTATE_SYMBOL - 256)) | (1L << (RETURNS_SYMBOL - 256)) | (1L << (REVERSE_SYMBOL - 256)) | (1L << (ROLLUP_SYMBOL - 256)) | (1L << (ROTATE_SYMBOL - 256)) | (1L << (ROUTINE_SYMBOL - 256)) | (1L << (ROW_COUNT_SYMBOL - 256)) | (1L << (ROW_FORMAT_SYMBOL - 256)) | (1L << (RTREE_SYMBOL - 256)) | (1L << (SCHEDULE_SYMBOL - 256)) | (1L << (SCHEMA_NAME_SYMBOL - 256)) | (1L << (SECOND_SYMBOL - 256)) | (1L << (SERIAL_SYMBOL - 256)) | (1L << (SERIALIZABLE_SYMBOL - 256)) | (1L << (SIMPLE_SYMBOL - 256)) | (1L << (SHARE_SYMBOL - 256)) | (1L << (SLOW_SYMBOL - 256)) | (1L << (SNAPSHOT_SYMBOL - 256)) | (1L << (SOUNDS_SYMBOL - 256)) | (1L << (SOURCE_SYMBOL - 256)) | (1L << (SQL_AFTER_GTIDS_SYMBOL - 256)) | (1L << (SQL_AFTER_MTS_GAPS_SYMBOL - 256)) | (1L << (SQL_BEFORE_GTIDS_SYMBOL - 256)) | (1L << (SQL_BUFFER_RESULT_SYMBOL - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (SQL_NO_CACHE_SYMBOL - 320)) | (1L << (SQL_THREAD_SYMBOL - 320)) | (1L << (STACKED_SYMBOL - 320)) | (1L << (STARTS_SYMBOL - 320)) | (1L << (STATS_AUTO_RECALC_SYMBOL - 320)) | (1L << (STATS_PERSISTENT_SYMBOL - 320)) | (1L << (STATS_SAMPLE_PAGES_SYMBOL - 320)) | (1L << (STATUS_SYMBOL - 320)) | (1L << (STORAGE_SYMBOL - 320)) | (1L << (STRING_SYMBOL - 320)) | (1L << (SUBCLASS_ORIGIN_SYMBOL - 320)) | (1L << (SUBDATE_SYMBOL - 320)) | (1L << (SUBJECT_SYMBOL - 320)) | (1L << (SUBPARTITION_SYMBOL - 320)) | (1L << (SUBPARTITIONS_SYMBOL - 320)) | (1L << (SUSPEND_SYMBOL - 320)) | (1L << (SWAPS_SYMBOL - 320)) | (1L << (SWITCHES_SYMBOL - 320)) | (1L << (TABLE_NAME_SYMBOL - 320)) | (1L << (TABLES_SYMBOL - 320)) | (1L << (TABLE_CHECKSUM_SYMBOL - 320)) | (1L << (TABLESPACE_SYMBOL - 320)) | (1L << (TEMPORARY_SYMBOL - 320)) | (1L << (TEMPTABLE_SYMBOL - 320)) | (1L << (TEXT_SYMBOL - 320)) | (1L << (THAN_SYMBOL - 320)) | (1L << (TRANSACTION_SYMBOL - 320)) | (1L << (TRIGGERS_SYMBOL - 320)) | (1L << (TIMESTAMP_SYMBOL - 320)) | (1L << (TIMESTAMP_ADD_SYMBOL - 320)) | (1L << (TIMESTAMP_DIFF_SYMBOL - 320)) | (1L << (TIME_SYMBOL - 320)) | (1L << (TYPES_SYMBOL - 320)) | (1L << (TYPE_SYMBOL - 320)) | (1L << (UNCOMMITTED_SYMBOL - 320)) | (1L << (UNDEFINED_SYMBOL - 320)) | (1L << (UNDO_BUFFER_SIZE_SYMBOL - 320)) | (1L << (UNDOFILE_SYMBOL - 320)) | (1L << (UNKNOWN_SYMBOL - 320)) | (1L << (UNTIL_SYMBOL - 320)) | (1L << (USER_RESOURCES_SYMBOL - 320)) | (1L << (USER_SYMBOL - 320)) | (1L << (USE_FRM_SYMBOL - 320)) | (1L << (VARIABLES_SYMBOL - 320)) | (1L << (VIEW_SYMBOL - 320)) | (1L << (VALUE_SYMBOL - 320)) | (1L << (WARNINGS_SYMBOL - 320)) | (1L << (WAIT_SYMBOL - 320)) | (1L << (WEEK_SYMBOL - 320)) | (1L << (WORK_SYMBOL - 320)) | (1L << (WEIGHT_STRING_SYMBOL - 320)) | (1L << (X509_SYMBOL - 320)) | (1L << (XID_SYMBOL - 320)) | (1L << (XML_SYMBOL - 320)) | (1L << (YEAR_SYMBOL - 320)))) != 0) || _la==EXCHANGE_SYMBOL || _la==EXPIRE_SYMBOL || _la==ONLY_SYMBOL || ((((_la - 669)) & ~0x3f) == 0 && ((1L << (_la - 669)) & ((1L << (VALIDATION_SYMBOL - 669)) | (1L << (WITHOUT_SYMBOL - 669)) | (1L << (ROLE_SYMBOL - 669)) | (1L << (ADMIN_SYMBOL - 669)) | (1L << (INVISIBLE_SYMBOL - 669)) | (1L << (VISIBLE_SYMBOL - 669)) | (1L << (COMPONENT_SYMBOL - 669)) | (1L << (SKIP_SYMBOL - 669)) | (1L << (LOCKED_SYMBOL - 669)) | (1L << (NOWAIT_SYMBOL - 669)) | (1L << (HISTOGRAM_SYMBOL - 669)) | (1L << (BUCKETS_SYMBOL - 669)) | (1L << (EXCLUDE_SYMBOL - 669)) | (1L << (FOLLOWING_SYMBOL - 669)) | (1L << (NULLS_SYMBOL - 669)) | (1L << (OTHERS_SYMBOL - 669)) | (1L << (PRECEDING_SYMBOL - 669)) | (1L << (RESPECT_SYMBOL - 669)) | (1L << (TIES_SYMBOL - 669)) | (1L << (UNBOUNDED_SYMBOL - 669)))) != 0) || ((((_la - 733)) & ~0x3f) == 0 && ((1L << (_la - 733)) & ((1L << (NESTED_SYMBOL - 733)) | (1L << (ORDINALITY_SYMBOL - 733)) | (1L << (PATH_SYMBOL - 733)) | (1L << (HISTORY_SYMBOL - 733)) | (1L << (REUSE_SYMBOL - 733)) | (1L << (SRID_SYMBOL - 733)) | (1L << (THREAD_PRIORITY_SYMBOL - 733)) | (1L << (VCPU_SYMBOL - 733)) | (1L << (MASTER_PUBLIC_KEY_PATH_SYMBOL - 733)) | (1L << (GET_MASTER_PUBLIC_KEY_SYMBOL - 733)) | (1L << (DEFINITION_SYMBOL - 733)) | (1L << (DESCRIPTION_SYMBOL - 733)) | (1L << (ORGANIZATION_SYMBOL - 733)) | (1L << (REFERENCE_SYMBOL - 733)) | (1L << (OPTIONAL_SYMBOL - 733)) | (1L << (SECONDARY_SYMBOL - 733)) | (1L << (SECONDARY_ENGINE_SYMBOL - 733)) | (1L << (SECONDARY_LOAD_SYMBOL - 733)) | (1L << (SECONDARY_UNLOAD_SYMBOL - 733)) | (1L << (ACTIVE_SYMBOL - 733)) | (1L << (INACTIVE_SYMBOL - 733)) | (1L << (RETAIN_SYMBOL - 733)) | (1L << (OLD_SYMBOL - 733)) | (1L << (NETWORK_NAMESPACE_SYMBOL - 733)) | (1L << (ENFORCED_SYMBOL - 733)) | (1L << (OJ_SYMBOL - 733)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleKeywordContext : ParserRuleContext {
		public RoleOrLabelKeywordContext roleOrLabelKeyword() {
			return GetRuleContext<RoleOrLabelKeywordContext>(0);
		}
		public RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() {
			return GetRuleContext<RoleOrIdentifierKeywordContext>(0);
		}
		public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return GetRuleContext<IdentifierKeywordsUnambiguousContext>(0);
		}
		public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return GetRuleContext<IdentifierKeywordsAmbiguous2LabelsContext>(0);
		}
		public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return GetRuleContext<IdentifierKeywordsAmbiguous4SystemVariablesContext>(0);
		}
		public RoleKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleKeywordContext roleKeyword() {
		RoleKeywordContext _localctx = new RoleKeywordContext(Context, State);
		EnterRule(_localctx, 1190, RULE_roleKeyword);
		try {
			State = 8264;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1108,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8254;
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				State = 8257;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1106,Context) ) {
				case 1:
					{
					State = 8255; roleOrLabelKeyword();
					}
					break;
				case 2:
					{
					State = 8256; roleOrIdentifierKeyword();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8262;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ACCOUNT_SYMBOL:
				case ALWAYS_SYMBOL:
				case BACKUP_SYMBOL:
				case CLOSE_SYMBOL:
				case FORMAT_SYMBOL:
				case GROUP_REPLICATION_SYMBOL:
				case HOST_SYMBOL:
				case OPEN_SYMBOL:
				case OPTIONS_SYMBOL:
				case OWNER_SYMBOL:
				case PARSER_SYMBOL:
				case PORT_SYMBOL:
				case REMOVE_SYMBOL:
				case RESTORE_SYMBOL:
				case SECURITY_SYMBOL:
				case SERVER_SYMBOL:
				case SOCKET_SYMBOL:
				case SONAME_SYMBOL:
				case UPGRADE_SYMBOL:
				case WRAPPER_SYMBOL:
				case ACTION_SYMBOL:
				case ADDDATE_SYMBOL:
				case AFTER_SYMBOL:
				case AGAINST_SYMBOL:
				case AGGREGATE_SYMBOL:
				case ALGORITHM_SYMBOL:
				case ANY_SYMBOL:
				case AT_SYMBOL:
				case AUTO_INCREMENT_SYMBOL:
				case AUTOEXTEND_SIZE_SYMBOL:
				case AVG_ROW_LENGTH_SYMBOL:
				case AVG_SYMBOL:
				case BINLOG_SYMBOL:
				case BIT_SYMBOL:
				case BLOCK_SYMBOL:
				case BOOL_SYMBOL:
				case BOOLEAN_SYMBOL:
				case BTREE_SYMBOL:
				case CASCADED_SYMBOL:
				case CATALOG_NAME_SYMBOL:
				case CHAIN_SYMBOL:
				case CHANGED_SYMBOL:
				case CHANNEL_SYMBOL:
				case CIPHER_SYMBOL:
				case CLIENT_SYMBOL:
				case CLASS_ORIGIN_SYMBOL:
				case COALESCE_SYMBOL:
				case CODE_SYMBOL:
				case COLLATION_SYMBOL:
				case COLUMN_NAME_SYMBOL:
				case COLUMN_FORMAT_SYMBOL:
				case COLUMNS_SYMBOL:
				case COMMITTED_SYMBOL:
				case COMPACT_SYMBOL:
				case COMPLETION_SYMBOL:
				case COMPRESSED_SYMBOL:
				case COMPRESSION_SYMBOL:
				case ENCRYPTION_SYMBOL:
				case CONCURRENT_SYMBOL:
				case CONNECTION_SYMBOL:
				case CONSISTENT_SYMBOL:
				case CONSTRAINT_CATALOG_SYMBOL:
				case CONSTRAINT_SCHEMA_SYMBOL:
				case CONSTRAINT_NAME_SYMBOL:
				case CONTEXT_SYMBOL:
				case CPU_SYMBOL:
				case CURRENT_SYMBOL:
				case CURSOR_NAME_SYMBOL:
				case DATA_SYMBOL:
				case DATAFILE_SYMBOL:
				case DATETIME_SYMBOL:
				case DATE_SYMBOL:
				case DAY_SYMBOL:
				case DEFAULT_AUTH_SYMBOL:
				case DEFINER_SYMBOL:
				case DELAY_KEY_WRITE_SYMBOL:
				case DIAGNOSTICS_SYMBOL:
				case DIRECTORY_SYMBOL:
				case DISABLE_SYMBOL:
				case DISCARD_SYMBOL:
				case DISK_SYMBOL:
				case DUMPFILE_SYMBOL:
				case DUPLICATE_SYMBOL:
				case DYNAMIC_SYMBOL:
				case ENDS_SYMBOL:
				case ENUM_SYMBOL:
				case ENGINE_SYMBOL:
				case ENGINES_SYMBOL:
				case ERROR_SYMBOL:
				case ERRORS_SYMBOL:
				case ESCAPE_SYMBOL:
				case EVENTS_SYMBOL:
				case EVERY_SYMBOL:
				case EXPANSION_SYMBOL:
				case EXPORT_SYMBOL:
				case EXTENDED_SYMBOL:
				case EXTENT_SIZE_SYMBOL:
				case FAULTS_SYMBOL:
				case FAST_SYMBOL:
				case FOUND_SYMBOL:
				case ENABLE_SYMBOL:
				case FULL_SYMBOL:
				case FILE_BLOCK_SIZE_SYMBOL:
				case FILTER_SYMBOL:
				case FIRST_SYMBOL:
				case FIXED_SYMBOL:
				case GENERAL_SYMBOL:
				case GEOMETRY_SYMBOL:
				case GEOMETRYCOLLECTION_SYMBOL:
				case GET_FORMAT_SYMBOL:
				case GRANTS_SYMBOL:
				case HASH_SYMBOL:
				case HOSTS_SYMBOL:
				case HOUR_SYMBOL:
				case IDENTIFIED_SYMBOL:
				case IGNORE_SERVER_IDS_SYMBOL:
				case INVOKER_SYMBOL:
				case INDEXES_SYMBOL:
				case INITIAL_SIZE_SYMBOL:
				case INSTANCE_SYMBOL:
				case IO_SYMBOL:
				case IPC_SYMBOL:
				case ISOLATION_SYMBOL:
				case ISSUER_SYMBOL:
				case INSERT_METHOD_SYMBOL:
				case JSON_SYMBOL:
				case KEY_BLOCK_SIZE_SYMBOL:
				case LAST_SYMBOL:
				case LEAVES_SYMBOL:
				case LESS_SYMBOL:
				case LEVEL_SYMBOL:
				case LINESTRING_SYMBOL:
				case LIST_SYMBOL:
				case LOCKS_SYMBOL:
				case LOGFILE_SYMBOL:
				case LOGS_SYMBOL:
				case MAX_ROWS_SYMBOL:
				case MASTER_SYMBOL:
				case MASTER_HEARTBEAT_PERIOD_SYMBOL:
				case MASTER_HOST_SYMBOL:
				case MASTER_PORT_SYMBOL:
				case MASTER_LOG_FILE_SYMBOL:
				case MASTER_LOG_POS_SYMBOL:
				case MASTER_USER_SYMBOL:
				case MASTER_PASSWORD_SYMBOL:
				case MASTER_SERVER_ID_SYMBOL:
				case MASTER_CONNECT_RETRY_SYMBOL:
				case MASTER_RETRY_COUNT_SYMBOL:
				case MASTER_DELAY_SYMBOL:
				case MASTER_SSL_SYMBOL:
				case MASTER_SSL_CA_SYMBOL:
				case MASTER_SSL_CAPATH_SYMBOL:
				case MASTER_TLS_VERSION_SYMBOL:
				case MASTER_SSL_CERT_SYMBOL:
				case MASTER_SSL_CIPHER_SYMBOL:
				case MASTER_SSL_CRL_SYMBOL:
				case MASTER_SSL_CRLPATH_SYMBOL:
				case MASTER_SSL_KEY_SYMBOL:
				case MASTER_AUTO_POSITION_SYMBOL:
				case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
				case MAX_QUERIES_PER_HOUR_SYMBOL:
				case MAX_SIZE_SYMBOL:
				case MAX_UPDATES_PER_HOUR_SYMBOL:
				case MAX_USER_CONNECTIONS_SYMBOL:
				case MEDIUM_SYMBOL:
				case MEMORY_SYMBOL:
				case MERGE_SYMBOL:
				case MESSAGE_TEXT_SYMBOL:
				case MICROSECOND_SYMBOL:
				case MIGRATE_SYMBOL:
				case MINUTE_SYMBOL:
				case MIN_ROWS_SYMBOL:
				case MODIFY_SYMBOL:
				case MODE_SYMBOL:
				case MONTH_SYMBOL:
				case MULTILINESTRING_SYMBOL:
				case MULTIPOINT_SYMBOL:
				case MULTIPOLYGON_SYMBOL:
				case MUTEX_SYMBOL:
				case MYSQL_ERRNO_SYMBOL:
				case NAME_SYMBOL:
				case NAMES_SYMBOL:
				case NATIONAL_SYMBOL:
				case NCHAR_SYMBOL:
				case NDBCLUSTER_SYMBOL:
				case NEVER_SYMBOL:
				case NEXT_SYMBOL:
				case NEW_SYMBOL:
				case NO_WAIT_SYMBOL:
				case NODEGROUP_SYMBOL:
				case NUMBER_SYMBOL:
				case NVARCHAR_SYMBOL:
				case OFFSET_SYMBOL:
				case ONE_SYMBOL:
				case PACK_KEYS_SYMBOL:
				case PAGE_SYMBOL:
				case PARTIAL_SYMBOL:
				case PARTITIONING_SYMBOL:
				case PARTITIONS_SYMBOL:
				case PASSWORD_SYMBOL:
				case PHASE_SYMBOL:
				case PLUGIN_DIR_SYMBOL:
				case PLUGIN_SYMBOL:
				case PLUGINS_SYMBOL:
				case POINT_SYMBOL:
				case POLYGON_SYMBOL:
				case PRESERVE_SYMBOL:
				case PREV_SYMBOL:
				case PRIVILEGES_SYMBOL:
				case PROCESSLIST_SYMBOL:
				case PROFILE_SYMBOL:
				case PROFILES_SYMBOL:
				case QUARTER_SYMBOL:
				case QUERY_SYMBOL:
				case QUICK_SYMBOL:
				case READ_ONLY_SYMBOL:
				case REBUILD_SYMBOL:
				case RECOVER_SYMBOL:
				case REDO_BUFFER_SIZE_SYMBOL:
				case REDUNDANT_SYMBOL:
				case RELAY_SYMBOL:
				case RELAYLOG_SYMBOL:
				case RELAY_LOG_FILE_SYMBOL:
				case RELAY_LOG_POS_SYMBOL:
				case RELAY_THREAD_SYMBOL:
				case REORGANIZE_SYMBOL:
				case REPEATABLE_SYMBOL:
				case REPLICATE_DO_DB_SYMBOL:
				case REPLICATE_IGNORE_DB_SYMBOL:
				case REPLICATE_DO_TABLE_SYMBOL:
				case REPLICATE_IGNORE_TABLE_SYMBOL:
				case REPLICATE_WILD_DO_TABLE_SYMBOL:
				case REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
				case REPLICATE_REWRITE_DB_SYMBOL:
				case RESUME_SYMBOL:
				case RETURNED_SQLSTATE_SYMBOL:
				case RETURNS_SYMBOL:
				case REVERSE_SYMBOL:
				case ROLLUP_SYMBOL:
				case ROTATE_SYMBOL:
				case ROUTINE_SYMBOL:
				case ROW_COUNT_SYMBOL:
				case ROW_FORMAT_SYMBOL:
				case RTREE_SYMBOL:
				case SCHEDULE_SYMBOL:
				case SCHEMA_NAME_SYMBOL:
				case SECOND_SYMBOL:
				case SERIAL_SYMBOL:
				case SERIALIZABLE_SYMBOL:
				case SIMPLE_SYMBOL:
				case SHARE_SYMBOL:
				case SLOW_SYMBOL:
				case SNAPSHOT_SYMBOL:
				case SOUNDS_SYMBOL:
				case SOURCE_SYMBOL:
				case SQL_AFTER_GTIDS_SYMBOL:
				case SQL_AFTER_MTS_GAPS_SYMBOL:
				case SQL_BEFORE_GTIDS_SYMBOL:
				case SQL_BUFFER_RESULT_SYMBOL:
				case SQL_NO_CACHE_SYMBOL:
				case SQL_THREAD_SYMBOL:
				case STACKED_SYMBOL:
				case STARTS_SYMBOL:
				case STATS_AUTO_RECALC_SYMBOL:
				case STATS_PERSISTENT_SYMBOL:
				case STATS_SAMPLE_PAGES_SYMBOL:
				case STATUS_SYMBOL:
				case STORAGE_SYMBOL:
				case STRING_SYMBOL:
				case SUBCLASS_ORIGIN_SYMBOL:
				case SUBDATE_SYMBOL:
				case SUBJECT_SYMBOL:
				case SUBPARTITION_SYMBOL:
				case SUBPARTITIONS_SYMBOL:
				case SUSPEND_SYMBOL:
				case SWAPS_SYMBOL:
				case SWITCHES_SYMBOL:
				case TABLE_NAME_SYMBOL:
				case TABLES_SYMBOL:
				case TABLE_CHECKSUM_SYMBOL:
				case TABLESPACE_SYMBOL:
				case TEMPORARY_SYMBOL:
				case TEMPTABLE_SYMBOL:
				case TEXT_SYMBOL:
				case THAN_SYMBOL:
				case TRANSACTION_SYMBOL:
				case TRIGGERS_SYMBOL:
				case TIMESTAMP_SYMBOL:
				case TIMESTAMP_ADD_SYMBOL:
				case TIMESTAMP_DIFF_SYMBOL:
				case TIME_SYMBOL:
				case TYPES_SYMBOL:
				case TYPE_SYMBOL:
				case UNCOMMITTED_SYMBOL:
				case UNDEFINED_SYMBOL:
				case UNDO_BUFFER_SIZE_SYMBOL:
				case UNDOFILE_SYMBOL:
				case UNKNOWN_SYMBOL:
				case UNTIL_SYMBOL:
				case USER_RESOURCES_SYMBOL:
				case USER_SYMBOL:
				case USE_FRM_SYMBOL:
				case VARIABLES_SYMBOL:
				case VIEW_SYMBOL:
				case VALUE_SYMBOL:
				case WARNINGS_SYMBOL:
				case WAIT_SYMBOL:
				case WEEK_SYMBOL:
				case WORK_SYMBOL:
				case WEIGHT_STRING_SYMBOL:
				case X509_SYMBOL:
				case XID_SYMBOL:
				case XML_SYMBOL:
				case YEAR_SYMBOL:
				case EXCHANGE_SYMBOL:
				case EXPIRE_SYMBOL:
				case ONLY_SYMBOL:
				case VALIDATION_SYMBOL:
				case WITHOUT_SYMBOL:
				case ROLE_SYMBOL:
				case ADMIN_SYMBOL:
				case INVISIBLE_SYMBOL:
				case VISIBLE_SYMBOL:
				case COMPONENT_SYMBOL:
				case SKIP_SYMBOL:
				case LOCKED_SYMBOL:
				case NOWAIT_SYMBOL:
				case HISTOGRAM_SYMBOL:
				case BUCKETS_SYMBOL:
				case EXCLUDE_SYMBOL:
				case FOLLOWING_SYMBOL:
				case NULLS_SYMBOL:
				case OTHERS_SYMBOL:
				case PRECEDING_SYMBOL:
				case RESPECT_SYMBOL:
				case TIES_SYMBOL:
				case UNBOUNDED_SYMBOL:
				case NESTED_SYMBOL:
				case ORDINALITY_SYMBOL:
				case PATH_SYMBOL:
				case HISTORY_SYMBOL:
				case REUSE_SYMBOL:
				case SRID_SYMBOL:
				case THREAD_PRIORITY_SYMBOL:
				case VCPU_SYMBOL:
				case MASTER_PUBLIC_KEY_PATH_SYMBOL:
				case GET_MASTER_PUBLIC_KEY_SYMBOL:
				case DEFINITION_SYMBOL:
				case DESCRIPTION_SYMBOL:
				case ORGANIZATION_SYMBOL:
				case REFERENCE_SYMBOL:
				case OPTIONAL_SYMBOL:
				case SECONDARY_SYMBOL:
				case SECONDARY_ENGINE_SYMBOL:
				case SECONDARY_LOAD_SYMBOL:
				case SECONDARY_UNLOAD_SYMBOL:
				case ACTIVE_SYMBOL:
				case INACTIVE_SYMBOL:
				case RETAIN_SYMBOL:
				case OLD_SYMBOL:
				case NETWORK_NAMESPACE_SYMBOL:
				case ENFORCED_SYMBOL:
				case OJ_SYMBOL:
					{
					State = 8259; identifierKeywordsUnambiguous();
					}
					break;
				case ASCII_SYMBOL:
				case BEGIN_SYMBOL:
				case BYTE_SYMBOL:
				case CACHE_SYMBOL:
				case CHARSET_SYMBOL:
				case CHECKSUM_SYMBOL:
				case COMMENT_SYMBOL:
				case COMMIT_SYMBOL:
				case CONTAINS_SYMBOL:
				case DEALLOCATE_SYMBOL:
				case DO_SYMBOL:
				case END_SYMBOL:
				case FLUSH_SYMBOL:
				case FOLLOWS_SYMBOL:
				case HANDLER_SYMBOL:
				case HELP_SYMBOL:
				case INSTALL_SYMBOL:
				case LANGUAGE_SYMBOL:
				case NO_SYMBOL:
				case PRECEDES_SYMBOL:
				case PREPARE_SYMBOL:
				case REPAIR_SYMBOL:
				case RESET_SYMBOL:
				case ROLLBACK_SYMBOL:
				case SAVEPOINT_SYMBOL:
				case SIGNED_SYMBOL:
				case SLAVE_SYMBOL:
				case START_SYMBOL:
				case STOP_SYMBOL:
				case TRUNCATE_SYMBOL:
				case UNICODE_SYMBOL:
				case UNINSTALL_SYMBOL:
				case XA_SYMBOL:
				case IMPORT_SYMBOL:
				case CLONE_SYMBOL:
					{
					State = 8260; identifierKeywordsAmbiguous2Labels();
					}
					break;
				case GLOBAL_SYMBOL:
				case LOCAL_SYMBOL:
				case SESSION_SYMBOL:
				case PERSIST_SYMBOL:
				case PERSIST_ONLY_SYMBOL:
					{
					State = 8261; identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LValueKeywordContext : ParserRuleContext {
		public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return GetRuleContext<IdentifierKeywordsUnambiguousContext>(0);
		}
		public IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() {
			return GetRuleContext<IdentifierKeywordsAmbiguous1RolesAndLabelsContext>(0);
		}
		public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return GetRuleContext<IdentifierKeywordsAmbiguous2LabelsContext>(0);
		}
		public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return GetRuleContext<IdentifierKeywordsAmbiguous3RolesContext>(0);
		}
		public LValueKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lValueKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLValueKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLValueKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLValueKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LValueKeywordContext lValueKeyword() {
		LValueKeywordContext _localctx = new LValueKeywordContext(Context, State);
		EnterRule(_localctx, 1192, RULE_lValueKeyword);
		try {
			State = 8270;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT_SYMBOL:
			case ALWAYS_SYMBOL:
			case BACKUP_SYMBOL:
			case CLOSE_SYMBOL:
			case FORMAT_SYMBOL:
			case GROUP_REPLICATION_SYMBOL:
			case HOST_SYMBOL:
			case OPEN_SYMBOL:
			case OPTIONS_SYMBOL:
			case OWNER_SYMBOL:
			case PARSER_SYMBOL:
			case PORT_SYMBOL:
			case REMOVE_SYMBOL:
			case RESTORE_SYMBOL:
			case SECURITY_SYMBOL:
			case SERVER_SYMBOL:
			case SOCKET_SYMBOL:
			case SONAME_SYMBOL:
			case UPGRADE_SYMBOL:
			case WRAPPER_SYMBOL:
			case ACTION_SYMBOL:
			case ADDDATE_SYMBOL:
			case AFTER_SYMBOL:
			case AGAINST_SYMBOL:
			case AGGREGATE_SYMBOL:
			case ALGORITHM_SYMBOL:
			case ANY_SYMBOL:
			case AT_SYMBOL:
			case AUTO_INCREMENT_SYMBOL:
			case AUTOEXTEND_SIZE_SYMBOL:
			case AVG_ROW_LENGTH_SYMBOL:
			case AVG_SYMBOL:
			case BINLOG_SYMBOL:
			case BIT_SYMBOL:
			case BLOCK_SYMBOL:
			case BOOL_SYMBOL:
			case BOOLEAN_SYMBOL:
			case BTREE_SYMBOL:
			case CASCADED_SYMBOL:
			case CATALOG_NAME_SYMBOL:
			case CHAIN_SYMBOL:
			case CHANGED_SYMBOL:
			case CHANNEL_SYMBOL:
			case CIPHER_SYMBOL:
			case CLIENT_SYMBOL:
			case CLASS_ORIGIN_SYMBOL:
			case COALESCE_SYMBOL:
			case CODE_SYMBOL:
			case COLLATION_SYMBOL:
			case COLUMN_NAME_SYMBOL:
			case COLUMN_FORMAT_SYMBOL:
			case COLUMNS_SYMBOL:
			case COMMITTED_SYMBOL:
			case COMPACT_SYMBOL:
			case COMPLETION_SYMBOL:
			case COMPRESSED_SYMBOL:
			case COMPRESSION_SYMBOL:
			case ENCRYPTION_SYMBOL:
			case CONCURRENT_SYMBOL:
			case CONNECTION_SYMBOL:
			case CONSISTENT_SYMBOL:
			case CONSTRAINT_CATALOG_SYMBOL:
			case CONSTRAINT_SCHEMA_SYMBOL:
			case CONSTRAINT_NAME_SYMBOL:
			case CONTEXT_SYMBOL:
			case CPU_SYMBOL:
			case CURRENT_SYMBOL:
			case CURSOR_NAME_SYMBOL:
			case DATA_SYMBOL:
			case DATAFILE_SYMBOL:
			case DATETIME_SYMBOL:
			case DATE_SYMBOL:
			case DAY_SYMBOL:
			case DEFAULT_AUTH_SYMBOL:
			case DEFINER_SYMBOL:
			case DELAY_KEY_WRITE_SYMBOL:
			case DIAGNOSTICS_SYMBOL:
			case DIRECTORY_SYMBOL:
			case DISABLE_SYMBOL:
			case DISCARD_SYMBOL:
			case DISK_SYMBOL:
			case DUMPFILE_SYMBOL:
			case DUPLICATE_SYMBOL:
			case DYNAMIC_SYMBOL:
			case ENDS_SYMBOL:
			case ENUM_SYMBOL:
			case ENGINE_SYMBOL:
			case ENGINES_SYMBOL:
			case ERROR_SYMBOL:
			case ERRORS_SYMBOL:
			case ESCAPE_SYMBOL:
			case EVENTS_SYMBOL:
			case EVERY_SYMBOL:
			case EXPANSION_SYMBOL:
			case EXPORT_SYMBOL:
			case EXTENDED_SYMBOL:
			case EXTENT_SIZE_SYMBOL:
			case FAULTS_SYMBOL:
			case FAST_SYMBOL:
			case FOUND_SYMBOL:
			case ENABLE_SYMBOL:
			case FULL_SYMBOL:
			case FILE_BLOCK_SIZE_SYMBOL:
			case FILTER_SYMBOL:
			case FIRST_SYMBOL:
			case FIXED_SYMBOL:
			case GENERAL_SYMBOL:
			case GEOMETRY_SYMBOL:
			case GEOMETRYCOLLECTION_SYMBOL:
			case GET_FORMAT_SYMBOL:
			case GRANTS_SYMBOL:
			case HASH_SYMBOL:
			case HOSTS_SYMBOL:
			case HOUR_SYMBOL:
			case IDENTIFIED_SYMBOL:
			case IGNORE_SERVER_IDS_SYMBOL:
			case INVOKER_SYMBOL:
			case INDEXES_SYMBOL:
			case INITIAL_SIZE_SYMBOL:
			case INSTANCE_SYMBOL:
			case IO_SYMBOL:
			case IPC_SYMBOL:
			case ISOLATION_SYMBOL:
			case ISSUER_SYMBOL:
			case INSERT_METHOD_SYMBOL:
			case JSON_SYMBOL:
			case KEY_BLOCK_SIZE_SYMBOL:
			case LAST_SYMBOL:
			case LEAVES_SYMBOL:
			case LESS_SYMBOL:
			case LEVEL_SYMBOL:
			case LINESTRING_SYMBOL:
			case LIST_SYMBOL:
			case LOCKS_SYMBOL:
			case LOGFILE_SYMBOL:
			case LOGS_SYMBOL:
			case MAX_ROWS_SYMBOL:
			case MASTER_SYMBOL:
			case MASTER_HEARTBEAT_PERIOD_SYMBOL:
			case MASTER_HOST_SYMBOL:
			case MASTER_PORT_SYMBOL:
			case MASTER_LOG_FILE_SYMBOL:
			case MASTER_LOG_POS_SYMBOL:
			case MASTER_USER_SYMBOL:
			case MASTER_PASSWORD_SYMBOL:
			case MASTER_SERVER_ID_SYMBOL:
			case MASTER_CONNECT_RETRY_SYMBOL:
			case MASTER_RETRY_COUNT_SYMBOL:
			case MASTER_DELAY_SYMBOL:
			case MASTER_SSL_SYMBOL:
			case MASTER_SSL_CA_SYMBOL:
			case MASTER_SSL_CAPATH_SYMBOL:
			case MASTER_TLS_VERSION_SYMBOL:
			case MASTER_SSL_CERT_SYMBOL:
			case MASTER_SSL_CIPHER_SYMBOL:
			case MASTER_SSL_CRL_SYMBOL:
			case MASTER_SSL_CRLPATH_SYMBOL:
			case MASTER_SSL_KEY_SYMBOL:
			case MASTER_AUTO_POSITION_SYMBOL:
			case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
			case MAX_QUERIES_PER_HOUR_SYMBOL:
			case MAX_SIZE_SYMBOL:
			case MAX_UPDATES_PER_HOUR_SYMBOL:
			case MAX_USER_CONNECTIONS_SYMBOL:
			case MEDIUM_SYMBOL:
			case MEMORY_SYMBOL:
			case MERGE_SYMBOL:
			case MESSAGE_TEXT_SYMBOL:
			case MICROSECOND_SYMBOL:
			case MIGRATE_SYMBOL:
			case MINUTE_SYMBOL:
			case MIN_ROWS_SYMBOL:
			case MODIFY_SYMBOL:
			case MODE_SYMBOL:
			case MONTH_SYMBOL:
			case MULTILINESTRING_SYMBOL:
			case MULTIPOINT_SYMBOL:
			case MULTIPOLYGON_SYMBOL:
			case MUTEX_SYMBOL:
			case MYSQL_ERRNO_SYMBOL:
			case NAME_SYMBOL:
			case NAMES_SYMBOL:
			case NATIONAL_SYMBOL:
			case NCHAR_SYMBOL:
			case NDBCLUSTER_SYMBOL:
			case NEVER_SYMBOL:
			case NEXT_SYMBOL:
			case NEW_SYMBOL:
			case NO_WAIT_SYMBOL:
			case NODEGROUP_SYMBOL:
			case NUMBER_SYMBOL:
			case NVARCHAR_SYMBOL:
			case OFFSET_SYMBOL:
			case ONE_SYMBOL:
			case PACK_KEYS_SYMBOL:
			case PAGE_SYMBOL:
			case PARTIAL_SYMBOL:
			case PARTITIONING_SYMBOL:
			case PARTITIONS_SYMBOL:
			case PASSWORD_SYMBOL:
			case PHASE_SYMBOL:
			case PLUGIN_DIR_SYMBOL:
			case PLUGIN_SYMBOL:
			case PLUGINS_SYMBOL:
			case POINT_SYMBOL:
			case POLYGON_SYMBOL:
			case PRESERVE_SYMBOL:
			case PREV_SYMBOL:
			case PRIVILEGES_SYMBOL:
			case PROCESSLIST_SYMBOL:
			case PROFILE_SYMBOL:
			case PROFILES_SYMBOL:
			case QUARTER_SYMBOL:
			case QUERY_SYMBOL:
			case QUICK_SYMBOL:
			case READ_ONLY_SYMBOL:
			case REBUILD_SYMBOL:
			case RECOVER_SYMBOL:
			case REDO_BUFFER_SIZE_SYMBOL:
			case REDUNDANT_SYMBOL:
			case RELAY_SYMBOL:
			case RELAYLOG_SYMBOL:
			case RELAY_LOG_FILE_SYMBOL:
			case RELAY_LOG_POS_SYMBOL:
			case RELAY_THREAD_SYMBOL:
			case REORGANIZE_SYMBOL:
			case REPEATABLE_SYMBOL:
			case REPLICATE_DO_DB_SYMBOL:
			case REPLICATE_IGNORE_DB_SYMBOL:
			case REPLICATE_DO_TABLE_SYMBOL:
			case REPLICATE_IGNORE_TABLE_SYMBOL:
			case REPLICATE_WILD_DO_TABLE_SYMBOL:
			case REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
			case REPLICATE_REWRITE_DB_SYMBOL:
			case RESUME_SYMBOL:
			case RETURNED_SQLSTATE_SYMBOL:
			case RETURNS_SYMBOL:
			case REVERSE_SYMBOL:
			case ROLLUP_SYMBOL:
			case ROTATE_SYMBOL:
			case ROUTINE_SYMBOL:
			case ROW_COUNT_SYMBOL:
			case ROW_FORMAT_SYMBOL:
			case RTREE_SYMBOL:
			case SCHEDULE_SYMBOL:
			case SCHEMA_NAME_SYMBOL:
			case SECOND_SYMBOL:
			case SERIAL_SYMBOL:
			case SERIALIZABLE_SYMBOL:
			case SIMPLE_SYMBOL:
			case SHARE_SYMBOL:
			case SLOW_SYMBOL:
			case SNAPSHOT_SYMBOL:
			case SOUNDS_SYMBOL:
			case SOURCE_SYMBOL:
			case SQL_AFTER_GTIDS_SYMBOL:
			case SQL_AFTER_MTS_GAPS_SYMBOL:
			case SQL_BEFORE_GTIDS_SYMBOL:
			case SQL_BUFFER_RESULT_SYMBOL:
			case SQL_NO_CACHE_SYMBOL:
			case SQL_THREAD_SYMBOL:
			case STACKED_SYMBOL:
			case STARTS_SYMBOL:
			case STATS_AUTO_RECALC_SYMBOL:
			case STATS_PERSISTENT_SYMBOL:
			case STATS_SAMPLE_PAGES_SYMBOL:
			case STATUS_SYMBOL:
			case STORAGE_SYMBOL:
			case STRING_SYMBOL:
			case SUBCLASS_ORIGIN_SYMBOL:
			case SUBDATE_SYMBOL:
			case SUBJECT_SYMBOL:
			case SUBPARTITION_SYMBOL:
			case SUBPARTITIONS_SYMBOL:
			case SUSPEND_SYMBOL:
			case SWAPS_SYMBOL:
			case SWITCHES_SYMBOL:
			case TABLE_NAME_SYMBOL:
			case TABLES_SYMBOL:
			case TABLE_CHECKSUM_SYMBOL:
			case TABLESPACE_SYMBOL:
			case TEMPORARY_SYMBOL:
			case TEMPTABLE_SYMBOL:
			case TEXT_SYMBOL:
			case THAN_SYMBOL:
			case TRANSACTION_SYMBOL:
			case TRIGGERS_SYMBOL:
			case TIMESTAMP_SYMBOL:
			case TIMESTAMP_ADD_SYMBOL:
			case TIMESTAMP_DIFF_SYMBOL:
			case TIME_SYMBOL:
			case TYPES_SYMBOL:
			case TYPE_SYMBOL:
			case UNCOMMITTED_SYMBOL:
			case UNDEFINED_SYMBOL:
			case UNDO_BUFFER_SIZE_SYMBOL:
			case UNDOFILE_SYMBOL:
			case UNKNOWN_SYMBOL:
			case UNTIL_SYMBOL:
			case USER_RESOURCES_SYMBOL:
			case USER_SYMBOL:
			case USE_FRM_SYMBOL:
			case VARIABLES_SYMBOL:
			case VIEW_SYMBOL:
			case VALUE_SYMBOL:
			case WARNINGS_SYMBOL:
			case WAIT_SYMBOL:
			case WEEK_SYMBOL:
			case WORK_SYMBOL:
			case WEIGHT_STRING_SYMBOL:
			case X509_SYMBOL:
			case XID_SYMBOL:
			case XML_SYMBOL:
			case YEAR_SYMBOL:
			case EXCHANGE_SYMBOL:
			case EXPIRE_SYMBOL:
			case ONLY_SYMBOL:
			case VALIDATION_SYMBOL:
			case WITHOUT_SYMBOL:
			case ROLE_SYMBOL:
			case ADMIN_SYMBOL:
			case INVISIBLE_SYMBOL:
			case VISIBLE_SYMBOL:
			case COMPONENT_SYMBOL:
			case SKIP_SYMBOL:
			case LOCKED_SYMBOL:
			case NOWAIT_SYMBOL:
			case HISTOGRAM_SYMBOL:
			case BUCKETS_SYMBOL:
			case EXCLUDE_SYMBOL:
			case FOLLOWING_SYMBOL:
			case NULLS_SYMBOL:
			case OTHERS_SYMBOL:
			case PRECEDING_SYMBOL:
			case RESPECT_SYMBOL:
			case TIES_SYMBOL:
			case UNBOUNDED_SYMBOL:
			case NESTED_SYMBOL:
			case ORDINALITY_SYMBOL:
			case PATH_SYMBOL:
			case HISTORY_SYMBOL:
			case REUSE_SYMBOL:
			case SRID_SYMBOL:
			case THREAD_PRIORITY_SYMBOL:
			case VCPU_SYMBOL:
			case MASTER_PUBLIC_KEY_PATH_SYMBOL:
			case GET_MASTER_PUBLIC_KEY_SYMBOL:
			case DEFINITION_SYMBOL:
			case DESCRIPTION_SYMBOL:
			case ORGANIZATION_SYMBOL:
			case REFERENCE_SYMBOL:
			case OPTIONAL_SYMBOL:
			case SECONDARY_SYMBOL:
			case SECONDARY_ENGINE_SYMBOL:
			case SECONDARY_LOAD_SYMBOL:
			case SECONDARY_UNLOAD_SYMBOL:
			case ACTIVE_SYMBOL:
			case INACTIVE_SYMBOL:
			case RETAIN_SYMBOL:
			case OLD_SYMBOL:
			case NETWORK_NAMESPACE_SYMBOL:
			case ENFORCED_SYMBOL:
			case OJ_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8266; identifierKeywordsUnambiguous();
				}
				break;
			case EXECUTE_SYMBOL:
			case SHUTDOWN_SYMBOL:
			case RESTART_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8267; identifierKeywordsAmbiguous1RolesAndLabels();
				}
				break;
			case ASCII_SYMBOL:
			case BEGIN_SYMBOL:
			case BYTE_SYMBOL:
			case CACHE_SYMBOL:
			case CHARSET_SYMBOL:
			case CHECKSUM_SYMBOL:
			case COMMENT_SYMBOL:
			case COMMIT_SYMBOL:
			case CONTAINS_SYMBOL:
			case DEALLOCATE_SYMBOL:
			case DO_SYMBOL:
			case END_SYMBOL:
			case FLUSH_SYMBOL:
			case FOLLOWS_SYMBOL:
			case HANDLER_SYMBOL:
			case HELP_SYMBOL:
			case INSTALL_SYMBOL:
			case LANGUAGE_SYMBOL:
			case NO_SYMBOL:
			case PRECEDES_SYMBOL:
			case PREPARE_SYMBOL:
			case REPAIR_SYMBOL:
			case RESET_SYMBOL:
			case ROLLBACK_SYMBOL:
			case SAVEPOINT_SYMBOL:
			case SIGNED_SYMBOL:
			case SLAVE_SYMBOL:
			case START_SYMBOL:
			case STOP_SYMBOL:
			case TRUNCATE_SYMBOL:
			case UNICODE_SYMBOL:
			case UNINSTALL_SYMBOL:
			case XA_SYMBOL:
			case IMPORT_SYMBOL:
			case CLONE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8268; identifierKeywordsAmbiguous2Labels();
				}
				break;
			case EVENT_SYMBOL:
			case FILE_SYMBOL:
			case NONE_SYMBOL:
			case PROCESS_SYMBOL:
			case PROXY_SYMBOL:
			case RELOAD_SYMBOL:
			case REPLICATION_SYMBOL:
			case SUPER_SYMBOL:
			case RESOURCE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8269; identifierKeywordsAmbiguous3Roles();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordsAmbiguous4SystemVariablesContext : ParserRuleContext {
		public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public ITerminalNode PERSIST_SYMBOL() { return GetToken(MySQLParser.PERSIST_SYMBOL, 0); }
		public ITerminalNode PERSIST_ONLY_SYMBOL() { return GetToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0); }
		public ITerminalNode SESSION_SYMBOL() { return GetToken(MySQLParser.SESSION_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous4SystemVariablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeywordsAmbiguous4SystemVariables; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeywordsAmbiguous4SystemVariables(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeywordsAmbiguous4SystemVariables(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierKeywordsAmbiguous4SystemVariables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
		IdentifierKeywordsAmbiguous4SystemVariablesContext _localctx = new IdentifierKeywordsAmbiguous4SystemVariablesContext(Context, State);
		EnterRule(_localctx, 1194, RULE_identifierKeywordsAmbiguous4SystemVariables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8272;
			_la = TokenStream.LA(1);
			if ( !(_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleOrIdentifierKeywordContext : ParserRuleContext {
		public ITerminalNode ACCOUNT_SYMBOL() { return GetToken(MySQLParser.ACCOUNT_SYMBOL, 0); }
		public ITerminalNode ASCII_SYMBOL() { return GetToken(MySQLParser.ASCII_SYMBOL, 0); }
		public ITerminalNode ALWAYS_SYMBOL() { return GetToken(MySQLParser.ALWAYS_SYMBOL, 0); }
		public ITerminalNode BACKUP_SYMBOL() { return GetToken(MySQLParser.BACKUP_SYMBOL, 0); }
		public ITerminalNode BEGIN_SYMBOL() { return GetToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public ITerminalNode BYTE_SYMBOL() { return GetToken(MySQLParser.BYTE_SYMBOL, 0); }
		public ITerminalNode CACHE_SYMBOL() { return GetToken(MySQLParser.CACHE_SYMBOL, 0); }
		public ITerminalNode CHARSET_SYMBOL() { return GetToken(MySQLParser.CHARSET_SYMBOL, 0); }
		public ITerminalNode CHECKSUM_SYMBOL() { return GetToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		public ITerminalNode CLONE_SYMBOL() { return GetToken(MySQLParser.CLONE_SYMBOL, 0); }
		public ITerminalNode CLOSE_SYMBOL() { return GetToken(MySQLParser.CLOSE_SYMBOL, 0); }
		public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public ITerminalNode COMMIT_SYMBOL() { return GetToken(MySQLParser.COMMIT_SYMBOL, 0); }
		public ITerminalNode CONTAINS_SYMBOL() { return GetToken(MySQLParser.CONTAINS_SYMBOL, 0); }
		public ITerminalNode DEALLOCATE_SYMBOL() { return GetToken(MySQLParser.DEALLOCATE_SYMBOL, 0); }
		public ITerminalNode DO_SYMBOL() { return GetToken(MySQLParser.DO_SYMBOL, 0); }
		public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		public ITerminalNode FLUSH_SYMBOL() { return GetToken(MySQLParser.FLUSH_SYMBOL, 0); }
		public ITerminalNode FOLLOWS_SYMBOL() { return GetToken(MySQLParser.FOLLOWS_SYMBOL, 0); }
		public ITerminalNode FORMAT_SYMBOL() { return GetToken(MySQLParser.FORMAT_SYMBOL, 0); }
		public ITerminalNode GROUP_REPLICATION_SYMBOL() { return GetToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
		public ITerminalNode HANDLER_SYMBOL() { return GetToken(MySQLParser.HANDLER_SYMBOL, 0); }
		public ITerminalNode HELP_SYMBOL() { return GetToken(MySQLParser.HELP_SYMBOL, 0); }
		public ITerminalNode HOST_SYMBOL() { return GetToken(MySQLParser.HOST_SYMBOL, 0); }
		public ITerminalNode INSTALL_SYMBOL() { return GetToken(MySQLParser.INSTALL_SYMBOL, 0); }
		public ITerminalNode INVISIBLE_SYMBOL() { return GetToken(MySQLParser.INVISIBLE_SYMBOL, 0); }
		public ITerminalNode LANGUAGE_SYMBOL() { return GetToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		public ITerminalNode NO_SYMBOL() { return GetToken(MySQLParser.NO_SYMBOL, 0); }
		public ITerminalNode OPEN_SYMBOL() { return GetToken(MySQLParser.OPEN_SYMBOL, 0); }
		public ITerminalNode OPTIONS_SYMBOL() { return GetToken(MySQLParser.OPTIONS_SYMBOL, 0); }
		public ITerminalNode OWNER_SYMBOL() { return GetToken(MySQLParser.OWNER_SYMBOL, 0); }
		public ITerminalNode PARSER_SYMBOL() { return GetToken(MySQLParser.PARSER_SYMBOL, 0); }
		public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public ITerminalNode PORT_SYMBOL() { return GetToken(MySQLParser.PORT_SYMBOL, 0); }
		public ITerminalNode PRECEDES_SYMBOL() { return GetToken(MySQLParser.PRECEDES_SYMBOL, 0); }
		public ITerminalNode PREPARE_SYMBOL() { return GetToken(MySQLParser.PREPARE_SYMBOL, 0); }
		public ITerminalNode REMOVE_SYMBOL() { return GetToken(MySQLParser.REMOVE_SYMBOL, 0); }
		public ITerminalNode REPAIR_SYMBOL() { return GetToken(MySQLParser.REPAIR_SYMBOL, 0); }
		public ITerminalNode RESET_SYMBOL() { return GetToken(MySQLParser.RESET_SYMBOL, 0); }
		public ITerminalNode RESTORE_SYMBOL() { return GetToken(MySQLParser.RESTORE_SYMBOL, 0); }
		public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		public ITerminalNode ROLLBACK_SYMBOL() { return GetToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		public ITerminalNode SAVEPOINT_SYMBOL() { return GetToken(MySQLParser.SAVEPOINT_SYMBOL, 0); }
		public ITerminalNode SECONDARY_SYMBOL() { return GetToken(MySQLParser.SECONDARY_SYMBOL, 0); }
		public ITerminalNode SECONDARY_ENGINE_SYMBOL() { return GetToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
		public ITerminalNode SECONDARY_LOAD_SYMBOL() { return GetToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
		public ITerminalNode SECONDARY_UNLOAD_SYMBOL() { return GetToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		public ITerminalNode SECURITY_SYMBOL() { return GetToken(MySQLParser.SECURITY_SYMBOL, 0); }
		public ITerminalNode SERVER_SYMBOL() { return GetToken(MySQLParser.SERVER_SYMBOL, 0); }
		public ITerminalNode SIGNED_SYMBOL() { return GetToken(MySQLParser.SIGNED_SYMBOL, 0); }
		public ITerminalNode SOCKET_SYMBOL() { return GetToken(MySQLParser.SOCKET_SYMBOL, 0); }
		public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public ITerminalNode SONAME_SYMBOL() { return GetToken(MySQLParser.SONAME_SYMBOL, 0); }
		public ITerminalNode START_SYMBOL() { return GetToken(MySQLParser.START_SYMBOL, 0); }
		public ITerminalNode STOP_SYMBOL() { return GetToken(MySQLParser.STOP_SYMBOL, 0); }
		public ITerminalNode TRUNCATE_SYMBOL() { return GetToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public ITerminalNode UNICODE_SYMBOL() { return GetToken(MySQLParser.UNICODE_SYMBOL, 0); }
		public ITerminalNode UNINSTALL_SYMBOL() { return GetToken(MySQLParser.UNINSTALL_SYMBOL, 0); }
		public ITerminalNode UPGRADE_SYMBOL() { return GetToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public ITerminalNode VISIBLE_SYMBOL() { return GetToken(MySQLParser.VISIBLE_SYMBOL, 0); }
		public ITerminalNode WRAPPER_SYMBOL() { return GetToken(MySQLParser.WRAPPER_SYMBOL, 0); }
		public ITerminalNode XA_SYMBOL() { return GetToken(MySQLParser.XA_SYMBOL, 0); }
		public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public RoleOrIdentifierKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleOrIdentifierKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleOrIdentifierKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleOrIdentifierKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleOrIdentifierKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() {
		RoleOrIdentifierKeywordContext _localctx = new RoleOrIdentifierKeywordContext(Context, State);
		EnterRule(_localctx, 1196, RULE_roleOrIdentifierKeyword);
		int _la;
		try {
			State = 8279;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1110,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8274;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT_SYMBOL) | (1L << ASCII_SYMBOL) | (1L << ALWAYS_SYMBOL) | (1L << BACKUP_SYMBOL) | (1L << BEGIN_SYMBOL) | (1L << BYTE_SYMBOL) | (1L << CACHE_SYMBOL) | (1L << CHARSET_SYMBOL) | (1L << CHECKSUM_SYMBOL) | (1L << CLOSE_SYMBOL) | (1L << COMMENT_SYMBOL) | (1L << COMMIT_SYMBOL) | (1L << CONTAINS_SYMBOL) | (1L << DEALLOCATE_SYMBOL) | (1L << DO_SYMBOL) | (1L << END_SYMBOL) | (1L << FLUSH_SYMBOL) | (1L << FOLLOWS_SYMBOL) | (1L << FORMAT_SYMBOL) | (1L << GROUP_REPLICATION_SYMBOL) | (1L << HANDLER_SYMBOL) | (1L << HELP_SYMBOL) | (1L << HOST_SYMBOL) | (1L << INSTALL_SYMBOL) | (1L << LANGUAGE_SYMBOL) | (1L << NO_SYMBOL) | (1L << OPEN_SYMBOL) | (1L << OPTIONS_SYMBOL) | (1L << OWNER_SYMBOL) | (1L << PARSER_SYMBOL) | (1L << PARTITION_SYMBOL) | (1L << PORT_SYMBOL) | (1L << PRECEDES_SYMBOL) | (1L << PREPARE_SYMBOL) | (1L << REMOVE_SYMBOL) | (1L << REPAIR_SYMBOL) | (1L << RESET_SYMBOL) | (1L << RESTORE_SYMBOL) | (1L << ROLLBACK_SYMBOL) | (1L << SAVEPOINT_SYMBOL) | (1L << SECURITY_SYMBOL) | (1L << SERVER_SYMBOL) | (1L << SIGNED_SYMBOL) | (1L << SLAVE_SYMBOL) | (1L << SOCKET_SYMBOL) | (1L << SONAME_SYMBOL) | (1L << START_SYMBOL) | (1L << STOP_SYMBOL) | (1L << TRUNCATE_SYMBOL) | (1L << UNICODE_SYMBOL) | (1L << UNINSTALL_SYMBOL) | (1L << UPGRADE_SYMBOL) | (1L << WRAPPER_SYMBOL) | (1L << XA_SYMBOL))) != 0) || ((((_la - 690)) & ~0x3f) == 0 && ((1L << (_la - 690)) & ((1L << (ROLE_SYMBOL - 690)) | (1L << (INVISIBLE_SYMBOL - 690)) | (1L << (VISIBLE_SYMBOL - 690)) | (1L << (CLONE_SYMBOL - 690)) | (1L << (SECONDARY_SYMBOL - 690)) | (1L << (SECONDARY_ENGINE_SYMBOL - 690)) | (1L << (SECONDARY_LOAD_SYMBOL - 690)))) != 0) || _la==SECONDARY_UNLOAD_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8275;
				if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
				State = 8276; Match(SHUTDOWN_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8277;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 8278; Match(IMPORT_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleOrLabelKeywordContext : ParserRuleContext {
		public ITerminalNode ACTION_SYMBOL() { return GetToken(MySQLParser.ACTION_SYMBOL, 0); }
		public ITerminalNode ACTIVE_SYMBOL() { return GetToken(MySQLParser.ACTIVE_SYMBOL, 0); }
		public ITerminalNode ADDDATE_SYMBOL() { return GetToken(MySQLParser.ADDDATE_SYMBOL, 0); }
		public ITerminalNode AFTER_SYMBOL() { return GetToken(MySQLParser.AFTER_SYMBOL, 0); }
		public ITerminalNode AGAINST_SYMBOL() { return GetToken(MySQLParser.AGAINST_SYMBOL, 0); }
		public ITerminalNode AGGREGATE_SYMBOL() { return GetToken(MySQLParser.AGGREGATE_SYMBOL, 0); }
		public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public ITerminalNode ANALYSE_SYMBOL() { return GetToken(MySQLParser.ANALYSE_SYMBOL, 0); }
		public ITerminalNode ANY_SYMBOL() { return GetToken(MySQLParser.ANY_SYMBOL, 0); }
		public ITerminalNode AT_SYMBOL() { return GetToken(MySQLParser.AT_SYMBOL, 0); }
		public ITerminalNode AUTHORS_SYMBOL() { return GetToken(MySQLParser.AUTHORS_SYMBOL, 0); }
		public ITerminalNode AUTO_INCREMENT_SYMBOL() { return GetToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public ITerminalNode AUTOEXTEND_SIZE_SYMBOL() { return GetToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		public ITerminalNode AVG_ROW_LENGTH_SYMBOL() { return GetToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		public ITerminalNode AVG_SYMBOL() { return GetToken(MySQLParser.AVG_SYMBOL, 0); }
		public ITerminalNode BINLOG_SYMBOL() { return GetToken(MySQLParser.BINLOG_SYMBOL, 0); }
		public ITerminalNode BIT_SYMBOL() { return GetToken(MySQLParser.BIT_SYMBOL, 0); }
		public ITerminalNode BLOCK_SYMBOL() { return GetToken(MySQLParser.BLOCK_SYMBOL, 0); }
		public ITerminalNode BOOL_SYMBOL() { return GetToken(MySQLParser.BOOL_SYMBOL, 0); }
		public ITerminalNode BOOLEAN_SYMBOL() { return GetToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		public ITerminalNode BTREE_SYMBOL() { return GetToken(MySQLParser.BTREE_SYMBOL, 0); }
		public ITerminalNode BUCKETS_SYMBOL() { return GetToken(MySQLParser.BUCKETS_SYMBOL, 0); }
		public ITerminalNode CASCADED_SYMBOL() { return GetToken(MySQLParser.CASCADED_SYMBOL, 0); }
		public ITerminalNode CATALOG_NAME_SYMBOL() { return GetToken(MySQLParser.CATALOG_NAME_SYMBOL, 0); }
		public ITerminalNode CHAIN_SYMBOL() { return GetToken(MySQLParser.CHAIN_SYMBOL, 0); }
		public ITerminalNode CHANGED_SYMBOL() { return GetToken(MySQLParser.CHANGED_SYMBOL, 0); }
		public ITerminalNode CHANNEL_SYMBOL() { return GetToken(MySQLParser.CHANNEL_SYMBOL, 0); }
		public ITerminalNode CIPHER_SYMBOL() { return GetToken(MySQLParser.CIPHER_SYMBOL, 0); }
		public ITerminalNode CLIENT_SYMBOL() { return GetToken(MySQLParser.CLIENT_SYMBOL, 0); }
		public ITerminalNode CLASS_ORIGIN_SYMBOL() { return GetToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
		public ITerminalNode COALESCE_SYMBOL() { return GetToken(MySQLParser.COALESCE_SYMBOL, 0); }
		public ITerminalNode CODE_SYMBOL() { return GetToken(MySQLParser.CODE_SYMBOL, 0); }
		public ITerminalNode COLLATION_SYMBOL() { return GetToken(MySQLParser.COLLATION_SYMBOL, 0); }
		public ITerminalNode COLUMN_NAME_SYMBOL() { return GetToken(MySQLParser.COLUMN_NAME_SYMBOL, 0); }
		public ITerminalNode COLUMN_FORMAT_SYMBOL() { return GetToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
		public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public ITerminalNode COMMITTED_SYMBOL() { return GetToken(MySQLParser.COMMITTED_SYMBOL, 0); }
		public ITerminalNode COMPACT_SYMBOL() { return GetToken(MySQLParser.COMPACT_SYMBOL, 0); }
		public ITerminalNode COMPLETION_SYMBOL() { return GetToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		public ITerminalNode COMPONENT_SYMBOL() { return GetToken(MySQLParser.COMPONENT_SYMBOL, 0); }
		public ITerminalNode COMPRESSED_SYMBOL() { return GetToken(MySQLParser.COMPRESSED_SYMBOL, 0); }
		public ITerminalNode COMPRESSION_SYMBOL() { return GetToken(MySQLParser.COMPRESSION_SYMBOL, 0); }
		public ITerminalNode CONCURRENT_SYMBOL() { return GetToken(MySQLParser.CONCURRENT_SYMBOL, 0); }
		public ITerminalNode CONNECTION_SYMBOL() { return GetToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public ITerminalNode CONSISTENT_SYMBOL() { return GetToken(MySQLParser.CONSISTENT_SYMBOL, 0); }
		public ITerminalNode CONSTRAINT_CATALOG_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		public ITerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		public ITerminalNode CONSTRAINT_NAME_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
		public ITerminalNode CONTEXT_SYMBOL() { return GetToken(MySQLParser.CONTEXT_SYMBOL, 0); }
		public ITerminalNode CONTRIBUTORS_SYMBOL() { return GetToken(MySQLParser.CONTRIBUTORS_SYMBOL, 0); }
		public ITerminalNode CPU_SYMBOL() { return GetToken(MySQLParser.CPU_SYMBOL, 0); }
		public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public ITerminalNode CURSOR_NAME_SYMBOL() { return GetToken(MySQLParser.CURSOR_NAME_SYMBOL, 0); }
		public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		public ITerminalNode DATAFILE_SYMBOL() { return GetToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public ITerminalNode DATE_SYMBOL() { return GetToken(MySQLParser.DATE_SYMBOL, 0); }
		public ITerminalNode DAY_SYMBOL() { return GetToken(MySQLParser.DAY_SYMBOL, 0); }
		public ITerminalNode DEFAULT_AUTH_SYMBOL() { return GetToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
		public ITerminalNode DEFINER_SYMBOL() { return GetToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public ITerminalNode DELAY_KEY_WRITE_SYMBOL() { return GetToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		public ITerminalNode DES_KEY_FILE_SYMBOL() { return GetToken(MySQLParser.DES_KEY_FILE_SYMBOL, 0); }
		public ITerminalNode DESCRIPTION_SYMBOL() { return GetToken(MySQLParser.DESCRIPTION_SYMBOL, 0); }
		public ITerminalNode DIAGNOSTICS_SYMBOL() { return GetToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0); }
		public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public ITerminalNode DISK_SYMBOL() { return GetToken(MySQLParser.DISK_SYMBOL, 0); }
		public ITerminalNode DUMPFILE_SYMBOL() { return GetToken(MySQLParser.DUMPFILE_SYMBOL, 0); }
		public ITerminalNode DUPLICATE_SYMBOL() { return GetToken(MySQLParser.DUPLICATE_SYMBOL, 0); }
		public ITerminalNode DYNAMIC_SYMBOL() { return GetToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		public ITerminalNode ENCRYPTION_SYMBOL() { return GetToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public ITerminalNode ENDS_SYMBOL() { return GetToken(MySQLParser.ENDS_SYMBOL, 0); }
		public ITerminalNode ENUM_SYMBOL() { return GetToken(MySQLParser.ENUM_SYMBOL, 0); }
		public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public ITerminalNode ENGINES_SYMBOL() { return GetToken(MySQLParser.ENGINES_SYMBOL, 0); }
		public ITerminalNode ERROR_SYMBOL() { return GetToken(MySQLParser.ERROR_SYMBOL, 0); }
		public ITerminalNode ERRORS_SYMBOL() { return GetToken(MySQLParser.ERRORS_SYMBOL, 0); }
		public ITerminalNode ESCAPE_SYMBOL() { return GetToken(MySQLParser.ESCAPE_SYMBOL, 0); }
		public ITerminalNode EVENTS_SYMBOL() { return GetToken(MySQLParser.EVENTS_SYMBOL, 0); }
		public ITerminalNode EVERY_SYMBOL() { return GetToken(MySQLParser.EVERY_SYMBOL, 0); }
		public ITerminalNode EXCLUDE_SYMBOL() { return GetToken(MySQLParser.EXCLUDE_SYMBOL, 0); }
		public ITerminalNode EXPANSION_SYMBOL() { return GetToken(MySQLParser.EXPANSION_SYMBOL, 0); }
		public ITerminalNode EXPORT_SYMBOL() { return GetToken(MySQLParser.EXPORT_SYMBOL, 0); }
		public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public ITerminalNode EXTENT_SIZE_SYMBOL() { return GetToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0); }
		public ITerminalNode FAULTS_SYMBOL() { return GetToken(MySQLParser.FAULTS_SYMBOL, 0); }
		public ITerminalNode FAST_SYMBOL() { return GetToken(MySQLParser.FAST_SYMBOL, 0); }
		public ITerminalNode FOLLOWING_SYMBOL() { return GetToken(MySQLParser.FOLLOWING_SYMBOL, 0); }
		public ITerminalNode FOUND_SYMBOL() { return GetToken(MySQLParser.FOUND_SYMBOL, 0); }
		public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public ITerminalNode FULL_SYMBOL() { return GetToken(MySQLParser.FULL_SYMBOL, 0); }
		public ITerminalNode FILE_BLOCK_SIZE_SYMBOL() { return GetToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		public ITerminalNode FILTER_SYMBOL() { return GetToken(MySQLParser.FILTER_SYMBOL, 0); }
		public ITerminalNode FIRST_SYMBOL() { return GetToken(MySQLParser.FIRST_SYMBOL, 0); }
		public ITerminalNode FIXED_SYMBOL() { return GetToken(MySQLParser.FIXED_SYMBOL, 0); }
		public ITerminalNode GENERAL_SYMBOL() { return GetToken(MySQLParser.GENERAL_SYMBOL, 0); }
		public ITerminalNode GEOMETRY_SYMBOL() { return GetToken(MySQLParser.GEOMETRY_SYMBOL, 0); }
		public ITerminalNode GEOMETRYCOLLECTION_SYMBOL() { return GetToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public ITerminalNode GET_FORMAT_SYMBOL() { return GetToken(MySQLParser.GET_FORMAT_SYMBOL, 0); }
		public ITerminalNode GRANTS_SYMBOL() { return GetToken(MySQLParser.GRANTS_SYMBOL, 0); }
		public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public ITerminalNode HASH_SYMBOL() { return GetToken(MySQLParser.HASH_SYMBOL, 0); }
		public ITerminalNode HISTOGRAM_SYMBOL() { return GetToken(MySQLParser.HISTOGRAM_SYMBOL, 0); }
		public ITerminalNode HISTORY_SYMBOL() { return GetToken(MySQLParser.HISTORY_SYMBOL, 0); }
		public ITerminalNode HOSTS_SYMBOL() { return GetToken(MySQLParser.HOSTS_SYMBOL, 0); }
		public ITerminalNode HOUR_SYMBOL() { return GetToken(MySQLParser.HOUR_SYMBOL, 0); }
		public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public ITerminalNode IGNORE_SERVER_IDS_SYMBOL() { return GetToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		public ITerminalNode INVOKER_SYMBOL() { return GetToken(MySQLParser.INVOKER_SYMBOL, 0); }
		public ITerminalNode INDEXES_SYMBOL() { return GetToken(MySQLParser.INDEXES_SYMBOL, 0); }
		public ITerminalNode INITIAL_SIZE_SYMBOL() { return GetToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public ITerminalNode INSTANCE_SYMBOL() { return GetToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public ITerminalNode INACTIVE_SYMBOL() { return GetToken(MySQLParser.INACTIVE_SYMBOL, 0); }
		public ITerminalNode IO_SYMBOL() { return GetToken(MySQLParser.IO_SYMBOL, 0); }
		public ITerminalNode IPC_SYMBOL() { return GetToken(MySQLParser.IPC_SYMBOL, 0); }
		public ITerminalNode ISOLATION_SYMBOL() { return GetToken(MySQLParser.ISOLATION_SYMBOL, 0); }
		public ITerminalNode ISSUER_SYMBOL() { return GetToken(MySQLParser.ISSUER_SYMBOL, 0); }
		public ITerminalNode INSERT_METHOD_SYMBOL() { return GetToken(MySQLParser.INSERT_METHOD_SYMBOL, 0); }
		public ITerminalNode JSON_SYMBOL() { return GetToken(MySQLParser.JSON_SYMBOL, 0); }
		public ITerminalNode KEY_BLOCK_SIZE_SYMBOL() { return GetToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public ITerminalNode LAST_SYMBOL() { return GetToken(MySQLParser.LAST_SYMBOL, 0); }
		public ITerminalNode LEAVES_SYMBOL() { return GetToken(MySQLParser.LEAVES_SYMBOL, 0); }
		public ITerminalNode LESS_SYMBOL() { return GetToken(MySQLParser.LESS_SYMBOL, 0); }
		public ITerminalNode LEVEL_SYMBOL() { return GetToken(MySQLParser.LEVEL_SYMBOL, 0); }
		public ITerminalNode LINESTRING_SYMBOL() { return GetToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		public ITerminalNode LIST_SYMBOL() { return GetToken(MySQLParser.LIST_SYMBOL, 0); }
		public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public ITerminalNode LOCKED_SYMBOL() { return GetToken(MySQLParser.LOCKED_SYMBOL, 0); }
		public ITerminalNode LOCKS_SYMBOL() { return GetToken(MySQLParser.LOCKS_SYMBOL, 0); }
		public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public ITerminalNode LOGS_SYMBOL() { return GetToken(MySQLParser.LOGS_SYMBOL, 0); }
		public ITerminalNode MAX_ROWS_SYMBOL() { return GetToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		public ITerminalNode MASTER_SYMBOL() { return GetToken(MySQLParser.MASTER_SYMBOL, 0); }
		public ITerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return GetToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		public ITerminalNode MASTER_HOST_SYMBOL() { return GetToken(MySQLParser.MASTER_HOST_SYMBOL, 0); }
		public ITerminalNode MASTER_PORT_SYMBOL() { return GetToken(MySQLParser.MASTER_PORT_SYMBOL, 0); }
		public ITerminalNode MASTER_LOG_FILE_SYMBOL() { return GetToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
		public ITerminalNode MASTER_LOG_POS_SYMBOL() { return GetToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
		public ITerminalNode MASTER_USER_SYMBOL() { return GetToken(MySQLParser.MASTER_USER_SYMBOL, 0); }
		public ITerminalNode MASTER_PASSWORD_SYMBOL() { return GetToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
		public ITerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return GetToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		public ITerminalNode MASTER_SERVER_ID_SYMBOL() { return GetToken(MySQLParser.MASTER_SERVER_ID_SYMBOL, 0); }
		public ITerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return GetToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		public ITerminalNode MASTER_RETRY_COUNT_SYMBOL() { return GetToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		public ITerminalNode MASTER_DELAY_SYMBOL() { return GetToken(MySQLParser.MASTER_DELAY_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CA_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CAPATH_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		public ITerminalNode MASTER_TLS_VERSION_SYMBOL() { return GetToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CERT_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CIPHER_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CRL_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_KEY_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
		public ITerminalNode MASTER_AUTO_POSITION_SYMBOL() { return GetToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		public ITerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		public ITerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		public ITerminalNode MAX_STATEMENT_TIME_SYMBOL() { return GetToken(MySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0); }
		public ITerminalNode MAX_SIZE_SYMBOL() { return GetToken(MySQLParser.MAX_SIZE_SYMBOL, 0); }
		public ITerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		public ITerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return GetToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		public ITerminalNode MEDIUM_SYMBOL() { return GetToken(MySQLParser.MEDIUM_SYMBOL, 0); }
		public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public ITerminalNode MERGE_SYMBOL() { return GetToken(MySQLParser.MERGE_SYMBOL, 0); }
		public ITerminalNode MESSAGE_TEXT_SYMBOL() { return GetToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
		public ITerminalNode MICROSECOND_SYMBOL() { return GetToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		public ITerminalNode MIGRATE_SYMBOL() { return GetToken(MySQLParser.MIGRATE_SYMBOL, 0); }
		public ITerminalNode MINUTE_SYMBOL() { return GetToken(MySQLParser.MINUTE_SYMBOL, 0); }
		public ITerminalNode MIN_ROWS_SYMBOL() { return GetToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		public ITerminalNode MODIFY_SYMBOL() { return GetToken(MySQLParser.MODIFY_SYMBOL, 0); }
		public ITerminalNode MODE_SYMBOL() { return GetToken(MySQLParser.MODE_SYMBOL, 0); }
		public ITerminalNode MONTH_SYMBOL() { return GetToken(MySQLParser.MONTH_SYMBOL, 0); }
		public ITerminalNode MULTILINESTRING_SYMBOL() { return GetToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public ITerminalNode MULTIPOINT_SYMBOL() { return GetToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		public ITerminalNode MULTIPOLYGON_SYMBOL() { return GetToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public ITerminalNode MUTEX_SYMBOL() { return GetToken(MySQLParser.MUTEX_SYMBOL, 0); }
		public ITerminalNode MYSQL_ERRNO_SYMBOL() { return GetToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
		public ITerminalNode NAME_SYMBOL() { return GetToken(MySQLParser.NAME_SYMBOL, 0); }
		public ITerminalNode NAMES_SYMBOL() { return GetToken(MySQLParser.NAMES_SYMBOL, 0); }
		public ITerminalNode NATIONAL_SYMBOL() { return GetToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public ITerminalNode NCHAR_SYMBOL() { return GetToken(MySQLParser.NCHAR_SYMBOL, 0); }
		public ITerminalNode NDBCLUSTER_SYMBOL() { return GetToken(MySQLParser.NDBCLUSTER_SYMBOL, 0); }
		public ITerminalNode NESTED_SYMBOL() { return GetToken(MySQLParser.NESTED_SYMBOL, 0); }
		public ITerminalNode NEVER_SYMBOL() { return GetToken(MySQLParser.NEVER_SYMBOL, 0); }
		public ITerminalNode NEXT_SYMBOL() { return GetToken(MySQLParser.NEXT_SYMBOL, 0); }
		public ITerminalNode NEW_SYMBOL() { return GetToken(MySQLParser.NEW_SYMBOL, 0); }
		public ITerminalNode NO_WAIT_SYMBOL() { return GetToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
		public ITerminalNode NODEGROUP_SYMBOL() { return GetToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		public ITerminalNode NULLS_SYMBOL() { return GetToken(MySQLParser.NULLS_SYMBOL, 0); }
		public ITerminalNode NOWAIT_SYMBOL() { return GetToken(MySQLParser.NOWAIT_SYMBOL, 0); }
		public ITerminalNode NUMBER_SYMBOL() { return GetToken(MySQLParser.NUMBER_SYMBOL, 0); }
		public ITerminalNode NVARCHAR_SYMBOL() { return GetToken(MySQLParser.NVARCHAR_SYMBOL, 0); }
		public ITerminalNode OFFSET_SYMBOL() { return GetToken(MySQLParser.OFFSET_SYMBOL, 0); }
		public ITerminalNode OLD_SYMBOL() { return GetToken(MySQLParser.OLD_SYMBOL, 0); }
		public ITerminalNode OLD_PASSWORD_SYMBOL() { return GetToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0); }
		public ITerminalNode ONE_SHOT_SYMBOL() { return GetToken(MySQLParser.ONE_SHOT_SYMBOL, 0); }
		public ITerminalNode ONE_SYMBOL() { return GetToken(MySQLParser.ONE_SYMBOL, 0); }
		public ITerminalNode OPTIONAL_SYMBOL() { return GetToken(MySQLParser.OPTIONAL_SYMBOL, 0); }
		public ITerminalNode ORDINALITY_SYMBOL() { return GetToken(MySQLParser.ORDINALITY_SYMBOL, 0); }
		public ITerminalNode ORGANIZATION_SYMBOL() { return GetToken(MySQLParser.ORGANIZATION_SYMBOL, 0); }
		public ITerminalNode OTHERS_SYMBOL() { return GetToken(MySQLParser.OTHERS_SYMBOL, 0); }
		public ITerminalNode PACK_KEYS_SYMBOL() { return GetToken(MySQLParser.PACK_KEYS_SYMBOL, 0); }
		public ITerminalNode PAGE_SYMBOL() { return GetToken(MySQLParser.PAGE_SYMBOL, 0); }
		public ITerminalNode PARTIAL_SYMBOL() { return GetToken(MySQLParser.PARTIAL_SYMBOL, 0); }
		public ITerminalNode PARTITIONING_SYMBOL() { return GetToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
		public ITerminalNode PARTITIONS_SYMBOL() { return GetToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public ITerminalNode PATH_SYMBOL() { return GetToken(MySQLParser.PATH_SYMBOL, 0); }
		public ITerminalNode PHASE_SYMBOL() { return GetToken(MySQLParser.PHASE_SYMBOL, 0); }
		public ITerminalNode PLUGIN_DIR_SYMBOL() { return GetToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0); }
		public ITerminalNode PLUGIN_SYMBOL() { return GetToken(MySQLParser.PLUGIN_SYMBOL, 0); }
		public ITerminalNode PLUGINS_SYMBOL() { return GetToken(MySQLParser.PLUGINS_SYMBOL, 0); }
		public ITerminalNode POINT_SYMBOL() { return GetToken(MySQLParser.POINT_SYMBOL, 0); }
		public ITerminalNode POLYGON_SYMBOL() { return GetToken(MySQLParser.POLYGON_SYMBOL, 0); }
		public ITerminalNode PRECEDING_SYMBOL() { return GetToken(MySQLParser.PRECEDING_SYMBOL, 0); }
		public ITerminalNode PRESERVE_SYMBOL() { return GetToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		public ITerminalNode PREV_SYMBOL() { return GetToken(MySQLParser.PREV_SYMBOL, 0); }
		public ITerminalNode THREAD_PRIORITY_SYMBOL() { return GetToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
		public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public ITerminalNode PROCESSLIST_SYMBOL() { return GetToken(MySQLParser.PROCESSLIST_SYMBOL, 0); }
		public ITerminalNode PROFILE_SYMBOL() { return GetToken(MySQLParser.PROFILE_SYMBOL, 0); }
		public ITerminalNode PROFILES_SYMBOL() { return GetToken(MySQLParser.PROFILES_SYMBOL, 0); }
		public ITerminalNode QUARTER_SYMBOL() { return GetToken(MySQLParser.QUARTER_SYMBOL, 0); }
		public ITerminalNode QUERY_SYMBOL() { return GetToken(MySQLParser.QUERY_SYMBOL, 0); }
		public ITerminalNode QUICK_SYMBOL() { return GetToken(MySQLParser.QUICK_SYMBOL, 0); }
		public ITerminalNode READ_ONLY_SYMBOL() { return GetToken(MySQLParser.READ_ONLY_SYMBOL, 0); }
		public ITerminalNode REBUILD_SYMBOL() { return GetToken(MySQLParser.REBUILD_SYMBOL, 0); }
		public ITerminalNode RECOVER_SYMBOL() { return GetToken(MySQLParser.RECOVER_SYMBOL, 0); }
		public ITerminalNode REDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		public ITerminalNode REDOFILE_SYMBOL() { return GetToken(MySQLParser.REDOFILE_SYMBOL, 0); }
		public ITerminalNode REDUNDANT_SYMBOL() { return GetToken(MySQLParser.REDUNDANT_SYMBOL, 0); }
		public ITerminalNode RELAY_SYMBOL() { return GetToken(MySQLParser.RELAY_SYMBOL, 0); }
		public ITerminalNode RELAYLOG_SYMBOL() { return GetToken(MySQLParser.RELAYLOG_SYMBOL, 0); }
		public ITerminalNode RELAY_LOG_FILE_SYMBOL() { return GetToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
		public ITerminalNode RELAY_LOG_POS_SYMBOL() { return GetToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
		public ITerminalNode RELAY_THREAD_SYMBOL() { return GetToken(MySQLParser.RELAY_THREAD_SYMBOL, 0); }
		public ITerminalNode REMOTE_SYMBOL() { return GetToken(MySQLParser.REMOTE_SYMBOL, 0); }
		public ITerminalNode REORGANIZE_SYMBOL() { return GetToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
		public ITerminalNode REPEATABLE_SYMBOL() { return GetToken(MySQLParser.REPEATABLE_SYMBOL, 0); }
		public ITerminalNode REPLICATE_DO_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
		public ITerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		public ITerminalNode REPLICATE_DO_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		public ITerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		public ITerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		public ITerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		public ITerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		public ITerminalNode USER_RESOURCES_SYMBOL() { return GetToken(MySQLParser.USER_RESOURCES_SYMBOL, 0); }
		public ITerminalNode RESPECT_SYMBOL() { return GetToken(MySQLParser.RESPECT_SYMBOL, 0); }
		public ITerminalNode RESUME_SYMBOL() { return GetToken(MySQLParser.RESUME_SYMBOL, 0); }
		public ITerminalNode RETAIN_SYMBOL() { return GetToken(MySQLParser.RETAIN_SYMBOL, 0); }
		public ITerminalNode RETURNED_SQLSTATE_SYMBOL() { return GetToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		public ITerminalNode RETURNS_SYMBOL() { return GetToken(MySQLParser.RETURNS_SYMBOL, 0); }
		public ITerminalNode REUSE_SYMBOL() { return GetToken(MySQLParser.REUSE_SYMBOL, 0); }
		public ITerminalNode REVERSE_SYMBOL() { return GetToken(MySQLParser.REVERSE_SYMBOL, 0); }
		public ITerminalNode ROLLUP_SYMBOL() { return GetToken(MySQLParser.ROLLUP_SYMBOL, 0); }
		public ITerminalNode ROTATE_SYMBOL() { return GetToken(MySQLParser.ROTATE_SYMBOL, 0); }
		public ITerminalNode ROUTINE_SYMBOL() { return GetToken(MySQLParser.ROUTINE_SYMBOL, 0); }
		public ITerminalNode ROW_COUNT_SYMBOL() { return GetToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		public ITerminalNode ROW_FORMAT_SYMBOL() { return GetToken(MySQLParser.ROW_FORMAT_SYMBOL, 0); }
		public ITerminalNode RTREE_SYMBOL() { return GetToken(MySQLParser.RTREE_SYMBOL, 0); }
		public ITerminalNode SCHEDULE_SYMBOL() { return GetToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		public ITerminalNode SCHEMA_NAME_SYMBOL() { return GetToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0); }
		public ITerminalNode SECOND_SYMBOL() { return GetToken(MySQLParser.SECOND_SYMBOL, 0); }
		public ITerminalNode SERIAL_SYMBOL() { return GetToken(MySQLParser.SERIAL_SYMBOL, 0); }
		public ITerminalNode SERIALIZABLE_SYMBOL() { return GetToken(MySQLParser.SERIALIZABLE_SYMBOL, 0); }
		public ITerminalNode SESSION_SYMBOL() { return GetToken(MySQLParser.SESSION_SYMBOL, 0); }
		public ITerminalNode SHARE_SYMBOL() { return GetToken(MySQLParser.SHARE_SYMBOL, 0); }
		public ITerminalNode SIMPLE_SYMBOL() { return GetToken(MySQLParser.SIMPLE_SYMBOL, 0); }
		public ITerminalNode SKIP_SYMBOL() { return GetToken(MySQLParser.SKIP_SYMBOL, 0); }
		public ITerminalNode SLOW_SYMBOL() { return GetToken(MySQLParser.SLOW_SYMBOL, 0); }
		public ITerminalNode SNAPSHOT_SYMBOL() { return GetToken(MySQLParser.SNAPSHOT_SYMBOL, 0); }
		public ITerminalNode SOUNDS_SYMBOL() { return GetToken(MySQLParser.SOUNDS_SYMBOL, 0); }
		public ITerminalNode SOURCE_SYMBOL() { return GetToken(MySQLParser.SOURCE_SYMBOL, 0); }
		public ITerminalNode SQL_AFTER_GTIDS_SYMBOL() { return GetToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		public ITerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return GetToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		public ITerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return GetToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		public ITerminalNode SQL_CACHE_SYMBOL() { return GetToken(MySQLParser.SQL_CACHE_SYMBOL, 0); }
		public ITerminalNode SQL_BUFFER_RESULT_SYMBOL() { return GetToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		public ITerminalNode SQL_NO_CACHE_SYMBOL() { return GetToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
		public ITerminalNode SQL_THREAD_SYMBOL() { return GetToken(MySQLParser.SQL_THREAD_SYMBOL, 0); }
		public ITerminalNode SRID_SYMBOL() { return GetToken(MySQLParser.SRID_SYMBOL, 0); }
		public ITerminalNode STACKED_SYMBOL() { return GetToken(MySQLParser.STACKED_SYMBOL, 0); }
		public ITerminalNode STARTS_SYMBOL() { return GetToken(MySQLParser.STARTS_SYMBOL, 0); }
		public ITerminalNode STATS_AUTO_RECALC_SYMBOL() { return GetToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		public ITerminalNode STATS_PERSISTENT_SYMBOL() { return GetToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
		public ITerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return GetToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		public ITerminalNode STATUS_SYMBOL() { return GetToken(MySQLParser.STATUS_SYMBOL, 0); }
		public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public ITerminalNode STRING_SYMBOL() { return GetToken(MySQLParser.STRING_SYMBOL, 0); }
		public ITerminalNode SUBCLASS_ORIGIN_SYMBOL() { return GetToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		public ITerminalNode SUBDATE_SYMBOL() { return GetToken(MySQLParser.SUBDATE_SYMBOL, 0); }
		public ITerminalNode SUBJECT_SYMBOL() { return GetToken(MySQLParser.SUBJECT_SYMBOL, 0); }
		public ITerminalNode SUBPARTITION_SYMBOL() { return GetToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		public ITerminalNode SUBPARTITIONS_SYMBOL() { return GetToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0); }
		public ITerminalNode SUPER_SYMBOL() { return GetToken(MySQLParser.SUPER_SYMBOL, 0); }
		public ITerminalNode SUSPEND_SYMBOL() { return GetToken(MySQLParser.SUSPEND_SYMBOL, 0); }
		public ITerminalNode SWAPS_SYMBOL() { return GetToken(MySQLParser.SWAPS_SYMBOL, 0); }
		public ITerminalNode SWITCHES_SYMBOL() { return GetToken(MySQLParser.SWITCHES_SYMBOL, 0); }
		public ITerminalNode TABLE_NAME_SYMBOL() { return GetToken(MySQLParser.TABLE_NAME_SYMBOL, 0); }
		public ITerminalNode TABLES_SYMBOL() { return GetToken(MySQLParser.TABLES_SYMBOL, 0); }
		public ITerminalNode TABLE_CHECKSUM_SYMBOL() { return GetToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public ITerminalNode TEMPORARY_SYMBOL() { return GetToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public ITerminalNode TEMPTABLE_SYMBOL() { return GetToken(MySQLParser.TEMPTABLE_SYMBOL, 0); }
		public ITerminalNode TEXT_SYMBOL() { return GetToken(MySQLParser.TEXT_SYMBOL, 0); }
		public ITerminalNode THAN_SYMBOL() { return GetToken(MySQLParser.THAN_SYMBOL, 0); }
		public ITerminalNode TIES_SYMBOL() { return GetToken(MySQLParser.TIES_SYMBOL, 0); }
		public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public ITerminalNode TRIGGERS_SYMBOL() { return GetToken(MySQLParser.TRIGGERS_SYMBOL, 0); }
		public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public ITerminalNode TIMESTAMP_ADD_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0); }
		public ITerminalNode TIMESTAMP_DIFF_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0); }
		public ITerminalNode TIME_SYMBOL() { return GetToken(MySQLParser.TIME_SYMBOL, 0); }
		public ITerminalNode TYPES_SYMBOL() { return GetToken(MySQLParser.TYPES_SYMBOL, 0); }
		public ITerminalNode TYPE_SYMBOL() { return GetToken(MySQLParser.TYPE_SYMBOL, 0); }
		public ITerminalNode UDF_RETURNS_SYMBOL() { return GetToken(MySQLParser.UDF_RETURNS_SYMBOL, 0); }
		public ITerminalNode UNBOUNDED_SYMBOL() { return GetToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public ITerminalNode UNCOMMITTED_SYMBOL() { return GetToken(MySQLParser.UNCOMMITTED_SYMBOL, 0); }
		public ITerminalNode UNDEFINED_SYMBOL() { return GetToken(MySQLParser.UNDEFINED_SYMBOL, 0); }
		public ITerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		public ITerminalNode UNDOFILE_SYMBOL() { return GetToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		public ITerminalNode UNKNOWN_SYMBOL() { return GetToken(MySQLParser.UNKNOWN_SYMBOL, 0); }
		public ITerminalNode UNTIL_SYMBOL() { return GetToken(MySQLParser.UNTIL_SYMBOL, 0); }
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public ITerminalNode USE_FRM_SYMBOL() { return GetToken(MySQLParser.USE_FRM_SYMBOL, 0); }
		public ITerminalNode VARIABLES_SYMBOL() { return GetToken(MySQLParser.VARIABLES_SYMBOL, 0); }
		public ITerminalNode VCPU_SYMBOL() { return GetToken(MySQLParser.VCPU_SYMBOL, 0); }
		public ITerminalNode VIEW_SYMBOL() { return GetToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ITerminalNode VALUE_SYMBOL() { return GetToken(MySQLParser.VALUE_SYMBOL, 0); }
		public ITerminalNode WARNINGS_SYMBOL() { return GetToken(MySQLParser.WARNINGS_SYMBOL, 0); }
		public ITerminalNode WAIT_SYMBOL() { return GetToken(MySQLParser.WAIT_SYMBOL, 0); }
		public ITerminalNode WEEK_SYMBOL() { return GetToken(MySQLParser.WEEK_SYMBOL, 0); }
		public ITerminalNode WORK_SYMBOL() { return GetToken(MySQLParser.WORK_SYMBOL, 0); }
		public ITerminalNode WEIGHT_STRING_SYMBOL() { return GetToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0); }
		public ITerminalNode X509_SYMBOL() { return GetToken(MySQLParser.X509_SYMBOL, 0); }
		public ITerminalNode XID_SYMBOL() { return GetToken(MySQLParser.XID_SYMBOL, 0); }
		public ITerminalNode XML_SYMBOL() { return GetToken(MySQLParser.XML_SYMBOL, 0); }
		public ITerminalNode YEAR_SYMBOL() { return GetToken(MySQLParser.YEAR_SYMBOL, 0); }
		public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public ITerminalNode CUBE_SYMBOL() { return GetToken(MySQLParser.CUBE_SYMBOL, 0); }
		public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public ITerminalNode ROWS_SYMBOL() { return GetToken(MySQLParser.ROWS_SYMBOL, 0); }
		public ITerminalNode ROW_SYMBOL() { return GetToken(MySQLParser.ROW_SYMBOL, 0); }
		public ITerminalNode EXCHANGE_SYMBOL() { return GetToken(MySQLParser.EXCHANGE_SYMBOL, 0); }
		public ITerminalNode EXPIRE_SYMBOL() { return GetToken(MySQLParser.EXPIRE_SYMBOL, 0); }
		public ITerminalNode ONLY_SYMBOL() { return GetToken(MySQLParser.ONLY_SYMBOL, 0); }
		public ITerminalNode VALIDATION_SYMBOL() { return GetToken(MySQLParser.VALIDATION_SYMBOL, 0); }
		public ITerminalNode WITHOUT_SYMBOL() { return GetToken(MySQLParser.WITHOUT_SYMBOL, 0); }
		public ITerminalNode ADMIN_SYMBOL() { return GetToken(MySQLParser.ADMIN_SYMBOL, 0); }
		public RoleOrLabelKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleOrLabelKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleOrLabelKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleOrLabelKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleOrLabelKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleOrLabelKeywordContext roleOrLabelKeyword() {
		RoleOrLabelKeywordContext _localctx = new RoleOrLabelKeywordContext(Context, State);
		EnterRule(_localctx, 1198, RULE_roleOrLabelKeyword);
		int _la;
		try {
			State = 8290;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1111,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8281;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (ACTION_SYMBOL - 57)) | (1L << (ADDDATE_SYMBOL - 57)) | (1L << (AFTER_SYMBOL - 57)) | (1L << (AGAINST_SYMBOL - 57)) | (1L << (AGGREGATE_SYMBOL - 57)) | (1L << (ALGORITHM_SYMBOL - 57)) | (1L << (ANY_SYMBOL - 57)) | (1L << (AT_SYMBOL - 57)) | (1L << (AUTHORS_SYMBOL - 57)) | (1L << (AUTO_INCREMENT_SYMBOL - 57)) | (1L << (AUTOEXTEND_SIZE_SYMBOL - 57)) | (1L << (AVG_ROW_LENGTH_SYMBOL - 57)) | (1L << (AVG_SYMBOL - 57)) | (1L << (BINLOG_SYMBOL - 57)) | (1L << (BIT_SYMBOL - 57)) | (1L << (BLOCK_SYMBOL - 57)) | (1L << (BOOL_SYMBOL - 57)) | (1L << (BOOLEAN_SYMBOL - 57)) | (1L << (BTREE_SYMBOL - 57)) | (1L << (CASCADED_SYMBOL - 57)) | (1L << (CATALOG_NAME_SYMBOL - 57)) | (1L << (CHAIN_SYMBOL - 57)) | (1L << (CHANGED_SYMBOL - 57)) | (1L << (CHANNEL_SYMBOL - 57)) | (1L << (CIPHER_SYMBOL - 57)) | (1L << (CLIENT_SYMBOL - 57)) | (1L << (CLASS_ORIGIN_SYMBOL - 57)) | (1L << (COALESCE_SYMBOL - 57)) | (1L << (CODE_SYMBOL - 57)) | (1L << (COLLATION_SYMBOL - 57)) | (1L << (COLUMN_NAME_SYMBOL - 57)) | (1L << (COLUMN_FORMAT_SYMBOL - 57)) | (1L << (COLUMNS_SYMBOL - 57)) | (1L << (COMMITTED_SYMBOL - 57)) | (1L << (COMPACT_SYMBOL - 57)) | (1L << (COMPLETION_SYMBOL - 57)) | (1L << (COMPRESSED_SYMBOL - 57)) | (1L << (COMPRESSION_SYMBOL - 57)) | (1L << (ENCRYPTION_SYMBOL - 57)) | (1L << (CONCURRENT_SYMBOL - 57)) | (1L << (CONNECTION_SYMBOL - 57)) | (1L << (CONSISTENT_SYMBOL - 57)) | (1L << (CONSTRAINT_CATALOG_SYMBOL - 57)) | (1L << (CONSTRAINT_SCHEMA_SYMBOL - 57)) | (1L << (CONSTRAINT_NAME_SYMBOL - 57)) | (1L << (CONTEXT_SYMBOL - 57)) | (1L << (CONTRIBUTORS_SYMBOL - 57)) | (1L << (CPU_SYMBOL - 57)) | (1L << (CURRENT_SYMBOL - 57)) | (1L << (CURSOR_NAME_SYMBOL - 57)) | (1L << (DATA_SYMBOL - 57)) | (1L << (DATAFILE_SYMBOL - 57)) | (1L << (DATETIME_SYMBOL - 57)) | (1L << (DATE_SYMBOL - 57)) | (1L << (DAY_SYMBOL - 57)) | (1L << (DEFAULT_AUTH_SYMBOL - 57)) | (1L << (DEFINER_SYMBOL - 57)) | (1L << (DELAY_KEY_WRITE_SYMBOL - 57)) | (1L << (DES_KEY_FILE_SYMBOL - 57)) | (1L << (DIAGNOSTICS_SYMBOL - 57)) | (1L << (DIRECTORY_SYMBOL - 57)) | (1L << (DISABLE_SYMBOL - 57)))) != 0) || ((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & ((1L << (DISCARD_SYMBOL - 121)) | (1L << (DISK_SYMBOL - 121)) | (1L << (DUMPFILE_SYMBOL - 121)) | (1L << (DUPLICATE_SYMBOL - 121)) | (1L << (DYNAMIC_SYMBOL - 121)) | (1L << (ENDS_SYMBOL - 121)) | (1L << (ENUM_SYMBOL - 121)) | (1L << (ENGINE_SYMBOL - 121)) | (1L << (ENGINES_SYMBOL - 121)) | (1L << (ERROR_SYMBOL - 121)) | (1L << (ERRORS_SYMBOL - 121)) | (1L << (ESCAPE_SYMBOL - 121)) | (1L << (EVENTS_SYMBOL - 121)) | (1L << (EVERY_SYMBOL - 121)) | (1L << (EXPANSION_SYMBOL - 121)) | (1L << (EXPORT_SYMBOL - 121)) | (1L << (EXTENDED_SYMBOL - 121)) | (1L << (EXTENT_SIZE_SYMBOL - 121)) | (1L << (FAULTS_SYMBOL - 121)) | (1L << (FAST_SYMBOL - 121)) | (1L << (FOUND_SYMBOL - 121)) | (1L << (ENABLE_SYMBOL - 121)) | (1L << (FULL_SYMBOL - 121)) | (1L << (FILE_BLOCK_SIZE_SYMBOL - 121)) | (1L << (FILTER_SYMBOL - 121)) | (1L << (FIRST_SYMBOL - 121)) | (1L << (FIXED_SYMBOL - 121)) | (1L << (GENERAL_SYMBOL - 121)) | (1L << (GEOMETRY_SYMBOL - 121)) | (1L << (GEOMETRYCOLLECTION_SYMBOL - 121)) | (1L << (GET_FORMAT_SYMBOL - 121)) | (1L << (GRANTS_SYMBOL - 121)) | (1L << (GLOBAL_SYMBOL - 121)) | (1L << (HASH_SYMBOL - 121)) | (1L << (HOSTS_SYMBOL - 121)) | (1L << (HOUR_SYMBOL - 121)) | (1L << (IDENTIFIED_SYMBOL - 121)) | (1L << (IGNORE_SERVER_IDS_SYMBOL - 121)) | (1L << (INVOKER_SYMBOL - 121)) | (1L << (INDEXES_SYMBOL - 121)) | (1L << (INITIAL_SIZE_SYMBOL - 121)) | (1L << (INSTANCE_SYMBOL - 121)) | (1L << (IO_SYMBOL - 121)) | (1L << (IPC_SYMBOL - 121)) | (1L << (ISOLATION_SYMBOL - 121)) | (1L << (ISSUER_SYMBOL - 121)) | (1L << (INSERT_METHOD_SYMBOL - 121)) | (1L << (JSON_SYMBOL - 121)) | (1L << (KEY_BLOCK_SIZE_SYMBOL - 121)) | (1L << (LAST_SYMBOL - 121)) | (1L << (LEAVES_SYMBOL - 121)) | (1L << (LESS_SYMBOL - 121)) | (1L << (LEVEL_SYMBOL - 121)) | (1L << (LINESTRING_SYMBOL - 121)) | (1L << (LIST_SYMBOL - 121)) | (1L << (LOCAL_SYMBOL - 121)) | (1L << (LOCKS_SYMBOL - 121)) | (1L << (LOGFILE_SYMBOL - 121)) | (1L << (LOGS_SYMBOL - 121)) | (1L << (MAX_ROWS_SYMBOL - 121)))) != 0) || ((((_la - 185)) & ~0x3f) == 0 && ((1L << (_la - 185)) & ((1L << (MASTER_SYMBOL - 185)) | (1L << (MASTER_HEARTBEAT_PERIOD_SYMBOL - 185)) | (1L << (MASTER_HOST_SYMBOL - 185)) | (1L << (MASTER_PORT_SYMBOL - 185)) | (1L << (MASTER_LOG_FILE_SYMBOL - 185)) | (1L << (MASTER_LOG_POS_SYMBOL - 185)) | (1L << (MASTER_USER_SYMBOL - 185)) | (1L << (MASTER_PASSWORD_SYMBOL - 185)) | (1L << (MASTER_SERVER_ID_SYMBOL - 185)) | (1L << (MASTER_CONNECT_RETRY_SYMBOL - 185)) | (1L << (MASTER_RETRY_COUNT_SYMBOL - 185)) | (1L << (MASTER_DELAY_SYMBOL - 185)) | (1L << (MASTER_SSL_SYMBOL - 185)) | (1L << (MASTER_SSL_CA_SYMBOL - 185)) | (1L << (MASTER_SSL_CAPATH_SYMBOL - 185)) | (1L << (MASTER_TLS_VERSION_SYMBOL - 185)) | (1L << (MASTER_SSL_CERT_SYMBOL - 185)) | (1L << (MASTER_SSL_CIPHER_SYMBOL - 185)) | (1L << (MASTER_SSL_CRL_SYMBOL - 185)) | (1L << (MASTER_SSL_CRLPATH_SYMBOL - 185)) | (1L << (MASTER_SSL_KEY_SYMBOL - 185)) | (1L << (MASTER_AUTO_POSITION_SYMBOL - 185)) | (1L << (MAX_CONNECTIONS_PER_HOUR_SYMBOL - 185)) | (1L << (MAX_QUERIES_PER_HOUR_SYMBOL - 185)) | (1L << (MAX_STATEMENT_TIME_SYMBOL - 185)) | (1L << (MAX_SIZE_SYMBOL - 185)) | (1L << (MAX_UPDATES_PER_HOUR_SYMBOL - 185)) | (1L << (MAX_USER_CONNECTIONS_SYMBOL - 185)) | (1L << (MEDIUM_SYMBOL - 185)) | (1L << (MEMORY_SYMBOL - 185)) | (1L << (MERGE_SYMBOL - 185)) | (1L << (MESSAGE_TEXT_SYMBOL - 185)) | (1L << (MICROSECOND_SYMBOL - 185)) | (1L << (MIGRATE_SYMBOL - 185)) | (1L << (MINUTE_SYMBOL - 185)) | (1L << (MIN_ROWS_SYMBOL - 185)) | (1L << (MODIFY_SYMBOL - 185)) | (1L << (MODE_SYMBOL - 185)) | (1L << (MONTH_SYMBOL - 185)) | (1L << (MULTILINESTRING_SYMBOL - 185)) | (1L << (MULTIPOINT_SYMBOL - 185)) | (1L << (MULTIPOLYGON_SYMBOL - 185)) | (1L << (MUTEX_SYMBOL - 185)) | (1L << (MYSQL_ERRNO_SYMBOL - 185)) | (1L << (NAME_SYMBOL - 185)) | (1L << (NAMES_SYMBOL - 185)) | (1L << (NATIONAL_SYMBOL - 185)) | (1L << (NCHAR_SYMBOL - 185)) | (1L << (NDBCLUSTER_SYMBOL - 185)) | (1L << (NEVER_SYMBOL - 185)) | (1L << (NEXT_SYMBOL - 185)) | (1L << (NEW_SYMBOL - 185)) | (1L << (NO_WAIT_SYMBOL - 185)) | (1L << (NODEGROUP_SYMBOL - 185)) | (1L << (NUMBER_SYMBOL - 185)) | (1L << (NVARCHAR_SYMBOL - 185)) | (1L << (OFFSET_SYMBOL - 185)) | (1L << (OLD_PASSWORD_SYMBOL - 185)) | (1L << (ONE_SHOT_SYMBOL - 185)) | (1L << (ONE_SYMBOL - 185)) | (1L << (PACK_KEYS_SYMBOL - 185)) | (1L << (PAGE_SYMBOL - 185)) | (1L << (PARTIAL_SYMBOL - 185)))) != 0) || ((((_la - 249)) & ~0x3f) == 0 && ((1L << (_la - 249)) & ((1L << (PARTITIONING_SYMBOL - 249)) | (1L << (PARTITIONS_SYMBOL - 249)) | (1L << (PASSWORD_SYMBOL - 249)) | (1L << (PHASE_SYMBOL - 249)) | (1L << (PLUGIN_DIR_SYMBOL - 249)) | (1L << (PLUGIN_SYMBOL - 249)) | (1L << (PLUGINS_SYMBOL - 249)) | (1L << (POINT_SYMBOL - 249)) | (1L << (POLYGON_SYMBOL - 249)) | (1L << (PRESERVE_SYMBOL - 249)) | (1L << (PREV_SYMBOL - 249)) | (1L << (PRIVILEGES_SYMBOL - 249)) | (1L << (PROCESSLIST_SYMBOL - 249)) | (1L << (PROFILE_SYMBOL - 249)) | (1L << (PROFILES_SYMBOL - 249)) | (1L << (QUARTER_SYMBOL - 249)) | (1L << (QUERY_SYMBOL - 249)) | (1L << (QUICK_SYMBOL - 249)) | (1L << (READ_ONLY_SYMBOL - 249)) | (1L << (REBUILD_SYMBOL - 249)) | (1L << (RECOVER_SYMBOL - 249)) | (1L << (REDO_BUFFER_SIZE_SYMBOL - 249)) | (1L << (REDOFILE_SYMBOL - 249)) | (1L << (REDUNDANT_SYMBOL - 249)) | (1L << (RELAY_SYMBOL - 249)) | (1L << (RELAYLOG_SYMBOL - 249)) | (1L << (RELAY_LOG_FILE_SYMBOL - 249)) | (1L << (RELAY_LOG_POS_SYMBOL - 249)) | (1L << (RELAY_THREAD_SYMBOL - 249)) | (1L << (REORGANIZE_SYMBOL - 249)) | (1L << (REPEATABLE_SYMBOL - 249)) | (1L << (REPLICATE_DO_DB_SYMBOL - 249)) | (1L << (REPLICATE_IGNORE_DB_SYMBOL - 249)) | (1L << (REPLICATE_DO_TABLE_SYMBOL - 249)) | (1L << (REPLICATE_IGNORE_TABLE_SYMBOL - 249)) | (1L << (REPLICATE_WILD_DO_TABLE_SYMBOL - 249)) | (1L << (REPLICATE_WILD_IGNORE_TABLE_SYMBOL - 249)) | (1L << (REPLICATE_REWRITE_DB_SYMBOL - 249)) | (1L << (RESUME_SYMBOL - 249)) | (1L << (RETURNED_SQLSTATE_SYMBOL - 249)) | (1L << (RETURNS_SYMBOL - 249)) | (1L << (REVERSE_SYMBOL - 249)) | (1L << (ROLLUP_SYMBOL - 249)) | (1L << (ROTATE_SYMBOL - 249)) | (1L << (ROUTINE_SYMBOL - 249)) | (1L << (ROW_COUNT_SYMBOL - 249)) | (1L << (ROW_FORMAT_SYMBOL - 249)) | (1L << (RTREE_SYMBOL - 249)) | (1L << (SCHEDULE_SYMBOL - 249)) | (1L << (SCHEMA_NAME_SYMBOL - 249)) | (1L << (SECOND_SYMBOL - 249)) | (1L << (SERIAL_SYMBOL - 249)) | (1L << (SERIALIZABLE_SYMBOL - 249)) | (1L << (SESSION_SYMBOL - 249)) | (1L << (SIMPLE_SYMBOL - 249)) | (1L << (SHARE_SYMBOL - 249)) | (1L << (SLOW_SYMBOL - 249)) | (1L << (SNAPSHOT_SYMBOL - 249)))) != 0) || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (SOUNDS_SYMBOL - 313)) | (1L << (SOURCE_SYMBOL - 313)) | (1L << (SQL_AFTER_GTIDS_SYMBOL - 313)) | (1L << (SQL_AFTER_MTS_GAPS_SYMBOL - 313)) | (1L << (SQL_BEFORE_GTIDS_SYMBOL - 313)) | (1L << (SQL_CACHE_SYMBOL - 313)) | (1L << (SQL_BUFFER_RESULT_SYMBOL - 313)) | (1L << (SQL_NO_CACHE_SYMBOL - 313)) | (1L << (SQL_THREAD_SYMBOL - 313)) | (1L << (STACKED_SYMBOL - 313)) | (1L << (STARTS_SYMBOL - 313)) | (1L << (STATS_AUTO_RECALC_SYMBOL - 313)) | (1L << (STATS_PERSISTENT_SYMBOL - 313)) | (1L << (STATS_SAMPLE_PAGES_SYMBOL - 313)) | (1L << (STATUS_SYMBOL - 313)) | (1L << (STORAGE_SYMBOL - 313)) | (1L << (STRING_SYMBOL - 313)) | (1L << (SUBCLASS_ORIGIN_SYMBOL - 313)) | (1L << (SUBDATE_SYMBOL - 313)) | (1L << (SUBJECT_SYMBOL - 313)) | (1L << (SUBPARTITION_SYMBOL - 313)) | (1L << (SUBPARTITIONS_SYMBOL - 313)) | (1L << (SUPER_SYMBOL - 313)) | (1L << (SUSPEND_SYMBOL - 313)) | (1L << (SWAPS_SYMBOL - 313)) | (1L << (SWITCHES_SYMBOL - 313)) | (1L << (TABLE_NAME_SYMBOL - 313)) | (1L << (TABLES_SYMBOL - 313)) | (1L << (TABLE_CHECKSUM_SYMBOL - 313)) | (1L << (TABLESPACE_SYMBOL - 313)) | (1L << (TEMPORARY_SYMBOL - 313)) | (1L << (TEMPTABLE_SYMBOL - 313)) | (1L << (TEXT_SYMBOL - 313)) | (1L << (THAN_SYMBOL - 313)) | (1L << (TRANSACTION_SYMBOL - 313)) | (1L << (TRIGGERS_SYMBOL - 313)) | (1L << (TIMESTAMP_SYMBOL - 313)) | (1L << (TIMESTAMP_ADD_SYMBOL - 313)) | (1L << (TIMESTAMP_DIFF_SYMBOL - 313)) | (1L << (TIME_SYMBOL - 313)) | (1L << (TYPES_SYMBOL - 313)) | (1L << (TYPE_SYMBOL - 313)) | (1L << (UDF_RETURNS_SYMBOL - 313)) | (1L << (UNCOMMITTED_SYMBOL - 313)) | (1L << (UNDEFINED_SYMBOL - 313)) | (1L << (UNDO_BUFFER_SIZE_SYMBOL - 313)) | (1L << (UNDOFILE_SYMBOL - 313)) | (1L << (UNKNOWN_SYMBOL - 313)) | (1L << (UNTIL_SYMBOL - 313)) | (1L << (USER_RESOURCES_SYMBOL - 313)) | (1L << (USER_SYMBOL - 313)) | (1L << (USE_FRM_SYMBOL - 313)) | (1L << (VARIABLES_SYMBOL - 313)) | (1L << (VIEW_SYMBOL - 313)) | (1L << (VALUE_SYMBOL - 313)) | (1L << (WARNINGS_SYMBOL - 313)) | (1L << (WAIT_SYMBOL - 313)) | (1L << (WEEK_SYMBOL - 313)) | (1L << (WORK_SYMBOL - 313)) | (1L << (WEIGHT_STRING_SYMBOL - 313)) | (1L << (X509_SYMBOL - 313)) | (1L << (XID_SYMBOL - 313)) | (1L << (XML_SYMBOL - 313)))) != 0) || _la==YEAR_SYMBOL || _la==ANALYSE_SYMBOL || ((((_la - 695)) & ~0x3f) == 0 && ((1L << (_la - 695)) & ((1L << (COMPONENT_SYMBOL - 695)) | (1L << (SKIP_SYMBOL - 695)) | (1L << (LOCKED_SYMBOL - 695)) | (1L << (NOWAIT_SYMBOL - 695)) | (1L << (HISTOGRAM_SYMBOL - 695)) | (1L << (BUCKETS_SYMBOL - 695)) | (1L << (REMOTE_SYMBOL - 695)) | (1L << (EXCLUDE_SYMBOL - 695)) | (1L << (FOLLOWING_SYMBOL - 695)) | (1L << (NULLS_SYMBOL - 695)) | (1L << (OTHERS_SYMBOL - 695)) | (1L << (PRECEDING_SYMBOL - 695)) | (1L << (RESPECT_SYMBOL - 695)) | (1L << (TIES_SYMBOL - 695)) | (1L << (UNBOUNDED_SYMBOL - 695)) | (1L << (NESTED_SYMBOL - 695)) | (1L << (ORDINALITY_SYMBOL - 695)) | (1L << (PATH_SYMBOL - 695)) | (1L << (HISTORY_SYMBOL - 695)) | (1L << (REUSE_SYMBOL - 695)) | (1L << (SRID_SYMBOL - 695)) | (1L << (THREAD_PRIORITY_SYMBOL - 695)) | (1L << (VCPU_SYMBOL - 695)) | (1L << (MASTER_PUBLIC_KEY_PATH_SYMBOL - 695)) | (1L << (DESCRIPTION_SYMBOL - 695)) | (1L << (ORGANIZATION_SYMBOL - 695)) | (1L << (OPTIONAL_SYMBOL - 695)) | (1L << (ACTIVE_SYMBOL - 695)) | (1L << (INACTIVE_SYMBOL - 695)) | (1L << (RETAIN_SYMBOL - 695)))) != 0) || _la==OLD_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8282;
				if (!(serverVersion < 50709)) throw new FailedPredicateException(this, "serverVersion < 50709");
				State = 8283; Match(SHUTDOWN_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8284;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 8285;
				_la = TokenStream.LA(1);
				if ( !(_la==CUBE_SYMBOL || _la==IMPORT_SYMBOL || ((((_la - 298)) & ~0x3f) == 0 && ((1L << (_la - 298)) & ((1L << (ROWS_SYMBOL - 298)) | (1L << (ROW_SYMBOL - 298)) | (1L << (FUNCTION_SYMBOL - 298)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8286;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 8287;
				_la = TokenStream.LA(1);
				if ( !(_la==SUPER_SYMBOL || _la==EXCHANGE_SYMBOL || _la==EXPIRE_SYMBOL || _la==ONLY_SYMBOL || _la==VALIDATION_SYMBOL || _la==WITHOUT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8288;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 8289; Match(ADMIN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return simpleStatement_sempred((SimpleStatementContext)_localctx, predIndex);
		case 2: return alterStatement_sempred((AlterStatementContext)_localctx, predIndex);
		case 3: return alterDatabase_sempred((AlterDatabaseContext)_localctx, predIndex);
		case 9: return alterTable_sempred((AlterTableContext)_localctx, predIndex);
		case 13: return standaloneAlterCommands_sempred((StandaloneAlterCommandsContext)_localctx, predIndex);
		case 14: return alterPartition_sempred((AlterPartitionContext)_localctx, predIndex);
		case 16: return alterCommandsModifier_sempred((AlterCommandsModifierContext)_localctx, predIndex);
		case 17: return alterListItem_sempred((AlterListItemContext)_localctx, predIndex);
		case 23: return indexLockAndAlgorithm_sempred((IndexLockAndAlgorithmContext)_localctx, predIndex);
		case 24: return withValidation_sempred((WithValidationContext)_localctx, predIndex);
		case 28: return alterTablespace_sempred((AlterTablespaceContext)_localctx, predIndex);
		case 39: return createStatement_sempred((CreateStatementContext)_localctx, predIndex);
		case 41: return createDatabaseOption_sempred((CreateDatabaseOptionContext)_localctx, predIndex);
		case 54: return createIndex_sempred((CreateIndexContext)_localctx, predIndex);
		case 65: return tsDataFileName_sempred((TsDataFileNameContext)_localctx, predIndex);
		case 68: return tablespaceOption_sempred((TablespaceOptionContext)_localctx, predIndex);
		case 85: return triggerFollowsPrecedesClause_sempred((TriggerFollowsPrecedesClauseContext)_localctx, predIndex);
		case 90: return dropStatement_sempred((DropStatementContext)_localctx, predIndex);
		case 111: return deleteStatement_sempred((DeleteStatementContext)_localctx, predIndex);
		case 112: return partitionDelete_sempred((PartitionDeleteContext)_localctx, predIndex);
		case 114: return doStatement_sempred((DoStatementContext)_localctx, predIndex);
		case 135: return queryExpression_sempred((QueryExpressionContext)_localctx, predIndex);
		case 136: return queryExpressionBody_sempred((QueryExpressionBodyContext)_localctx, predIndex);
		case 138: return querySpecification_sempred((QuerySpecificationContext)_localctx, predIndex);
		case 162: return olapOption_sempred((OlapOptionContext)_localctx, predIndex);
		case 167: return selectOption_sempred((SelectOptionContext)_localctx, predIndex);
		case 168: return lockingClause_sempred((LockingClauseContext)_localctx, predIndex);
		case 169: return lockStrengh_sempred((LockStrenghContext)_localctx, predIndex);
		case 175: return tableReference_sempred((TableReferenceContext)_localctx, predIndex);
		case 181: return tableFactor_sempred((TableFactorContext)_localctx, predIndex);
		case 184: return derivedTable_sempred((DerivedTableContext)_localctx, predIndex);
		case 188: return jtColumn_sempred((JtColumnContext)_localctx, predIndex);
		case 194: return tableAlias_sempred((TableAliasContext)_localctx, predIndex);
		case 203: return updateStatement_sempred((UpdateStatementContext)_localctx, predIndex);
		case 207: return transactionCharacteristic_sempred((TransactionCharacteristicContext)_localctx, predIndex);
		case 208: return setTransactionCharacteristic_sempred((SetTransactionCharacteristicContext)_localctx, predIndex);
		case 211: return lockStatement_sempred((LockStatementContext)_localctx, predIndex);
		case 215: return xaConvert_sempred((XaConvertContext)_localctx, predIndex);
		case 217: return replicationStatement_sempred((ReplicationStatementContext)_localctx, predIndex);
		case 218: return resetOption_sempred((ResetOptionContext)_localctx, predIndex);
		case 219: return masterResetOptions_sempred((MasterResetOptionsContext)_localctx, predIndex);
		case 226: return changeReplication_sempred((ChangeReplicationContext)_localctx, predIndex);
		case 234: return slaveUntilOptions_sempred((SlaveUntilOptionsContext)_localctx, predIndex);
		case 235: return slaveConnectionOptions_sempred((SlaveConnectionOptionsContext)_localctx, predIndex);
		case 242: return cloneStatement_sempred((CloneStatementContext)_localctx, predIndex);
		case 245: return accountManagementStatement_sempred((AccountManagementStatementContext)_localctx, predIndex);
		case 246: return alterUser_sempred((AlterUserContext)_localctx, predIndex);
		case 247: return alterUserTail_sempred((AlterUserTailContext)_localctx, predIndex);
		case 248: return createUser_sempred((CreateUserContext)_localctx, predIndex);
		case 249: return createUserTail_sempred((CreateUserTailContext)_localctx, predIndex);
		case 250: return defaultRoleClause_sempred((DefaultRoleClauseContext)_localctx, predIndex);
		case 253: return accountLockPasswordExpireOptions_sempred((AccountLockPasswordExpireOptionsContext)_localctx, predIndex);
		case 254: return dropUser_sempred((DropUserContext)_localctx, predIndex);
		case 255: return grant_sempred((GrantContext)_localctx, predIndex);
		case 256: return grantTargetList_sempred((GrantTargetListContext)_localctx, predIndex);
		case 257: return grantOptions_sempred((GrantOptionsContext)_localctx, predIndex);
		case 261: return versionedRequireClause_sempred((VersionedRequireClauseContext)_localctx, predIndex);
		case 263: return revoke_sempred((RevokeContext)_localctx, predIndex);
		case 264: return onTypeTo_sempred((OnTypeToContext)_localctx, predIndex);
		case 266: return setPassword_sempred((SetPasswordContext)_localctx, predIndex);
		case 268: return roleOrPrivilege_sempred((RoleOrPrivilegeContext)_localctx, predIndex);
		case 269: return grantIdentifier_sempred((GrantIdentifierContext)_localctx, predIndex);
		case 276: return tableAdministrationStatement_sempred((TableAdministrationStatementContext)_localctx, predIndex);
		case 282: return optionValueNoOptionType_sempred((OptionValueNoOptionTypeContext)_localctx, predIndex);
		case 285: return setExprOrDefault_sempred((SetExprOrDefaultContext)_localctx, predIndex);
		case 288: return showStatement_sempred((ShowStatementContext)_localctx, predIndex);
		case 289: return showCommandType_sempred((ShowCommandTypeContext)_localctx, predIndex);
		case 290: return nonBlocking_sempred((NonBlockingContext)_localctx, predIndex);
		case 294: return otherAdministrativeStatement_sempred((OtherAdministrativeStatementContext)_localctx, predIndex);
		case 302: return flushOption_sempred((FlushOptionContext)_localctx, predIndex);
		case 305: return flushTablesOptions_sempred((FlushTablesOptionsContext)_localctx, predIndex);
		case 320: return utilityStatement_sempred((UtilityStatementContext)_localctx, predIndex);
		case 322: return explainCommand_sempred((ExplainCommandContext)_localctx, predIndex);
		case 323: return explainableStatement_sempred((ExplainableStatementContext)_localctx, predIndex);
		case 327: return expr_sempred((ExprContext)_localctx, predIndex);
		case 328: return boolPri_sempred((BoolPriContext)_localctx, predIndex);
		case 330: return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 332: return bitExpr_sempred((BitExprContext)_localctx, predIndex);
		case 333: return simpleExpr_sempred((SimpleExprContext)_localctx, predIndex);
		case 334: return arrayCast_sempred((ArrayCastContext)_localctx, predIndex);
		case 335: return jsonOperator_sempred((JsonOperatorContext)_localctx, predIndex);
		case 336: return sumExpr_sempred((SumExprContext)_localctx, predIndex);
		case 347: return runtimeFunctionCall_sempred((RuntimeFunctionCallContext)_localctx, predIndex);
		case 348: return geometryFunction_sempred((GeometryFunctionContext)_localctx, predIndex);
		case 350: return fractionalPrecision_sempred((FractionalPrecisionContext)_localctx, predIndex);
		case 362: return internalVariableName_sempred((InternalVariableNameContext)_localctx, predIndex);
		case 366: return castType_sempred((CastTypeContext)_localctx, predIndex);
		case 380: return channel_sempred((ChannelContext)_localctx, predIndex);
		case 409: return getDiagnostics_sempred((GetDiagnosticsContext)_localctx, predIndex);
		case 422: return checkOrReferences_sempred((CheckOrReferencesContext)_localctx, predIndex);
		case 425: return tableConstraintDef_sempred((TableConstraintDefContext)_localctx, predIndex);
		case 427: return fieldDefinition_sempred((FieldDefinitionContext)_localctx, predIndex);
		case 428: return columnAttribute_sempred((ColumnAttributeContext)_localctx, predIndex);
		case 438: return keyListVariants_sempred((KeyListVariantsContext)_localctx, predIndex);
		case 441: return commonIndexOption_sempred((CommonIndexOptionContext)_localctx, predIndex);
		case 447: return dataType_sempred((DataTypeContext)_localctx, predIndex);
		case 458: return typeDatetimePrecision_sempred((TypeDatetimePrecisionContext)_localctx, predIndex);
		case 459: return charsetName_sempred((CharsetNameContext)_localctx, predIndex);
		case 460: return collationName_sempred((CollationNameContext)_localctx, predIndex);
		case 463: return createTableOption_sempred((CreateTableOptionContext)_localctx, predIndex);
		case 471: return partitionKeyAlgorithm_sempred((PartitionKeyAlgorithmContext)_localctx, predIndex);
		case 498: return createUserEntry_sempred((CreateUserEntryContext)_localctx, predIndex);
		case 506: return onlineOption_sempred((OnlineOptionContext)_localctx, predIndex);
		case 508: return usePartition_sempred((UsePartitionContext)_localctx, predIndex);
		case 510: return columnName_sempred((ColumnNameContext)_localctx, predIndex);
		case 553: return pureIdentifier_sempred((PureIdentifierContext)_localctx, predIndex);
		case 558: return simpleIdentifier_sempred((SimpleIdentifierContext)_localctx, predIndex);
		case 563: return real_ulonglong_number_sempred((Real_ulonglong_numberContext)_localctx, predIndex);
		case 567: return textStringLiteral_sempred((TextStringLiteralContext)_localctx, predIndex);
		case 569: return textStringHash_sempred((TextStringHashContext)_localctx, predIndex);
		case 589: return identifierKeyword_sempred((IdentifierKeywordContext)_localctx, predIndex);
		case 592: return labelKeyword_sempred((LabelKeywordContext)_localctx, predIndex);
		case 595: return roleKeyword_sempred((RoleKeywordContext)_localctx, predIndex);
		case 598: return roleOrIdentifierKeyword_sempred((RoleOrIdentifierKeywordContext)_localctx, predIndex);
		case 599: return roleOrLabelKeyword_sempred((RoleOrLabelKeywordContext)_localctx, predIndex);
		}
		return true;
	}
	private bool simpleStatement_sempred(SimpleStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return serverVersion >= 80000;
		case 1: return serverVersion >= 80000;
		case 2: return serverVersion >= 80000;
		case 3: return serverVersion >= 50604;
		}
		return true;
	}
	private bool alterStatement_sempred(AlterStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return serverVersion >= 80014;
		case 5: return serverVersion >= 50713;
		}
		return true;
	}
	private bool alterDatabase_sempred(AlterDatabaseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return serverVersion < 80000;
		}
		return true;
	}
	private bool alterTable_sempred(AlterTableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return serverVersion < 50700;
		}
		return true;
	}
	private bool standaloneAlterCommands_sempred(StandaloneAlterCommandsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return serverVersion >= 80014;
		}
		return true;
	}
	private bool alterPartition_sempred(AlterPartitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return serverVersion >= 50704;
		case 10: return serverVersion >= 50704;
		}
		return true;
	}
	private bool alterCommandsModifier_sempred(AlterCommandsModifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return serverVersion >= 50600;
		case 12: return serverVersion >= 50600;
		}
		return true;
	}
	private bool alterListItem_sempred(AlterListItemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return serverVersion >= 50700;
		case 14: return serverVersion < 50700;
		case 15: return serverVersion >= 80014;
		case 16: return serverVersion >= 80000;
		case 17: return serverVersion >= 80017;
		case 18: return serverVersion >= 80000;
		case 19: return serverVersion >= 50700;
		case 20: return serverVersion >= 80014;
		case 21: return serverVersion >= 50708 && serverVersion < 80000;
		}
		return true;
	}
	private bool indexLockAndAlgorithm_sempred(IndexLockAndAlgorithmContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return serverVersion >= 50600;
		}
		return true;
	}
	private bool withValidation_sempred(WithValidationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23: return serverVersion >= 50706;
		}
		return true;
	}
	private bool alterTablespace_sempred(AlterTablespaceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24: return serverVersion < 80000;
		case 25: return serverVersion >= 80014;
		}
		return true;
	}
	private bool createStatement_sempred(CreateStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26: return serverVersion >= 80000;
		case 27: return serverVersion >= 80011;
		case 28: return serverVersion >= 80014;
		}
		return true;
	}
	private bool createDatabaseOption_sempred(CreateDatabaseOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29: return serverVersion >= 80016;
		}
		return true;
	}
	private bool createIndex_sempred(CreateIndexContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return serverVersion >= 80014;
		}
		return true;
	}
	private bool tsDataFileName_sempred(TsDataFileNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31: return serverVersion >= 80014;
		}
		return true;
	}
	private bool tablespaceOption_sempred(TablespaceOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32: return serverVersion >= 50707;
		case 33: return serverVersion >= 80014;
		}
		return true;
	}
	private bool triggerFollowsPrecedesClause_sempred(TriggerFollowsPrecedesClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34: return serverVersion >= 50700;
		}
		return true;
	}
	private bool dropStatement_sempred(DropStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return serverVersion >= 80000;
		case 36: return serverVersion >= 80011;
		case 37: return serverVersion >= 80014;
		}
		return true;
	}
	private bool deleteStatement_sempred(DeleteStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return serverVersion >= 80000;
		case 39: return serverVersion >= 80017;
		}
		return true;
	}
	private bool partitionDelete_sempred(PartitionDeleteContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40: return serverVersion >= 50602;
		}
		return true;
	}
	private bool doStatement_sempred(DoStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return serverVersion < 50709;
		case 42: return serverVersion >= 50709;
		}
		return true;
	}
	private bool queryExpression_sempred(QueryExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43: return serverVersion >= 80000;
		case 44: return serverVersion < 80000;
		case 45: return serverVersion >= 80000;
		}
		return true;
	}
	private bool queryExpressionBody_sempred(QueryExpressionBodyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 46: return Precpred(Context, 2);
		}
		return true;
	}
	private bool querySpecification_sempred(QuerySpecificationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47: return serverVersion >= 80000;
		}
		return true;
	}
	private bool olapOption_sempred(OlapOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 48: return serverVersion < 80000;
		}
		return true;
	}
	private bool selectOption_sempred(SelectOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 49: return serverVersion < 80000;
		case 50: return serverVersion >= 50704 && serverVersion < 50708;
		}
		return true;
	}
	private bool lockingClause_sempred(LockingClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51: return serverVersion >= 80000;
		case 52: return serverVersion >= 80000;
		}
		return true;
	}
	private bool lockStrengh_sempred(LockStrenghContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53: return serverVersion >= 80000;
		}
		return true;
	}
	private bool tableReference_sempred(TableReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54: return serverVersion < 80017;
		}
		return true;
	}
	private bool tableFactor_sempred(TableFactorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55: return serverVersion >= 80004;
		}
		return true;
	}
	private bool derivedTable_sempred(DerivedTableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56: return serverVersion >= 80000;
		case 57: return serverVersion >= 80014;
		}
		return true;
	}
	private bool jtColumn_sempred(JtColumnContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58: return serverVersion >= 80014;
		}
		return true;
	}
	private bool tableAlias_sempred(TableAliasContext _localctx, int predIndex) {
		switch (predIndex) {
		case 59: return serverVersion < 80017;
		}
		return true;
	}
	private bool updateStatement_sempred(UpdateStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 60: return serverVersion >= 80000;
		}
		return true;
	}
	private bool transactionCharacteristic_sempred(TransactionCharacteristicContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61: return serverVersion >= 50605;
		}
		return true;
	}
	private bool setTransactionCharacteristic_sempred(SetTransactionCharacteristicContext _localctx, int predIndex) {
		switch (predIndex) {
		case 62: return serverVersion >= 50605;
		}
		return true;
	}
	private bool lockStatement_sempred(LockStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63: return serverVersion >= 80000;
		case 64: return serverVersion >= 80000;
		}
		return true;
	}
	private bool xaConvert_sempred(XaConvertContext _localctx, int predIndex) {
		switch (predIndex) {
		case 65: return serverVersion >= 50704;
		}
		return true;
	}
	private bool replicationStatement_sempred(ReplicationStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 66: return serverVersion > 80000;
		case 67: return serverVersion >= 50700;
		case 68: return serverVersion > 50706;
		}
		return true;
	}
	private bool resetOption_sempred(ResetOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 69: return serverVersion < 80000;
		}
		return true;
	}
	private bool masterResetOptions_sempred(MasterResetOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 70: return serverVersion >= 80000;
		case 71: return serverVersion < 80017;
		case 72: return serverVersion >= 80017;
		}
		return true;
	}
	private bool changeReplication_sempred(ChangeReplicationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 73: return serverVersion >= 80000;
		}
		return true;
	}
	private bool slaveUntilOptions_sempred(SlaveUntilOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 74: return serverVersion >= 50606;
		case 75: return serverVersion >= 50606;
		}
		return true;
	}
	private bool slaveConnectionOptions_sempred(SlaveConnectionOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 76: return serverVersion >= 50604;
		}
		return true;
	}
	private bool cloneStatement_sempred(CloneStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 77: return serverVersion >= 80014;
		}
		return true;
	}
	private bool accountManagementStatement_sempred(AccountManagementStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 78: return serverVersion >= 50606;
		case 79: return serverVersion >= 80000;
		}
		return true;
	}
	private bool alterUser_sempred(AlterUserContext _localctx, int predIndex) {
		switch (predIndex) {
		case 80: return serverVersion >= 50706;
		}
		return true;
	}
	private bool alterUserTail_sempred(AlterUserTailContext _localctx, int predIndex) {
		switch (predIndex) {
		case 81: return serverVersion < 80014;
		case 82: return serverVersion >= 80014;
		case 83: return serverVersion >= 50706;
		case 84: return serverVersion >= 80014;
		case 85: return serverVersion >= 80014;
		case 86: return serverVersion >= 80014;
		case 87: return serverVersion >= 80000;
		}
		return true;
	}
	private bool createUser_sempred(CreateUserContext _localctx, int predIndex) {
		switch (predIndex) {
		case 88: return serverVersion >= 50706;
		}
		return true;
	}
	private bool createUserTail_sempred(CreateUserTailContext _localctx, int predIndex) {
		switch (predIndex) {
		case 89: return serverVersion >= 50706;
		}
		return true;
	}
	private bool defaultRoleClause_sempred(DefaultRoleClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 90: return serverVersion >= 80000;
		}
		return true;
	}
	private bool accountLockPasswordExpireOptions_sempred(AccountLockPasswordExpireOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 91: return serverVersion >= 80014;
		}
		return true;
	}
	private bool dropUser_sempred(DropUserContext _localctx, int predIndex) {
		switch (predIndex) {
		case 92: return serverVersion >= 50706;
		}
		return true;
	}
	private bool grant_sempred(GrantContext _localctx, int predIndex) {
		switch (predIndex) {
		case 93: return serverVersion >= 80000;
		}
		return true;
	}
	private bool grantTargetList_sempred(GrantTargetListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 94: return serverVersion < 80011;
		case 95: return serverVersion >= 80011;
		}
		return true;
	}
	private bool grantOptions_sempred(GrantOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 96: return serverVersion < 80011;
		case 97: return serverVersion >= 80011;
		}
		return true;
	}
	private bool versionedRequireClause_sempred(VersionedRequireClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 98: return serverVersion < 80011;
		}
		return true;
	}
	private bool revoke_sempred(RevokeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 99: return serverVersion >= 80000;
		case 100: return serverVersion >= 80000;
		}
		return true;
	}
	private bool onTypeTo_sempred(OnTypeToContext _localctx, int predIndex) {
		switch (predIndex) {
		case 101: return serverVersion < 80000;
		case 102: return serverVersion >= 80000;
		}
		return true;
	}
	private bool setPassword_sempred(SetPasswordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 103: return serverVersion < 50706;
		case 104: return serverVersion >= 80014;
		case 105: return serverVersion >= 80014;
		}
		return true;
	}
	private bool roleOrPrivilege_sempred(RoleOrPrivilegeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 106: return serverVersion > 80000;
		case 107: return serverVersion > 80000;
		}
		return true;
	}
	private bool grantIdentifier_sempred(GrantIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 108: return serverVersion >= 80017;
		}
		return true;
	}
	private bool tableAdministrationStatement_sempred(TableAdministrationStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 109: return serverVersion >= 80000;
		}
		return true;
	}
	private bool optionValueNoOptionType_sempred(OptionValueNoOptionTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 110: return serverVersion >= 80011;
		}
		return true;
	}
	private bool setExprOrDefault_sempred(SetExprOrDefaultContext _localctx, int predIndex) {
		switch (predIndex) {
		case 111: return serverVersion >= 80000;
		}
		return true;
	}
	private bool showStatement_sempred(ShowStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 112: return serverVersion < 50700;
		case 113: return serverVersion >= 80000;
		case 114: return serverVersion < 50700;
		case 115: return serverVersion >= 50704;
		}
		return true;
	}
	private bool showCommandType_sempred(ShowCommandTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 116: return serverVersion >= 80000;
		}
		return true;
	}
	private bool nonBlocking_sempred(NonBlockingContext _localctx, int predIndex) {
		switch (predIndex) {
		case 117: return serverVersion >= 50700 && serverVersion < 50706;
		}
		return true;
	}
	private bool otherAdministrativeStatement_sempred(OtherAdministrativeStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 118: return serverVersion >= 50709;
		}
		return true;
	}
	private bool flushOption_sempred(FlushOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 119: return serverVersion < 80000;
		case 120: return serverVersion >= 50706;
		}
		return true;
	}
	private bool flushTablesOptions_sempred(FlushTablesOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 121: return serverVersion >= 50606;
		}
		return true;
	}
	private bool utilityStatement_sempred(UtilityStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 122: return serverVersion >= 80011;
		}
		return true;
	}
	private bool explainCommand_sempred(ExplainCommandContext _localctx, int predIndex) {
		switch (predIndex) {
		case 123: return serverVersion < 80000;
		case 124: return serverVersion < 80000;
		case 125: return serverVersion >= 50605;
		}
		return true;
	}
	private bool explainableStatement_sempred(ExplainableStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 126: return serverVersion >= 50603;
		case 127: return serverVersion >= 50700;
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 128: return Precpred(Context, 3);
		case 129: return Precpred(Context, 2);
		case 130: return Precpred(Context, 1);
		}
		return true;
	}
	private bool boolPri_sempred(BoolPriContext _localctx, int predIndex) {
		switch (predIndex) {
		case 131: return Precpred(Context, 3);
		case 132: return Precpred(Context, 2);
		case 133: return Precpred(Context, 1);
		}
		return true;
	}
	private bool predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 134: return serverVersion >= 80017;
		}
		return true;
	}
	private bool bitExpr_sempred(BitExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 135: return Precpred(Context, 7);
		case 136: return Precpred(Context, 6);
		case 137: return Precpred(Context, 5);
		case 138: return Precpred(Context, 3);
		case 139: return Precpred(Context, 2);
		case 140: return Precpred(Context, 1);
		case 141: return Precpred(Context, 4);
		}
		return true;
	}
	private bool simpleExpr_sempred(SimpleExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 142: return serverVersion >= 80000;
		case 143: return serverVersion >= 80000;
		case 144: return Precpred(Context, 15);
		case 145: return Precpred(Context, 21);
		}
		return true;
	}
	private bool arrayCast_sempred(ArrayCastContext _localctx, int predIndex) {
		switch (predIndex) {
		case 146: return serverVersion >= 80017;
		}
		return true;
	}
	private bool jsonOperator_sempred(JsonOperatorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 147: return serverVersion >= 50708;
		case 148: return serverVersion >= 50713;
		}
		return true;
	}
	private bool sumExpr_sempred(SumExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 149: return serverVersion >= 80000;
		case 150: return serverVersion >= 80000;
		case 151: return serverVersion >= 80000;
		case 152: return serverVersion >= 80000;
		case 153: return serverVersion >= 80000;
		case 154: return serverVersion >= 80000;
		case 155: return serverVersion >= 80000;
		case 156: return serverVersion >= 80000;
		case 157: return serverVersion >= 80000;
		case 158: return serverVersion >= 80000;
		case 159: return serverVersion >= 80000;
		case 160: return serverVersion >= 80000;
		case 161: return serverVersion >= 80000;
		}
		return true;
	}
	private bool runtimeFunctionCall_sempred(RuntimeFunctionCallContext _localctx, int predIndex) {
		switch (predIndex) {
		case 162: return serverVersion < 50607;
		case 163: return serverVersion < 80011;
		case 164: return serverVersion >= 50600;
		case 165: return serverVersion < 80000;
		}
		return true;
	}
	private bool geometryFunction_sempred(GeometryFunctionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 166: return serverVersion < 50706;
		}
		return true;
	}
	private bool fractionalPrecision_sempred(FractionalPrecisionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 167: return serverVersion >= 50604;
		}
		return true;
	}
	private bool internalVariableName_sempred(InternalVariableNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 168: return serverVersion < 80017;
		case 169: return serverVersion >= 80017;
		}
		return true;
	}
	private bool castType_sempred(CastTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 170: return serverVersion >= 50708;
		case 171: return serverVersion >= 80017;
		case 172: return serverVersion >= 80017;
		}
		return true;
	}
	private bool channel_sempred(ChannelContext _localctx, int predIndex) {
		switch (predIndex) {
		case 173: return serverVersion >= 50706;
		}
		return true;
	}
	private bool getDiagnostics_sempred(GetDiagnosticsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 174: return serverVersion >= 50700;
		}
		return true;
	}
	private bool checkOrReferences_sempred(CheckOrReferencesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 175: return serverVersion < 80016;
		}
		return true;
	}
	private bool tableConstraintDef_sempred(TableConstraintDefContext _localctx, int predIndex) {
		switch (predIndex) {
		case 176: return serverVersion >= 80017;
		}
		return true;
	}
	private bool fieldDefinition_sempred(FieldDefinitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 177: return serverVersion >= 50707;
		case 178: return serverVersion < 80000;
		case 179: return serverVersion >= 80000;
		}
		return true;
	}
	private bool columnAttribute_sempred(ColumnAttributeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 180: return serverVersion >= 80014;
		case 181: return serverVersion >= 80013;
		case 182: return serverVersion >= 80000;
		case 183: return serverVersion >= 80017;
		case 184: return serverVersion >= 80017;
		}
		return true;
	}
	private bool keyListVariants_sempred(KeyListVariantsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 185: return serverVersion >= 80013;
		case 186: return serverVersion < 80013;
		}
		return true;
	}
	private bool commonIndexOption_sempred(CommonIndexOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 187: return serverVersion >= 50600;
		case 188: return serverVersion >= 80000;
		}
		return true;
	}
	private bool dataType_sempred(DataTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 189: return serverVersion >= 50708;
		}
		return true;
	}
	private bool typeDatetimePrecision_sempred(TypeDatetimePrecisionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 190: return serverVersion >= 50600;
		}
		return true;
	}
	private bool charsetName_sempred(CharsetNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 191: return serverVersion < 80011;
		}
		return true;
	}
	private bool collationName_sempred(CollationNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 192: return serverVersion < 80011;
		}
		return true;
	}
	private bool createTableOption_sempred(CreateTableOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 193: return serverVersion >= 80014;
		case 194: return serverVersion >= 50708;
		case 195: return serverVersion >= 50711;
		case 196: return serverVersion >= 50600;
		case 197: return serverVersion >= 50707;
		}
		return true;
	}
	private bool partitionKeyAlgorithm_sempred(PartitionKeyAlgorithmContext _localctx, int predIndex) {
		switch (predIndex) {
		case 198: return serverVersion >= 50700;
		}
		return true;
	}
	private bool createUserEntry_sempred(CreateUserEntryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 199: return serverVersion < 80011;
		case 200: return serverVersion >= 50600;
		case 201: return serverVersion >= 50706;
		}
		return true;
	}
	private bool onlineOption_sempred(OnlineOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 202: return serverVersion < 50600;
		}
		return true;
	}
	private bool usePartition_sempred(UsePartitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 203: return serverVersion >= 50602;
		}
		return true;
	}
	private bool columnName_sempred(ColumnNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 204: return serverVersion >= 80000;
		case 205: return serverVersion < 80000;
		}
		return true;
	}
	private bool pureIdentifier_sempred(PureIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 206: return isSqlModeActive(SqlMode.AnsiQuotes);
		}
		return true;
	}
	private bool simpleIdentifier_sempred(SimpleIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 207: return serverVersion < 80000;
		}
		return true;
	}
	private bool real_ulonglong_number_sempred(Real_ulonglong_numberContext _localctx, int predIndex) {
		switch (predIndex) {
		case 208: return serverVersion >= 80017;
		}
		return true;
	}
	private bool textStringLiteral_sempred(TextStringLiteralContext _localctx, int predIndex) {
		switch (predIndex) {
		case 209: return !isSqlModeActive(SqlMode.AnsiQuotes);
		}
		return true;
	}
	private bool textStringHash_sempred(TextStringHashContext _localctx, int predIndex) {
		switch (predIndex) {
		case 210: return serverVersion >= 80017;
		}
		return true;
	}
	private bool identifierKeyword_sempred(IdentifierKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 211: return serverVersion < 80017;
		case 212: return serverVersion >= 50709;
		case 213: return serverVersion >= 80011;
		}
		return true;
	}
	private bool labelKeyword_sempred(LabelKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 214: return serverVersion < 80017;
		}
		return true;
	}
	private bool roleKeyword_sempred(RoleKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 215: return serverVersion < 80017;
		}
		return true;
	}
	private bool roleOrIdentifierKeyword_sempred(RoleOrIdentifierKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 216: return serverVersion >= 50709;
		case 217: return serverVersion >= 80000;
		}
		return true;
	}
	private bool roleOrLabelKeyword_sempred(RoleOrLabelKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 218: return serverVersion < 50709;
		case 219: return serverVersion < 80000;
		case 220: return serverVersion >= 80000;
		case 221: return serverVersion >= 80014;
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x30D', '\x2067', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A', 
		'\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C', 
		'\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F', 
		'\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91', 
		'\x4', '\x92', '\t', '\x92', '\x4', '\x93', '\t', '\x93', '\x4', '\x94', 
		'\t', '\x94', '\x4', '\x95', '\t', '\x95', '\x4', '\x96', '\t', '\x96', 
		'\x4', '\x97', '\t', '\x97', '\x4', '\x98', '\t', '\x98', '\x4', '\x99', 
		'\t', '\x99', '\x4', '\x9A', '\t', '\x9A', '\x4', '\x9B', '\t', '\x9B', 
		'\x4', '\x9C', '\t', '\x9C', '\x4', '\x9D', '\t', '\x9D', '\x4', '\x9E', 
		'\t', '\x9E', '\x4', '\x9F', '\t', '\x9F', '\x4', '\xA0', '\t', '\xA0', 
		'\x4', '\xA1', '\t', '\xA1', '\x4', '\xA2', '\t', '\xA2', '\x4', '\xA3', 
		'\t', '\xA3', '\x4', '\xA4', '\t', '\xA4', '\x4', '\xA5', '\t', '\xA5', 
		'\x4', '\xA6', '\t', '\xA6', '\x4', '\xA7', '\t', '\xA7', '\x4', '\xA8', 
		'\t', '\xA8', '\x4', '\xA9', '\t', '\xA9', '\x4', '\xAA', '\t', '\xAA', 
		'\x4', '\xAB', '\t', '\xAB', '\x4', '\xAC', '\t', '\xAC', '\x4', '\xAD', 
		'\t', '\xAD', '\x4', '\xAE', '\t', '\xAE', '\x4', '\xAF', '\t', '\xAF', 
		'\x4', '\xB0', '\t', '\xB0', '\x4', '\xB1', '\t', '\xB1', '\x4', '\xB2', 
		'\t', '\xB2', '\x4', '\xB3', '\t', '\xB3', '\x4', '\xB4', '\t', '\xB4', 
		'\x4', '\xB5', '\t', '\xB5', '\x4', '\xB6', '\t', '\xB6', '\x4', '\xB7', 
		'\t', '\xB7', '\x4', '\xB8', '\t', '\xB8', '\x4', '\xB9', '\t', '\xB9', 
		'\x4', '\xBA', '\t', '\xBA', '\x4', '\xBB', '\t', '\xBB', '\x4', '\xBC', 
		'\t', '\xBC', '\x4', '\xBD', '\t', '\xBD', '\x4', '\xBE', '\t', '\xBE', 
		'\x4', '\xBF', '\t', '\xBF', '\x4', '\xC0', '\t', '\xC0', '\x4', '\xC1', 
		'\t', '\xC1', '\x4', '\xC2', '\t', '\xC2', '\x4', '\xC3', '\t', '\xC3', 
		'\x4', '\xC4', '\t', '\xC4', '\x4', '\xC5', '\t', '\xC5', '\x4', '\xC6', 
		'\t', '\xC6', '\x4', '\xC7', '\t', '\xC7', '\x4', '\xC8', '\t', '\xC8', 
		'\x4', '\xC9', '\t', '\xC9', '\x4', '\xCA', '\t', '\xCA', '\x4', '\xCB', 
		'\t', '\xCB', '\x4', '\xCC', '\t', '\xCC', '\x4', '\xCD', '\t', '\xCD', 
		'\x4', '\xCE', '\t', '\xCE', '\x4', '\xCF', '\t', '\xCF', '\x4', '\xD0', 
		'\t', '\xD0', '\x4', '\xD1', '\t', '\xD1', '\x4', '\xD2', '\t', '\xD2', 
		'\x4', '\xD3', '\t', '\xD3', '\x4', '\xD4', '\t', '\xD4', '\x4', '\xD5', 
		'\t', '\xD5', '\x4', '\xD6', '\t', '\xD6', '\x4', '\xD7', '\t', '\xD7', 
		'\x4', '\xD8', '\t', '\xD8', '\x4', '\xD9', '\t', '\xD9', '\x4', '\xDA', 
		'\t', '\xDA', '\x4', '\xDB', '\t', '\xDB', '\x4', '\xDC', '\t', '\xDC', 
		'\x4', '\xDD', '\t', '\xDD', '\x4', '\xDE', '\t', '\xDE', '\x4', '\xDF', 
		'\t', '\xDF', '\x4', '\xE0', '\t', '\xE0', '\x4', '\xE1', '\t', '\xE1', 
		'\x4', '\xE2', '\t', '\xE2', '\x4', '\xE3', '\t', '\xE3', '\x4', '\xE4', 
		'\t', '\xE4', '\x4', '\xE5', '\t', '\xE5', '\x4', '\xE6', '\t', '\xE6', 
		'\x4', '\xE7', '\t', '\xE7', '\x4', '\xE8', '\t', '\xE8', '\x4', '\xE9', 
		'\t', '\xE9', '\x4', '\xEA', '\t', '\xEA', '\x4', '\xEB', '\t', '\xEB', 
		'\x4', '\xEC', '\t', '\xEC', '\x4', '\xED', '\t', '\xED', '\x4', '\xEE', 
		'\t', '\xEE', '\x4', '\xEF', '\t', '\xEF', '\x4', '\xF0', '\t', '\xF0', 
		'\x4', '\xF1', '\t', '\xF1', '\x4', '\xF2', '\t', '\xF2', '\x4', '\xF3', 
		'\t', '\xF3', '\x4', '\xF4', '\t', '\xF4', '\x4', '\xF5', '\t', '\xF5', 
		'\x4', '\xF6', '\t', '\xF6', '\x4', '\xF7', '\t', '\xF7', '\x4', '\xF8', 
		'\t', '\xF8', '\x4', '\xF9', '\t', '\xF9', '\x4', '\xFA', '\t', '\xFA', 
		'\x4', '\xFB', '\t', '\xFB', '\x4', '\xFC', '\t', '\xFC', '\x4', '\xFD', 
		'\t', '\xFD', '\x4', '\xFE', '\t', '\xFE', '\x4', '\xFF', '\t', '\xFF', 
		'\x4', '\x100', '\t', '\x100', '\x4', '\x101', '\t', '\x101', '\x4', '\x102', 
		'\t', '\x102', '\x4', '\x103', '\t', '\x103', '\x4', '\x104', '\t', '\x104', 
		'\x4', '\x105', '\t', '\x105', '\x4', '\x106', '\t', '\x106', '\x4', '\x107', 
		'\t', '\x107', '\x4', '\x108', '\t', '\x108', '\x4', '\x109', '\t', '\x109', 
		'\x4', '\x10A', '\t', '\x10A', '\x4', '\x10B', '\t', '\x10B', '\x4', '\x10C', 
		'\t', '\x10C', '\x4', '\x10D', '\t', '\x10D', '\x4', '\x10E', '\t', '\x10E', 
		'\x4', '\x10F', '\t', '\x10F', '\x4', '\x110', '\t', '\x110', '\x4', '\x111', 
		'\t', '\x111', '\x4', '\x112', '\t', '\x112', '\x4', '\x113', '\t', '\x113', 
		'\x4', '\x114', '\t', '\x114', '\x4', '\x115', '\t', '\x115', '\x4', '\x116', 
		'\t', '\x116', '\x4', '\x117', '\t', '\x117', '\x4', '\x118', '\t', '\x118', 
		'\x4', '\x119', '\t', '\x119', '\x4', '\x11A', '\t', '\x11A', '\x4', '\x11B', 
		'\t', '\x11B', '\x4', '\x11C', '\t', '\x11C', '\x4', '\x11D', '\t', '\x11D', 
		'\x4', '\x11E', '\t', '\x11E', '\x4', '\x11F', '\t', '\x11F', '\x4', '\x120', 
		'\t', '\x120', '\x4', '\x121', '\t', '\x121', '\x4', '\x122', '\t', '\x122', 
		'\x4', '\x123', '\t', '\x123', '\x4', '\x124', '\t', '\x124', '\x4', '\x125', 
		'\t', '\x125', '\x4', '\x126', '\t', '\x126', '\x4', '\x127', '\t', '\x127', 
		'\x4', '\x128', '\t', '\x128', '\x4', '\x129', '\t', '\x129', '\x4', '\x12A', 
		'\t', '\x12A', '\x4', '\x12B', '\t', '\x12B', '\x4', '\x12C', '\t', '\x12C', 
		'\x4', '\x12D', '\t', '\x12D', '\x4', '\x12E', '\t', '\x12E', '\x4', '\x12F', 
		'\t', '\x12F', '\x4', '\x130', '\t', '\x130', '\x4', '\x131', '\t', '\x131', 
		'\x4', '\x132', '\t', '\x132', '\x4', '\x133', '\t', '\x133', '\x4', '\x134', 
		'\t', '\x134', '\x4', '\x135', '\t', '\x135', '\x4', '\x136', '\t', '\x136', 
		'\x4', '\x137', '\t', '\x137', '\x4', '\x138', '\t', '\x138', '\x4', '\x139', 
		'\t', '\x139', '\x4', '\x13A', '\t', '\x13A', '\x4', '\x13B', '\t', '\x13B', 
		'\x4', '\x13C', '\t', '\x13C', '\x4', '\x13D', '\t', '\x13D', '\x4', '\x13E', 
		'\t', '\x13E', '\x4', '\x13F', '\t', '\x13F', '\x4', '\x140', '\t', '\x140', 
		'\x4', '\x141', '\t', '\x141', '\x4', '\x142', '\t', '\x142', '\x4', '\x143', 
		'\t', '\x143', '\x4', '\x144', '\t', '\x144', '\x4', '\x145', '\t', '\x145', 
		'\x4', '\x146', '\t', '\x146', '\x4', '\x147', '\t', '\x147', '\x4', '\x148', 
		'\t', '\x148', '\x4', '\x149', '\t', '\x149', '\x4', '\x14A', '\t', '\x14A', 
		'\x4', '\x14B', '\t', '\x14B', '\x4', '\x14C', '\t', '\x14C', '\x4', '\x14D', 
		'\t', '\x14D', '\x4', '\x14E', '\t', '\x14E', '\x4', '\x14F', '\t', '\x14F', 
		'\x4', '\x150', '\t', '\x150', '\x4', '\x151', '\t', '\x151', '\x4', '\x152', 
		'\t', '\x152', '\x4', '\x153', '\t', '\x153', '\x4', '\x154', '\t', '\x154', 
		'\x4', '\x155', '\t', '\x155', '\x4', '\x156', '\t', '\x156', '\x4', '\x157', 
		'\t', '\x157', '\x4', '\x158', '\t', '\x158', '\x4', '\x159', '\t', '\x159', 
		'\x4', '\x15A', '\t', '\x15A', '\x4', '\x15B', '\t', '\x15B', '\x4', '\x15C', 
		'\t', '\x15C', '\x4', '\x15D', '\t', '\x15D', '\x4', '\x15E', '\t', '\x15E', 
		'\x4', '\x15F', '\t', '\x15F', '\x4', '\x160', '\t', '\x160', '\x4', '\x161', 
		'\t', '\x161', '\x4', '\x162', '\t', '\x162', '\x4', '\x163', '\t', '\x163', 
		'\x4', '\x164', '\t', '\x164', '\x4', '\x165', '\t', '\x165', '\x4', '\x166', 
		'\t', '\x166', '\x4', '\x167', '\t', '\x167', '\x4', '\x168', '\t', '\x168', 
		'\x4', '\x169', '\t', '\x169', '\x4', '\x16A', '\t', '\x16A', '\x4', '\x16B', 
		'\t', '\x16B', '\x4', '\x16C', '\t', '\x16C', '\x4', '\x16D', '\t', '\x16D', 
		'\x4', '\x16E', '\t', '\x16E', '\x4', '\x16F', '\t', '\x16F', '\x4', '\x170', 
		'\t', '\x170', '\x4', '\x171', '\t', '\x171', '\x4', '\x172', '\t', '\x172', 
		'\x4', '\x173', '\t', '\x173', '\x4', '\x174', '\t', '\x174', '\x4', '\x175', 
		'\t', '\x175', '\x4', '\x176', '\t', '\x176', '\x4', '\x177', '\t', '\x177', 
		'\x4', '\x178', '\t', '\x178', '\x4', '\x179', '\t', '\x179', '\x4', '\x17A', 
		'\t', '\x17A', '\x4', '\x17B', '\t', '\x17B', '\x4', '\x17C', '\t', '\x17C', 
		'\x4', '\x17D', '\t', '\x17D', '\x4', '\x17E', '\t', '\x17E', '\x4', '\x17F', 
		'\t', '\x17F', '\x4', '\x180', '\t', '\x180', '\x4', '\x181', '\t', '\x181', 
		'\x4', '\x182', '\t', '\x182', '\x4', '\x183', '\t', '\x183', '\x4', '\x184', 
		'\t', '\x184', '\x4', '\x185', '\t', '\x185', '\x4', '\x186', '\t', '\x186', 
		'\x4', '\x187', '\t', '\x187', '\x4', '\x188', '\t', '\x188', '\x4', '\x189', 
		'\t', '\x189', '\x4', '\x18A', '\t', '\x18A', '\x4', '\x18B', '\t', '\x18B', 
		'\x4', '\x18C', '\t', '\x18C', '\x4', '\x18D', '\t', '\x18D', '\x4', '\x18E', 
		'\t', '\x18E', '\x4', '\x18F', '\t', '\x18F', '\x4', '\x190', '\t', '\x190', 
		'\x4', '\x191', '\t', '\x191', '\x4', '\x192', '\t', '\x192', '\x4', '\x193', 
		'\t', '\x193', '\x4', '\x194', '\t', '\x194', '\x4', '\x195', '\t', '\x195', 
		'\x4', '\x196', '\t', '\x196', '\x4', '\x197', '\t', '\x197', '\x4', '\x198', 
		'\t', '\x198', '\x4', '\x199', '\t', '\x199', '\x4', '\x19A', '\t', '\x19A', 
		'\x4', '\x19B', '\t', '\x19B', '\x4', '\x19C', '\t', '\x19C', '\x4', '\x19D', 
		'\t', '\x19D', '\x4', '\x19E', '\t', '\x19E', '\x4', '\x19F', '\t', '\x19F', 
		'\x4', '\x1A0', '\t', '\x1A0', '\x4', '\x1A1', '\t', '\x1A1', '\x4', '\x1A2', 
		'\t', '\x1A2', '\x4', '\x1A3', '\t', '\x1A3', '\x4', '\x1A4', '\t', '\x1A4', 
		'\x4', '\x1A5', '\t', '\x1A5', '\x4', '\x1A6', '\t', '\x1A6', '\x4', '\x1A7', 
		'\t', '\x1A7', '\x4', '\x1A8', '\t', '\x1A8', '\x4', '\x1A9', '\t', '\x1A9', 
		'\x4', '\x1AA', '\t', '\x1AA', '\x4', '\x1AB', '\t', '\x1AB', '\x4', '\x1AC', 
		'\t', '\x1AC', '\x4', '\x1AD', '\t', '\x1AD', '\x4', '\x1AE', '\t', '\x1AE', 
		'\x4', '\x1AF', '\t', '\x1AF', '\x4', '\x1B0', '\t', '\x1B0', '\x4', '\x1B1', 
		'\t', '\x1B1', '\x4', '\x1B2', '\t', '\x1B2', '\x4', '\x1B3', '\t', '\x1B3', 
		'\x4', '\x1B4', '\t', '\x1B4', '\x4', '\x1B5', '\t', '\x1B5', '\x4', '\x1B6', 
		'\t', '\x1B6', '\x4', '\x1B7', '\t', '\x1B7', '\x4', '\x1B8', '\t', '\x1B8', 
		'\x4', '\x1B9', '\t', '\x1B9', '\x4', '\x1BA', '\t', '\x1BA', '\x4', '\x1BB', 
		'\t', '\x1BB', '\x4', '\x1BC', '\t', '\x1BC', '\x4', '\x1BD', '\t', '\x1BD', 
		'\x4', '\x1BE', '\t', '\x1BE', '\x4', '\x1BF', '\t', '\x1BF', '\x4', '\x1C0', 
		'\t', '\x1C0', '\x4', '\x1C1', '\t', '\x1C1', '\x4', '\x1C2', '\t', '\x1C2', 
		'\x4', '\x1C3', '\t', '\x1C3', '\x4', '\x1C4', '\t', '\x1C4', '\x4', '\x1C5', 
		'\t', '\x1C5', '\x4', '\x1C6', '\t', '\x1C6', '\x4', '\x1C7', '\t', '\x1C7', 
		'\x4', '\x1C8', '\t', '\x1C8', '\x4', '\x1C9', '\t', '\x1C9', '\x4', '\x1CA', 
		'\t', '\x1CA', '\x4', '\x1CB', '\t', '\x1CB', '\x4', '\x1CC', '\t', '\x1CC', 
		'\x4', '\x1CD', '\t', '\x1CD', '\x4', '\x1CE', '\t', '\x1CE', '\x4', '\x1CF', 
		'\t', '\x1CF', '\x4', '\x1D0', '\t', '\x1D0', '\x4', '\x1D1', '\t', '\x1D1', 
		'\x4', '\x1D2', '\t', '\x1D2', '\x4', '\x1D3', '\t', '\x1D3', '\x4', '\x1D4', 
		'\t', '\x1D4', '\x4', '\x1D5', '\t', '\x1D5', '\x4', '\x1D6', '\t', '\x1D6', 
		'\x4', '\x1D7', '\t', '\x1D7', '\x4', '\x1D8', '\t', '\x1D8', '\x4', '\x1D9', 
		'\t', '\x1D9', '\x4', '\x1DA', '\t', '\x1DA', '\x4', '\x1DB', '\t', '\x1DB', 
		'\x4', '\x1DC', '\t', '\x1DC', '\x4', '\x1DD', '\t', '\x1DD', '\x4', '\x1DE', 
		'\t', '\x1DE', '\x4', '\x1DF', '\t', '\x1DF', '\x4', '\x1E0', '\t', '\x1E0', 
		'\x4', '\x1E1', '\t', '\x1E1', '\x4', '\x1E2', '\t', '\x1E2', '\x4', '\x1E3', 
		'\t', '\x1E3', '\x4', '\x1E4', '\t', '\x1E4', '\x4', '\x1E5', '\t', '\x1E5', 
		'\x4', '\x1E6', '\t', '\x1E6', '\x4', '\x1E7', '\t', '\x1E7', '\x4', '\x1E8', 
		'\t', '\x1E8', '\x4', '\x1E9', '\t', '\x1E9', '\x4', '\x1EA', '\t', '\x1EA', 
		'\x4', '\x1EB', '\t', '\x1EB', '\x4', '\x1EC', '\t', '\x1EC', '\x4', '\x1ED', 
		'\t', '\x1ED', '\x4', '\x1EE', '\t', '\x1EE', '\x4', '\x1EF', '\t', '\x1EF', 
		'\x4', '\x1F0', '\t', '\x1F0', '\x4', '\x1F1', '\t', '\x1F1', '\x4', '\x1F2', 
		'\t', '\x1F2', '\x4', '\x1F3', '\t', '\x1F3', '\x4', '\x1F4', '\t', '\x1F4', 
		'\x4', '\x1F5', '\t', '\x1F5', '\x4', '\x1F6', '\t', '\x1F6', '\x4', '\x1F7', 
		'\t', '\x1F7', '\x4', '\x1F8', '\t', '\x1F8', '\x4', '\x1F9', '\t', '\x1F9', 
		'\x4', '\x1FA', '\t', '\x1FA', '\x4', '\x1FB', '\t', '\x1FB', '\x4', '\x1FC', 
		'\t', '\x1FC', '\x4', '\x1FD', '\t', '\x1FD', '\x4', '\x1FE', '\t', '\x1FE', 
		'\x4', '\x1FF', '\t', '\x1FF', '\x4', '\x200', '\t', '\x200', '\x4', '\x201', 
		'\t', '\x201', '\x4', '\x202', '\t', '\x202', '\x4', '\x203', '\t', '\x203', 
		'\x4', '\x204', '\t', '\x204', '\x4', '\x205', '\t', '\x205', '\x4', '\x206', 
		'\t', '\x206', '\x4', '\x207', '\t', '\x207', '\x4', '\x208', '\t', '\x208', 
		'\x4', '\x209', '\t', '\x209', '\x4', '\x20A', '\t', '\x20A', '\x4', '\x20B', 
		'\t', '\x20B', '\x4', '\x20C', '\t', '\x20C', '\x4', '\x20D', '\t', '\x20D', 
		'\x4', '\x20E', '\t', '\x20E', '\x4', '\x20F', '\t', '\x20F', '\x4', '\x210', 
		'\t', '\x210', '\x4', '\x211', '\t', '\x211', '\x4', '\x212', '\t', '\x212', 
		'\x4', '\x213', '\t', '\x213', '\x4', '\x214', '\t', '\x214', '\x4', '\x215', 
		'\t', '\x215', '\x4', '\x216', '\t', '\x216', '\x4', '\x217', '\t', '\x217', 
		'\x4', '\x218', '\t', '\x218', '\x4', '\x219', '\t', '\x219', '\x4', '\x21A', 
		'\t', '\x21A', '\x4', '\x21B', '\t', '\x21B', '\x4', '\x21C', '\t', '\x21C', 
		'\x4', '\x21D', '\t', '\x21D', '\x4', '\x21E', '\t', '\x21E', '\x4', '\x21F', 
		'\t', '\x21F', '\x4', '\x220', '\t', '\x220', '\x4', '\x221', '\t', '\x221', 
		'\x4', '\x222', '\t', '\x222', '\x4', '\x223', '\t', '\x223', '\x4', '\x224', 
		'\t', '\x224', '\x4', '\x225', '\t', '\x225', '\x4', '\x226', '\t', '\x226', 
		'\x4', '\x227', '\t', '\x227', '\x4', '\x228', '\t', '\x228', '\x4', '\x229', 
		'\t', '\x229', '\x4', '\x22A', '\t', '\x22A', '\x4', '\x22B', '\t', '\x22B', 
		'\x4', '\x22C', '\t', '\x22C', '\x4', '\x22D', '\t', '\x22D', '\x4', '\x22E', 
		'\t', '\x22E', '\x4', '\x22F', '\t', '\x22F', '\x4', '\x230', '\t', '\x230', 
		'\x4', '\x231', '\t', '\x231', '\x4', '\x232', '\t', '\x232', '\x4', '\x233', 
		'\t', '\x233', '\x4', '\x234', '\t', '\x234', '\x4', '\x235', '\t', '\x235', 
		'\x4', '\x236', '\t', '\x236', '\x4', '\x237', '\t', '\x237', '\x4', '\x238', 
		'\t', '\x238', '\x4', '\x239', '\t', '\x239', '\x4', '\x23A', '\t', '\x23A', 
		'\x4', '\x23B', '\t', '\x23B', '\x4', '\x23C', '\t', '\x23C', '\x4', '\x23D', 
		'\t', '\x23D', '\x4', '\x23E', '\t', '\x23E', '\x4', '\x23F', '\t', '\x23F', 
		'\x4', '\x240', '\t', '\x240', '\x4', '\x241', '\t', '\x241', '\x4', '\x242', 
		'\t', '\x242', '\x4', '\x243', '\t', '\x243', '\x4', '\x244', '\t', '\x244', 
		'\x4', '\x245', '\t', '\x245', '\x4', '\x246', '\t', '\x246', '\x4', '\x247', 
		'\t', '\x247', '\x4', '\x248', '\t', '\x248', '\x4', '\x249', '\t', '\x249', 
		'\x4', '\x24A', '\t', '\x24A', '\x4', '\x24B', '\t', '\x24B', '\x4', '\x24C', 
		'\t', '\x24C', '\x4', '\x24D', '\t', '\x24D', '\x4', '\x24E', '\t', '\x24E', 
		'\x4', '\x24F', '\t', '\x24F', '\x4', '\x250', '\t', '\x250', '\x4', '\x251', 
		'\t', '\x251', '\x4', '\x252', '\t', '\x252', '\x4', '\x253', '\t', '\x253', 
		'\x4', '\x254', '\t', '\x254', '\x4', '\x255', '\t', '\x255', '\x4', '\x256', 
		'\t', '\x256', '\x4', '\x257', '\t', '\x257', '\x4', '\x258', '\t', '\x258', 
		'\x4', '\x259', '\t', '\x259', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x5', '\x2', '\x4B6', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '\x4BA', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', '\x4BD', '\n', 
		'\x2', '\x5', '\x2', '\x4BF', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x4E3', '\n', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x4EB', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\x4F0', '\n', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x500', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x6', '\x5', '\x505', '\n', 
		'\x5', '\r', '\x5', '\xE', '\x5', '\x506', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x50E', '\n', 
		'\x5', '\x3', '\x6', '\x5', '\x6', '\x511', '\n', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'\x518', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\x51D', '\n', '\x6', '\x3', '\x6', '\x5', '\x6', '\x520', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x525', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\x52B', '\n', '\x6', '\x5', '\x6', '\x52D', '\n', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', '\x531', '\n', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '\x535', '\n', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x53E', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'\x542', '\n', '\b', '\x3', '\b', '\a', '\b', '\x545', '\n', '\b', '\f', 
		'\b', '\xE', '\b', '\x548', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\x54D', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x5', '\v', '\x554', '\n', '\v', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', '\x558', '\n', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', '\x55D', '\n', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', '\x562', '\n', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x569', '\n', 
		'\f', '\x3', '\f', '\x5', '\f', '\x56C', '\n', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x572', '\n', '\r', '\x3', 
		'\r', '\x5', '\r', '\x575', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\a', '\xE', '\x57A', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x57D', 
		'\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x586', '\n', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x58B', '\n', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x590', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x598', '\n', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x59E', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x5A2', '\n', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x5A7', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\a', '\x10', '\x5AE', '\n', '\x10', '\f', '\x10', '\xE', 
		'\x10', '\x5B1', '\v', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\x5B6', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', 
		'\x10', '\x5BA', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x5BD', '\v', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x5C2', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\x5CC', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\x5D2', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\x5DB', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\x5E9', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\x5ED', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x5F3', '\n', '\x11', '\a', '\x11', '\x5F5', '\n', 
		'\x11', '\f', '\x11', '\xE', '\x11', '\x5F8', '\v', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', 
		'\x5FF', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x603', 
		'\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\x608', '\n', '\x13', '\x3', '\x13', '\x5', '\x13', '\x60B', '\n', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\x611', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\x617', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x61D', '\n', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\x621', '\n', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x626', '\n', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\x62A', '\n', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\x62E', '\n', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x636', '\n', '\x13', '\x5', '\x13', '\x638', '\n', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x63F', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x647', '\n', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\x64F', '\n', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\x653', '\n', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x66A', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\x67A', '\n', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x67D', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\x686', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\x68B', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x5', '\x16', '\x691', '\n', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x5', '\x16', '\x696', '\n', '\x16', '\a', '\x16', 
		'\x698', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x69B', '\v', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x69F', '\n', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\x6A3', '\n', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\x6A7', '\n', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x5', '\x18', '\x6AB', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x5', '\x19', '\x6B0', '\n', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x5', '\x19', '\x6B4', '\n', '\x19', '\x5', '\x19', '\x6B6', 
		'\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', 
		'\x5', '\x1C', '\x6C1', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x5', '\x1D', '\x6C6', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x6CC', '\n', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x5', '\x1E', '\x6D4', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x5', '\x1E', '\x6DD', '\n', '\x1E', '\x3', '\x1E', '\a', '\x1E', '\x6E0', 
		'\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', '\x6E3', '\v', '\x1E', '\x5', 
		'\x1E', '\x6E5', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x5', '\x1E', '\x6EA', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x6F1', '\n', '\x1E', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x5', '\x1F', '\x6F9', '\n', '\x1F', '\x3', ' ', '\x3', 
		' ', '\x5', ' ', '\x6FD', '\n', ' ', '\x3', ' ', '\a', ' ', '\x700', '\n', 
		' ', '\f', ' ', '\xE', ' ', '\x703', '\v', ' ', '\x3', '!', '\x3', '!', 
		'\x3', '\"', '\x3', '\"', '\x5', '\"', '\x709', '\n', '\"', '\x3', '\"', 
		'\a', '\"', '\x70C', '\n', '\"', '\f', '\"', '\xE', '\"', '\x70F', '\v', 
		'\"', '\x3', '#', '\x3', '#', '\x5', '#', '\x713', '\n', '#', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', '#', 
		'\x71B', '\n', '#', '\x3', '$', '\x3', '$', '\x5', '$', '\x71F', '\n', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', '$', '\x724', '\n', '$', 
		'\x3', '%', '\x5', '%', '\x727', '\n', '%', '\x3', '%', '\x5', '%', '\x72A', 
		'\n', '%', '\x3', '%', '\x5', '%', '\x72D', '\n', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '&', '\x5', '&', '\x734', '\n', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x5', '\'', 
		'\x73B', '\n', '\'', '\x3', '(', '\x3', '(', '\x5', '(', '\x73F', '\n', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x5', ')', '\x757', 
		'\n', ')', '\x3', '*', '\x3', '*', '\x5', '*', '\x75B', '\n', '*', '\x3', 
		'*', '\x3', '*', '\a', '*', '\x75F', '\n', '*', '\f', '*', '\xE', '*', 
		'\x762', '\v', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x5', 
		'+', '\x768', '\n', '+', '\x3', ',', '\x5', ',', '\x76B', '\n', ',', '\x3', 
		',', '\x3', ',', '\x5', ',', '\x76F', '\n', ',', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\x3', ',', '\x5', ',', '\x776', '\n', ',', '\x3', 
		',', '\x5', ',', '\x779', '\n', ',', '\x3', ',', '\x5', ',', '\x77C', 
		'\n', ',', '\x3', ',', '\x5', ',', '\x77F', '\n', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x5', 
		',', '\x788', '\n', ',', '\x3', '-', '\x3', '-', '\x3', '-', '\a', '-', 
		'\x78D', '\n', '-', '\f', '-', '\xE', '-', '\x790', '\v', '-', '\x3', 
		'.', '\x3', '.', '\x5', '.', '\x794', '\n', '.', '\x3', '/', '\x5', '/', 
		'\x797', '\n', '/', '\x3', '/', '\x5', '/', '\x79A', '\n', '/', '\x3', 
		'/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x7A0', 
		'\n', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x5', '\x31', '\x7A6', '\n', '\x31', '\x3', '\x31', '\x5', '\x31', '\x7A9', 
		'\n', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x32', '\x5', '\x32', 
		'\x7AE', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\a', '\x32', '\x7B6', '\n', '\x32', 
		'\f', '\x32', '\xE', '\x32', '\x7B9', '\v', '\x32', '\x5', '\x32', '\x7BB', 
		'\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\a', '\x32', '\x7BF', '\n', 
		'\x32', '\f', '\x32', '\xE', '\x32', '\x7C2', '\v', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x33', '\x5', '\x33', '\x7C7', '\n', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\a', '\x33', '\x7CF', '\n', '\x33', '\f', '\x33', '\xE', '\x33', 
		'\x7D2', '\v', '\x33', '\x5', '\x33', '\x7D4', '\n', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\a', '\x33', '\x7DA', '\n', 
		'\x33', '\f', '\x33', '\xE', '\x33', '\x7DD', '\v', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x34', '\x5', '\x34', '\x7E2', '\n', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x7ED', 
		'\n', '\x35', '\x3', '\x35', '\x5', '\x35', '\x7F0', '\n', '\x35', '\x3', 
		'\x36', '\x6', '\x36', '\x7F3', '\n', '\x36', '\r', '\x36', '\xE', '\x36', 
		'\x7F4', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x808', '\n', '\x37', 
		'\x3', '\x38', '\x5', '\x38', '\x80B', '\n', '\x38', '\x3', '\x38', '\x5', 
		'\x38', '\x80E', '\n', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x5', '\x38', '\x814', '\n', '\x38', '\x3', '\x38', '\x5', 
		'\x38', '\x817', '\n', '\x38', '\x5', '\x38', '\x819', '\n', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\a', '\x38', '\x81D', '\n', '\x38', '\f', '\x38', 
		'\xE', '\x38', '\x820', '\v', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\a', '\x38', '\x827', '\n', '\x38', 
		'\f', '\x38', '\xE', '\x38', '\x82A', '\v', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\a', '\x38', '\x831', 
		'\n', '\x38', '\f', '\x38', '\xE', '\x38', '\x834', '\v', '\x38', '\x5', 
		'\x38', '\x836', '\n', '\x38', '\x3', '\x38', '\x5', '\x38', '\x839', 
		'\n', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', 
		'\x83E', '\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x5', '\x39', '\x844', '\n', '\x39', '\x3', ':', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x851', '\n', ';', '\x3', 
		'<', '\x3', '<', '\x5', '<', '\x855', '\n', '<', '\x3', '<', '\a', '<', 
		'\x858', '\n', '<', '\f', '<', '\xE', '<', '\x85B', '\v', '<', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', 
		'=', '\x863', '\n', '=', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '?', '\x3', '?', 
		'\x3', '?', '\x3', '?', '\x3', '?', '\a', '?', '\x872', '\n', '?', '\f', 
		'?', '\xE', '?', '\x875', '\v', '?', '\x3', '?', '\x3', '?', '\x3', '@', 
		'\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', 
		'\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', 
		'\x3', '@', '\x5', '@', '\x887', '\n', '@', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x5', '\x41', '\x890', '\n', '\x41', '\x3', '\x41', '\x5', '\x41', '\x893', 
		'\n', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\x5', '\x42', '\x89B', '\n', '\x42', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x8A0', '\n', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x8A4', '\n', '\x43', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x45', '\x3', '\x45', '\x5', 
		'\x45', '\x8AB', '\n', '\x45', '\x3', '\x45', '\a', '\x45', '\x8AE', '\n', 
		'\x45', '\f', '\x45', '\xE', '\x45', '\x8B1', '\v', '\x45', '\x3', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x5', '\x46', '\x8BF', '\n', '\x46', '\x3', 'G', '\x3', 
		'G', '\x5', 'G', '\x8C3', '\n', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'H', 
		'\x3', 'H', '\x5', 'H', '\x8C9', '\n', 'H', '\x3', 'H', '\x3', 'H', '\x3', 
		'I', '\x3', 'I', '\x5', 'I', '\x8CF', '\n', 'I', '\x3', 'I', '\x3', 'I', 
		'\x3', 'J', '\x3', 'J', '\x5', 'J', '\x8D5', '\n', 'J', '\x3', 'J', '\x3', 
		'J', '\x3', 'K', '\x3', 'K', '\x5', 'K', '\x8DB', '\n', 'K', '\x3', 'K', 
		'\x3', 'K', '\x3', 'L', '\x3', 'L', '\x5', 'L', '\x8E1', '\n', 'L', '\x3', 
		'L', '\x3', 'L', '\x3', 'M', '\x5', 'M', '\x8E6', '\n', 'M', '\x3', 'M', 
		'\x3', 'M', '\x5', 'M', '\x8EA', '\n', 'M', '\x3', 'M', '\x3', 'M', '\x3', 
		'N', '\x3', 'N', '\x3', 'O', '\x3', 'O', '\x5', 'O', '\x8F2', '\n', 'O', 
		'\x3', 'O', '\x3', 'O', '\x3', 'P', '\x3', 'P', '\x5', 'P', '\x8F8', '\n', 
		'P', '\x3', 'P', '\x3', 'P', '\x3', 'Q', '\x3', 'Q', '\x5', 'Q', '\x8FE', 
		'\n', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'R', '\x5', 'R', '\x903', '\n', 
		'R', '\x3', 'R', '\x5', 'R', '\x906', '\n', 'R', '\x3', 'R', '\x5', 'R', 
		'\x909', '\n', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'S', '\x3', 'S', '\x3', 'S', '\x5', 'S', '\x912', '\n', 'S', '\x3', 'S', 
		'\x5', 'S', '\x915', '\n', 'S', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 
		'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'V', '\x5', 
		'V', '\x920', '\n', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x5', 'V', '\x92C', '\n', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'W', '\x3', 
		'W', '\x3', 'W', '\x3', 'W', '\x3', 'X', '\x5', 'X', '\x935', '\n', 'X', 
		'\x3', 'X', '\x3', 'X', '\x5', 'X', '\x939', '\n', 'X', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x5', 
		'X', '\x942', '\n', 'X', '\x3', 'X', '\x5', 'X', '\x945', '\n', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\x94B', '\n', 'X', 
		'\x5', 'X', '\x94D', '\n', 'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\x951', 
		'\n', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'Y', '\x3', 'Y', 
		'\x5', 'Y', '\x958', '\n', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Z', '\x3', 
		'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\a', 
		'Z', '\x963', '\n', 'Z', '\f', 'Z', '\xE', 'Z', '\x966', '\v', 'Z', '\x3', 
		'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\x96C', '\n', 'Z', 
		'\x3', 'Z', '\x3', 'Z', '\a', 'Z', '\x970', '\n', 'Z', '\f', 'Z', '\xE', 
		'Z', '\x973', '\v', 'Z', '\x5', 'Z', '\x975', '\n', 'Z', '\x3', '[', '\x3', 
		'[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', 
		'[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', 
		'[', '\x3', '[', '\x5', '[', '\x986', '\n', '[', '\x3', '\\', '\x3', '\\', 
		'\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', 
		'\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', 
		'\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x5', 
		'\\', '\x99A', '\n', '\\', '\x3', ']', '\x3', ']', '\x5', ']', '\x99E', 
		'\n', ']', '\x3', ']', '\x3', ']', '\x3', '^', '\x3', '^', '\x5', '^', 
		'\x9A4', '\n', '^', '\x3', '^', '\x3', '^', '\x3', '_', '\x3', '_', '\x5', 
		'_', '\x9AA', '\n', '_', '\x3', '_', '\x3', '_', '\x3', '`', '\x3', '`', 
		'\x5', '`', '\x9B0', '\n', '`', '\x3', '`', '\x3', '`', '\x3', '\x61', 
		'\x5', '\x61', '\x9B5', '\n', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', 
		'\x61', '\x3', '\x61', '\x3', '\x61', '\x5', '\x61', '\x9BC', '\n', '\x61', 
		'\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', 
		'\x5', '\x62', '\x9C3', '\n', '\x62', '\x3', '\x62', '\a', '\x62', '\x9C6', 
		'\n', '\x62', '\f', '\x62', '\xE', '\x62', '\x9C9', '\v', '\x62', '\x5', 
		'\x62', '\x9CB', '\n', '\x62', '\x3', '\x63', '\x3', '\x63', '\x5', '\x63', 
		'\x9CF', '\n', '\x63', '\x3', '\x64', '\x3', '\x64', '\x5', '\x64', '\x9D3', 
		'\n', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x65', '\x5', '\x65', 
		'\x9D8', '\n', '\x65', '\x3', '\x65', '\x3', '\x65', '\x5', '\x65', '\x9DC', 
		'\n', '\x65', '\x3', '\x65', '\x3', '\x65', '\x5', '\x65', '\x9E0', '\n', 
		'\x65', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x5', 
		'\x66', '\x9E6', '\n', '\x66', '\x3', '\x66', '\a', '\x66', '\x9E9', '\n', 
		'\x66', '\f', '\x66', '\xE', '\x66', '\x9EC', '\v', '\x66', '\x5', '\x66', 
		'\x9EE', '\n', '\x66', '\x3', 'g', '\x3', 'g', '\x5', 'g', '\x9F2', '\n', 
		'g', '\x3', 'g', '\x3', 'g', '\x3', 'h', '\x3', 'h', '\x5', 'h', '\x9F8', 
		'\n', 'h', '\x3', 'h', '\x3', 'h', '\x5', 'h', '\x9FC', '\n', 'h', '\x3', 
		'i', '\x3', 'i', '\x5', 'i', '\xA00', '\n', 'i', '\x3', 'i', '\x3', 'i', 
		'\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x5', 'j', '\xA08', '\n', 
		'j', '\x3', 'j', '\x3', 'j', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 
		'k', '\x5', 'k', '\xA10', '\n', 'k', '\x3', 'l', '\x3', 'l', '\x3', 'l', 
		'\x3', 'l', '\x3', 'l', '\a', 'l', '\xA17', '\n', 'l', '\f', 'l', '\xE', 
		'l', '\xA1A', '\v', 'l', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', 
		'\x3', 'n', '\x3', 'n', '\x5', 'n', '\xA22', '\n', 'n', '\x3', 'n', '\x3', 
		'n', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 
		'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x5', 'p', '\xA2F', '\n', 'p', 
		'\x3', 'p', '\x5', 'p', '\xA32', '\n', 'p', '\x3', 'q', '\x3', 'q', '\x5', 
		'q', '\xA36', '\n', 'q', '\x3', 'q', '\x3', 'q', '\a', 'q', '\xA3A', '\n', 
		'q', '\f', 'q', '\xE', 'q', '\xA3D', '\v', 'q', '\x3', 'q', '\x3', 'q', 
		'\x3', 'q', '\x3', 'q', '\x3', 'q', '\x5', 'q', '\xA44', '\n', 'q', '\x3', 
		'q', '\x3', 'q', '\x3', 'q', '\x5', 'q', '\xA49', '\n', 'q', '\x3', 'q', 
		'\x5', 'q', '\xA4C', '\n', 'q', '\x3', 'q', '\x5', 'q', '\xA4F', '\n', 
		'q', '\x3', 'q', '\x5', 'q', '\xA52', '\n', 'q', '\x3', 'q', '\x5', 'q', 
		'\xA55', '\n', 'q', '\x5', 'q', '\xA57', '\n', 'q', '\x3', 'q', '\x3', 
		'q', '\x3', 'q', '\x3', 'q', '\x5', 'q', '\xA5D', '\n', 'q', '\x5', 'q', 
		'\xA5F', '\n', 'q', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 
		'r', '\x3', 'r', '\x3', 's', '\x3', 's', '\x3', 't', '\x3', 't', '\x3', 
		't', '\x3', 't', '\x3', 't', '\x5', 't', '\xA6E', '\n', 't', '\x3', 'u', 
		'\x3', 'u', '\x3', 'u', '\x3', 'u', '\x5', 'u', '\xA74', '\n', 'u', '\x3', 
		'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x5', 'u', '\xA7B', 
		'\n', 'u', '\x3', 'u', '\x5', 'u', '\xA7E', '\n', 'u', '\x5', 'u', '\xA80', 
		'\n', 'u', '\x5', 'u', '\xA82', '\n', 'u', '\x3', 'v', '\x3', 'v', '\x3', 
		'v', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\x5', 
		'v', '\xA8C', '\n', 'v', '\x5', 'v', '\xA8E', '\n', 'v', '\x3', 'w', '\x3', 
		'w', '\x5', 'w', '\xA92', '\n', 'w', '\x3', 'w', '\x5', 'w', '\xA95', 
		'\n', 'w', '\x3', 'w', '\x5', 'w', '\xA98', '\n', 'w', '\x3', 'w', '\x3', 
		'w', '\x5', 'w', '\xA9C', '\n', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', 
		'\x3', 'w', '\x5', 'w', '\xAA2', '\n', 'w', '\x3', 'w', '\x5', 'w', '\xAA5', 
		'\n', 'w', '\x3', 'x', '\x3', 'x', '\x3', 'y', '\x3', 'y', '\x5', 'y', 
		'\xAAB', '\n', 'y', '\x3', 'y', '\x5', 'y', '\xAAE', '\n', 'y', '\x3', 
		'y', '\x3', 'y', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\a', 'z', '\xAB5', 
		'\n', 'z', '\f', 'z', '\xE', 'z', '\xAB8', '\v', 'z', '\x3', '{', '\x3', 
		'{', '\x3', '{', '\x3', '|', '\x3', '|', '\x3', '|', '\x5', '|', '\xAC0', 
		'\n', '|', '\x3', '|', '\x3', '|', '\x5', '|', '\xAC4', '\n', '|', '\x3', 
		'}', '\x3', '}', '\x5', '}', '\xAC8', '\n', '}', '\x3', '}', '\x3', '}', 
		'\x3', '}', '\x3', '}', '\x5', '}', '\xACE', '\n', '}', '\x3', '}', '\a', 
		'}', '\xAD1', '\n', '}', '\f', '}', '\xE', '}', '\xAD4', '\v', '}', '\x3', 
		'~', '\x3', '~', '\x5', '~', '\xAD8', '\n', '~', '\x3', '~', '\x3', '~', 
		'\x3', '~', '\x5', '~', '\xADD', '\n', '~', '\a', '~', '\xADF', '\n', 
		'~', '\f', '~', '\xE', '~', '\xAE2', '\v', '~', '\x3', '\x7F', '\x3', 
		'\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x3', 
		'\x80', '\x3', '\x80', '\x3', '\x80', '\x5', '\x80', '\xAED', '\n', '\x80', 
		'\x3', '\x80', '\x5', '\x80', '\xAF0', '\n', '\x80', '\x3', '\x80', '\x3', 
		'\x80', '\x3', '\x80', '\x5', '\x80', '\xAF5', '\n', '\x80', '\x3', '\x80', 
		'\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x5', '\x80', '\xAFB', '\n', 
		'\x80', '\x3', '\x80', '\x5', '\x80', '\xAFE', '\n', '\x80', '\x3', '\x80', 
		'\x5', '\x80', '\xB01', '\n', '\x80', '\x3', '\x80', '\x5', '\x80', '\xB04', 
		'\n', '\x80', '\x3', '\x80', '\x5', '\x80', '\xB07', '\n', '\x80', '\x3', 
		'\x80', '\x3', '\x80', '\x3', '\x81', '\x3', '\x81', '\x3', '\x82', '\x3', 
		'\x82', '\x3', '\x82', '\x3', '\x82', '\x3', '\x82', '\x3', '\x83', '\x3', 
		'\x83', '\x3', '\x83', '\x5', '\x83', '\xB15', '\n', '\x83', '\x3', '\x83', 
		'\x5', '\x83', '\xB18', '\n', '\x83', '\x3', '\x83', '\x3', '\x83', '\x5', 
		'\x83', '\xB1C', '\n', '\x83', '\x3', '\x84', '\x3', '\x84', '\x5', '\x84', 
		'\xB20', '\n', '\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x85', '\x3', 
		'\x85', '\x5', '\x85', '\xB26', '\n', '\x85', '\x3', '\x85', '\x3', '\x85', 
		'\x3', '\x85', '\x5', '\x85', '\xB2B', '\n', '\x85', '\a', '\x85', '\xB2D', 
		'\n', '\x85', '\f', '\x85', '\xE', '\x85', '\xB30', '\v', '\x85', '\x3', 
		'\x86', '\x3', '\x86', '\x5', '\x86', '\xB34', '\n', '\x86', '\x3', '\x86', 
		'\x5', '\x86', '\xB37', '\n', '\x86', '\x3', '\x86', '\x3', '\x86', '\x5', 
		'\x86', '\xB3B', '\n', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', 
		'\x3', '\x86', '\x5', '\x86', '\xB41', '\n', '\x86', '\x3', '\x87', '\x3', 
		'\x87', '\x3', '\x87', '\x5', '\x87', '\xB46', '\n', '\x87', '\x3', '\x88', 
		'\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', 
		'\x3', '\x88', '\x5', '\x88', '\xB4F', '\n', '\x88', '\x3', '\x89', '\x3', 
		'\x89', '\x5', '\x89', '\xB53', '\n', '\x89', '\x3', '\x89', '\x3', '\x89', 
		'\x5', '\x89', '\xB57', '\n', '\x89', '\x3', '\x89', '\x5', '\x89', '\xB5A', 
		'\n', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x5', '\x89', 
		'\xB5F', '\n', '\x89', '\x3', '\x89', '\x5', '\x89', '\xB62', '\n', '\x89', 
		'\x5', '\x89', '\xB64', '\n', '\x89', '\x3', '\x89', '\x3', '\x89', '\x5', 
		'\x89', '\xB68', '\n', '\x89', '\x3', '\x89', '\x5', '\x89', '\xB6B', 
		'\n', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', 
		'\x5', '\x89', '\xB71', '\n', '\x89', '\x5', '\x89', '\xB73', '\n', '\x89', 
		'\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', 
		'\x5', '\x8A', '\xB7A', '\n', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x5', 
		'\x8A', '\xB7E', '\n', '\x8A', '\x5', '\x8A', '\xB80', '\n', '\x8A', '\x3', 
		'\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x5', '\x8A', '\xB85', '\n', '\x8A', 
		'\x3', '\x8A', '\x3', '\x8A', '\x5', '\x8A', '\xB89', '\n', '\x8A', '\a', 
		'\x8A', '\xB8B', '\n', '\x8A', '\f', '\x8A', '\xE', '\x8A', '\xB8E', '\v', 
		'\x8A', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x5', '\x8B', '\xB93', 
		'\n', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8C', '\x3', '\x8C', 
		'\a', '\x8C', '\xB99', '\n', '\x8C', '\f', '\x8C', '\xE', '\x8C', '\xB9C', 
		'\v', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x5', '\x8C', '\xBA0', '\n', 
		'\x8C', '\x3', '\x8C', '\x5', '\x8C', '\xBA3', '\n', '\x8C', '\x3', '\x8C', 
		'\x5', '\x8C', '\xBA6', '\n', '\x8C', '\x3', '\x8C', '\x5', '\x8C', '\xBA9', 
		'\n', '\x8C', '\x3', '\x8C', '\x5', '\x8C', '\xBAC', '\n', '\x8C', '\x3', 
		'\x8C', '\x3', '\x8C', '\x5', '\x8C', '\xBB0', '\n', '\x8C', '\x3', '\x8D', 
		'\x3', '\x8D', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8F', '\x3', '\x8F', 
		'\x3', '\x8F', '\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\x3', '\x91', 
		'\x3', '\x91', '\x3', '\x91', '\x5', '\x91', '\xBBF', '\n', '\x91', '\x3', 
		'\x92', '\x3', '\x92', '\x5', '\x92', '\xBC3', '\n', '\x92', '\x3', '\x93', 
		'\x3', '\x93', '\x3', '\x93', '\x3', '\x93', '\x5', '\x93', '\xBC9', '\n', 
		'\x93', '\x3', '\x93', '\x5', '\x93', '\xBCC', '\n', '\x93', '\x3', '\x93', 
		'\x5', '\x93', '\xBCF', '\n', '\x93', '\x3', '\x93', '\x3', '\x93', '\x3', 
		'\x93', '\x3', '\x93', '\x5', '\x93', '\xBD5', '\n', '\x93', '\x3', '\x93', 
		'\x3', '\x93', '\x3', '\x93', '\x5', '\x93', '\xBDA', '\n', '\x93', '\a', 
		'\x93', '\xBDC', '\n', '\x93', '\f', '\x93', '\xE', '\x93', '\xBDF', '\v', 
		'\x93', '\x5', '\x93', '\xBE1', '\n', '\x93', '\x3', '\x94', '\x3', '\x94', 
		'\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x5', '\x94', 
		'\xBE9', '\n', '\x94', '\x5', '\x94', '\xBEB', '\n', '\x94', '\x3', '\x94', 
		'\x3', '\x94', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x96', 
		'\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\a', '\x96', '\xBF6', '\n', 
		'\x96', '\f', '\x96', '\xE', '\x96', '\xBF9', '\v', '\x96', '\x3', '\x97', 
		'\x3', '\x97', '\x3', '\x97', '\x3', '\x97', '\x3', '\x98', '\x3', '\x98', 
		'\x3', '\x98', '\x3', '\x98', '\x3', '\x99', '\x5', '\x99', '\xC04', '\n', 
		'\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x5', '\x99', '\xC09', 
		'\n', '\x99', '\x3', '\x99', '\x5', '\x99', '\xC0C', '\n', '\x99', '\x3', 
		'\x99', '\x5', '\x99', '\xC0F', '\n', '\x99', '\x3', '\x9A', '\x3', '\x9A', 
		'\x3', '\x9A', '\x5', '\x9A', '\xC14', '\n', '\x9A', '\x3', '\x9B', '\x3', 
		'\x9B', '\x3', '\x9C', '\x3', '\x9C', '\x5', '\x9C', '\xC1A', '\n', '\x9C', 
		'\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', 
		'\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', 
		'\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x5', '\x9D', 
		'\xC2A', '\n', '\x9D', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', 
		'\x9E', '\x3', '\x9E', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', 
		'\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', 
		'\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x5', 
		'\x9F', '\xC3E', '\n', '\x9F', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', 
		'\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x5', '\xA0', 
		'\xC47', '\n', '\xA0', '\x3', '\xA1', '\x3', '\xA1', '\x5', '\xA1', '\xC4B', 
		'\n', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\a', '\xA1', 
		'\xC50', '\n', '\xA1', '\f', '\xA1', '\xE', '\xA1', '\xC53', '\v', '\xA1', 
		'\x3', '\xA2', '\x3', '\xA2', '\x5', '\xA2', '\xC57', '\n', '\xA2', '\x3', 
		'\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA3', '\x3', '\xA3', '\x3', 
		'\xA3', '\x3', '\xA3', '\x5', '\xA3', '\xC60', '\n', '\xA3', '\x3', '\xA4', 
		'\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA4', '\x5', '\xA4', 
		'\xC67', '\n', '\xA4', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', 
		'\xA5', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA7', '\x3', '\xA7', '\x3', 
		'\xA7', '\x5', '\xA7', '\xC72', '\n', '\xA7', '\x3', '\xA8', '\x3', '\xA8', 
		'\x3', '\xA8', '\a', '\xA8', '\xC77', '\n', '\xA8', '\f', '\xA8', '\xE', 
		'\xA8', '\xC7A', '\v', '\xA8', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', 
		'\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', 
		'\x5', '\xA9', '\xC84', '\n', '\xA9', '\x3', '\xAA', '\x3', '\xAA', '\x3', 
		'\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x5', '\xAA', '\xC8B', '\n', '\xAA', 
		'\x3', '\xAA', '\x3', '\xAA', '\x5', '\xAA', '\xC8F', '\n', '\xAA', '\x3', 
		'\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x5', '\xAA', '\xC95', 
		'\n', '\xAA', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x5', '\xAB', 
		'\xC9A', '\n', '\xAB', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x5', 
		'\xAC', '\xC9F', '\n', '\xAC', '\x3', '\xAD', '\x3', '\xAD', '\x5', '\xAD', 
		'\xCA3', '\n', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\a', '\xAD', '\xCA7', 
		'\n', '\xAD', '\f', '\xAD', '\xE', '\xAD', '\xCAA', '\v', '\xAD', '\x3', 
		'\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x5', '\xAE', '\xCAF', '\n', '\xAE', 
		'\x5', '\xAE', '\xCB1', '\n', '\xAE', '\x3', '\xAF', '\x5', '\xAF', '\xCB4', 
		'\n', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x5', '\xAF', '\xCB8', '\n', 
		'\xAF', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB1', '\x3', 
		'\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x5', '\xB1', '\xCC2', 
		'\n', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x5', '\xB1', 
		'\xCC7', '\n', '\xB1', '\x3', '\xB1', '\a', '\xB1', '\xCCA', '\n', '\xB1', 
		'\f', '\xB1', '\xE', '\xB1', '\xCCD', '\v', '\xB1', '\x3', '\xB2', '\x3', 
		'\xB2', '\a', '\xB2', '\xCD1', '\n', '\xB2', '\f', '\xB2', '\xE', '\xB2', 
		'\xCD4', '\v', '\xB2', '\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x3', 
		'\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x5', '\xB3', '\xCDC', '\n', '\xB3', 
		'\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', 
		'\x3', '\xB3', '\x5', '\xB3', '\xCE4', '\n', '\xB3', '\x3', '\xB3', '\x3', 
		'\xB3', '\x3', '\xB3', '\x5', '\xB3', '\xCE9', '\n', '\xB3', '\x3', '\xB4', 
		'\x3', '\xB4', '\x5', '\xB4', '\xCED', '\n', '\xB4', '\x3', '\xB4', '\x3', 
		'\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x5', '\xB4', '\xCF3', '\n', '\xB4', 
		'\x3', '\xB4', '\x5', '\xB4', '\xCF6', '\n', '\xB4', '\x3', '\xB5', '\x5', 
		'\xB5', '\xCF9', '\n', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x5', '\xB5', 
		'\xCFD', '\n', '\xB5', '\x3', '\xB6', '\x3', '\xB6', '\x5', '\xB6', '\xD01', 
		'\n', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB7', '\x3', '\xB7', 
		'\x3', '\xB7', '\x3', '\xB7', '\x3', '\xB7', '\x3', '\xB7', '\x5', '\xB7', 
		'\xD0B', '\n', '\xB7', '\x3', '\xB8', '\x3', '\xB8', '\x5', '\xB8', '\xD0F', 
		'\n', '\xB8', '\x3', '\xB8', '\x5', '\xB8', '\xD12', '\n', '\xB8', '\x3', 
		'\xB8', '\x5', '\xB8', '\xD15', '\n', '\xB8', '\x3', '\xB9', '\x3', '\xB9', 
		'\x3', '\xB9', '\x5', '\xB9', '\xD1A', '\n', '\xB9', '\x3', '\xB9', '\x3', 
		'\xB9', '\x3', '\xBA', '\x3', '\xBA', '\x5', '\xBA', '\xD20', '\n', '\xBA', 
		'\x3', '\xBA', '\x3', '\xBA', '\x5', '\xBA', '\xD24', '\n', '\xBA', '\x3', 
		'\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x5', '\xBA', '\xD2A', 
		'\n', '\xBA', '\x3', '\xBA', '\x5', '\xBA', '\xD2D', '\n', '\xBA', '\x5', 
		'\xBA', '\xD2F', '\n', '\xBA', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', 
		'\x5', '\xBB', '\xD34', '\n', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', 
		'\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', 
		'\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x5', '\xBC', '\xD40', '\n', '\xBC', 
		'\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', 
		'\a', '\xBD', '\xD47', '\n', '\xBD', '\f', '\xBD', '\xE', '\xBD', '\xD4A', 
		'\v', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBE', '\x3', '\xBE', 
		'\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', 
		'\x3', '\xBE', '\x5', '\xBE', '\xD56', '\n', '\xBE', '\x3', '\xBE', '\x5', 
		'\xBE', '\xD59', '\n', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', 
		'\x5', '\xBE', '\xD5E', '\n', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', 
		'\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x5', '\xBE', '\xD65', '\n', '\xBE', 
		'\x3', '\xBF', '\x3', '\xBF', '\x5', '\xBF', '\xD69', '\n', '\xBF', '\x3', 
		'\xBF', '\x3', '\xBF', '\x5', '\xBF', '\xD6D', '\n', '\xBF', '\x5', '\xBF', 
		'\xD6F', '\n', '\xBF', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', 
		'\xC0', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', 
		'\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x5', '\xC2', '\xD7D', 
		'\n', '\xC2', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC4', '\x3', '\xC4', 
		'\x3', '\xC4', '\x5', '\xC4', '\xD84', '\n', '\xC4', '\x3', '\xC4', '\x3', 
		'\xC4', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\a', '\xC5', '\xD8B', 
		'\n', '\xC5', '\f', '\xC5', '\xE', '\xC5', '\xD8E', '\v', '\xC5', '\x3', 
		'\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x5', '\xC6', '\xD93', '\n', '\xC6', 
		'\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', 
		'\x3', '\xC6', '\x3', '\xC6', '\x5', '\xC6', '\xD9C', '\n', '\xC6', '\x3', 
		'\xC6', '\x3', '\xC6', '\x5', '\xC6', '\xDA0', '\n', '\xC6', '\x3', '\xC6', 
		'\x3', '\xC6', '\x5', '\xC6', '\xDA4', '\n', '\xC6', '\x3', '\xC7', '\x3', 
		'\xC7', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC9', '\x3', '\xC9', '\x3', 
		'\xC9', '\x3', '\xC9', '\x5', '\xC9', '\xDAE', '\n', '\xC9', '\x5', '\xC9', 
		'\xDB0', '\n', '\xC9', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', 
		'\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x5', '\xCA', '\xDB8', '\n', '\xCA', 
		'\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\a', '\xCB', '\xDBD', '\n', 
		'\xCB', '\f', '\xCB', '\xE', '\xCB', '\xDC0', '\v', '\xCB', '\x3', '\xCC', 
		'\x3', '\xCC', '\x5', '\xCC', '\xDC4', '\n', '\xCC', '\x3', '\xCD', '\x3', 
		'\xCD', '\x5', '\xCD', '\xDC8', '\n', '\xCD', '\x3', '\xCD', '\x3', '\xCD', 
		'\x5', '\xCD', '\xDCC', '\n', '\xCD', '\x3', '\xCD', '\x5', '\xCD', '\xDCF', 
		'\n', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', 
		'\x5', '\xCD', '\xDD5', '\n', '\xCD', '\x3', '\xCD', '\x5', '\xCD', '\xDD8', 
		'\n', '\xCD', '\x3', '\xCD', '\x5', '\xCD', '\xDDB', '\n', '\xCD', '\x3', 
		'\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x5', '\xCE', '\xDE1', 
		'\n', '\xCE', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\a', '\xCF', 
		'\xDE6', '\n', '\xCF', '\f', '\xCF', '\xE', '\xCF', '\xDE9', '\v', '\xCF', 
		'\x3', '\xCF', '\x3', '\xCF', '\x5', '\xCF', '\xDED', '\n', '\xCF', '\x3', 
		'\xCF', '\x3', '\xCF', '\x5', '\xCF', '\xDF1', '\n', '\xCF', '\x3', '\xCF', 
		'\x5', '\xCF', '\xDF4', '\n', '\xCF', '\x3', '\xCF', '\x5', '\xCF', '\xDF7', 
		'\n', '\xCF', '\x3', '\xCF', '\x5', '\xCF', '\xDFA', '\n', '\xCF', '\x5', 
		'\xCF', '\xDFC', '\n', '\xCF', '\x3', '\xD0', '\x3', '\xD0', '\x5', '\xD0', 
		'\xE00', '\n', '\xD0', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', 
		'\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x5', '\xD1', '\xE08', '\n', '\xD1', 
		'\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', 
		'\x3', '\xD2', '\x5', '\xD2', '\xE10', '\n', '\xD2', '\x3', '\xD3', '\x3', 
		'\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x5', '\xD3', '\xE17', 
		'\n', '\xD3', '\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD4', 
		'\x5', '\xD4', '\xE1D', '\n', '\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x5', 
		'\xD4', '\xE21', '\n', '\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD4', 
		'\x5', '\xD4', '\xE26', '\n', '\xD4', '\x3', '\xD4', '\x5', '\xD4', '\xE29', 
		'\n', '\xD4', '\x3', '\xD4', '\x5', '\xD4', '\xE2C', '\n', '\xD4', '\x3', 
		'\xD4', '\x5', '\xD4', '\xE2F', '\n', '\xD4', '\x5', '\xD4', '\xE31', 
		'\n', '\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x5', '\xD4', 
		'\xE36', '\n', '\xD4', '\x3', '\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x3', 
		'\xD5', '\x3', '\xD5', '\a', '\xD5', '\xE3D', '\n', '\xD5', '\f', '\xD5', 
		'\xE', '\xD5', '\xE40', '\v', '\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x3', 
		'\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x3', 
		'\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x5', '\xD5', '\xE4C', '\n', '\xD5', 
		'\x5', '\xD5', '\xE4E', '\n', '\xD5', '\x3', '\xD6', '\x3', '\xD6', '\x5', 
		'\xD6', '\xE52', '\n', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD7', 
		'\x3', '\xD7', '\x5', '\xD7', '\xE58', '\n', '\xD7', '\x3', '\xD7', '\x5', 
		'\xD7', '\xE5B', '\n', '\xD7', '\x3', '\xD7', '\x5', '\xD7', '\xE5E', 
		'\n', '\xD7', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', 
		'\x5', '\xD8', '\xE64', '\n', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', 
		'\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x5', '\xD8', '\xE6B', '\n', '\xD8', 
		'\x5', '\xD8', '\xE6D', '\n', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', 
		'\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x5', '\xD8', '\xE75', 
		'\n', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', 
		'\x5', '\xD8', '\xE7B', '\n', '\xD8', '\x3', '\xD9', '\x3', '\xD9', '\x3', 
		'\xD9', '\x5', '\xD9', '\xE80', '\n', '\xD9', '\x3', '\xD9', '\x5', '\xD9', 
		'\xE83', '\n', '\xD9', '\x3', '\xDA', '\x3', '\xDA', '\x3', '\xDA', '\x3', 
		'\xDA', '\x3', '\xDA', '\x5', '\xDA', '\xE8A', '\n', '\xDA', '\x5', '\xDA', 
		'\xE8C', '\n', '\xDA', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', 
		'\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x5', '\xDB', '\xE95', 
		'\n', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', 
		'\x3', '\xDB', '\a', '\xDB', '\xE9C', '\n', '\xDB', '\f', '\xDB', '\xE', 
		'\xDB', '\xE9F', '\v', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', 
		'\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x5', '\xDB', '\xEA7', '\n', 
		'\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', 
		'\xDB', '\x3', '\xDB', '\x5', '\xDB', '\xEAF', '\n', '\xDB', '\x3', '\xDC', 
		'\x3', '\xDC', '\x5', '\xDC', '\xEB3', '\n', '\xDC', '\x3', '\xDC', '\x3', 
		'\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x5', '\xDC', '\xEBA', 
		'\n', '\xDC', '\x3', '\xDC', '\x5', '\xDC', '\xEBD', '\n', '\xDC', '\x5', 
		'\xDC', '\xEBF', '\n', '\xDC', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', 
		'\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x5', '\xDD', '\xEC7', '\n', 
		'\xDD', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x5', 
		'\xDE', '\xECD', '\n', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', 
		'\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', 
		'\x5', '\xDF', '\xED7', '\n', '\xDF', '\x3', '\xE0', '\x3', '\xE0', '\x3', 
		'\xE0', '\a', '\xE0', '\xEDC', '\n', '\xE0', '\f', '\xE0', '\xE', '\xE0', 
		'\xEDF', '\v', '\xE0', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', 
		'\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', 
		'\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', 
		'\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', 
		'\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', 
		'\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', 
		'\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', 
		'\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', 
		'\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', 
		'\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', 
		'\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', 
		'\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', 
		'\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', 
		'\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', 
		'\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x5', 
		'\xE1', '\xF2A', '\n', '\xE1', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', 
		'\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', 
		'\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x5', '\xE2', 
		'\xF38', '\n', '\xE2', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', 
		'\xE3', '\a', '\xE3', '\xF3E', '\n', '\xE3', '\f', '\xE3', '\xE', '\xE3', 
		'\xF41', '\v', '\xE3', '\x5', '\xE3', '\xF43', '\n', '\xE3', '\x3', '\xE3', 
		'\x3', '\xE3', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', 
		'\x3', '\xE4', '\x3', '\xE4', '\a', '\xE4', '\xF4D', '\n', '\xE4', '\f', 
		'\xE4', '\xE', '\xE4', '\xF50', '\v', '\xE4', '\x3', '\xE4', '\x3', '\xE4', 
		'\x5', '\xE4', '\xF54', '\n', '\xE4', '\x3', '\xE5', '\x3', '\xE5', '\x3', 
		'\xE5', '\x3', '\xE5', '\x5', '\xE5', '\xF5A', '\n', '\xE5', '\x3', '\xE5', 
		'\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x5', '\xE5', 
		'\xF61', '\n', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', 
		'\xE5', '\x3', '\xE5', '\x5', '\xE5', '\xF68', '\n', '\xE5', '\x3', '\xE5', 
		'\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x5', '\xE5', 
		'\xF6F', '\n', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', 
		'\xE5', '\x3', '\xE5', '\x5', '\xE5', '\xF76', '\n', '\xE5', '\x3', '\xE5', 
		'\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x5', '\xE5', 
		'\xF7D', '\n', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', 
		'\xE5', '\x3', '\xE5', '\x5', '\xE5', '\xF84', '\n', '\xE5', '\x3', '\xE5', 
		'\x5', '\xE5', '\xF87', '\n', '\xE5', '\x3', '\xE6', '\x3', '\xE6', '\x3', 
		'\xE6', '\a', '\xE6', '\xF8C', '\n', '\xE6', '\f', '\xE6', '\xE', '\xE6', 
		'\xF8F', '\v', '\xE6', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\a', 
		'\xE7', '\xF94', '\n', '\xE7', '\f', '\xE7', '\xE', '\xE7', '\xF97', '\v', 
		'\xE7', '\x3', '\xE8', '\x3', '\xE8', '\x3', '\xE8', '\a', '\xE8', '\xF9C', 
		'\n', '\xE8', '\f', '\xE8', '\xE', '\xE8', '\xF9F', '\v', '\xE8', '\x3', 
		'\xE9', '\x3', '\xE9', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\a', 
		'\xEA', '\xFA6', '\n', '\xEA', '\f', '\xEA', '\xE', '\xEA', '\xFA9', '\v', 
		'\xEA', '\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x5', '\xEB', '\xFAE', 
		'\n', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x5', '\xEB', '\xFB2', '\n', 
		'\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x5', '\xEB', '\xFB6', '\n', '\xEB', 
		'\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x5', '\xEB', '\xFBB', '\n', 
		'\xEB', '\x3', '\xEB', '\x5', '\xEB', '\xFBE', '\n', '\xEB', '\x5', '\xEB', 
		'\xFC0', '\n', '\xEB', '\x3', '\xEC', '\x3', '\xEC', '\x3', '\xEC', '\x3', 
		'\xEC', '\x3', '\xEC', '\x3', '\xEC', '\x3', '\xEC', '\x5', '\xEC', '\xFC9', 
		'\n', '\xEC', '\x3', '\xEC', '\x3', '\xEC', '\a', '\xEC', '\xFCD', '\n', 
		'\xEC', '\f', '\xEC', '\xE', '\xEC', '\xFD0', '\v', '\xEC', '\x3', '\xED', 
		'\x3', '\xED', '\x3', '\xED', '\x3', '\xED', '\x5', '\xED', '\xFD6', '\n', 
		'\xED', '\x3', '\xED', '\x3', '\xED', '\x3', '\xED', '\x5', '\xED', '\xFDB', 
		'\n', '\xED', '\x3', '\xED', '\x3', '\xED', '\x3', '\xED', '\x5', '\xED', 
		'\xFE0', '\n', '\xED', '\x3', '\xED', '\x3', '\xED', '\x3', '\xED', '\x5', 
		'\xED', '\xFE5', '\n', '\xED', '\x3', '\xED', '\x5', '\xED', '\xFE8', 
		'\n', '\xED', '\x3', '\xEE', '\x3', '\xEE', '\x3', '\xEE', '\a', '\xEE', 
		'\xFED', '\n', '\xEE', '\f', '\xEE', '\xE', '\xEE', '\xFF0', '\v', '\xEE', 
		'\x3', '\xEF', '\x3', '\xEF', '\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF0', 
		'\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', 
		'\x5', '\xF1', '\xFFC', '\n', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', 
		'\xF1', '\x3', '\xF1', '\x5', '\xF1', '\x1002', '\n', '\xF1', '\x3', '\xF2', 
		'\x3', '\xF2', '\x3', '\xF2', '\x3', '\xF2', '\x5', '\xF2', '\x1008', 
		'\n', '\xF2', '\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\a', '\xF3', 
		'\x100D', '\n', '\xF3', '\f', '\xF3', '\xE', '\xF3', '\x1010', '\v', '\xF3', 
		'\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF4', 
		'\x5', '\xF4', '\x1017', '\n', '\xF4', '\x3', '\xF4', '\x3', '\xF4', '\x3', 
		'\xF4', '\x3', '\xF4', '\x5', '\xF4', '\x101D', '\n', '\xF4', '\x3', '\xF4', 
		'\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF4', 
		'\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF4', '\x5', '\xF4', 
		'\x1029', '\n', '\xF4', '\x5', '\xF4', '\x102B', '\n', '\xF4', '\x3', 
		'\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x5', '\xF5', '\x1031', 
		'\n', '\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x5', '\xF5', '\x1035', '\n', 
		'\xF5', '\x5', '\xF5', '\x1037', '\n', '\xF5', '\x3', '\xF6', '\x3', '\xF6', 
		'\x5', '\xF6', '\x103B', '\n', '\xF6', '\x3', '\xF6', '\x3', '\xF6', '\x3', 
		'\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', 
		'\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x5', 
		'\xF7', '\x1049', '\n', '\xF7', '\x3', '\xF8', '\x3', '\xF8', '\x3', '\xF8', 
		'\x3', '\xF8', '\x5', '\xF8', '\x104F', '\n', '\xF8', '\x3', '\xF8', '\x3', 
		'\xF8', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x5', 
		'\xF9', '\x1057', '\n', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', 
		'\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', 
		'\x3', '\xF9', '\x3', '\xF9', '\x5', '\xF9', '\x1063', '\n', '\xF9', '\x3', 
		'\xF9', '\x3', '\xF9', '\x5', '\xF9', '\x1067', '\n', '\xF9', '\x3', '\xF9', 
		'\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', 
		'\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', 
		'\x3', '\xF9', '\x5', '\xF9', '\x1075', '\n', '\xF9', '\x5', '\xF9', '\x1077', 
		'\n', '\xF9', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', 
		'\x3', '\xFA', '\x5', '\xFA', '\x107E', '\n', '\xFA', '\x3', '\xFA', '\x3', 
		'\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFB', '\x3', '\xFB', '\x5', 
		'\xFB', '\x1086', '\n', '\xFB', '\x3', '\xFB', '\x5', '\xFB', '\x1089', 
		'\n', '\xFB', '\x3', '\xFB', '\a', '\xFB', '\x108C', '\n', '\xFB', '\f', 
		'\xFB', '\xE', '\xFB', '\x108F', '\v', '\xFB', '\x3', '\xFB', '\x5', '\xFB', 
		'\x1092', '\n', '\xFB', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', 
		'\xFC', '\x5', '\xFC', '\x1098', '\n', '\xFC', '\x3', '\xFC', '\x5', '\xFC', 
		'\x109B', '\n', '\xFC', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x5', 
		'\xFD', '\x10A0', '\n', '\xFD', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', 
		'\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', 
		'\x3', '\xFE', '\x6', '\xFE', '\x10AB', '\n', '\xFE', '\r', '\xFE', '\xE', 
		'\xFE', '\x10AC', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', 
		'\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', 
		'\xFF', '\x3', '\xFF', '\x5', '\xFF', '\x10B9', '\n', '\xFF', '\x3', '\xFF', 
		'\x3', '\xFF', '\x3', '\xFF', '\x5', '\xFF', '\x10BE', '\n', '\xFF', '\x3', 
		'\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', 
		'\xFF', '\x5', '\xFF', '\x10C6', '\n', '\xFF', '\x3', '\xFF', '\x3', '\xFF', 
		'\x3', '\xFF', '\x3', '\xFF', '\x5', '\xFF', '\x10CC', '\n', '\xFF', '\x5', 
		'\xFF', '\x10CE', '\n', '\xFF', '\x5', '\xFF', '\x10D0', '\n', '\xFF', 
		'\x3', '\x100', '\x3', '\x100', '\x3', '\x100', '\x3', '\x100', '\x5', 
		'\x100', '\x10D6', '\n', '\x100', '\x3', '\x100', '\x3', '\x100', '\x3', 
		'\x101', '\x3', '\x101', '\x3', '\x101', '\x3', '\x101', '\x3', '\x101', 
		'\x3', '\x101', '\x3', '\x101', '\x3', '\x101', '\x5', '\x101', '\x10E2', 
		'\n', '\x101', '\x3', '\x101', '\x3', '\x101', '\x3', '\x101', '\x5', 
		'\x101', '\x10E7', '\n', '\x101', '\x5', '\x101', '\x10E9', '\n', '\x101', 
		'\x3', '\x101', '\x3', '\x101', '\x5', '\x101', '\x10ED', '\n', '\x101', 
		'\x3', '\x101', '\x3', '\x101', '\x3', '\x101', '\x3', '\x101', '\x5', 
		'\x101', '\x10F3', '\n', '\x101', '\x3', '\x101', '\x5', '\x101', '\x10F6', 
		'\n', '\x101', '\x3', '\x101', '\x5', '\x101', '\x10F9', '\n', '\x101', 
		'\x3', '\x101', '\x3', '\x101', '\x3', '\x101', '\x3', '\x101', '\x3', 
		'\x101', '\x3', '\x101', '\x3', '\x101', '\x3', '\x101', '\x5', '\x101', 
		'\x1103', '\n', '\x101', '\x5', '\x101', '\x1105', '\n', '\x101', '\x3', 
		'\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x5', '\x102', 
		'\x110B', '\n', '\x102', '\x3', '\x103', '\x3', '\x103', '\x3', '\x103', 
		'\x6', '\x103', '\x1110', '\n', '\x103', '\r', '\x103', '\xE', '\x103', 
		'\x1111', '\x3', '\x103', '\x3', '\x103', '\x3', '\x103', '\x3', '\x103', 
		'\x5', '\x103', '\x1118', '\n', '\x103', '\x3', '\x104', '\x3', '\x104', 
		'\x3', '\x104', '\x3', '\x105', '\x3', '\x105', '\x3', '\x105', '\x3', 
		'\x105', '\x3', '\x105', '\x5', '\x105', '\x1122', '\n', '\x105', '\x3', 
		'\x105', '\x3', '\x105', '\x5', '\x105', '\x1126', '\n', '\x105', '\x3', 
		'\x106', '\x3', '\x106', '\x3', '\x106', '\x5', '\x106', '\x112B', '\n', 
		'\x106', '\x3', '\x107', '\x3', '\x107', '\x3', '\x107', '\x3', '\x108', 
		'\x3', '\x108', '\x3', '\x108', '\x3', '\x108', '\x3', '\x108', '\x3', 
		'\x108', '\x3', '\x108', '\x3', '\x108', '\x3', '\x108', '\x3', '\x108', 
		'\a', '\x108', '\x113A', '\n', '\x108', '\f', '\x108', '\xE', '\x108', 
		'\x113D', '\v', '\x108', '\x3', '\x109', '\x3', '\x109', '\x3', '\x109', 
		'\x3', '\x109', '\x3', '\x109', '\x3', '\x109', '\x3', '\x109', '\x3', 
		'\x109', '\x3', '\x109', '\x3', '\x109', '\x3', '\x109', '\x3', '\x109', 
		'\x3', '\x109', '\x5', '\x109', '\x114C', '\n', '\x109', '\x3', '\x109', 
		'\x3', '\x109', '\x3', '\x109', '\x5', '\x109', '\x1151', '\n', '\x109', 
		'\x3', '\x109', '\x3', '\x109', '\x3', '\x109', '\x3', '\x109', '\x3', 
		'\x109', '\x3', '\x109', '\x5', '\x109', '\x1159', '\n', '\x109', '\x3', 
		'\x109', '\x3', '\x109', '\x3', '\x109', '\x3', '\x109', '\x3', '\x109', 
		'\x3', '\x109', '\x5', '\x109', '\x1161', '\n', '\x109', '\x3', '\x10A', 
		'\x3', '\x10A', '\x3', '\x10A', '\x5', '\x10A', '\x1166', '\n', '\x10A', 
		'\x3', '\x10A', '\x3', '\x10A', '\x3', '\x10A', '\x3', '\x10A', '\x5', 
		'\x10A', '\x116C', '\n', '\x10A', '\x3', '\x10A', '\x5', '\x10A', '\x116F', 
		'\n', '\x10A', '\x5', '\x10A', '\x1171', '\n', '\x10A', '\x3', '\x10B', 
		'\x3', '\x10B', '\x3', '\x10C', '\x3', '\x10C', '\x3', '\x10C', '\x3', 
		'\x10C', '\x5', '\x10C', '\x1179', '\n', '\x10C', '\x3', '\x10C', '\x3', 
		'\x10C', '\x3', '\x10C', '\x3', '\x10C', '\x3', '\x10C', '\x3', '\x10C', 
		'\x3', '\x10C', '\x3', '\x10C', '\x3', '\x10C', '\x3', '\x10C', '\x3', 
		'\x10C', '\x3', '\x10C', '\x3', '\x10C', '\x5', '\x10C', '\x1188', '\n', 
		'\x10C', '\x3', '\x10C', '\x3', '\x10C', '\x5', '\x10C', '\x118C', '\n', 
		'\x10C', '\x3', '\x10C', '\x3', '\x10C', '\x5', '\x10C', '\x1190', '\n', 
		'\x10C', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\a', '\x10D', 
		'\x1195', '\n', '\x10D', '\f', '\x10D', '\xE', '\x10D', '\x1198', '\v', 
		'\x10D', '\x3', '\x10E', '\x3', '\x10E', '\x3', '\x10E', '\x5', '\x10E', 
		'\x119D', '\n', '\x10E', '\x3', '\x10E', '\x3', '\x10E', '\x3', '\x10E', 
		'\x3', '\x10E', '\x5', '\x10E', '\x11A3', '\n', '\x10E', '\x5', '\x10E', 
		'\x11A5', '\n', '\x10E', '\x3', '\x10E', '\x3', '\x10E', '\x5', '\x10E', 
		'\x11A9', '\n', '\x10E', '\x3', '\x10E', '\x3', '\x10E', '\x3', '\x10E', 
		'\x3', '\x10E', '\x3', '\x10E', '\x3', '\x10E', '\x3', '\x10E', '\x3', 
		'\x10E', '\x3', '\x10E', '\x5', '\x10E', '\x11B4', '\n', '\x10E', '\x3', 
		'\x10E', '\x3', '\x10E', '\x3', '\x10E', '\x3', '\x10E', '\x3', '\x10E', 
		'\x3', '\x10E', '\x3', '\x10E', '\x3', '\x10E', '\x5', '\x10E', '\x11BE', 
		'\n', '\x10E', '\x3', '\x10E', '\x3', '\x10E', '\x3', '\x10E', '\x5', 
		'\x10E', '\x11C3', '\n', '\x10E', '\x3', '\x10F', '\x3', '\x10F', '\x3', 
		'\x10F', '\x5', '\x10F', '\x11C8', '\n', '\x10F', '\x3', '\x10F', '\x3', 
		'\x10F', '\x3', '\x10F', '\x5', '\x10F', '\x11CD', '\n', '\x10F', '\x3', 
		'\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', 
		'\x3', '\x10F', '\x5', '\x10F', '\x11D5', '\n', '\x10F', '\x3', '\x110', 
		'\x3', '\x110', '\x5', '\x110', '\x11D9', '\n', '\x110', '\x3', '\x110', 
		'\a', '\x110', '\x11DC', '\n', '\x110', '\f', '\x110', '\xE', '\x110', 
		'\x11DF', '\v', '\x110', '\x3', '\x111', '\x3', '\x111', '\x3', '\x111', 
		'\x3', '\x111', '\x3', '\x111', '\x3', '\x111', '\x5', '\x111', '\x11E7', 
		'\n', '\x111', '\x3', '\x112', '\x3', '\x112', '\x3', '\x112', '\x3', 
		'\x112', '\x3', '\x112', '\x3', '\x112', '\x3', '\x112', '\x3', '\x112', 
		'\x3', '\x112', '\x3', '\x112', '\x5', '\x112', '\x11F3', '\n', '\x112', 
		'\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', 
		'\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', 
		'\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x5', '\x113', '\x1201', 
		'\n', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', 
		'\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x5', '\x113', 
		'\x120A', '\n', '\x113', '\x5', '\x113', '\x120C', '\n', '\x113', '\x3', 
		'\x114', '\x3', '\x114', '\x3', '\x114', '\a', '\x114', '\x1211', '\n', 
		'\x114', '\f', '\x114', '\xE', '\x114', '\x1214', '\v', '\x114', '\x3', 
		'\x115', '\x3', '\x115', '\x3', '\x115', '\x5', '\x115', '\x1219', '\n', 
		'\x115', '\x3', '\x116', '\x3', '\x116', '\x5', '\x116', '\x121D', '\n', 
		'\x116', '\x3', '\x116', '\x3', '\x116', '\x3', '\x116', '\x3', '\x116', 
		'\x3', '\x116', '\x3', '\x116', '\a', '\x116', '\x1225', '\n', '\x116', 
		'\f', '\x116', '\xE', '\x116', '\x1228', '\v', '\x116', '\x3', '\x116', 
		'\x3', '\x116', '\x3', '\x116', '\x3', '\x116', '\x5', '\x116', '\x122E', 
		'\n', '\x116', '\x3', '\x116', '\x3', '\x116', '\x5', '\x116', '\x1232', 
		'\n', '\x116', '\x3', '\x116', '\x3', '\x116', '\x3', '\x116', '\x3', 
		'\x116', '\x5', '\x116', '\x1238', '\n', '\x116', '\x3', '\x116', '\x3', 
		'\x116', '\x5', '\x116', '\x123C', '\n', '\x116', '\x3', '\x116', '\x3', 
		'\x116', '\x3', '\x116', '\a', '\x116', '\x1241', '\n', '\x116', '\f', 
		'\x116', '\xE', '\x116', '\x1244', '\v', '\x116', '\x5', '\x116', '\x1246', 
		'\n', '\x116', '\x3', '\x117', '\x3', '\x117', '\x3', '\x117', '\x3', 
		'\x117', '\x3', '\x117', '\x3', '\x117', '\x3', '\x117', '\x5', '\x117', 
		'\x124F', '\n', '\x117', '\x3', '\x117', '\x3', '\x117', '\x3', '\x117', 
		'\x3', '\x117', '\x5', '\x117', '\x1255', '\n', '\x117', '\x3', '\x118', 
		'\x3', '\x118', '\x3', '\x118', '\x5', '\x118', '\x125A', '\n', '\x118', 
		'\x3', '\x119', '\x3', '\x119', '\x3', '\x11A', '\x3', '\x11A', '\x3', 
		'\x11A', '\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11A', 
		'\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11A', '\x3', 
		'\x11A', '\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11A', 
		'\x3', '\x11A', '\a', '\x11A', '\x126F', '\n', '\x11A', '\f', '\x11A', 
		'\xE', '\x11A', '\x1272', '\v', '\x11A', '\x5', '\x11A', '\x1274', '\n', 
		'\x11A', '\x3', '\x11B', '\x3', '\x11B', '\x5', '\x11B', '\x1278', '\n', 
		'\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', 
		'\x3', '\x11B', '\x5', '\x11B', '\x127F', '\n', '\x11B', '\x5', '\x11B', 
		'\x1281', '\n', '\x11B', '\x3', '\x11B', '\x5', '\x11B', '\x1284', '\n', 
		'\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x5', '\x11B', 
		'\x1289', '\n', '\x11B', '\x5', '\x11B', '\x128B', '\n', '\x11B', '\x3', 
		'\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', 
		'\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x3', 
		'\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', 
		'\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x3', 
		'\x11C', '\x5', '\x11C', '\x12A0', '\n', '\x11C', '\x3', '\x11C', '\x3', 
		'\x11C', '\x5', '\x11C', '\x12A4', '\n', '\x11C', '\x5', '\x11C', '\x12A6', 
		'\n', '\x11C', '\x3', '\x11D', '\x3', '\x11D', '\x5', '\x11D', '\x12AA', 
		'\n', '\x11D', '\x3', '\x11D', '\x3', '\x11D', '\x3', '\x11E', '\x3', 
		'\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11F', '\x3', '\x11F', 
		'\x3', '\x11F', '\x3', '\x11F', '\x5', '\x11F', '\x12B6', '\n', '\x11F', 
		'\x3', '\x120', '\x3', '\x120', '\x3', '\x120', '\a', '\x120', '\x12BB', 
		'\n', '\x120', '\f', '\x120', '\xE', '\x120', '\x12BE', '\v', '\x120', 
		'\x3', '\x121', '\x3', '\x121', '\x3', '\x121', '\x3', '\x121', '\x3', 
		'\x121', '\x3', '\x121', '\x5', '\x121', '\x12C6', '\n', '\x121', '\x3', 
		'\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', 
		'\x5', '\x122', '\x12CD', '\n', '\x122', '\x3', '\x122', '\x5', '\x122', 
		'\x12D0', '\n', '\x122', '\x3', '\x122', '\x3', '\x122', '\x5', '\x122', 
		'\x12D4', '\n', '\x122', '\x3', '\x122', '\x5', '\x122', '\x12D7', '\n', 
		'\x122', '\x3', '\x122', '\x5', '\x122', '\x12DA', '\n', '\x122', '\x3', 
		'\x122', '\x3', '\x122', '\x5', '\x122', '\x12DE', '\n', '\x122', '\x3', 
		'\x122', '\x5', '\x122', '\x12E1', '\n', '\x122', '\x3', '\x122', '\x3', 
		'\x122', '\x5', '\x122', '\x12E5', '\n', '\x122', '\x3', '\x122', '\x5', 
		'\x122', '\x12E8', '\n', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', 
		'\x122', '\x5', '\x122', '\x12ED', '\n', '\x122', '\x3', '\x122', '\x5', 
		'\x122', '\x12F0', '\n', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', 
		'\x122', '\x5', '\x122', '\x12F5', '\n', '\x122', '\x3', '\x122', '\x5', 
		'\x122', '\x12F8', '\n', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', 
		'\x122', '\x3', '\x122', '\x5', '\x122', '\x12FE', '\n', '\x122', '\x3', 
		'\x122', '\x3', '\x122', '\x5', '\x122', '\x1302', '\n', '\x122', '\x3', 
		'\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x5', '\x122', 
		'\x1308', '\n', '\x122', '\x3', '\x122', '\x5', '\x122', '\x130B', '\n', 
		'\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', 
		'\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x5', '\x122', '\x1314', 
		'\n', '\x122', '\x5', '\x122', '\x1316', '\n', '\x122', '\x3', '\x122', 
		'\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x5', '\x122', '\x131C', 
		'\n', '\x122', '\x3', '\x122', '\x3', '\x122', '\x5', '\x122', '\x1320', 
		'\n', '\x122', '\x3', '\x122', '\x5', '\x122', '\x1323', '\n', '\x122', 
		'\x3', '\x122', '\x5', '\x122', '\x1326', '\n', '\x122', '\x3', '\x122', 
		'\x3', '\x122', '\x5', '\x122', '\x132A', '\n', '\x122', '\x3', '\x122', 
		'\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x5', '\x122', '\x1330', 
		'\n', '\x122', '\x3', '\x122', '\x5', '\x122', '\x1333', '\n', '\x122', 
		'\x3', '\x122', '\x5', '\x122', '\x1336', '\n', '\x122', '\x3', '\x122', 
		'\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', 
		'\x122', '\x3', '\x122', '\x3', '\x122', '\x5', '\x122', '\x1340', '\n', 
		'\x122', '\x3', '\x122', '\x3', '\x122', '\x5', '\x122', '\x1344', '\n', 
		'\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', 
		'\x3', '\x122', '\a', '\x122', '\x134B', '\n', '\x122', '\f', '\x122', 
		'\xE', '\x122', '\x134E', '\v', '\x122', '\x5', '\x122', '\x1350', '\n', 
		'\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x5', '\x122', 
		'\x1355', '\n', '\x122', '\x3', '\x122', '\x5', '\x122', '\x1358', '\n', 
		'\x122', '\x3', '\x122', '\x5', '\x122', '\x135B', '\n', '\x122', '\x3', 
		'\x122', '\x3', '\x122', '\x5', '\x122', '\x135F', '\n', '\x122', '\x3', 
		'\x122', '\x5', '\x122', '\x1362', '\n', '\x122', '\x3', '\x122', '\x3', 
		'\x122', '\x3', '\x122', '\x5', '\x122', '\x1367', '\n', '\x122', '\x3', 
		'\x122', '\x3', '\x122', '\x5', '\x122', '\x136B', '\n', '\x122', '\x3', 
		'\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', 
		'\x3', '\x122', '\x5', '\x122', '\x1373', '\n', '\x122', '\x3', '\x122', 
		'\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', 
		'\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', 
		'\x3', '\x122', '\x5', '\x122', '\x1380', '\n', '\x122', '\x3', '\x122', 
		'\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', 
		'\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', 
		'\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', 
		'\x122', '\x3', '\x122', '\x5', '\x122', '\x1392', '\n', '\x122', '\x3', 
		'\x122', '\x3', '\x122', '\x3', '\x122', '\x5', '\x122', '\x1397', '\n', 
		'\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x5', '\x122', 
		'\x139C', '\n', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', 
		'\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x5', '\x122', '\x13A4', 
		'\n', '\x122', '\x3', '\x123', '\x3', '\x123', '\x3', '\x123', '\x3', 
		'\x123', '\x5', '\x123', '\x13AA', '\n', '\x123', '\x5', '\x123', '\x13AC', 
		'\n', '\x123', '\x3', '\x124', '\x3', '\x124', '\x5', '\x124', '\x13B0', 
		'\n', '\x124', '\x3', '\x124', '\x5', '\x124', '\x13B3', '\n', '\x124', 
		'\x3', '\x125', '\x3', '\x125', '\x3', '\x126', '\x3', '\x126', '\x3', 
		'\x126', '\x3', '\x127', '\x3', '\x127', '\x3', '\x127', '\x3', '\x127', 
		'\x3', '\x127', '\x3', '\x127', '\x3', '\x127', '\x5', '\x127', '\x13C1', 
		'\n', '\x127', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', 
		'\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', 
		'\x5', '\x128', '\x13CB', '\n', '\x128', '\x3', '\x128', '\x3', '\x128', 
		'\x5', '\x128', '\x13CF', '\n', '\x128', '\x3', '\x128', '\x3', '\x128', 
		'\x3', '\x128', '\x3', '\x128', '\a', '\x128', '\x13D5', '\n', '\x128', 
		'\f', '\x128', '\xE', '\x128', '\x13D8', '\v', '\x128', '\x5', '\x128', 
		'\x13DA', '\n', '\x128', '\x3', '\x128', '\x3', '\x128', '\x5', '\x128', 
		'\x13DE', '\n', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', 
		'\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', 
		'\x128', '\x5', '\x128', '\x13E8', '\n', '\x128', '\x3', '\x129', '\x3', 
		'\x129', '\x5', '\x129', '\x13EC', '\n', '\x129', '\x3', '\x12A', '\x3', 
		'\x12A', '\x3', '\x12A', '\a', '\x12A', '\x13F1', '\n', '\x12A', '\f', 
		'\x12A', '\xE', '\x12A', '\x13F4', '\v', '\x12A', '\x3', '\x12B', '\x3', 
		'\x12B', '\x5', '\x12B', '\x13F8', '\n', '\x12B', '\x3', '\x12C', '\x3', 
		'\x12C', '\x3', '\x12C', '\x3', '\x12C', '\x3', '\x12C', '\x3', '\x12C', 
		'\x5', '\x12C', '\x1400', '\n', '\x12C', '\x3', '\x12D', '\x3', '\x12D', 
		'\x3', '\x12D', '\x5', '\x12D', '\x1405', '\n', '\x12D', '\x3', '\x12D', 
		'\x3', '\x12D', '\x3', '\x12E', '\x3', '\x12E', '\x5', '\x12E', '\x140B', 
		'\n', '\x12E', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\a', '\x12F', 
		'\x1410', '\n', '\x12F', '\f', '\x12F', '\xE', '\x12F', '\x1413', '\v', 
		'\x12F', '\x3', '\x130', '\x3', '\x130', '\x5', '\x130', '\x1417', '\n', 
		'\x130', '\x3', '\x130', '\x3', '\x130', '\x3', '\x130', '\x3', '\x130', 
		'\x5', '\x130', '\x141D', '\n', '\x130', '\x3', '\x130', '\x3', '\x130', 
		'\x3', '\x130', '\x3', '\x130', '\x3', '\x130', '\x5', '\x130', '\x1424', 
		'\n', '\x130', '\x3', '\x131', '\x3', '\x131', '\x3', '\x132', '\x3', 
		'\x132', '\x3', '\x132', '\x3', '\x132', '\x3', '\x132', '\x3', '\x132', 
		'\x5', '\x132', '\x142E', '\n', '\x132', '\x5', '\x132', '\x1430', '\n', 
		'\x132', '\x3', '\x133', '\x3', '\x133', '\x3', '\x133', '\x3', '\x133', 
		'\x3', '\x133', '\x3', '\x133', '\x5', '\x133', '\x1438', '\n', '\x133', 
		'\x3', '\x134', '\x3', '\x134', '\x3', '\x134', '\x5', '\x134', '\x143D', 
		'\n', '\x134', '\x3', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1441', 
		'\n', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1444', '\n', '\x134', 
		'\x3', '\x135', '\x3', '\x135', '\x3', '\x135', '\a', '\x135', '\x1449', 
		'\n', '\x135', '\f', '\x135', '\xE', '\x135', '\x144C', '\v', '\x135', 
		'\x3', '\x136', '\x3', '\x136', '\x5', '\x136', '\x1450', '\n', '\x136', 
		'\x3', '\x136', '\x3', '\x136', '\x5', '\x136', '\x1454', '\n', '\x136', 
		'\x3', '\x137', '\x3', '\x137', '\x3', '\x137', '\x3', '\x137', '\x3', 
		'\x137', '\x3', '\x138', '\x3', '\x138', '\x3', '\x138', '\x3', '\x138', 
		'\x5', '\x138', '\x145F', '\n', '\x138', '\x3', '\x139', '\x3', '\x139', 
		'\x3', '\x139', '\x3', '\x139', '\x3', '\x139', '\x3', '\x139', '\x5', 
		'\x139', '\x1467', '\n', '\x139', '\x3', '\x139', '\x3', '\x139', '\x5', 
		'\x139', '\x146B', '\n', '\x139', '\x3', '\x139', '\x5', '\x139', '\x146E', 
		'\n', '\x139', '\x3', '\x139', '\x5', '\x139', '\x1471', '\n', '\x139', 
		'\x3', '\x13A', '\x3', '\x13A', '\x5', '\x13A', '\x1475', '\n', '\x13A', 
		'\x3', '\x13A', '\x3', '\x13A', '\x5', '\x13A', '\x1479', '\n', '\x13A', 
		'\x3', '\x13A', '\a', '\x13A', '\x147C', '\n', '\x13A', '\f', '\x13A', 
		'\xE', '\x13A', '\x147F', '\v', '\x13A', '\x3', '\x13B', '\x3', '\x13B', 
		'\x3', '\x13B', '\x5', '\x13B', '\x1484', '\n', '\x13B', '\x3', '\x13C', 
		'\x3', '\x13C', '\x5', '\x13C', '\x1488', '\n', '\x13C', '\x3', '\x13C', 
		'\x3', '\x13C', '\x3', '\x13D', '\x3', '\x13D', '\x3', '\x13E', '\x3', 
		'\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x5', '\x13E', 
		'\x1493', '\n', '\x13E', '\x3', '\x13E', '\x5', '\x13E', '\x1496', '\n', 
		'\x13E', '\x3', '\x13E', '\x5', '\x13E', '\x1499', '\n', '\x13E', '\x3', 
		'\x13E', '\x5', '\x13E', '\x149C', '\n', '\x13E', '\x3', '\x13F', '\x3', 
		'\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', 
		'\x5', '\x13F', '\x14A4', '\n', '\x13F', '\x3', '\x140', '\x3', '\x140', 
		'\x5', '\x140', '\x14A8', '\n', '\x140', '\x3', '\x140', '\a', '\x140', 
		'\x14AB', '\n', '\x140', '\f', '\x140', '\xE', '\x140', '\x14AE', '\v', 
		'\x140', '\x3', '\x141', '\x3', '\x141', '\x3', '\x141', '\x3', '\x141', 
		'\x3', '\x141', '\x5', '\x141', '\x14B5', '\n', '\x141', '\x3', '\x142', 
		'\x3', '\x142', '\x3', '\x142', '\x3', '\x142', '\x3', '\x142', '\x3', 
		'\x142', '\x5', '\x142', '\x14BD', '\n', '\x142', '\x3', '\x143', '\x3', 
		'\x143', '\x3', '\x143', '\x3', '\x143', '\x5', '\x143', '\x14C3', '\n', 
		'\x143', '\x3', '\x144', '\x3', '\x144', '\x3', '\x144', '\x3', '\x144', 
		'\x3', '\x144', '\x3', '\x144', '\x3', '\x144', '\x3', '\x144', '\x3', 
		'\x144', '\x5', '\x144', '\x14CE', '\n', '\x144', '\x3', '\x144', '\x3', 
		'\x144', '\x3', '\x145', '\x3', '\x145', '\x3', '\x145', '\x3', '\x145', 
		'\x3', '\x145', '\x3', '\x145', '\x5', '\x145', '\x14D8', '\n', '\x145', 
		'\x3', '\x145', '\x3', '\x145', '\x3', '\x145', '\x3', '\x145', '\x5', 
		'\x145', '\x14DE', '\n', '\x145', '\x3', '\x146', '\x3', '\x146', '\x3', 
		'\x146', '\x3', '\x147', '\x3', '\x147', '\x3', '\x147', '\x3', '\x148', 
		'\x3', '\x148', '\x3', '\x149', '\x3', '\x149', '\x3', '\x149', '\x3', 
		'\x149', '\x5', '\x149', '\x14EC', '\n', '\x149', '\x3', '\x149', '\x5', 
		'\x149', '\x14EF', '\n', '\x149', '\x3', '\x149', '\x3', '\x149', '\x5', 
		'\x149', '\x14F3', '\n', '\x149', '\x3', '\x149', '\x3', '\x149', '\x3', 
		'\x149', '\x3', '\x149', '\x3', '\x149', '\x3', '\x149', '\x3', '\x149', 
		'\x3', '\x149', '\x3', '\x149', '\a', '\x149', '\x14FE', '\n', '\x149', 
		'\f', '\x149', '\xE', '\x149', '\x1501', '\v', '\x149', '\x3', '\x14A', 
		'\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', 
		'\x14A', '\x5', '\x14A', '\x1509', '\n', '\x14A', '\x3', '\x14A', '\x3', 
		'\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', 
		'\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\a', 
		'\x14A', '\x1515', '\n', '\x14A', '\f', '\x14A', '\xE', '\x14A', '\x1518', 
		'\v', '\x14A', '\x3', '\x14B', '\x3', '\x14B', '\x3', '\x14C', '\x3', 
		'\x14C', '\x5', '\x14C', '\x151E', '\n', '\x14C', '\x3', '\x14C', '\x3', 
		'\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x5', '\x14C', '\x1524', '\n', 
		'\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', 
		'\x5', '\x14C', '\x152A', '\n', '\x14C', '\x3', '\x14D', '\x3', '\x14D', 
		'\x3', '\x14D', '\x3', '\x14D', '\x3', '\x14D', '\x3', '\x14D', '\x5', 
		'\x14D', '\x1532', '\n', '\x14D', '\x3', '\x14D', '\x3', '\x14D', '\x3', 
		'\x14D', '\x3', '\x14D', '\x3', '\x14D', '\x3', '\x14D', '\x3', '\x14D', 
		'\x3', '\x14D', '\x3', '\x14D', '\x5', '\x14D', '\x153D', '\n', '\x14D', 
		'\x3', '\x14D', '\x3', '\x14D', '\x5', '\x14D', '\x1541', '\n', '\x14D', 
		'\x3', '\x14E', '\x3', '\x14E', '\x3', '\x14E', '\x3', '\x14E', '\x3', 
		'\x14E', '\x3', '\x14E', '\x3', '\x14E', '\x3', '\x14E', '\x3', '\x14E', 
		'\x3', '\x14E', '\x3', '\x14E', '\x3', '\x14E', '\x3', '\x14E', '\x3', 
		'\x14E', '\x3', '\x14E', '\x3', '\x14E', '\x3', '\x14E', '\x3', '\x14E', 
		'\x3', '\x14E', '\x3', '\x14E', '\x3', '\x14E', '\x3', '\x14E', '\x3', 
		'\x14E', '\x3', '\x14E', '\x3', '\x14E', '\x3', '\x14E', '\x3', '\x14E', 
		'\a', '\x14E', '\x155E', '\n', '\x14E', '\f', '\x14E', '\xE', '\x14E', 
		'\x1561', '\v', '\x14E', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', 
		'\x3', '\x14F', '\x5', '\x14F', '\x1567', '\n', '\x14F', '\x3', '\x14F', 
		'\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', 
		'\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', 
		'\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', 
		'\x14F', '\x5', '\x14F', '\x1578', '\n', '\x14F', '\x3', '\x14F', '\x3', 
		'\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x5', '\x14F', 
		'\x157F', '\n', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', 
		'\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', 
		'\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', 
		'\x5', '\x14F', '\x158D', '\n', '\x14F', '\x3', '\x14F', '\x3', '\x14F', 
		'\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', 
		'\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x5', '\x14F', 
		'\x1599', '\n', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', 
		'\x3', '\x14F', '\x5', '\x14F', '\x159F', '\n', '\x14F', '\x3', '\x14F', 
		'\x3', '\x14F', '\x3', '\x14F', '\x6', '\x14F', '\x15A4', '\n', '\x14F', 
		'\r', '\x14F', '\xE', '\x14F', '\x15A5', '\x3', '\x14F', '\x5', '\x14F', 
		'\x15A9', '\n', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', 
		'\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', 
		'\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', 
		'\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', 
		'\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', 
		'\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', 
		'\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', 
		'\x3', '\x14F', '\x3', '\x14F', '\x5', '\x14F', '\x15CB', '\n', '\x14F', 
		'\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', 
		'\x14F', '\x3', '\x14F', '\a', '\x14F', '\x15D3', '\n', '\x14F', '\f', 
		'\x14F', '\xE', '\x14F', '\x15D6', '\v', '\x14F', '\x3', '\x150', '\x3', 
		'\x150', '\x3', '\x150', '\x3', '\x151', '\x3', '\x151', '\x3', '\x151', 
		'\x3', '\x151', '\x3', '\x151', '\x3', '\x151', '\x5', '\x151', '\x15E1', 
		'\n', '\x151', '\x3', '\x152', '\x3', '\x152', '\x3', '\x152', '\x5', 
		'\x152', '\x15E6', '\n', '\x152', '\x3', '\x152', '\x3', '\x152', '\x3', 
		'\x152', '\x3', '\x152', '\x5', '\x152', '\x15EC', '\n', '\x152', '\x3', 
		'\x152', '\x3', '\x152', '\x3', '\x152', '\x3', '\x152', '\x3', '\x152', 
		'\x3', '\x152', '\x5', '\x152', '\x15F4', '\n', '\x152', '\x3', '\x152', 
		'\x3', '\x152', '\x3', '\x152', '\x3', '\x152', '\x3', '\x152', '\x5', 
		'\x152', '\x15FB', '\n', '\x152', '\x3', '\x152', '\x3', '\x152', '\x3', 
		'\x152', '\x3', '\x152', '\x5', '\x152', '\x1601', '\n', '\x152', '\x3', 
		'\x152', '\x3', '\x152', '\x3', '\x152', '\x5', '\x152', '\x1606', '\n', 
		'\x152', '\x3', '\x152', '\x3', '\x152', '\x3', '\x152', '\x3', '\x152', 
		'\x5', '\x152', '\x160C', '\n', '\x152', '\x3', '\x152', '\x3', '\x152', 
		'\x3', '\x152', '\x5', '\x152', '\x1611', '\n', '\x152', '\x3', '\x152', 
		'\x3', '\x152', '\x3', '\x152', '\x5', '\x152', '\x1616', '\n', '\x152', 
		'\x3', '\x152', '\x3', '\x152', '\x3', '\x152', '\x3', '\x152', '\x5', 
		'\x152', '\x161C', '\n', '\x152', '\x3', '\x152', '\x3', '\x152', '\x3', 
		'\x152', '\x5', '\x152', '\x1621', '\n', '\x152', '\x3', '\x152', '\x3', 
		'\x152', '\x3', '\x152', '\x3', '\x152', '\x5', '\x152', '\x1627', '\n', 
		'\x152', '\x3', '\x152', '\x3', '\x152', '\x3', '\x152', '\x3', '\x152', 
		'\x3', '\x152', '\x3', '\x152', '\x5', '\x152', '\x162F', '\n', '\x152', 
		'\x3', '\x152', '\x3', '\x152', '\x3', '\x152', '\x3', '\x152', '\x3', 
		'\x152', '\x3', '\x152', '\x5', '\x152', '\x1637', '\n', '\x152', '\x3', 
		'\x152', '\x3', '\x152', '\x3', '\x152', '\x3', '\x152', '\x3', '\x152', 
		'\x3', '\x152', '\x5', '\x152', '\x163F', '\n', '\x152', '\x3', '\x152', 
		'\x3', '\x152', '\x3', '\x152', '\x3', '\x152', '\x3', '\x152', '\x3', 
		'\x152', '\x5', '\x152', '\x1647', '\n', '\x152', '\x3', '\x152', '\x3', 
		'\x152', '\x3', '\x152', '\x5', '\x152', '\x164C', '\n', '\x152', '\x3', 
		'\x152', '\x3', '\x152', '\x3', '\x152', '\x3', '\x152', '\x5', '\x152', 
		'\x1652', '\n', '\x152', '\x3', '\x152', '\x3', '\x152', '\x3', '\x152', 
		'\x5', '\x152', '\x1657', '\n', '\x152', '\x3', '\x152', '\x3', '\x152', 
		'\x5', '\x152', '\x165B', '\n', '\x152', '\x3', '\x152', '\x3', '\x152', 
		'\x5', '\x152', '\x165F', '\n', '\x152', '\x3', '\x152', '\x3', '\x152', 
		'\x3', '\x152', '\x5', '\x152', '\x1664', '\n', '\x152', '\x5', '\x152', 
		'\x1666', '\n', '\x152', '\x3', '\x153', '\x3', '\x153', '\x3', '\x153', 
		'\x3', '\x153', '\x3', '\x153', '\x3', '\x154', '\x3', '\x154', '\x3', 
		'\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', 
		'\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', 
		'\x154', '\x5', '\x154', '\x1679', '\n', '\x154', '\x3', '\x154', '\x3', 
		'\x154', '\x5', '\x154', '\x167D', '\n', '\x154', '\x3', '\x154', '\x3', 
		'\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x5', '\x154', 
		'\x1684', '\n', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', 
		'\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', 
		'\x154', '\x3', '\x154', '\x3', '\x154', '\x5', '\x154', '\x1690', '\n', 
		'\x154', '\x3', '\x154', '\x5', '\x154', '\x1693', '\n', '\x154', '\x3', 
		'\x154', '\x3', '\x154', '\x5', '\x154', '\x1697', '\n', '\x154', '\x3', 
		'\x155', '\x3', '\x155', '\x3', '\x155', '\x5', '\x155', '\x169C', '\n', 
		'\x155', '\x3', '\x156', '\x3', '\x156', '\x3', '\x156', '\x5', '\x156', 
		'\x16A1', '\n', '\x156', '\x3', '\x156', '\x3', '\x156', '\x5', '\x156', 
		'\x16A5', '\n', '\x156', '\x3', '\x157', '\x3', '\x157', '\x3', '\x157', 
		'\x3', '\x158', '\x3', '\x158', '\x3', '\x158', '\x3', '\x158', '\x3', 
		'\x158', '\x5', '\x158', '\x16AF', '\n', '\x158', '\x3', '\x158', '\x3', 
		'\x158', '\x3', '\x158', '\x3', '\x158', '\x3', '\x158', '\x3', '\x158', 
		'\x3', '\x158', '\x5', '\x158', '\x16B8', '\n', '\x158', '\x5', '\x158', 
		'\x16BA', '\n', '\x158', '\x3', '\x159', '\x5', '\x159', '\x16BD', '\n', 
		'\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x15A', '\x3', '\x15A', 
		'\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x5', '\x15A', '\x16C6', 
		'\n', '\x15A', '\x3', '\x15B', '\x3', '\x15B', '\x3', '\x15B', '\a', '\x15B', 
		'\x16CB', '\n', '\x15B', '\f', '\x15B', '\xE', '\x15B', '\x16CE', '\v', 
		'\x15B', '\x3', '\x15C', '\x3', '\x15C', '\x3', '\x15C', '\x3', '\x15C', 
		'\x3', '\x15C', '\x3', '\x15C', '\x3', '\x15C', '\x3', '\x15C', '\x3', 
		'\x15C', '\x3', '\x15C', '\x5', '\x15C', '\x16DA', '\n', '\x15C', '\x3', 
		'\x15C', '\x3', '\x15C', '\x3', '\x15C', '\x5', '\x15C', '\x16DF', '\n', 
		'\x15C', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x5', '\x15D', '\x16E6', '\n', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x5', '\x15D', '\x16EC', 
		'\n', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x6', '\x15D', '\x1704', '\n', '\x15D', '\r', '\x15D', '\xE', 
		'\x15D', '\x1705', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x5', '\x15D', '\x1725', 
		'\n', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x5', '\x15D', '\x1739', '\n', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x5', '\x15D', '\x173F', 
		'\n', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x5', '\x15D', '\x1743', 
		'\n', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x5', '\x15D', 
		'\x175E', '\n', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x5', '\x15D', '\x176A', '\n', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x5', '\x15D', '\x1777', '\n', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x5', '\x15D', '\x177B', '\n', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x5', '\x15D', '\x177F', '\n', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x5', 
		'\x15D', '\x179B', '\n', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x5', '\x15D', '\x17D3', '\n', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x5', '\x15D', '\x17DE', '\n', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x5', '\x15D', '\x17E2', '\n', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x5', '\x15D', 
		'\x17EE', '\n', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x5', '\x15D', '\x17F3', '\n', '\x15D', '\x3', '\x15E', '\x3', '\x15E', 
		'\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', 
		'\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', 
		'\x5', '\x15E', '\x1800', '\n', '\x15E', '\x3', '\x15E', '\x3', '\x15E', 
		'\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', 
		'\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', 
		'\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', 
		'\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x5', '\x15E', '\x1814', '\n', 
		'\x15E', '\x3', '\x15F', '\x3', '\x15F', '\x5', '\x15F', '\x1818', '\n', 
		'\x15F', '\x3', '\x15F', '\x3', '\x15F', '\x3', '\x160', '\x3', '\x160', 
		'\x3', '\x160', '\x3', '\x161', '\x3', '\x161', '\x3', '\x161', '\x3', 
		'\x161', '\x3', '\x161', '\x3', '\x161', '\x3', '\x161', '\x3', '\x161', 
		'\a', '\x161', '\x1827', '\n', '\x161', '\f', '\x161', '\xE', '\x161', 
		'\x182A', '\v', '\x161', '\x5', '\x161', '\x182C', '\n', '\x161', '\x3', 
		'\x162', '\x3', '\x162', '\x3', '\x162', '\x5', '\x162', '\x1831', '\n', 
		'\x162', '\x3', '\x162', '\x5', '\x162', '\x1834', '\n', '\x162', '\x3', 
		'\x163', '\x3', '\x163', '\x3', '\x164', '\x3', '\x164', '\x3', '\x164', 
		'\x3', '\x164', '\x3', '\x164', '\x5', '\x164', '\x183D', '\n', '\x164', 
		'\x3', '\x164', '\x3', '\x164', '\x5', '\x164', '\x1841', '\n', '\x164', 
		'\x3', '\x164', '\x3', '\x164', '\x3', '\x164', '\x3', '\x164', '\x5', 
		'\x164', '\x1847', '\n', '\x164', '\x3', '\x164', '\x3', '\x164', '\x3', 
		'\x164', '\x3', '\x164', '\x5', '\x164', '\x184D', '\n', '\x164', '\x3', 
		'\x164', '\x3', '\x164', '\x5', '\x164', '\x1851', '\n', '\x164', '\x3', 
		'\x164', '\x3', '\x164', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', 
		'\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x5', 
		'\x165', '\x185C', '\n', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', 
		'\x165', '\x3', '\x165', '\x5', '\x165', '\x1862', '\n', '\x165', '\x5', 
		'\x165', '\x1864', '\n', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', 
		'\x166', '\x3', '\x166', '\x3', '\x166', '\x5', '\x166', '\x186B', '\n', 
		'\x166', '\x3', '\x166', '\x3', '\x166', '\x3', '\x166', '\x3', '\x166', 
		'\x3', '\x166', '\x5', '\x166', '\x1872', '\n', '\x166', '\x3', '\x166', 
		'\x3', '\x166', '\x5', '\x166', '\x1876', '\n', '\x166', '\x3', '\x167', 
		'\x3', '\x167', '\x3', '\x167', '\a', '\x167', '\x187B', '\n', '\x167', 
		'\f', '\x167', '\xE', '\x167', '\x187E', '\v', '\x167', '\x3', '\x168', 
		'\x3', '\x168', '\x5', '\x168', '\x1882', '\n', '\x168', '\x3', '\x169', 
		'\x3', '\x169', '\x3', '\x169', '\x5', '\x169', '\x1887', '\n', '\x169', 
		'\x3', '\x169', '\x5', '\x169', '\x188A', '\n', '\x169', '\x3', '\x16A', 
		'\x3', '\x16A', '\x3', '\x16A', '\x5', '\x16A', '\x188F', '\n', '\x16A', 
		'\x3', '\x16B', '\x3', '\x16B', '\x5', '\x16B', '\x1893', '\n', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x5', '\x16B', '\x1897', '\n', '\x16B', 
		'\x3', '\x16C', '\x3', '\x16C', '\x3', '\x16C', '\x5', '\x16C', '\x189C', 
		'\n', '\x16C', '\x3', '\x16C', '\x3', '\x16C', '\x3', '\x16C', '\x5', 
		'\x16C', '\x18A1', '\n', '\x16C', '\x5', '\x16C', '\x18A3', '\n', '\x16C', 
		'\x3', '\x16C', '\x3', '\x16C', '\x5', '\x16C', '\x18A7', '\n', '\x16C', 
		'\x3', '\x16D', '\x3', '\x16D', '\x3', '\x16D', '\x3', '\x16E', '\x3', 
		'\x16E', '\x3', '\x16E', '\x3', '\x16F', '\x3', '\x16F', '\x3', '\x16F', 
		'\x3', '\x170', '\x3', '\x170', '\x5', '\x170', '\x18B4', '\n', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x5', '\x170', '\x18B8', '\n', '\x170', 
		'\x3', '\x170', '\x5', '\x170', '\x18BB', '\n', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x5', '\x170', '\x18BF', '\n', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x5', '\x170', '\x18C3', '\n', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x5', '\x170', '\x18C7', '\n', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x5', '\x170', '\x18CC', '\n', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x5', '\x170', '\x18D0', '\n', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x5', '\x170', '\x18D4', '\n', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x5', '\x170', '\x18DD', '\n', 
		'\x170', '\x5', '\x170', '\x18DF', '\n', '\x170', '\x3', '\x171', '\x3', 
		'\x171', '\x3', '\x171', '\a', '\x171', '\x18E4', '\n', '\x171', '\f', 
		'\x171', '\xE', '\x171', '\x18E7', '\v', '\x171', '\x3', '\x172', '\x3', 
		'\x172', '\x3', '\x172', '\x5', '\x172', '\x18EC', '\n', '\x172', '\x3', 
		'\x173', '\x3', '\x173', '\x3', '\x174', '\x3', '\x174', '\x3', '\x175', 
		'\x3', '\x175', '\x5', '\x175', '\x18F4', '\n', '\x175', '\x3', '\x176', 
		'\x3', '\x176', '\x3', '\x177', '\x3', '\x177', '\x3', '\x177', '\x3', 
		'\x177', '\x3', '\x178', '\x3', '\x178', '\x3', '\x178', '\x3', '\x178', 
		'\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', 
		'\x17A', '\x3', '\x17A', '\x3', '\x17A', '\a', '\x17A', '\x1907', '\n', 
		'\x17A', '\f', '\x17A', '\xE', '\x17A', '\x190A', '\v', '\x17A', '\x3', 
		'\x17B', '\x3', '\x17B', '\x5', '\x17B', '\x190E', '\n', '\x17B', '\x3', 
		'\x17C', '\x3', '\x17C', '\x3', '\x17C', '\a', '\x17C', '\x1913', '\n', 
		'\x17C', '\f', '\x17C', '\xE', '\x17C', '\x1916', '\v', '\x17C', '\x3', 
		'\x17D', '\x3', '\x17D', '\x3', '\x17E', '\x3', '\x17E', '\x3', '\x17E', 
		'\x3', '\x17E', '\x3', '\x17E', '\x3', '\x17F', '\x3', '\x17F', '\x3', 
		'\x17F', '\x3', '\x17F', '\x3', '\x17F', '\x3', '\x17F', '\x3', '\x17F', 
		'\x3', '\x17F', '\x3', '\x17F', '\x3', '\x17F', '\x3', '\x17F', '\x3', 
		'\x17F', '\x3', '\x17F', '\x5', '\x17F', '\x192C', '\n', '\x17F', '\x3', 
		'\x180', '\x3', '\x180', '\x3', '\x180', '\x3', '\x181', '\x3', '\x181', 
		'\x3', '\x181', '\x3', '\x181', '\x3', '\x181', '\x3', '\x182', '\x3', 
		'\x182', '\x3', '\x182', '\x3', '\x182', '\x3', '\x182', '\x3', '\x182', 
		'\x5', '\x182', '\x193C', '\n', '\x182', '\x3', '\x183', '\x3', '\x183', 
		'\x3', '\x183', '\x3', '\x184', '\x3', '\x184', '\x3', '\x184', '\x6', 
		'\x184', '\x1944', '\n', '\x184', '\r', '\x184', '\xE', '\x184', '\x1945', 
		'\x3', '\x185', '\x3', '\x185', '\x5', '\x185', '\x194A', '\n', '\x185', 
		'\x3', '\x185', '\x3', '\x185', '\x3', '\x185', '\x6', '\x185', '\x194F', 
		'\n', '\x185', '\r', '\x185', '\xE', '\x185', '\x1950', '\x3', '\x185', 
		'\x5', '\x185', '\x1954', '\n', '\x185', '\x3', '\x185', '\x3', '\x185', 
		'\x3', '\x185', '\x3', '\x186', '\x3', '\x186', '\x3', '\x186', '\x3', 
		'\x187', '\x3', '\x187', '\x3', '\x187', '\x5', '\x187', '\x195F', '\n', 
		'\x187', '\x3', '\x188', '\x3', '\x188', '\x3', '\x189', '\x3', '\x189', 
		'\x3', '\x189', '\x3', '\x18A', '\x3', '\x18A', '\x5', '\x18A', '\x1968', 
		'\n', '\x18A', '\x3', '\x18A', '\x5', '\x18A', '\x196B', '\n', '\x18A', 
		'\x3', '\x18A', '\x3', '\x18A', '\x3', '\x18B', '\x3', '\x18B', '\x3', 
		'\x18B', '\x5', '\x18B', '\x1972', '\n', '\x18B', '\x3', '\x18C', '\x3', 
		'\x18C', '\x3', '\x18C', '\x5', '\x18C', '\x1977', '\n', '\x18C', '\x3', 
		'\x18D', '\x3', '\x18D', '\x3', '\x18D', '\x3', '\x18D', '\x3', '\x18D', 
		'\x3', '\x18E', '\x3', '\x18E', '\x3', '\x18E', '\x3', '\x18E', '\x3', 
		'\x18E', '\x3', '\x18E', '\x3', '\x18E', '\x3', '\x18F', '\x3', '\x18F', 
		'\x3', '\x18F', '\x3', '\x18F', '\x3', '\x18F', '\x3', '\x18F', '\x3', 
		'\x18F', '\x3', '\x190', '\x3', '\x190', '\x3', '\x190', '\x6', '\x190', 
		'\x198F', '\n', '\x190', '\r', '\x190', '\xE', '\x190', '\x1990', '\x3', 
		'\x191', '\x3', '\x191', '\x3', '\x191', '\x3', '\x191', '\x5', '\x191', 
		'\x1997', '\n', '\x191', '\x3', '\x192', '\x3', '\x192', '\x3', '\x192', 
		'\x3', '\x192', '\x5', '\x192', '\x199D', '\n', '\x192', '\x3', '\x192', 
		'\x3', '\x192', '\x5', '\x192', '\x19A1', '\n', '\x192', '\x3', '\x193', 
		'\x3', '\x193', '\x3', '\x193', '\x3', '\x193', '\x3', '\x193', '\x3', 
		'\x193', '\x3', '\x194', '\x3', '\x194', '\x5', '\x194', '\x19AB', '\n', 
		'\x194', '\x3', '\x195', '\x3', '\x195', '\x5', '\x195', '\x19AF', '\n', 
		'\x195', '\x3', '\x195', '\x3', '\x195', '\x3', '\x196', '\x3', '\x196', 
		'\x3', '\x196', '\x3', '\x196', '\x3', '\x196', '\x3', '\x196', '\x3', 
		'\x196', '\a', '\x196', '\x19BA', '\n', '\x196', '\f', '\x196', '\xE', 
		'\x196', '\x19BD', '\v', '\x196', '\x3', '\x196', '\x3', '\x196', '\x3', 
		'\x197', '\x3', '\x197', '\x3', '\x197', '\x3', '\x197', '\x3', '\x197', 
		'\x3', '\x197', '\x3', '\x197', '\x5', '\x197', '\x19C8', '\n', '\x197', 
		'\x3', '\x198', '\x3', '\x198', '\x3', '\x198', '\x3', '\x198', '\x3', 
		'\x198', '\x3', '\x198', '\x3', '\x199', '\x3', '\x199', '\x3', '\x199', 
		'\x3', '\x19A', '\x3', '\x19A', '\x3', '\x19A', '\x3', '\x19B', '\x3', 
		'\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x5', '\x19B', '\x19DA', '\n', 
		'\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', 
		'\a', '\x19B', '\x19E0', '\n', '\x19B', '\f', '\x19B', '\xE', '\x19B', 
		'\x19E3', '\v', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', 
		'\x3', '\x19B', '\x3', '\x19B', '\a', '\x19B', '\x19EA', '\n', '\x19B', 
		'\f', '\x19B', '\xE', '\x19B', '\x19ED', '\v', '\x19B', '\x5', '\x19B', 
		'\x19EF', '\n', '\x19B', '\x3', '\x19C', '\x3', '\x19C', '\x3', '\x19C', 
		'\x5', '\x19C', '\x19F4', '\n', '\x19C', '\x3', '\x19D', '\x3', '\x19D', 
		'\x5', '\x19D', '\x19F8', '\n', '\x19D', '\x3', '\x19D', '\x3', '\x19D', 
		'\x3', '\x19D', '\x3', '\x19E', '\x3', '\x19E', '\x5', '\x19E', '\x19FF', 
		'\n', '\x19E', '\x3', '\x19E', '\x3', '\x19E', '\x3', '\x19E', '\x5', 
		'\x19E', '\x1A04', '\n', '\x19E', '\x3', '\x19F', '\x3', '\x19F', '\x3', 
		'\x1A0', '\x3', '\x1A0', '\x3', '\x1A0', '\x5', '\x1A0', '\x1A0B', '\n', 
		'\x1A0', '\x3', '\x1A0', '\x3', '\x1A0', '\x3', '\x1A0', '\x3', '\x1A0', 
		'\a', '\x1A0', '\x1A11', '\n', '\x1A0', '\f', '\x1A0', '\xE', '\x1A0', 
		'\x1A14', '\v', '\x1A0', '\x5', '\x1A0', '\x1A16', '\n', '\x1A0', '\x3', 
		'\x1A1', '\x3', '\x1A1', '\x3', '\x1A1', '\x5', '\x1A1', '\x1A1B', '\n', 
		'\x1A1', '\x3', '\x1A1', '\x5', '\x1A1', '\x1A1E', '\n', '\x1A1', '\x3', 
		'\x1A1', '\x3', '\x1A1', '\x3', '\x1A1', '\x3', '\x1A1', '\a', '\x1A1', 
		'\x1A24', '\n', '\x1A1', '\f', '\x1A1', '\xE', '\x1A1', '\x1A27', '\v', 
		'\x1A1', '\x5', '\x1A1', '\x1A29', '\n', '\x1A1', '\x3', '\x1A2', '\x3', 
		'\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A3', '\x3', '\x1A3', 
		'\x3', '\x1A3', '\x3', '\x1A4', '\x3', '\x1A4', '\x3', '\x1A4', '\x3', 
		'\x1A5', '\x3', '\x1A5', '\x5', '\x1A5', '\x1A37', '\n', '\x1A5', '\x3', 
		'\x1A5', '\x5', '\x1A5', '\x1A3A', '\n', '\x1A5', '\x3', '\x1A5', '\x3', 
		'\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A6', '\x3', '\x1A6', 
		'\x3', '\x1A6', '\x3', '\x1A6', '\x3', '\x1A6', '\x3', '\x1A6', '\x3', 
		'\x1A6', '\x5', '\x1A6', '\x1A47', '\n', '\x1A6', '\x3', '\x1A6', '\x3', 
		'\x1A6', '\x5', '\x1A6', '\x1A4B', '\n', '\x1A6', '\x5', '\x1A6', '\x1A4D', 
		'\n', '\x1A6', '\x3', '\x1A7', '\x3', '\x1A7', '\x3', '\x1A7', '\x5', 
		'\x1A7', '\x1A52', '\n', '\x1A7', '\x3', '\x1A8', '\x3', '\x1A8', '\x3', 
		'\x1A8', '\x5', '\x1A8', '\x1A57', '\n', '\x1A8', '\x3', '\x1A9', '\x3', 
		'\x1A9', '\x3', '\x1A9', '\x3', '\x1AA', '\x5', '\x1AA', '\x1A5D', '\n', 
		'\x1AA', '\x3', '\x1AA', '\x3', '\x1AA', '\x3', '\x1AB', '\x3', '\x1AB', 
		'\x5', '\x1AB', '\x1A63', '\n', '\x1AB', '\x3', '\x1AB', '\x3', '\x1AB', 
		'\a', '\x1AB', '\x1A67', '\n', '\x1AB', '\f', '\x1AB', '\xE', '\x1AB', 
		'\x1A6A', '\v', '\x1AB', '\x3', '\x1AB', '\x3', '\x1AB', '\x5', '\x1AB', 
		'\x1A6E', '\n', '\x1AB', '\x3', '\x1AB', '\x5', '\x1AB', '\x1A71', '\n', 
		'\x1AB', '\x3', '\x1AB', '\x3', '\x1AB', '\a', '\x1AB', '\x1A75', '\n', 
		'\x1AB', '\f', '\x1AB', '\xE', '\x1AB', '\x1A78', '\v', '\x1AB', '\x3', 
		'\x1AB', '\x3', '\x1AB', '\x5', '\x1AB', '\x1A7C', '\n', '\x1AB', '\x3', 
		'\x1AB', '\x5', '\x1AB', '\x1A7F', '\n', '\x1AB', '\x3', '\x1AB', '\x3', 
		'\x1AB', '\a', '\x1AB', '\x1A83', '\n', '\x1AB', '\f', '\x1AB', '\xE', 
		'\x1AB', '\x1A86', '\v', '\x1AB', '\x3', '\x1AB', '\x5', '\x1AB', '\x1A89', 
		'\n', '\x1AB', '\x3', '\x1AB', '\x3', '\x1AB', '\x3', '\x1AB', '\x3', 
		'\x1AB', '\x5', '\x1AB', '\x1A8F', '\n', '\x1AB', '\x5', '\x1AB', '\x1A91', 
		'\n', '\x1AB', '\x3', '\x1AB', '\x5', '\x1AB', '\x1A94', '\n', '\x1AB', 
		'\x3', '\x1AB', '\x3', '\x1AB', '\a', '\x1AB', '\x1A98', '\n', '\x1AB', 
		'\f', '\x1AB', '\xE', '\x1AB', '\x1A9B', '\v', '\x1AB', '\x3', '\x1AB', 
		'\x3', '\x1AB', '\x3', '\x1AB', '\x5', '\x1AB', '\x1AA0', '\n', '\x1AB', 
		'\x3', '\x1AB', '\x3', '\x1AB', '\x3', '\x1AB', '\x3', '\x1AB', '\x3', 
		'\x1AB', '\x3', '\x1AB', '\x5', '\x1AB', '\x1AA8', '\n', '\x1AB', '\x5', 
		'\x1AB', '\x1AAA', '\n', '\x1AB', '\x5', '\x1AB', '\x1AAC', '\n', '\x1AB', 
		'\x3', '\x1AC', '\x3', '\x1AC', '\x5', '\x1AC', '\x1AB0', '\n', '\x1AC', 
		'\x3', '\x1AD', '\x3', '\x1AD', '\a', '\x1AD', '\x1AB4', '\n', '\x1AD', 
		'\f', '\x1AD', '\xE', '\x1AD', '\x1AB7', '\v', '\x1AD', '\x3', '\x1AD', 
		'\x3', '\x1AD', '\x5', '\x1AD', '\x1ABB', '\n', '\x1AD', '\x3', '\x1AD', 
		'\x3', '\x1AD', '\x5', '\x1AD', '\x1ABF', '\n', '\x1AD', '\x3', '\x1AD', 
		'\x3', '\x1AD', '\x3', '\x1AD', '\x5', '\x1AD', '\x1AC4', '\n', '\x1AD', 
		'\x3', '\x1AD', '\x3', '\x1AD', '\a', '\x1AD', '\x1AC8', '\n', '\x1AD', 
		'\f', '\x1AD', '\xE', '\x1AD', '\x1ACB', '\v', '\x1AD', '\x3', '\x1AD', 
		'\x3', '\x1AD', '\a', '\x1AD', '\x1ACF', '\n', '\x1AD', '\f', '\x1AD', 
		'\xE', '\x1AD', '\x1AD2', '\v', '\x1AD', '\x5', '\x1AD', '\x1AD4', '\n', 
		'\x1AD', '\x5', '\x1AD', '\x1AD6', '\n', '\x1AD', '\x3', '\x1AE', '\x5', 
		'\x1AE', '\x1AD9', '\n', '\x1AE', '\x3', '\x1AE', '\x3', '\x1AE', '\x3', 
		'\x1AE', '\x3', '\x1AE', '\x3', '\x1AE', '\x3', '\x1AE', '\x3', '\x1AE', 
		'\x3', '\x1AE', '\x5', '\x1AE', '\x1AE3', '\n', '\x1AE', '\x3', '\x1AE', 
		'\x3', '\x1AE', '\x5', '\x1AE', '\x1AE7', '\n', '\x1AE', '\x3', '\x1AE', 
		'\x3', '\x1AE', '\x3', '\x1AE', '\x3', '\x1AE', '\x5', '\x1AE', '\x1AED', 
		'\n', '\x1AE', '\x3', '\x1AE', '\x3', '\x1AE', '\x3', '\x1AE', '\x3', 
		'\x1AE', '\x3', '\x1AE', '\x5', '\x1AE', '\x1AF4', '\n', '\x1AE', '\x3', 
		'\x1AE', '\x3', '\x1AE', '\x3', '\x1AE', '\x5', '\x1AE', '\x1AF9', '\n', 
		'\x1AE', '\x3', '\x1AE', '\x3', '\x1AE', '\x3', '\x1AE', '\x3', '\x1AE', 
		'\x3', '\x1AE', '\x3', '\x1AE', '\x3', '\x1AE', '\x3', '\x1AE', '\x3', 
		'\x1AE', '\x3', '\x1AE', '\x3', '\x1AE', '\x3', '\x1AE', '\x5', '\x1AE', 
		'\x1B07', '\n', '\x1AE', '\x3', '\x1AE', '\x3', '\x1AE', '\x3', '\x1AE', 
		'\x5', '\x1AE', '\x1B0C', '\n', '\x1AE', '\x3', '\x1AF', '\x3', '\x1AF', 
		'\x3', '\x1B0', '\x3', '\x1B0', '\x3', '\x1B1', '\x3', '\x1B1', '\x5', 
		'\x1B1', '\x1B14', '\n', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', '\x3', 
		'\x1B1', '\x5', '\x1B1', '\x1B19', '\n', '\x1B1', '\x3', '\x1B1', '\x3', 
		'\x1B1', '\x5', '\x1B1', '\x1B1D', '\n', '\x1B1', '\x3', '\x1B1', '\x5', 
		'\x1B1', '\x1B20', '\n', '\x1B1', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x5', '\x1B2', '\x1B25', '\n', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x5', '\x1B2', '\x1B29', '\n', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x5', '\x1B2', '\x1B31', '\n', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x5', 
		'\x1B2', '\x1B39', '\n', '\x1B2', '\x5', '\x1B2', '\x1B3B', '\n', '\x1B2', 
		'\x3', '\x1B3', '\x3', '\x1B3', '\x3', '\x1B3', '\x3', '\x1B3', '\x3', 
		'\x1B3', '\x5', '\x1B3', '\x1B42', '\n', '\x1B3', '\x3', '\x1B4', '\x3', 
		'\x1B4', '\x3', '\x1B4', '\x3', '\x1B4', '\a', '\x1B4', '\x1B48', '\n', 
		'\x1B4', '\f', '\x1B4', '\xE', '\x1B4', '\x1B4B', '\v', '\x1B4', '\x3', 
		'\x1B4', '\x3', '\x1B4', '\x3', '\x1B5', '\x3', '\x1B5', '\x5', '\x1B5', 
		'\x1B51', '\n', '\x1B5', '\x3', '\x1B5', '\x5', '\x1B5', '\x1B54', '\n', 
		'\x1B5', '\x3', '\x1B6', '\x3', '\x1B6', '\x3', '\x1B6', '\x3', '\x1B6', 
		'\a', '\x1B6', '\x1B5A', '\n', '\x1B6', '\f', '\x1B6', '\xE', '\x1B6', 
		'\x1B5D', '\v', '\x1B6', '\x3', '\x1B6', '\x3', '\x1B6', '\x3', '\x1B7', 
		'\x3', '\x1B7', '\x3', '\x1B7', '\x5', '\x1B7', '\x1B64', '\n', '\x1B7', 
		'\x5', '\x1B7', '\x1B66', '\n', '\x1B7', '\x3', '\x1B8', '\x3', '\x1B8', 
		'\x3', '\x1B8', '\x3', '\x1B8', '\x5', '\x1B8', '\x1B6C', '\n', '\x1B8', 
		'\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1BA', '\x3', '\x1BA', '\x5', 
		'\x1BA', '\x1B72', '\n', '\x1BA', '\x3', '\x1BB', '\x3', '\x1BB', '\x5', 
		'\x1BB', '\x1B76', '\n', '\x1BB', '\x3', '\x1BB', '\x3', '\x1BB', '\x3', 
		'\x1BB', '\x3', '\x1BB', '\x3', '\x1BB', '\x3', '\x1BB', '\x5', '\x1BB', 
		'\x1B7E', '\n', '\x1BB', '\x3', '\x1BC', '\x3', '\x1BC', '\x3', '\x1BD', 
		'\x3', '\x1BD', '\x3', '\x1BD', '\x3', '\x1BE', '\x3', '\x1BE', '\x3', 
		'\x1BE', '\x3', '\x1BE', '\x5', '\x1BE', '\x1B89', '\n', '\x1BE', '\x3', 
		'\x1BF', '\x3', '\x1BF', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', 
		'\x3', '\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', '\x1B92', '\n', '\x1C1', 
		'\x3', '\x1C1', '\x5', '\x1C1', '\x1B95', '\n', '\x1C1', '\x3', '\x1C1', 
		'\x3', '\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', '\x1B9A', '\n', '\x1C1', 
		'\x5', '\x1C1', '\x1B9C', '\n', '\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', 
		'\x1B9F', '\n', '\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', '\x1BA2', '\n', 
		'\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', '\x1BA6', '\n', 
		'\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', '\x1BA9', '\n', '\x1C1', '\x3', 
		'\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', '\x1BAD', '\n', '\x1C1', '\x3', 
		'\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', '\x1BB2', '\n', 
		'\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', '\x1BB5', '\n', '\x1C1', '\x3', 
		'\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', '\x1BB9', '\n', '\x1C1', '\x3', 
		'\x1C1', '\x5', '\x1C1', '\x1BBC', '\n', '\x1C1', '\x3', '\x1C1', '\x3', 
		'\x1C1', '\x5', '\x1C1', '\x1BC0', '\n', '\x1C1', '\x3', '\x1C1', '\x3', 
		'\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', '\x1BC5', '\n', '\x1C1', '\x3', 
		'\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', '\x1BC9', '\n', '\x1C1', '\x3', 
		'\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', 
		'\x3', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x3', 
		'\x1C1', '\x5', '\x1C1', '\x1BD5', '\n', '\x1C1', '\x3', '\x1C1', '\x3', 
		'\x1C1', '\x5', '\x1C1', '\x1BD9', '\n', '\x1C1', '\x3', '\x1C1', '\x3', 
		'\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', '\x1BDF', '\n', 
		'\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', '\x1BE2', '\n', '\x1C1', '\x3', 
		'\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', '\x1BE7', '\n', 
		'\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', '\x1BEB', '\n', 
		'\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', '\x1BEF', '\n', 
		'\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', 
		'\x1BF4', '\n', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', 
		'\x3', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x5', 
		'\x1C1', '\x1BFD', '\n', '\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', '\x1C00', 
		'\n', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', '\x1C04', 
		'\n', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', '\x1C08', 
		'\n', '\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', '\x1C0B', '\n', '\x1C1', 
		'\x3', '\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', '\x1C0F', '\n', '\x1C1', 
		'\x3', '\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', '\x1C13', '\n', '\x1C1', 
		'\x3', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', '\x1C18', 
		'\n', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x5', 
		'\x1C1', '\x1C1D', '\n', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x3', 
		'\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', '\x1C23', '\n', '\x1C1', '\x3', 
		'\x1C2', '\x3', '\x1C2', '\x3', '\x1C2', '\x5', '\x1C2', '\x1C28', '\n', 
		'\x1C2', '\x3', '\x1C3', '\x3', '\x1C3', '\x3', '\x1C3', '\x5', '\x1C3', 
		'\x1C2D', '\n', '\x1C3', '\x3', '\x1C4', '\x3', '\x1C4', '\x3', '\x1C4', 
		'\x3', '\x1C4', '\x3', '\x1C4', '\x3', '\x1C4', '\x3', '\x1C4', '\x3', 
		'\x1C4', '\x3', '\x1C4', '\x3', '\x1C4', '\x5', '\x1C4', '\x1C39', '\n', 
		'\x1C4', '\x3', '\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', '\x5', '\x1C5', 
		'\x1C3E', '\n', '\x1C5', '\x5', '\x1C5', '\x1C40', '\n', '\x1C5', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x5', '\x1C6', '\x1C45', '\n', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C7', '\x6', '\x1C7', 
		'\x1C4A', '\n', '\x1C7', '\r', '\x1C7', '\xE', '\x1C7', '\x1C4B', '\x3', 
		'\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', 
		'\x3', '\x1C8', '\x5', '\x1C8', '\x1C54', '\n', '\x1C8', '\x3', '\x1C8', 
		'\x3', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x5', '\x1C8', '\x1C5A', 
		'\n', '\x1C8', '\x5', '\x1C8', '\x1C5C', '\n', '\x1C8', '\x3', '\x1C9', 
		'\x3', '\x1C9', '\x5', '\x1C9', '\x1C60', '\n', '\x1C9', '\x3', '\x1C9', 
		'\x3', '\x1C9', '\x5', '\x1C9', '\x1C64', '\n', '\x1C9', '\x3', '\x1CA', 
		'\x3', '\x1CA', '\x5', '\x1CA', '\x1C68', '\n', '\x1CA', '\x3', '\x1CA', 
		'\x3', '\x1CA', '\x5', '\x1CA', '\x1C6C', '\n', '\x1CA', '\x3', '\x1CB', 
		'\x3', '\x1CB', '\x3', '\x1CB', '\x3', '\x1CB', '\x3', '\x1CC', '\x3', 
		'\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CD', 
		'\x3', '\x1CD', '\x3', '\x1CD', '\x3', '\x1CD', '\x5', '\x1CD', '\x1C7B', 
		'\n', '\x1CD', '\x3', '\x1CE', '\x3', '\x1CE', '\x3', '\x1CE', '\x5', 
		'\x1CE', '\x1C80', '\n', '\x1CE', '\x3', '\x1CF', '\x3', '\x1CF', '\x5', 
		'\x1CF', '\x1C84', '\n', '\x1CF', '\x3', '\x1CF', '\a', '\x1CF', '\x1C87', 
		'\n', '\x1CF', '\f', '\x1CF', '\xE', '\x1CF', '\x1C8A', '\v', '\x1CF', 
		'\x3', '\x1D0', '\x6', '\x1D0', '\x1C8D', '\n', '\x1D0', '\r', '\x1D0', 
		'\xE', '\x1D0', '\x1C8E', '\x3', '\x1D1', '\x3', '\x1D1', '\x5', '\x1D1', 
		'\x1C93', '\n', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', 
		'\x3', '\x1D1', '\x5', '\x1D1', '\x1C99', '\n', '\x1D1', '\x3', '\x1D1', 
		'\x3', '\x1D1', '\x5', '\x1D1', '\x1C9D', '\n', '\x1D1', '\x3', '\x1D1', 
		'\x3', '\x1D1', '\x5', '\x1D1', '\x1CA1', '\n', '\x1D1', '\x3', '\x1D1', 
		'\x3', '\x1D1', '\x3', '\x1D1', '\x5', '\x1D1', '\x1CA6', '\n', '\x1D1', 
		'\x3', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x5', '\x1D1', '\x1CAB', 
		'\n', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x5', 
		'\x1D1', '\x1CB0', '\n', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x3', 
		'\x1D1', '\x5', '\x1D1', '\x1CB5', '\n', '\x1D1', '\x3', '\x1D1', '\x3', 
		'\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x5', '\x1D1', '\x1CBB', '\n', 
		'\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', 
		'\x5', '\x1D1', '\x1CC1', '\n', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', 
		'\x3', '\x1D1', '\x5', '\x1D1', '\x1CC6', '\n', '\x1D1', '\x3', '\x1D1', 
		'\x3', '\x1D1', '\x3', '\x1D1', '\x5', '\x1D1', '\x1CCB', '\n', '\x1D1', 
		'\x3', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x5', 
		'\x1D1', '\x1CD1', '\n', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x3', 
		'\x1D1', '\x5', '\x1D1', '\x1CD6', '\n', '\x1D1', '\x3', '\x1D1', '\x3', 
		'\x1D1', '\x3', '\x1D1', '\x5', '\x1D1', '\x1CDB', '\n', '\x1D1', '\x3', 
		'\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x5', '\x1D1', '\x1CE0', '\n', 
		'\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x5', '\x1D1', 
		'\x1CE5', '\n', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', 
		'\x3', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x3', 
		'\x1D1', '\x5', '\x1D1', '\x1CEF', '\n', '\x1D1', '\x3', '\x1D1', '\x3', 
		'\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x5', '\x1D1', '\x1CF5', '\n', 
		'\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', 
		'\x5', '\x1D1', '\x1CFB', '\n', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', 
		'\x3', '\x1D1', '\x3', '\x1D1', '\x5', '\x1D1', '\x1D01', '\n', '\x1D1', 
		'\x3', '\x1D1', '\x5', '\x1D1', '\x1D04', '\n', '\x1D1', '\x3', '\x1D1', 
		'\x3', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x5', 
		'\x1D1', '\x1D0B', '\n', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x3', 
		'\x1D1', '\x5', '\x1D1', '\x1D10', '\n', '\x1D1', '\x3', '\x1D1', '\x5', 
		'\x1D1', '\x1D13', '\n', '\x1D1', '\x3', '\x1D2', '\x3', '\x1D2', '\x5', 
		'\x1D2', '\x1D17', '\n', '\x1D2', '\x3', '\x1D3', '\x5', '\x1D3', '\x1D1A', 
		'\n', '\x1D3', '\x3', '\x1D3', '\x3', '\x1D3', '\x5', '\x1D3', '\x1D1E', 
		'\n', '\x1D3', '\x3', '\x1D3', '\x3', '\x1D3', '\x3', '\x1D4', '\x5', 
		'\x1D4', '\x1D23', '\n', '\x1D4', '\x3', '\x1D4', '\x3', '\x1D4', '\x5', 
		'\x1D4', '\x1D27', '\n', '\x1D4', '\x3', '\x1D4', '\x3', '\x1D4', '\x3', 
		'\x1D5', '\x5', '\x1D5', '\x1D2C', '\n', '\x1D5', '\x3', '\x1D5', '\x3', 
		'\x1D5', '\x5', '\x1D5', '\x1D30', '\n', '\x1D5', '\x3', '\x1D5', '\x3', 
		'\x1D5', '\x3', '\x1D6', '\x3', '\x1D6', '\x3', '\x1D6', '\x3', '\x1D6', 
		'\x3', '\x1D6', '\x5', '\x1D6', '\x1D39', '\n', '\x1D6', '\x3', '\x1D6', 
		'\x5', '\x1D6', '\x1D3C', '\n', '\x1D6', '\x3', '\x1D6', '\x5', '\x1D6', 
		'\x1D3F', '\n', '\x1D6', '\x3', '\x1D7', '\x5', '\x1D7', '\x1D42', '\n', 
		'\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x5', '\x1D7', '\x1D46', '\n', 
		'\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x5', '\x1D7', '\x1D4A', '\n', 
		'\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x5', '\x1D7', '\x1D4E', '\n', 
		'\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', 
		'\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', 
		'\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', 
		'\x5', '\x1D7', '\x1D5D', '\n', '\x1D7', '\x3', '\x1D7', '\x5', '\x1D7', 
		'\x1D60', '\n', '\x1D7', '\x5', '\x1D7', '\x1D62', '\n', '\x1D7', '\x3', 
		'\x1D8', '\x3', '\x1D8', '\x3', '\x1D8', '\x5', '\x1D8', '\x1D67', '\n', 
		'\x1D8', '\x3', '\x1D8', '\x3', '\x1D8', '\x3', '\x1D8', '\x3', '\x1D8', 
		'\x3', '\x1D8', '\x3', '\x1D8', '\x3', '\x1D8', '\x5', '\x1D8', '\x1D70', 
		'\n', '\x1D8', '\x3', '\x1D8', '\x5', '\x1D8', '\x1D73', '\n', '\x1D8', 
		'\x3', '\x1D8', '\x3', '\x1D8', '\x5', '\x1D8', '\x1D77', '\n', '\x1D8', 
		'\x3', '\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', '\x3', 
		'\x1D9', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', 
		'\a', '\x1DA', '\x1D82', '\n', '\x1DA', '\f', '\x1DA', '\xE', '\x1DA', 
		'\x1D85', '\v', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DB', 
		'\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', 
		'\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', '\x1D90', '\n', '\x1DB', '\x3', 
		'\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', '\x1D95', '\n', 
		'\x1DB', '\x3', '\x1DB', '\a', '\x1DB', '\x1D98', '\n', '\x1DB', '\f', 
		'\x1DB', '\xE', '\x1DB', '\x1D9B', '\v', '\x1DB', '\x3', '\x1DB', '\x3', 
		'\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\a', '\x1DB', '\x1DA1', '\n', 
		'\x1DB', '\f', '\x1DB', '\xE', '\x1DB', '\x1DA4', '\v', '\x1DB', '\x3', 
		'\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', '\x1DA8', '\n', '\x1DB', '\x3', 
		'\x1DC', '\x3', '\x1DC', '\x3', '\x1DC', '\x3', '\x1DC', '\x3', '\x1DC', 
		'\a', '\x1DC', '\x1DAF', '\n', '\x1DC', '\f', '\x1DC', '\xE', '\x1DC', 
		'\x1DB2', '\v', '\x1DC', '\x3', '\x1DC', '\x3', '\x1DC', '\x5', '\x1DC', 
		'\x1DB6', '\n', '\x1DC', '\x3', '\x1DD', '\x3', '\x1DD', '\x5', '\x1DD', 
		'\x1DBA', '\n', '\x1DD', '\x3', '\x1DD', '\x3', '\x1DD', '\x5', '\x1DD', 
		'\x1DBE', '\n', '\x1DD', '\x3', '\x1DD', '\x3', '\x1DD', '\x5', '\x1DD', 
		'\x1DC2', '\n', '\x1DD', '\x3', '\x1DD', '\x3', '\x1DD', '\x3', '\x1DD', 
		'\x5', '\x1DD', '\x1DC7', '\n', '\x1DD', '\x3', '\x1DD', '\x3', '\x1DD', 
		'\x3', '\x1DD', '\x5', '\x1DD', '\x1DCC', '\n', '\x1DD', '\x3', '\x1DD', 
		'\x3', '\x1DD', '\x3', '\x1DD', '\x3', '\x1DD', '\x5', '\x1DD', '\x1DD2', 
		'\n', '\x1DD', '\x3', '\x1DD', '\x3', '\x1DD', '\x3', '\x1DD', '\x5', 
		'\x1DD', '\x1DD7', '\n', '\x1DD', '\x3', '\x1DD', '\x5', '\x1DD', '\x1DDA', 
		'\n', '\x1DD', '\x3', '\x1DE', '\x3', '\x1DE', '\x3', '\x1DE', '\a', '\x1DE', 
		'\x1DDF', '\n', '\x1DE', '\f', '\x1DE', '\xE', '\x1DE', '\x1DE2', '\v', 
		'\x1DE', '\x3', '\x1DF', '\x3', '\x1DF', '\x3', '\x1DF', '\x3', '\x1DF', 
		'\a', '\x1DF', '\x1DE8', '\n', '\x1DF', '\f', '\x1DF', '\xE', '\x1DF', 
		'\x1DEB', '\v', '\x1DF', '\x3', '\x1DF', '\x3', '\x1DF', '\x3', '\x1E0', 
		'\x3', '\x1E0', '\x5', '\x1E0', '\x1DF1', '\n', '\x1E0', '\x3', '\x1E1', 
		'\x3', '\x1E1', '\x3', '\x1E1', '\x3', '\x1E1', '\x3', '\x1E2', '\x3', 
		'\x1E2', '\x3', '\x1E2', '\x3', '\x1E3', '\x3', '\x1E3', '\x3', '\x1E3', 
		'\x3', '\x1E3', '\x3', '\x1E4', '\x5', '\x1E4', '\x1DFF', '\n', '\x1E4', 
		'\x3', '\x1E4', '\x3', '\x1E4', '\x3', '\x1E5', '\x3', '\x1E5', '\x3', 
		'\x1E5', '\x3', '\x1E6', '\x3', '\x1E6', '\x3', '\x1E6', '\x3', '\x1E7', 
		'\x3', '\x1E7', '\x5', '\x1E7', '\x1E0B', '\n', '\x1E7', '\x3', '\x1E8', 
		'\x3', '\x1E8', '\x3', '\x1E8', '\x3', '\x1E8', '\x3', '\x1E8', '\x3', 
		'\x1E8', '\x3', '\x1E9', '\x3', '\x1E9', '\x3', '\x1E9', '\a', '\x1E9', 
		'\x1E16', '\n', '\x1E9', '\f', '\x1E9', '\xE', '\x1E9', '\x1E19', '\v', 
		'\x1E9', '\x3', '\x1EA', '\x3', '\x1EA', '\x3', '\x1EA', '\a', '\x1EA', 
		'\x1E1E', '\n', '\x1EA', '\f', '\x1EA', '\xE', '\x1EA', '\x1E21', '\v', 
		'\x1EA', '\x3', '\x1EB', '\x3', '\x1EB', '\x3', '\x1EB', '\x3', '\x1EB', 
		'\x5', '\x1EB', '\x1E27', '\n', '\x1EB', '\x3', '\x1EC', '\x3', '\x1EC', 
		'\x3', '\x1EC', '\x3', '\x1ED', '\x3', '\x1ED', '\x6', '\x1ED', '\x1E2E', 
		'\n', '\x1ED', '\r', '\x1ED', '\xE', '\x1ED', '\x1E2F', '\x3', '\x1EE', 
		'\x3', '\x1EE', '\x3', '\x1EE', '\x3', '\x1EE', '\x5', '\x1EE', '\x1E36', 
		'\n', '\x1EE', '\x3', '\x1EE', '\x3', '\x1EE', '\x3', '\x1EE', '\x3', 
		'\x1EE', '\x3', '\x1EE', '\x3', '\x1EE', '\x5', '\x1EE', '\x1E3E', '\n', 
		'\x1EE', '\x3', '\x1EF', '\x3', '\x1EF', '\x6', '\x1EF', '\x1E42', '\n', 
		'\x1EF', '\r', '\x1EF', '\xE', '\x1EF', '\x1E43', '\x3', '\x1F0', '\x3', 
		'\x1F0', '\x3', '\x1F0', '\x3', '\x1F0', '\x3', '\x1F1', '\x3', '\x1F1', 
		'\x3', '\x1F1', '\a', '\x1F1', '\x1E4D', '\n', '\x1F1', '\f', '\x1F1', 
		'\xE', '\x1F1', '\x1E50', '\v', '\x1F1', '\x3', '\x1F2', '\x3', '\x1F2', 
		'\x3', '\x1F2', '\a', '\x1F2', '\x1E55', '\n', '\x1F2', '\f', '\x1F2', 
		'\xE', '\x1F2', '\x1E58', '\v', '\x1F2', '\x3', '\x1F3', '\x3', '\x1F3', 
		'\x3', '\x1F3', '\a', '\x1F3', '\x1E5D', '\n', '\x1F3', '\f', '\x1F3', 
		'\xE', '\x1F3', '\x1E60', '\v', '\x1F3', '\x3', '\x1F4', '\x3', '\x1F4', 
		'\x3', '\x1F4', '\x3', '\x1F4', '\x3', '\x1F4', '\x5', '\x1F4', '\x1E67', 
		'\n', '\x1F4', '\x3', '\x1F4', '\x3', '\x1F4', '\x3', '\x1F4', '\x3', 
		'\x1F4', '\x3', '\x1F4', '\x3', '\x1F4', '\x3', '\x1F4', '\x3', '\x1F4', 
		'\x3', '\x1F4', '\x5', '\x1F4', '\x1E72', '\n', '\x1F4', '\x5', '\x1F4', 
		'\x1E74', '\n', '\x1F4', '\x5', '\x1F4', '\x1E76', '\n', '\x1F4', '\x5', 
		'\x1F4', '\x1E78', '\n', '\x1F4', '\x3', '\x1F5', '\x3', '\x1F5', '\x3', 
		'\x1F5', '\x3', '\x1F5', '\x5', '\x1F5', '\x1E7E', '\n', '\x1F5', '\x3', 
		'\x1F5', '\x3', '\x1F5', '\x3', '\x1F5', '\x3', '\x1F5', '\x5', '\x1F5', 
		'\x1E84', '\n', '\x1F5', '\x3', '\x1F5', '\x5', '\x1F5', '\x1E87', '\n', 
		'\x1F5', '\x3', '\x1F5', '\x3', '\x1F5', '\x3', '\x1F5', '\x3', '\x1F5', 
		'\x3', '\x1F5', '\x5', '\x1F5', '\x1E8E', '\n', '\x1F5', '\x5', '\x1F5', 
		'\x1E90', '\n', '\x1F5', '\x5', '\x1F5', '\x1E92', '\n', '\x1F5', '\x3', 
		'\x1F5', '\x5', '\x1F5', '\x1E95', '\n', '\x1F5', '\x5', '\x1F5', '\x1E97', 
		'\n', '\x1F5', '\x3', '\x1F6', '\x3', '\x1F6', '\x3', '\x1F6', '\x3', 
		'\x1F6', '\x3', '\x1F7', '\x3', '\x1F7', '\x3', '\x1F7', '\x3', '\x1F7', 
		'\x3', '\x1F8', '\x3', '\x1F8', '\x3', '\x1F8', '\x3', '\x1F9', '\x3', 
		'\x1F9', '\x3', '\x1F9', '\x3', '\x1F9', '\x5', '\x1F9', '\x1EA8', '\n', 
		'\x1F9', '\x3', '\x1F9', '\x3', '\x1F9', '\x5', '\x1F9', '\x1EAC', '\n', 
		'\x1F9', '\x5', '\x1F9', '\x1EAE', '\n', '\x1F9', '\x3', '\x1FA', '\x3', 
		'\x1FA', '\x3', '\x1FA', '\x3', '\x1FB', '\x3', '\x1FB', '\x5', '\x1FB', 
		'\x1EB5', '\n', '\x1FB', '\x3', '\x1FC', '\x3', '\x1FC', '\x3', '\x1FC', 
		'\x3', '\x1FD', '\x3', '\x1FD', '\x3', '\x1FE', '\x3', '\x1FE', '\x3', 
		'\x1FE', '\x3', '\x1FE', '\x3', '\x1FF', '\x3', '\x1FF', '\x3', '\x1FF', 
		'\x5', '\x1FF', '\x1EC3', '\n', '\x1FF', '\x5', '\x1FF', '\x1EC5', '\n', 
		'\x1FF', '\x3', '\x200', '\x3', '\x200', '\x3', '\x200', '\x3', '\x200', 
		'\x5', '\x200', '\x1ECB', '\n', '\x200', '\x3', '\x201', '\x3', '\x201', 
		'\x3', '\x202', '\x3', '\x202', '\x3', '\x202', '\x3', '\x202', '\a', 
		'\x202', '\x1ED3', '\n', '\x202', '\f', '\x202', '\xE', '\x202', '\x1ED6', 
		'\v', '\x202', '\x3', '\x202', '\x3', '\x202', '\x3', '\x203', '\x3', 
		'\x203', '\x3', '\x204', '\x3', '\x204', '\x5', '\x204', '\x1EDE', '\n', 
		'\x204', '\x3', '\x205', '\x3', '\x205', '\x3', '\x206', '\x3', '\x206', 
		'\x3', '\x207', '\x3', '\x207', '\x3', '\x207', '\x3', '\x207', '\x3', 
		'\x207', '\x5', '\x207', '\x1EE9', '\n', '\x207', '\x3', '\x207', '\x3', 
		'\x207', '\x3', '\x208', '\x3', '\x208', '\x3', '\x209', '\x3', '\x209', 
		'\x3', '\x20A', '\x3', '\x20A', '\x3', '\x20B', '\x3', '\x20B', '\x3', 
		'\x20C', '\x3', '\x20C', '\x3', '\x20D', '\x3', '\x20D', '\x3', '\x20E', 
		'\x3', '\x20E', '\x3', '\x20F', '\x3', '\x20F', '\x3', '\x210', '\x3', 
		'\x210', '\x5', '\x210', '\x1EFF', '\n', '\x210', '\x3', '\x211', '\x3', 
		'\x211', '\x5', '\x211', '\x1F03', '\n', '\x211', '\x3', '\x212', '\x3', 
		'\x212', '\x3', '\x213', '\x3', '\x213', '\x3', '\x214', '\x3', '\x214', 
		'\x3', '\x215', '\x3', '\x215', '\x3', '\x216', '\x3', '\x216', '\x3', 
		'\x217', '\x3', '\x217', '\x3', '\x218', '\x3', '\x218', '\x3', '\x219', 
		'\x3', '\x219', '\x3', '\x21A', '\x3', '\x21A', '\x3', '\x21B', '\x3', 
		'\x21B', '\x3', '\x21C', '\x3', '\x21C', '\x5', '\x21C', '\x1F1B', '\n', 
		'\x21C', '\x3', '\x21D', '\x3', '\x21D', '\x3', '\x21D', '\x3', '\x21E', 
		'\x3', '\x21E', '\x3', '\x21E', '\x3', '\x21E', '\x3', '\x21E', '\x3', 
		'\x21E', '\x5', '\x21E', '\x1F26', '\n', '\x21E', '\x5', '\x21E', '\x1F28', 
		'\n', '\x21E', '\x3', '\x21F', '\x3', '\x21F', '\x5', '\x21F', '\x1F2C', 
		'\n', '\x21F', '\x3', '\x220', '\x3', '\x220', '\x3', '\x220', '\a', '\x220', 
		'\x1F31', '\n', '\x220', '\f', '\x220', '\xE', '\x220', '\x1F34', '\v', 
		'\x220', '\x3', '\x221', '\x3', '\x221', '\x3', '\x221', '\a', '\x221', 
		'\x1F39', '\n', '\x221', '\f', '\x221', '\xE', '\x221', '\x1F3C', '\v', 
		'\x221', '\x3', '\x222', '\x3', '\x222', '\x3', '\x223', '\x3', '\x223', 
		'\x5', '\x223', '\x1F42', '\n', '\x223', '\x3', '\x224', '\x3', '\x224', 
		'\x3', '\x225', '\x3', '\x225', '\x5', '\x225', '\x1F48', '\n', '\x225', 
		'\x3', '\x226', '\x3', '\x226', '\x3', '\x227', '\x3', '\x227', '\x3', 
		'\x228', '\x3', '\x228', '\x3', '\x229', '\x3', '\x229', '\x3', '\x22A', 
		'\x3', '\x22A', '\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', '\x5', 
		'\x22B', '\x1F57', '\n', '\x22B', '\x3', '\x22C', '\x3', '\x22C', '\x5', 
		'\x22C', '\x1F5B', '\n', '\x22C', '\x3', '\x22D', '\x3', '\x22D', '\x3', 
		'\x22D', '\a', '\x22D', '\x1F60', '\n', '\x22D', '\f', '\x22D', '\xE', 
		'\x22D', '\x1F63', '\v', '\x22D', '\x3', '\x22E', '\x3', '\x22E', '\x3', 
		'\x22E', '\x3', '\x22E', '\x3', '\x22F', '\x3', '\x22F', '\x5', '\x22F', 
		'\x1F6B', '\n', '\x22F', '\x3', '\x230', '\x3', '\x230', '\x3', '\x230', 
		'\x5', '\x230', '\x1F70', '\n', '\x230', '\x5', '\x230', '\x1F72', '\n', 
		'\x230', '\x3', '\x230', '\x3', '\x230', '\x3', '\x230', '\x3', '\x230', 
		'\x5', '\x230', '\x1F78', '\n', '\x230', '\x3', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x3', '\x232', '\x3', '\x232', '\x3', '\x233', '\x3', 
		'\x233', '\x3', '\x234', '\x3', '\x234', '\x3', '\x235', '\x3', '\x235', 
		'\x3', '\x235', '\x3', '\x235', '\x3', '\x235', '\x5', '\x235', '\x1F88', 
		'\n', '\x235', '\x3', '\x236', '\x3', '\x236', '\x3', '\x236', '\x3', 
		'\x236', '\x3', '\x236', '\x3', '\x236', '\x5', '\x236', '\x1F90', '\n', 
		'\x236', '\x3', '\x236', '\x5', '\x236', '\x1F93', '\n', '\x236', '\x3', 
		'\x237', '\x3', '\x237', '\x3', '\x237', '\x3', '\x237', '\x3', '\x237', 
		'\x5', '\x237', '\x1F9A', '\n', '\x237', '\x3', '\x238', '\x3', '\x238', 
		'\x3', '\x238', '\x3', '\x238', '\a', '\x238', '\x1FA0', '\n', '\x238', 
		'\f', '\x238', '\xE', '\x238', '\x1FA3', '\v', '\x238', '\x3', '\x238', 
		'\x3', '\x238', '\x3', '\x239', '\x3', '\x239', '\x3', '\x239', '\x5', 
		'\x239', '\x1FAA', '\n', '\x239', '\x3', '\x23A', '\x3', '\x23A', '\x3', 
		'\x23A', '\x5', '\x23A', '\x1FAF', '\n', '\x23A', '\x3', '\x23B', '\x3', 
		'\x23B', '\x3', '\x23B', '\x5', '\x23B', '\x1FB4', '\n', '\x23B', '\x3', 
		'\x23C', '\x5', '\x23C', '\x1FB7', '\n', '\x23C', '\x3', '\x23C', '\x3', 
		'\x23C', '\x5', '\x23C', '\x1FBB', '\n', '\x23C', '\x3', '\x23C', '\a', 
		'\x23C', '\x1FBE', '\n', '\x23C', '\f', '\x23C', '\xE', '\x23C', '\x1FC1', 
		'\v', '\x23C', '\x3', '\x23D', '\x3', '\x23D', '\x3', '\x23E', '\x3', 
		'\x23E', '\x3', '\x23E', '\a', '\x23E', '\x1FC8', '\n', '\x23E', '\f', 
		'\x23E', '\xE', '\x23E', '\x1FCB', '\v', '\x23E', '\x3', '\x23F', '\x3', 
		'\x23F', '\x3', '\x240', '\x3', '\x240', '\x3', '\x241', '\x3', '\x241', 
		'\x3', '\x242', '\x3', '\x242', '\x3', '\x242', '\x3', '\x242', '\x3', 
		'\x242', '\x3', '\x242', '\x5', '\x242', '\x1FD9', '\n', '\x242', '\x3', 
		'\x243', '\x3', '\x243', '\x5', '\x243', '\x1FDD', '\n', '\x243', '\x3', 
		'\x244', '\x3', '\x244', '\x3', '\x245', '\x3', '\x245', '\x3', '\x245', 
		'\x3', '\x245', '\x3', '\x245', '\x3', '\x245', '\x3', '\x246', '\x3', 
		'\x246', '\x5', '\x246', '\x1FE9', '\n', '\x246', '\x3', '\x247', '\x3', 
		'\x247', '\x5', '\x247', '\x1FED', '\n', '\x247', '\x3', '\x248', '\x3', 
		'\x248', '\x5', '\x248', '\x1FF1', '\n', '\x248', '\x3', '\x249', '\x3', 
		'\x249', '\x5', '\x249', '\x1FF5', '\n', '\x249', '\x3', '\x24A', '\x3', 
		'\x24A', '\x3', '\x24A', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24C', 
		'\x3', '\x24C', '\x3', '\x24D', '\x3', '\x24D', '\x3', '\x24D', '\x3', 
		'\x24D', '\x3', '\x24D', '\x3', '\x24D', '\x5', '\x24D', '\x2004', '\n', 
		'\x24D', '\x3', '\x24E', '\x3', '\x24E', '\x3', '\x24E', '\x3', '\x24E', 
		'\x3', '\x24E', '\x3', '\x24E', '\x3', '\x24E', '\x3', '\x24E', '\x3', 
		'\x24E', '\x3', '\x24E', '\x5', '\x24E', '\x2010', '\n', '\x24E', '\x3', 
		'\x24F', '\x3', '\x24F', '\x3', '\x24F', '\x3', '\x24F', '\x3', '\x24F', 
		'\x3', '\x24F', '\x3', '\x24F', '\x3', '\x24F', '\x5', '\x24F', '\x201A', 
		'\n', '\x24F', '\x3', '\x24F', '\x3', '\x24F', '\x3', '\x24F', '\x3', 
		'\x24F', '\x3', '\x24F', '\x5', '\x24F', '\x2021', '\n', '\x24F', '\x5', 
		'\x24F', '\x2023', '\n', '\x24F', '\x3', '\x250', '\x3', '\x250', '\x3', 
		'\x251', '\x3', '\x251', '\x3', '\x252', '\x3', '\x252', '\x3', '\x252', 
		'\x3', '\x252', '\x3', '\x252', '\x3', '\x252', '\x3', '\x252', '\x3', 
		'\x252', '\x3', '\x252', '\x3', '\x252', '\x3', '\x252', '\x5', '\x252', 
		'\x2034', '\n', '\x252', '\x3', '\x252', '\x3', '\x252', '\x3', '\x252', 
		'\x5', '\x252', '\x2039', '\n', '\x252', '\x5', '\x252', '\x203B', '\n', 
		'\x252', '\x3', '\x253', '\x3', '\x253', '\x3', '\x254', '\x3', '\x254', 
		'\x3', '\x255', '\x3', '\x255', '\x3', '\x255', '\x5', '\x255', '\x2044', 
		'\n', '\x255', '\x3', '\x255', '\x3', '\x255', '\x3', '\x255', '\x5', 
		'\x255', '\x2049', '\n', '\x255', '\x5', '\x255', '\x204B', '\n', '\x255', 
		'\x3', '\x256', '\x3', '\x256', '\x3', '\x256', '\x3', '\x256', '\x5', 
		'\x256', '\x2051', '\n', '\x256', '\x3', '\x257', '\x3', '\x257', '\x3', 
		'\x258', '\x3', '\x258', '\x3', '\x258', '\x3', '\x258', '\x3', '\x258', 
		'\x5', '\x258', '\x205A', '\n', '\x258', '\x3', '\x259', '\x3', '\x259', 
		'\x3', '\x259', '\x3', '\x259', '\x3', '\x259', '\x3', '\x259', '\x3', 
		'\x259', '\x3', '\x259', '\x3', '\x259', '\x5', '\x259', '\x2065', '\n', 
		'\x259', '\x3', '\x259', '\x2', '\a', '\x112', '\x290', '\x292', '\x29A', 
		'\x29C', '\x25A', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', 
		'<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 
		'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 
		'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', 
		'\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', '\x98', 
		'\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', '\xAA', 
		'\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', '\xBA', '\xBC', 
		'\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\xCA', '\xCC', '\xCE', 
		'\xD0', '\xD2', '\xD4', '\xD6', '\xD8', '\xDA', '\xDC', '\xDE', '\xE0', 
		'\xE2', '\xE4', '\xE6', '\xE8', '\xEA', '\xEC', '\xEE', '\xF0', '\xF2', 
		'\xF4', '\xF6', '\xF8', '\xFA', '\xFC', '\xFE', '\x100', '\x102', '\x104', 
		'\x106', '\x108', '\x10A', '\x10C', '\x10E', '\x110', '\x112', '\x114', 
		'\x116', '\x118', '\x11A', '\x11C', '\x11E', '\x120', '\x122', '\x124', 
		'\x126', '\x128', '\x12A', '\x12C', '\x12E', '\x130', '\x132', '\x134', 
		'\x136', '\x138', '\x13A', '\x13C', '\x13E', '\x140', '\x142', '\x144', 
		'\x146', '\x148', '\x14A', '\x14C', '\x14E', '\x150', '\x152', '\x154', 
		'\x156', '\x158', '\x15A', '\x15C', '\x15E', '\x160', '\x162', '\x164', 
		'\x166', '\x168', '\x16A', '\x16C', '\x16E', '\x170', '\x172', '\x174', 
		'\x176', '\x178', '\x17A', '\x17C', '\x17E', '\x180', '\x182', '\x184', 
		'\x186', '\x188', '\x18A', '\x18C', '\x18E', '\x190', '\x192', '\x194', 
		'\x196', '\x198', '\x19A', '\x19C', '\x19E', '\x1A0', '\x1A2', '\x1A4', 
		'\x1A6', '\x1A8', '\x1AA', '\x1AC', '\x1AE', '\x1B0', '\x1B2', '\x1B4', 
		'\x1B6', '\x1B8', '\x1BA', '\x1BC', '\x1BE', '\x1C0', '\x1C2', '\x1C4', 
		'\x1C6', '\x1C8', '\x1CA', '\x1CC', '\x1CE', '\x1D0', '\x1D2', '\x1D4', 
		'\x1D6', '\x1D8', '\x1DA', '\x1DC', '\x1DE', '\x1E0', '\x1E2', '\x1E4', 
		'\x1E6', '\x1E8', '\x1EA', '\x1EC', '\x1EE', '\x1F0', '\x1F2', '\x1F4', 
		'\x1F6', '\x1F8', '\x1FA', '\x1FC', '\x1FE', '\x200', '\x202', '\x204', 
		'\x206', '\x208', '\x20A', '\x20C', '\x20E', '\x210', '\x212', '\x214', 
		'\x216', '\x218', '\x21A', '\x21C', '\x21E', '\x220', '\x222', '\x224', 
		'\x226', '\x228', '\x22A', '\x22C', '\x22E', '\x230', '\x232', '\x234', 
		'\x236', '\x238', '\x23A', '\x23C', '\x23E', '\x240', '\x242', '\x244', 
		'\x246', '\x248', '\x24A', '\x24C', '\x24E', '\x250', '\x252', '\x254', 
		'\x256', '\x258', '\x25A', '\x25C', '\x25E', '\x260', '\x262', '\x264', 
		'\x266', '\x268', '\x26A', '\x26C', '\x26E', '\x270', '\x272', '\x274', 
		'\x276', '\x278', '\x27A', '\x27C', '\x27E', '\x280', '\x282', '\x284', 
		'\x286', '\x288', '\x28A', '\x28C', '\x28E', '\x290', '\x292', '\x294', 
		'\x296', '\x298', '\x29A', '\x29C', '\x29E', '\x2A0', '\x2A2', '\x2A4', 
		'\x2A6', '\x2A8', '\x2AA', '\x2AC', '\x2AE', '\x2B0', '\x2B2', '\x2B4', 
		'\x2B6', '\x2B8', '\x2BA', '\x2BC', '\x2BE', '\x2C0', '\x2C2', '\x2C4', 
		'\x2C6', '\x2C8', '\x2CA', '\x2CC', '\x2CE', '\x2D0', '\x2D2', '\x2D4', 
		'\x2D6', '\x2D8', '\x2DA', '\x2DC', '\x2DE', '\x2E0', '\x2E2', '\x2E4', 
		'\x2E6', '\x2E8', '\x2EA', '\x2EC', '\x2EE', '\x2F0', '\x2F2', '\x2F4', 
		'\x2F6', '\x2F8', '\x2FA', '\x2FC', '\x2FE', '\x300', '\x302', '\x304', 
		'\x306', '\x308', '\x30A', '\x30C', '\x30E', '\x310', '\x312', '\x314', 
		'\x316', '\x318', '\x31A', '\x31C', '\x31E', '\x320', '\x322', '\x324', 
		'\x326', '\x328', '\x32A', '\x32C', '\x32E', '\x330', '\x332', '\x334', 
		'\x336', '\x338', '\x33A', '\x33C', '\x33E', '\x340', '\x342', '\x344', 
		'\x346', '\x348', '\x34A', '\x34C', '\x34E', '\x350', '\x352', '\x354', 
		'\x356', '\x358', '\x35A', '\x35C', '\x35E', '\x360', '\x362', '\x364', 
		'\x366', '\x368', '\x36A', '\x36C', '\x36E', '\x370', '\x372', '\x374', 
		'\x376', '\x378', '\x37A', '\x37C', '\x37E', '\x380', '\x382', '\x384', 
		'\x386', '\x388', '\x38A', '\x38C', '\x38E', '\x390', '\x392', '\x394', 
		'\x396', '\x398', '\x39A', '\x39C', '\x39E', '\x3A0', '\x3A2', '\x3A4', 
		'\x3A6', '\x3A8', '\x3AA', '\x3AC', '\x3AE', '\x3B0', '\x3B2', '\x3B4', 
		'\x3B6', '\x3B8', '\x3BA', '\x3BC', '\x3BE', '\x3C0', '\x3C2', '\x3C4', 
		'\x3C6', '\x3C8', '\x3CA', '\x3CC', '\x3CE', '\x3D0', '\x3D2', '\x3D4', 
		'\x3D6', '\x3D8', '\x3DA', '\x3DC', '\x3DE', '\x3E0', '\x3E2', '\x3E4', 
		'\x3E6', '\x3E8', '\x3EA', '\x3EC', '\x3EE', '\x3F0', '\x3F2', '\x3F4', 
		'\x3F6', '\x3F8', '\x3FA', '\x3FC', '\x3FE', '\x400', '\x402', '\x404', 
		'\x406', '\x408', '\x40A', '\x40C', '\x40E', '\x410', '\x412', '\x414', 
		'\x416', '\x418', '\x41A', '\x41C', '\x41E', '\x420', '\x422', '\x424', 
		'\x426', '\x428', '\x42A', '\x42C', '\x42E', '\x430', '\x432', '\x434', 
		'\x436', '\x438', '\x43A', '\x43C', '\x43E', '\x440', '\x442', '\x444', 
		'\x446', '\x448', '\x44A', '\x44C', '\x44E', '\x450', '\x452', '\x454', 
		'\x456', '\x458', '\x45A', '\x45C', '\x45E', '\x460', '\x462', '\x464', 
		'\x466', '\x468', '\x46A', '\x46C', '\x46E', '\x470', '\x472', '\x474', 
		'\x476', '\x478', '\x47A', '\x47C', '\x47E', '\x480', '\x482', '\x484', 
		'\x486', '\x488', '\x48A', '\x48C', '\x48E', '\x490', '\x492', '\x494', 
		'\x496', '\x498', '\x49A', '\x49C', '\x49E', '\x4A0', '\x4A2', '\x4A4', 
		'\x4A6', '\x4A8', '\x4AA', '\x4AC', '\x4AE', '\x4B0', '\x2', '\x92', '\x3', 
		'\x2', '\x2F3', '\x2F4', '\x4', '\x2', '\x1B1', '\x1B1', '\x28E', '\x28E', 
		'\x4', '\x2', '\x1C0', '\x1C0', '\x262', '\x262', '\x4', '\x2', '\x2AB', 
		'\x2AB', '\x2AE', '\x2AE', '\x4', '\x2', '\x1AC', '\x1AC', '\x1E9', '\x1E9', 
		'\x4', '\x2', '\x10F', '\x10F', '\x258', '\x258', '\x3', '\x2', '\x2F5', 
		'\x2F6', '\x4', '\x2', 'O', 'O', '\xB6', '\xB6', '\x4', '\x2', '\x209', 
		'\x209', '\x25F', '\x25F', '\x6', '\x2', '\x14B', '\x14B', '\x1DE', '\x1DE', 
		'\x212', '\x212', '\x259', '\x259', '\x4', '\x2', 'u', 'u', '\xA3', '\xA3', 
		'\x4', '\x2', '\x113', '\x113', '\x16A', '\x16A', '\x4', '\x2', '\x112', 
		'\x112', '\x169', '\x169', '\x4', '\x2', '\xEF', '\xEF', '\x174', '\x174', 
		'\x5', '\x2', '\xD9', '\xD9', '\x15A', '\x15A', '\x168', '\x168', '\x4', 
		'\x2', '=', '=', '\x1B4', '\x1B4', '\x5', '\x2', '\x1E2', '\x1E2', '\x20F', 
		'\x20F', '\x298', '\x298', '\x4', '\x2', '\x15', '\x15', '$', '$', '\x4', 
		'\x2', '\x156', '\x156', '\x288', '\x288', '\x5', '\x2', '\x10E', '\x10E', 
		'\x209', '\x209', '\x22B', '\x22B', '\x4', '\x2', '\x96', '\x96', '\xED', 
		'\xED', '\x6', '\x2', '\x96', '\x96', '\xB0', '\xB0', '\xED', '\xED', 
		'\x105', '\x105', '\x4', '\x2', '\x181', '\x181', '\x184', '\x187', '\x5', 
		'\x2', '\x1E1', '\x1E1', '\x204', '\x204', '\x22B', '\x22B', '\x4', '\x2', 
		'\x172', '\x172', '\x2A0', '\x2A0', '\x4', '\x2', '\x63', '\x63', '\x22B', 
		'\x22B', '\x4', '\x2', 'o', 'o', '\x17A', '\x17A', '\x4', '\x2', '\x12C', 
		'\x12C', '\x222', '\x222', '\x4', '\x2', '\x1E1', '\x1E1', '\x22B', '\x22B', 
		'\b', '\x2', '\x141', '\x141', '\x1AD', '\x1AD', '\x1E6', '\x1E6', '\x204', 
		'\x204', '\x276', '\x278', '\x281', '\x281', '\x4', '\x2', '\xF4', '\xF4', 
		'\x198', '\x198', '\x4', '\x2', '\x17E', '\x180', '\x1A6', '\x1A6', '\x5', 
		'\x2', '\x12C', '\x12C', '\x255', '\x255', '\x2CC', '\x2CC', '\x4', '\x2', 
		'\x1B2', '\x1B2', '\x1E3', '\x1E3', '\x4', '\x2', '\x21E', '\x21E', '\x265', 
		'\x265', '\x4', '\x2', '\x1CE', '\x1CE', '\x20C', '\x20C', '\x4', '\x2', 
		'\x1AD', '\x1AD', '\x1E6', '\x1E6', '\x4', '\x2', '\x1F9', '\x1F9', '\x209', 
		'\x209', '\x4', '\x2', '\x20A', '\x20A', '\x21A', '\x21A', '\x4', '\x2', 
		'\x246', '\x246', '\x2AF', '\x2AF', '\x4', '\x2', ']', ']', '\x167', '\x167', 
		'\x4', '\x2', '\a', '\a', '\x32', '\x32', '\x4', '\x2', '\x125', '\x125', 
		'\x218', '\x218', '\x4', '\x2', '\xBB', '\xBB', '\x1B7', '\x1B7', '\x4', 
		'\x2', '\x13D', '\x13D', '\x13F', '\x13F', '\x4', '\x2', '\x119', '\x119', 
		'\x143', '\x143', '\x3', '\x2', '\x32', '\x33', '\x4', '\x2', '\x10', 
		'\x10', '\x1E9', '\x1E9', '\x5', '\x2', '\xF1', '\xF1', '\x178', '\x178', 
		'\x27A', '\x27A', '\x4', '\x2', '\x225', '\x225', '\x296', '\x296', '\x4', 
		'\x2', '\x1E0', '\x1E0', '\x2F0', '\x2F0', '\x5', '\x2', '\x166', '\x166', 
		'\x253', '\x253', '\x288', '\x288', '\x6', '\x2', '\x20F', '\x20F', '\x25A', 
		'\x25A', '\x267', '\x267', '\x298', '\x298', '\xF', '\x2', '\x13', '\x13', 
		':', ':', '\x87', '\x87', '\x93', '\x93', '\x107', '\x107', '\x10B', '\x10B', 
		'\x11A', '\x11A', '\x151', '\x151', '\x1E2', '\x1E2', '\x1E9', '\x1E9', 
		'\x20A', '\x20A', '\x290', '\x290', '\x299', '\x299', '\x6', '\x2', '\x12B', 
		'\x12B', '\x158', '\x158', '\x16E', '\x16E', '\x171', '\x171', '\x4', 
		'\x2', '/', '/', 'U', 'U', '\x4', '\x2', '\x1CD', '\x1CD', '\x1E9', '\x1E9', 
		'\x4', '\x2', '\xF1', '\xF1', '\x1E0', '\x1E0', '\x4', '\x2', '\x8C', 
		'\x8C', '\x10E', '\x10E', '\a', '\x2', 'R', 'R', '\x8C', '\x8C', '\x8F', 
		'\x8F', '\xD7', '\xD7', '\x10E', '\x10E', '\x5', '\x2', '\x8C', '\x8C', 
		'\x10E', '\x10E', '\x16F', '\x16F', '\x6', '\x2', '\x1AD', '\x1AD', '\x1B7', 
		'\x1B7', '\x1E0', '\x1E0', '\x244', '\x244', '\x4', '\x2', '\x12F', '\x12F', 
		'\x2E7', '\x2E7', '\x5', '\x2', '\xB9', '\xB9', '\xE5', '\xE5', '\x149', 
		'\x149', '\x4', '\x2', '\x1FC', '\x1FC', '\x213', '\x213', '\x4', '\x2', 
		'I', 'I', '\x116', '\x116', '\x5', '\x2', '\xA5', '\xA5', '\x20A', '\x20A', 
		'\x219', '\x219', '\x4', '\x2', '\x85', '\x85', '\x173', '\x173', '\x4', 
		'\x2', '\x149', '\x149', '\x170', '\x170', '\b', '\x2', 'k', 'k', '\xAA', 
		'\xAA', '\xD8', '\xD8', '\x13C', '\x13C', '\x153', '\x153', '\x1AD', '\x1AD', 
		'\x4', '\x2', '\x64', '\x64', '\x10D', '\x10D', '\a', '\x2', 'w', 'w', 
		'\x9F', '\x9F', '\x106', '\x106', '\x149', '\x149', '\x16D', '\x16D', 
		'\a', '\x2', '\x82', '\x82', '\x84', '\x84', '\x98', '\x98', '\x139', 
		'\x139', '\x1B7', '\x1B7', '\x4', '\x2', '\x16E', '\x16E', '\x2E7', '\x2E7', 
		'\x4', '\x2', 'z', 'z', '\x91', '\x91', '\x3', '\x2', '\x1E3', '\x1E4', 
		'\x5', '\x2', '\x16B', '\x16B', '\x1F6', '\x1F6', '\x292', '\x292', '\x4', 
		'\x2', '\x192', '\x192', '\x1B0', '\x1B0', '\x4', '\x2', '\x195', '\x195', 
		'\x24C', '\x24C', '\x4', '\x2', '\x42', '\x42', '\x1AD', '\x1AD', '\x4', 
		'\x2', '\x181', '\x181', '\x183', '\x188', '\x5', '\x2', '\x18B', '\x18D', 
		'\x1E7', '\x1E7', '\x239', '\x239', '\x3', '\x2', '\x189', '\x18A', '\x3', 
		'\x2', '\x190', '\x191', '\x4', '\x2', '\x189', '\x18A', '\x18F', '\x18F', 
		'\x3', '\x2', '\x1B9', '\x1BB', '\x6', '\x2', '\x2C7', '\x2C8', '\x2D5', 
		'\x2D5', '\x2D7', '\x2D7', '\x2D9', '\x2D9', '\x4', '\x2', '\x2CD', '\x2CD', 
		'\x2CF', '\x2CF', '\x4', '\x2', '\x2CA', '\x2CA', '\x2CE', '\x2CE', '\x4', 
		'\x2', '\x96', '\x96', '\xB0', '\xB0', '\x4', '\x2', '\x209', '\x209', 
		'\x2D8', '\x2D8', '\x4', '\x2', '<', '<', '\x14D', '\x14D', '\x3', '\x2', 
		'\x1D7', '\x1D8', '\x3', '\x2', '\x160', '\x161', '\x5', '\x2', 'q', 'r', 
		'\x15F', '\x15F', '\x162', '\x162', '\x4', '\x2', '\x17C', '\x17C', '\x23E', 
		'\x23E', '\x4', '\x2', '\x17C', '\x17C', '\x18E', '\x18E', '\a', '\x2', 
		'\x1D9', '\x1DC', '\x205', '\x207', '\x235', '\x236', '\x266', '\x266', 
		'\x2B1', '\x2B1', '\v', '\x2', 's', 's', '\xA0', '\xA0', '\xDB', '\xDB', 
		'\xDD', '\xDD', '\xE1', '\xE1', '\x10C', '\x10C', '\x133', '\x133', '\x175', 
		'\x175', '\x17B', '\x17B', '\x5', '\x2', '\x1CA', '\x1CA', '\x1F3', '\x1F3', 
		'\x293', '\x293', '\x4', '\x2', '\xF2', '\xF2', '\x12D', '\x12D', '\f', 
		'\x2', 'P', 'P', 'V', 'V', 'Z', 'Z', '\x66', 'h', 'n', 'n', '\xDA', '\xDA', 
		'\xE6', '\xE6', '\x132', '\x132', '\x14C', '\x14C', '\x155', '\x155', 
		'\x4', '\x2', '\x280', '\x280', '\x2A7', '\x2A7', '\x5', '\x2', '\x7F', 
		'\x7F', '\x97', '\x97', '\x1E0', '\x1E0', '\x5', '\x2', '|', '|', '\xD8', 
		'\xD8', '\x1E0', '\x1E0', '\x5', '\x2', '\x92', '\x92', '\xFA', '\xFA', 
		'\x137', '\x137', '\x5', '\x2', 'N', 'N', '\x9E', '\x9E', '\x130', '\x130', 
		'\x3', '\x2', '\x2B6', '\x2B7', '\x4', '\x2', '\x164', '\x164', '\x29B', 
		'\x29B', '\a', '\x2', '\x1B6', '\x1B6', '\x212', '\x212', '\x232', '\x232', 
		'\x270', '\x270', '\x28C', '\x28C', '\x6', '\x2', '\x97', '\x97', '\x1DE', 
		'\x1DE', '\x1F8', '\x1F8', '\x242', '\x242', '\x3', '\x2', 'L', 'M', '\x4', 
		'\x2', '\x226', '\x226', '\x231', '\x231', '\x6', '\x2', '\x99', '\x9A', 
		'\xB4', '\xB4', '\xE2', '\xE4', '\x102', '\x103', '\x5', '\x2', '.', '.', 
		'\x297', '\x297', '\x2B2', '\x2B2', '\x3', '\x2', '\x146', '\x148', '\x4', 
		'\x2', '\v', '\v', '\x157', '\x157', '\b', '\x2', '^', '^', '`', '`', 
		'\x7F', '\x7F', '\x97', '\x97', '\x114', '\x114', '\x1E0', '\x1E0', '\x5', 
		'\x2', '\x1D', '\x1D', '\x96', '\x96', '\xB0', '\xB0', '\x4', '\x2', '|', 
		'|', '\xD8', '\xD8', '\x4', '\x2', '\xB5', '\xB5', '\x255', '\x255', '\x4', 
		'\x2', '\xBA', '\xBA', '\xDE', '\xDE', '\x4', '\x2', 'o', 'o', '\x20A', 
		'\x20A', '\x5', '\x2', '\x20D', '\x20D', '\x213', '\x213', '\x24F', '\x24F', 
		'\x4', '\x2', '\x27B', '\x27B', '\x289', '\x289', '\x4', '\x2', '\x243', 
		'\x243', '\x245', '\x245', '\x4', '\x2', '\xB6', '\xB6', '\x240', '\x240', 
		'\x4', '\x2', '\x302', '\x302', '\x304', '\x304', '\x5', '\x2', '\x17E', 
		'\x180', '\x1A7', '\x1A7', '\x1A9', '\x1AA', '\x4', '\x2', '\x17E', '\x180', 
		'\x1A7', '\x1A7', '\x4', '\x2', '\x17E', '\x180', '\x1A9', '\x1AA', '\x3', 
		'\x2', '\x1A7', '\x1A8', '\x4', '\x2', '\x1F6', '\x1F6', '\x292', '\x292', 
		'\x4', '\x2', '\x1A5', '\x1A5', '\x241', '\x241', '\x3', '\x2', '\x181', 
		'\x182', '\a', '\x2', '\x9D', '\x9D', '\xB6', '\xB6', '\x136', '\x136', 
		'\x2B3', '\x2B3', '\x2C2', '\x2C2', '\x5', '\x2', '\x13', '\x13', ':', 
		':', '\x2EB', '\x2EB', '\x10', '\x2', '\x4', '\x4', '\a', '\v', '\r', 
		'\x12', '\x14', '\x15', '\x18', '\x19', '\x1B', '\x1D', '$', '%', '\'', 
		'(', '*', '+', '.', '/', '\x32', '\x36', '\x39', '\x39', '\xA4', '\xA4', 
		'\x2C6', '\x2C6', '\v', '\x2', '\x87', '\x87', '\x93', '\x93', '\xF1', 
		'\xF1', '\x107', '\x107', '\x10B', '\x10B', '\x11A', '\x11A', '\x11D', 
		'\x11D', '\x151', '\x151', '\x2E6', '\x2E6', '<', '\x2', '\x3', '\x3', 
		'\x5', '\x6', '\f', '\f', '\x16', '\x17', '\x1A', '\x1A', '\x1E', '!', 
		'#', '#', '&', '&', ')', ')', ',', '-', '\x30', '\x31', '\x37', '\x38', 
		';', '@', '\x42', '\x43', '\x45', 'i', 'k', 'k', 'm', 'v', 'x', '\x86', 
		'\x88', '\x92', '\x94', '\x9C', '\x9E', '\xA3', '\xA5', '\xA7', '\xA9', 
		'\xB5', '\xB7', '\xD2', '\xD4', '\xF0', '\xF2', '\xF4', '\xF7', '\x106', 
		'\x108', '\x10A', '\x10C', '\x112', '\x114', '\x119', '\x11B', '\x11C', 
		'\x11E', '\x12B', '\x12D', '\x12E', '\x130', '\x135', '\x137', '\x13F', 
		'\x141', '\x150', '\x152', '\x164', '\x167', '\x17B', '\x1F1', '\x1F1', 
		'\x1F4', '\x1F4', '\x246', '\x246', '\x29F', '\x29F', '\x2AE', '\x2AE', 
		'\x2B4', '\x2B7', '\x2B9', '\x2B9', '\x2BE', '\x2C0', '\x2C3', '\x2C4', 
		'\x2C9', '\x2C9', '\x2CB', '\x2CB', '\x2D2', '\x2D3', '\x2D6', '\x2D6', 
		'\x2D8', '\x2D8', '\x2DA', '\x2DB', '\x2DF', '\x2E5', '\x2E8', '\x2EA', 
		'\x2EC', '\x2F6', '\x2F8', '\x2FB', '\x2FD', '\x2FD', '\b', '\x2', '\x3', 
		'\x12', '\x14', '\x39', '\x2B4', '\x2B4', '\x2B6', '\x2B7', '\x2C6', '\x2C6', 
		'\x2F1', '\x2F4', '!', '\x2', ';', '@', '\x42', 'k', 'm', '\x86', '\x88', 
		'\x92', '\x94', '\xA3', '\xA5', '\xA7', '\xA9', '\xF0', '\xF2', '\x106', 
		'\x108', '\x10A', '\x10C', '\x119', '\x11B', '\x11C', '\x11E', '\x12B', 
		'\x12D', '\x12E', '\x130', '\x165', '\x167', '\x17B', '\x1AF', '\x1AF', 
		'\x2B9', '\x2B9', '\x2BE', '\x2C0', '\x2C3', '\x2C5', '\x2C9', '\x2C9', 
		'\x2CB', '\x2CB', '\x2D2', '\x2D3', '\x2D6', '\x2D6', '\x2D8', '\x2D8', 
		'\x2DA', '\x2DB', '\x2DF', '\x2E5', '\x2E8', '\x2E9', '\x2ED', '\x2EE', 
		'\x2F0', '\x2F0', '\x2F5', '\x2F6', '\x2F8', '\x2F9', '\a', '\x2', 'l', 
		'l', '\xA4', '\xA4', '\x12C', '\x12C', '\x12F', '\x12F', '\x166', '\x166', 
		'\b', '\x2', '\x151', '\x151', '\x1F1', '\x1F1', '\x1F4', '\x1F4', '\x246', 
		'\x246', '\x29F', '\x29F', '\x2AE', '\x2AE', '\x2', '\x24B1', '\x2', '\x4BE', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x4E2', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x4E4', '\x3', '\x2', '\x2', '\x2', '\b', '\x501', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x510', '\x3', '\x2', '\x2', '\x2', '\f', '\x536', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x53F', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\x54C', '\x3', '\x2', '\x2', '\x2', '\x12', '\x54E', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x553', '\x3', '\x2', '\x2', '\x2', '\x16', '\x56B', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x574', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x576', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x585', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x5E8', '\x3', '\x2', '\x2', '\x2', ' ', '\x5EC', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x5FE', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x685', '\x3', '\x2', '\x2', '\x2', '&', '\x68A', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x68C', '\x3', '\x2', '\x2', '\x2', '*', '\x68E', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x69C', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x6A4', '\x3', '\x2', '\x2', '\x2', '\x30', '\x6AC', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x6B7', '\x3', '\x2', '\x2', '\x2', '\x34', '\x6BB', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x6C0', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x6C2', '\x3', '\x2', '\x2', '\x2', ':', '\x6CD', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x6F2', '\x3', '\x2', '\x2', '\x2', '>', '\x6FA', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x704', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x706', '\x3', '\x2', '\x2', '\x2', '\x44', '\x71A', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x723', '\x3', '\x2', '\x2', '\x2', 'H', '\x726', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x733', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x738', '\x3', '\x2', '\x2', '\x2', 'N', '\x73C', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x743', '\x3', '\x2', '\x2', '\x2', 'R', '\x758', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x767', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x76A', '\x3', '\x2', '\x2', '\x2', 'X', '\x789', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x793', '\x3', '\x2', '\x2', '\x2', '\\', '\x796', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x79F', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x7A1', '\x3', '\x2', '\x2', '\x2', '\x62', '\x7AD', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x7C6', '\x3', '\x2', '\x2', '\x2', '\x66', '\x7E1', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x7EF', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x7F2', '\x3', '\x2', '\x2', '\x2', 'l', '\x807', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x80A', '\x3', '\x2', '\x2', '\x2', 'p', '\x843', 
		'\x3', '\x2', '\x2', '\x2', 'r', '\x845', '\x3', '\x2', '\x2', '\x2', 
		't', '\x849', '\x3', '\x2', '\x2', '\x2', 'v', '\x852', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x862', '\x3', '\x2', '\x2', '\x2', 'z', '\x864', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x86C', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x886', '\x3', '\x2', '\x2', '\x2', '\x80', '\x888', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x894', '\x3', '\x2', '\x2', '\x2', '\x84', '\x8A3', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x8A5', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x8A8', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8BE', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x8C0', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8C6', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x8CC', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x8D2', '\x3', '\x2', '\x2', '\x2', '\x94', '\x8D8', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x8DE', '\x3', '\x2', '\x2', '\x2', '\x98', '\x8E5', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x8ED', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x8EF', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x8F5', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\x8FB', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x902', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\x914', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\x916', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x91A', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\x91F', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x92F', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\x934', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\x955', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x974', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\x985', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x987', 
		'\x3', '\x2', '\x2', '\x2', '\xB8', '\x99B', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\x9A1', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x9A7', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\x9AD', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x9B4', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\x9BD', '\x3', '\x2', '\x2', '\x2', 
		'\xC4', '\x9CE', '\x3', '\x2', '\x2', '\x2', '\xC6', '\x9D0', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\x9D7', '\x3', '\x2', '\x2', '\x2', '\xCA', '\x9E1', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\x9EF', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\x9F5', '\x3', '\x2', '\x2', '\x2', '\xD0', '\x9FD', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\xA03', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xA0B', 
		'\x3', '\x2', '\x2', '\x2', '\xD6', '\xA11', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\xA1B', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xA1F', '\x3', '\x2', 
		'\x2', '\x2', '\xDC', '\xA25', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xA2A', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\xA35', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\xA60', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xA66', '\x3', '\x2', 
		'\x2', '\x2', '\xE6', '\xA68', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xA6F', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\xA8D', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', '\xA8F', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xAA6', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\xAAD', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xAB1', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\xAB9', '\x3', '\x2', '\x2', '\x2', 
		'\xF6', '\xAC3', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xAC5', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\xAD7', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xAE3', 
		'\x3', '\x2', '\x2', '\x2', '\xFE', '\xAE9', '\x3', '\x2', '\x2', '\x2', 
		'\x100', '\xB0A', '\x3', '\x2', '\x2', '\x2', '\x102', '\xB0C', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\xB14', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\xB1D', '\x3', '\x2', '\x2', '\x2', '\x108', '\xB25', '\x3', '\x2', '\x2', 
		'\x2', '\x10A', '\xB31', '\x3', '\x2', '\x2', '\x2', '\x10C', '\xB45', 
		'\x3', '\x2', '\x2', '\x2', '\x10E', '\xB4E', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\xB72', '\x3', '\x2', '\x2', '\x2', '\x112', '\xB7F', '\x3', 
		'\x2', '\x2', '\x2', '\x114', '\xB8F', '\x3', '\x2', '\x2', '\x2', '\x116', 
		'\xB96', '\x3', '\x2', '\x2', '\x2', '\x118', '\xBB1', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\xBB3', '\x3', '\x2', '\x2', '\x2', '\x11C', '\xBB5', 
		'\x3', '\x2', '\x2', '\x2', '\x11E', '\xBB8', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\xBBB', '\x3', '\x2', '\x2', '\x2', '\x122', '\xBC2', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '\xBC4', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\xBE2', '\x3', '\x2', '\x2', '\x2', '\x128', '\xBEE', '\x3', '\x2', '\x2', 
		'\x2', '\x12A', '\xBF1', '\x3', '\x2', '\x2', '\x2', '\x12C', '\xBFA', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\xBFE', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '\xC03', '\x3', '\x2', '\x2', '\x2', '\x132', '\xC10', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\xC15', '\x3', '\x2', '\x2', '\x2', '\x136', 
		'\xC19', '\x3', '\x2', '\x2', '\x2', '\x138', '\xC29', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '\xC2B', '\x3', '\x2', '\x2', '\x2', '\x13C', '\xC3D', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\xC3F', '\x3', '\x2', '\x2', '\x2', 
		'\x140', '\xC48', '\x3', '\x2', '\x2', '\x2', '\x142', '\xC54', '\x3', 
		'\x2', '\x2', '\x2', '\x144', '\xC5B', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\xC66', '\x3', '\x2', '\x2', '\x2', '\x148', '\xC68', '\x3', '\x2', '\x2', 
		'\x2', '\x14A', '\xC6C', '\x3', '\x2', '\x2', '\x2', '\x14C', '\xC6E', 
		'\x3', '\x2', '\x2', '\x2', '\x14E', '\xC73', '\x3', '\x2', '\x2', '\x2', 
		'\x150', '\xC83', '\x3', '\x2', '\x2', '\x2', '\x152', '\xC94', '\x3', 
		'\x2', '\x2', '\x2', '\x154', '\xC99', '\x3', '\x2', '\x2', '\x2', '\x156', 
		'\xC9E', '\x3', '\x2', '\x2', '\x2', '\x158', '\xCA2', '\x3', '\x2', '\x2', 
		'\x2', '\x15A', '\xCB0', '\x3', '\x2', '\x2', '\x2', '\x15C', '\xCB3', 
		'\x3', '\x2', '\x2', '\x2', '\x15E', '\xCB9', '\x3', '\x2', '\x2', '\x2', 
		'\x160', '\xCC6', '\x3', '\x2', '\x2', '\x2', '\x162', '\xCCE', '\x3', 
		'\x2', '\x2', '\x2', '\x164', '\xCE8', '\x3', '\x2', '\x2', '\x2', '\x166', 
		'\xCF5', '\x3', '\x2', '\x2', '\x2', '\x168', '\xCFC', '\x3', '\x2', '\x2', 
		'\x2', '\x16A', '\xCFE', '\x3', '\x2', '\x2', '\x2', '\x16C', '\xD0A', 
		'\x3', '\x2', '\x2', '\x2', '\x16E', '\xD0C', '\x3', '\x2', '\x2', '\x2', 
		'\x170', '\xD16', '\x3', '\x2', '\x2', '\x2', '\x172', '\xD2E', '\x3', 
		'\x2', '\x2', '\x2', '\x174', '\xD30', '\x3', '\x2', '\x2', '\x2', '\x176', 
		'\xD37', '\x3', '\x2', '\x2', '\x2', '\x178', '\xD41', '\x3', '\x2', '\x2', 
		'\x2', '\x17A', '\xD64', '\x3', '\x2', '\x2', '\x2', '\x17C', '\xD6E', 
		'\x3', '\x2', '\x2', '\x2', '\x17E', '\xD70', '\x3', '\x2', '\x2', '\x2', 
		'\x180', '\xD74', '\x3', '\x2', '\x2', '\x2', '\x182', '\xD7C', '\x3', 
		'\x2', '\x2', '\x2', '\x184', '\xD7E', '\x3', '\x2', '\x2', '\x2', '\x186', 
		'\xD83', '\x3', '\x2', '\x2', '\x2', '\x188', '\xD87', '\x3', '\x2', '\x2', 
		'\x2', '\x18A', '\xDA3', '\x3', '\x2', '\x2', '\x2', '\x18C', '\xDA5', 
		'\x3', '\x2', '\x2', '\x2', '\x18E', '\xDA7', '\x3', '\x2', '\x2', '\x2', 
		'\x190', '\xDAF', '\x3', '\x2', '\x2', '\x2', '\x192', '\xDB1', '\x3', 
		'\x2', '\x2', '\x2', '\x194', '\xDB9', '\x3', '\x2', '\x2', '\x2', '\x196', 
		'\xDC3', '\x3', '\x2', '\x2', '\x2', '\x198', '\xDC7', '\x3', '\x2', '\x2', 
		'\x2', '\x19A', '\xDE0', '\x3', '\x2', '\x2', '\x2', '\x19C', '\xDFB', 
		'\x3', '\x2', '\x2', '\x2', '\x19E', '\xDFD', '\x3', '\x2', '\x2', '\x2', 
		'\x1A0', '\xE07', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\xE0F', '\x3', 
		'\x2', '\x2', '\x2', '\x1A4', '\xE16', '\x3', '\x2', '\x2', '\x2', '\x1A6', 
		'\xE35', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\xE4D', '\x3', '\x2', '\x2', 
		'\x2', '\x1AA', '\xE4F', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\xE5D', 
		'\x3', '\x2', '\x2', '\x2', '\x1AE', '\xE5F', '\x3', '\x2', '\x2', '\x2', 
		'\x1B0', '\xE82', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\xE84', '\x3', 
		'\x2', '\x2', '\x2', '\x1B4', '\xEAE', '\x3', '\x2', '\x2', '\x2', '\x1B6', 
		'\xEBE', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\xEC0', '\x3', '\x2', '\x2', 
		'\x2', '\x1BA', '\xEC8', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\xED1', 
		'\x3', '\x2', '\x2', '\x2', '\x1BE', '\xED8', '\x3', '\x2', '\x2', '\x2', 
		'\x1C0', '\xF29', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\xF37', '\x3', 
		'\x2', '\x2', '\x2', '\x1C4', '\xF39', '\x3', '\x2', '\x2', '\x2', '\x1C6', 
		'\xF46', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\xF86', '\x3', '\x2', '\x2', 
		'\x2', '\x1CA', '\xF88', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\xF90', 
		'\x3', '\x2', '\x2', '\x2', '\x1CE', '\xF98', '\x3', '\x2', '\x2', '\x2', 
		'\x1D0', '\xFA0', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\xFA2', '\x3', 
		'\x2', '\x2', '\x2', '\x1D4', '\xFBF', '\x3', '\x2', '\x2', '\x2', '\x1D6', 
		'\xFC8', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\xFE7', '\x3', '\x2', '\x2', 
		'\x2', '\x1DA', '\xFE9', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\xFF1', 
		'\x3', '\x2', '\x2', '\x2', '\x1DE', '\xFF3', '\x3', '\x2', '\x2', '\x2', 
		'\x1E0', '\x1001', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1003', '\x3', 
		'\x2', '\x2', '\x2', '\x1E4', '\x1009', '\x3', '\x2', '\x2', '\x2', '\x1E6', 
		'\x1011', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1036', '\x3', '\x2', 
		'\x2', '\x2', '\x1EA', '\x1038', '\x3', '\x2', '\x2', '\x2', '\x1EC', 
		'\x1048', '\x3', '\x2', '\x2', '\x2', '\x1EE', '\x104A', '\x3', '\x2', 
		'\x2', '\x2', '\x1F0', '\x1076', '\x3', '\x2', '\x2', '\x2', '\x1F2', 
		'\x1078', '\x3', '\x2', '\x2', '\x2', '\x1F4', '\x1091', '\x3', '\x2', 
		'\x2', '\x2', '\x1F6', '\x109A', '\x3', '\x2', '\x2', '\x2', '\x1F8', 
		'\x109C', '\x3', '\x2', '\x2', '\x2', '\x1FA', '\x10A1', '\x3', '\x2', 
		'\x2', '\x2', '\x1FC', '\x10CF', '\x3', '\x2', '\x2', '\x2', '\x1FE', 
		'\x10D1', '\x3', '\x2', '\x2', '\x2', '\x200', '\x10D9', '\x3', '\x2', 
		'\x2', '\x2', '\x202', '\x110A', '\x3', '\x2', '\x2', '\x2', '\x204', 
		'\x1117', '\x3', '\x2', '\x2', '\x2', '\x206', '\x1119', '\x3', '\x2', 
		'\x2', '\x2', '\x208', '\x111C', '\x3', '\x2', '\x2', '\x2', '\x20A', 
		'\x1127', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x112C', '\x3', '\x2', 
		'\x2', '\x2', '\x20E', '\x112F', '\x3', '\x2', '\x2', '\x2', '\x210', 
		'\x113E', '\x3', '\x2', '\x2', '\x2', '\x212', '\x1170', '\x3', '\x2', 
		'\x2', '\x2', '\x214', '\x1172', '\x3', '\x2', '\x2', '\x2', '\x216', 
		'\x1174', '\x3', '\x2', '\x2', '\x2', '\x218', '\x1191', '\x3', '\x2', 
		'\x2', '\x2', '\x21A', '\x11C2', '\x3', '\x2', '\x2', '\x2', '\x21C', 
		'\x11D4', '\x3', '\x2', '\x2', '\x2', '\x21E', '\x11D6', '\x3', '\x2', 
		'\x2', '\x2', '\x220', '\x11E6', '\x3', '\x2', '\x2', '\x2', '\x222', 
		'\x11F2', '\x3', '\x2', '\x2', '\x2', '\x224', '\x120B', '\x3', '\x2', 
		'\x2', '\x2', '\x226', '\x120D', '\x3', '\x2', '\x2', '\x2', '\x228', 
		'\x1215', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x1245', '\x3', '\x2', 
		'\x2', '\x2', '\x22C', '\x1254', '\x3', '\x2', '\x2', '\x2', '\x22E', 
		'\x1259', '\x3', '\x2', '\x2', '\x2', '\x230', '\x125B', '\x3', '\x2', 
		'\x2', '\x2', '\x232', '\x1273', '\x3', '\x2', '\x2', '\x2', '\x234', 
		'\x1275', '\x3', '\x2', '\x2', '\x2', '\x236', '\x12A5', '\x3', '\x2', 
		'\x2', '\x2', '\x238', '\x12A7', '\x3', '\x2', '\x2', '\x2', '\x23A', 
		'\x12AD', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x12B5', '\x3', '\x2', 
		'\x2', '\x2', '\x23E', '\x12B7', '\x3', '\x2', '\x2', '\x2', '\x240', 
		'\x12C5', '\x3', '\x2', '\x2', '\x2', '\x242', '\x12C7', '\x3', '\x2', 
		'\x2', '\x2', '\x244', '\x13AB', '\x3', '\x2', '\x2', '\x2', '\x246', 
		'\x13B2', '\x3', '\x2', '\x2', '\x2', '\x248', '\x13B4', '\x3', '\x2', 
		'\x2', '\x2', '\x24A', '\x13B6', '\x3', '\x2', '\x2', '\x2', '\x24C', 
		'\x13C0', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x13E7', '\x3', '\x2', 
		'\x2', '\x2', '\x250', '\x13EB', '\x3', '\x2', '\x2', '\x2', '\x252', 
		'\x13ED', '\x3', '\x2', '\x2', '\x2', '\x254', '\x13F5', '\x3', '\x2', 
		'\x2', '\x2', '\x256', '\x13F9', '\x3', '\x2', '\x2', '\x2', '\x258', 
		'\x1401', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x140A', '\x3', '\x2', 
		'\x2', '\x2', '\x25C', '\x140C', '\x3', '\x2', '\x2', '\x2', '\x25E', 
		'\x1423', '\x3', '\x2', '\x2', '\x2', '\x260', '\x1425', '\x3', '\x2', 
		'\x2', '\x2', '\x262', '\x1427', '\x3', '\x2', '\x2', '\x2', '\x264', 
		'\x1437', '\x3', '\x2', '\x2', '\x2', '\x266', '\x1443', '\x3', '\x2', 
		'\x2', '\x2', '\x268', '\x1445', '\x3', '\x2', '\x2', '\x2', '\x26A', 
		'\x144D', '\x3', '\x2', '\x2', '\x2', '\x26C', '\x1455', '\x3', '\x2', 
		'\x2', '\x2', '\x26E', '\x145E', '\x3', '\x2', '\x2', '\x2', '\x270', 
		'\x1460', '\x3', '\x2', '\x2', '\x2', '\x272', '\x1472', '\x3', '\x2', 
		'\x2', '\x2', '\x274', '\x1480', '\x3', '\x2', '\x2', '\x2', '\x276', 
		'\x1485', '\x3', '\x2', '\x2', '\x2', '\x278', '\x148B', '\x3', '\x2', 
		'\x2', '\x2', '\x27A', '\x148D', '\x3', '\x2', '\x2', '\x2', '\x27C', 
		'\x149D', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x14A5', '\x3', '\x2', 
		'\x2', '\x2', '\x280', '\x14AF', '\x3', '\x2', '\x2', '\x2', '\x282', 
		'\x14BC', '\x3', '\x2', '\x2', '\x2', '\x284', '\x14BE', '\x3', '\x2', 
		'\x2', '\x2', '\x286', '\x14C4', '\x3', '\x2', '\x2', '\x2', '\x288', 
		'\x14DD', '\x3', '\x2', '\x2', '\x2', '\x28A', '\x14DF', '\x3', '\x2', 
		'\x2', '\x2', '\x28C', '\x14E2', '\x3', '\x2', '\x2', '\x2', '\x28E', 
		'\x14E5', '\x3', '\x2', '\x2', '\x2', '\x290', '\x14F2', '\x3', '\x2', 
		'\x2', '\x2', '\x292', '\x1502', '\x3', '\x2', '\x2', '\x2', '\x294', 
		'\x1519', '\x3', '\x2', '\x2', '\x2', '\x296', '\x151B', '\x3', '\x2', 
		'\x2', '\x2', '\x298', '\x1540', '\x3', '\x2', '\x2', '\x2', '\x29A', 
		'\x1542', '\x3', '\x2', '\x2', '\x2', '\x29C', '\x15CA', '\x3', '\x2', 
		'\x2', '\x2', '\x29E', '\x15D7', '\x3', '\x2', '\x2', '\x2', '\x2A0', 
		'\x15E0', '\x3', '\x2', '\x2', '\x2', '\x2A2', '\x1665', '\x3', '\x2', 
		'\x2', '\x2', '\x2A4', '\x1667', '\x3', '\x2', '\x2', '\x2', '\x2A6', 
		'\x1696', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\x1698', '\x3', '\x2', 
		'\x2', '\x2', '\x2AA', '\x169D', '\x3', '\x2', '\x2', '\x2', '\x2AC', 
		'\x16A6', '\x3', '\x2', '\x2', '\x2', '\x2AE', '\x16B9', '\x3', '\x2', 
		'\x2', '\x2', '\x2B0', '\x16BC', '\x3', '\x2', '\x2', '\x2', '\x2B2', 
		'\x16C5', '\x3', '\x2', '\x2', '\x2', '\x2B4', '\x16C7', '\x3', '\x2', 
		'\x2', '\x2', '\x2B6', '\x16DE', '\x3', '\x2', '\x2', '\x2', '\x2B8', 
		'\x17F2', '\x3', '\x2', '\x2', '\x2', '\x2BA', '\x1813', '\x3', '\x2', 
		'\x2', '\x2', '\x2BC', '\x1815', '\x3', '\x2', '\x2', '\x2', '\x2BE', 
		'\x181B', '\x3', '\x2', '\x2', '\x2', '\x2C0', '\x181E', '\x3', '\x2', 
		'\x2', '\x2', '\x2C2', '\x182D', '\x3', '\x2', '\x2', '\x2', '\x2C4', 
		'\x1835', '\x3', '\x2', '\x2', '\x2', '\x2C6', '\x1837', '\x3', '\x2', 
		'\x2', '\x2', '\x2C8', '\x1854', '\x3', '\x2', '\x2', '\x2', '\x2CA', 
		'\x1875', '\x3', '\x2', '\x2', '\x2', '\x2CC', '\x1877', '\x3', '\x2', 
		'\x2', '\x2', '\x2CE', '\x187F', '\x3', '\x2', '\x2', '\x2', '\x2D0', 
		'\x1889', '\x3', '\x2', '\x2', '\x2', '\x2D2', '\x188E', '\x3', '\x2', 
		'\x2', '\x2', '\x2D4', '\x1890', '\x3', '\x2', '\x2', '\x2', '\x2D6', 
		'\x18A6', '\x3', '\x2', '\x2', '\x2', '\x2D8', '\x18A8', '\x3', '\x2', 
		'\x2', '\x2', '\x2DA', '\x18AB', '\x3', '\x2', '\x2', '\x2', '\x2DC', 
		'\x18AE', '\x3', '\x2', '\x2', '\x2', '\x2DE', '\x18DE', '\x3', '\x2', 
		'\x2', '\x2', '\x2E0', '\x18E0', '\x3', '\x2', '\x2', '\x2', '\x2E2', 
		'\x18EB', '\x3', '\x2', '\x2', '\x2', '\x2E4', '\x18ED', '\x3', '\x2', 
		'\x2', '\x2', '\x2E6', '\x18EF', '\x3', '\x2', '\x2', '\x2', '\x2E8', 
		'\x18F3', '\x3', '\x2', '\x2', '\x2', '\x2EA', '\x18F5', '\x3', '\x2', 
		'\x2', '\x2', '\x2EC', '\x18F7', '\x3', '\x2', '\x2', '\x2', '\x2EE', 
		'\x18FB', '\x3', '\x2', '\x2', '\x2', '\x2F0', '\x18FF', '\x3', '\x2', 
		'\x2', '\x2', '\x2F2', '\x1903', '\x3', '\x2', '\x2', '\x2', '\x2F4', 
		'\x190B', '\x3', '\x2', '\x2', '\x2', '\x2F6', '\x190F', '\x3', '\x2', 
		'\x2', '\x2', '\x2F8', '\x1917', '\x3', '\x2', '\x2', '\x2', '\x2FA', 
		'\x1919', '\x3', '\x2', '\x2', '\x2', '\x2FC', '\x192B', '\x3', '\x2', 
		'\x2', '\x2', '\x2FE', '\x192D', '\x3', '\x2', '\x2', '\x2', '\x300', 
		'\x1930', '\x3', '\x2', '\x2', '\x2', '\x302', '\x1935', '\x3', '\x2', 
		'\x2', '\x2', '\x304', '\x193D', '\x3', '\x2', '\x2', '\x2', '\x306', 
		'\x1943', '\x3', '\x2', '\x2', '\x2', '\x308', '\x1947', '\x3', '\x2', 
		'\x2', '\x2', '\x30A', '\x1958', '\x3', '\x2', '\x2', '\x2', '\x30C', 
		'\x195B', '\x3', '\x2', '\x2', '\x2', '\x30E', '\x1960', '\x3', '\x2', 
		'\x2', '\x2', '\x310', '\x1962', '\x3', '\x2', '\x2', '\x2', '\x312', 
		'\x1965', '\x3', '\x2', '\x2', '\x2', '\x314', '\x196E', '\x3', '\x2', 
		'\x2', '\x2', '\x316', '\x1976', '\x3', '\x2', '\x2', '\x2', '\x318', 
		'\x1978', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x197D', '\x3', '\x2', 
		'\x2', '\x2', '\x31C', '\x1984', '\x3', '\x2', '\x2', '\x2', '\x31E', 
		'\x198E', '\x3', '\x2', '\x2', '\x2', '\x320', '\x1996', '\x3', '\x2', 
		'\x2', '\x2', '\x322', '\x1998', '\x3', '\x2', '\x2', '\x2', '\x324', 
		'\x19A2', '\x3', '\x2', '\x2', '\x2', '\x326', '\x19AA', '\x3', '\x2', 
		'\x2', '\x2', '\x328', '\x19AC', '\x3', '\x2', '\x2', '\x2', '\x32A', 
		'\x19B2', '\x3', '\x2', '\x2', '\x2', '\x32C', '\x19C7', '\x3', '\x2', 
		'\x2', '\x2', '\x32E', '\x19C9', '\x3', '\x2', '\x2', '\x2', '\x330', 
		'\x19CF', '\x3', '\x2', '\x2', '\x2', '\x332', '\x19D2', '\x3', '\x2', 
		'\x2', '\x2', '\x334', '\x19D5', '\x3', '\x2', '\x2', '\x2', '\x336', 
		'\x19F3', '\x3', '\x2', '\x2', '\x2', '\x338', '\x19F7', '\x3', '\x2', 
		'\x2', '\x2', '\x33A', '\x19FE', '\x3', '\x2', '\x2', '\x2', '\x33C', 
		'\x1A05', '\x3', '\x2', '\x2', '\x2', '\x33E', '\x1A07', '\x3', '\x2', 
		'\x2', '\x2', '\x340', '\x1A17', '\x3', '\x2', '\x2', '\x2', '\x342', 
		'\x1A2A', '\x3', '\x2', '\x2', '\x2', '\x344', '\x1A2E', '\x3', '\x2', 
		'\x2', '\x2', '\x346', '\x1A31', '\x3', '\x2', '\x2', '\x2', '\x348', 
		'\x1A34', '\x3', '\x2', '\x2', '\x2', '\x34A', '\x1A4C', '\x3', '\x2', 
		'\x2', '\x2', '\x34C', '\x1A4E', '\x3', '\x2', '\x2', '\x2', '\x34E', 
		'\x1A56', '\x3', '\x2', '\x2', '\x2', '\x350', '\x1A58', '\x3', '\x2', 
		'\x2', '\x2', '\x352', '\x1A5C', '\x3', '\x2', '\x2', '\x2', '\x354', 
		'\x1AAB', '\x3', '\x2', '\x2', '\x2', '\x356', '\x1AAD', '\x3', '\x2', 
		'\x2', '\x2', '\x358', '\x1AB1', '\x3', '\x2', '\x2', '\x2', '\x35A', 
		'\x1B0B', '\x3', '\x2', '\x2', '\x2', '\x35C', '\x1B0D', '\x3', '\x2', 
		'\x2', '\x2', '\x35E', '\x1B0F', '\x3', '\x2', '\x2', '\x2', '\x360', 
		'\x1B1F', '\x3', '\x2', '\x2', '\x2', '\x362', '\x1B21', '\x3', '\x2', 
		'\x2', '\x2', '\x364', '\x1B41', '\x3', '\x2', '\x2', '\x2', '\x366', 
		'\x1B43', '\x3', '\x2', '\x2', '\x2', '\x368', '\x1B4E', '\x3', '\x2', 
		'\x2', '\x2', '\x36A', '\x1B55', '\x3', '\x2', '\x2', '\x2', '\x36C', 
		'\x1B65', '\x3', '\x2', '\x2', '\x2', '\x36E', '\x1B6B', '\x3', '\x2', 
		'\x2', '\x2', '\x370', '\x1B6D', '\x3', '\x2', '\x2', '\x2', '\x372', 
		'\x1B71', '\x3', '\x2', '\x2', '\x2', '\x374', '\x1B7D', '\x3', '\x2', 
		'\x2', '\x2', '\x376', '\x1B7F', '\x3', '\x2', '\x2', '\x2', '\x378', 
		'\x1B81', '\x3', '\x2', '\x2', '\x2', '\x37A', '\x1B88', '\x3', '\x2', 
		'\x2', '\x2', '\x37C', '\x1B8A', '\x3', '\x2', '\x2', '\x2', '\x37E', 
		'\x1B8C', '\x3', '\x2', '\x2', '\x2', '\x380', '\x1C22', '\x3', '\x2', 
		'\x2', '\x2', '\x382', '\x1C27', '\x3', '\x2', '\x2', '\x2', '\x384', 
		'\x1C2C', '\x3', '\x2', '\x2', '\x2', '\x386', '\x1C38', '\x3', '\x2', 
		'\x2', '\x2', '\x388', '\x1C3F', '\x3', '\x2', '\x2', '\x2', '\x38A', 
		'\x1C41', '\x3', '\x2', '\x2', '\x2', '\x38C', '\x1C49', '\x3', '\x2', 
		'\x2', '\x2', '\x38E', '\x1C5B', '\x3', '\x2', '\x2', '\x2', '\x390', 
		'\x1C63', '\x3', '\x2', '\x2', '\x2', '\x392', '\x1C6B', '\x3', '\x2', 
		'\x2', '\x2', '\x394', '\x1C6D', '\x3', '\x2', '\x2', '\x2', '\x396', 
		'\x1C71', '\x3', '\x2', '\x2', '\x2', '\x398', '\x1C7A', '\x3', '\x2', 
		'\x2', '\x2', '\x39A', '\x1C7F', '\x3', '\x2', '\x2', '\x2', '\x39C', 
		'\x1C81', '\x3', '\x2', '\x2', '\x2', '\x39E', '\x1C8C', '\x3', '\x2', 
		'\x2', '\x2', '\x3A0', '\x1D12', '\x3', '\x2', '\x2', '\x2', '\x3A2', 
		'\x1D16', '\x3', '\x2', '\x2', '\x2', '\x3A4', '\x1D19', '\x3', '\x2', 
		'\x2', '\x2', '\x3A6', '\x1D22', '\x3', '\x2', '\x2', '\x2', '\x3A8', 
		'\x1D2B', '\x3', '\x2', '\x2', '\x2', '\x3AA', '\x1D33', '\x3', '\x2', 
		'\x2', '\x2', '\x3AC', '\x1D61', '\x3', '\x2', '\x2', '\x2', '\x3AE', 
		'\x1D63', '\x3', '\x2', '\x2', '\x2', '\x3B0', '\x1D78', '\x3', '\x2', 
		'\x2', '\x2', '\x3B2', '\x1D7D', '\x3', '\x2', '\x2', '\x2', '\x3B4', 
		'\x1D88', '\x3', '\x2', '\x2', '\x2', '\x3B6', '\x1DB5', '\x3', '\x2', 
		'\x2', '\x2', '\x3B8', '\x1DD9', '\x3', '\x2', '\x2', '\x2', '\x3BA', 
		'\x1DDB', '\x3', '\x2', '\x2', '\x2', '\x3BC', '\x1DE3', '\x3', '\x2', 
		'\x2', '\x2', '\x3BE', '\x1DF0', '\x3', '\x2', '\x2', '\x2', '\x3C0', 
		'\x1DF2', '\x3', '\x2', '\x2', '\x2', '\x3C2', '\x1DF6', '\x3', '\x2', 
		'\x2', '\x2', '\x3C4', '\x1DF9', '\x3', '\x2', '\x2', '\x2', '\x3C6', 
		'\x1DFE', '\x3', '\x2', '\x2', '\x2', '\x3C8', '\x1E02', '\x3', '\x2', 
		'\x2', '\x2', '\x3CA', '\x1E05', '\x3', '\x2', '\x2', '\x2', '\x3CC', 
		'\x1E08', '\x3', '\x2', '\x2', '\x2', '\x3CE', '\x1E0C', '\x3', '\x2', 
		'\x2', '\x2', '\x3D0', '\x1E12', '\x3', '\x2', '\x2', '\x2', '\x3D2', 
		'\x1E1A', '\x3', '\x2', '\x2', '\x2', '\x3D4', '\x1E22', '\x3', '\x2', 
		'\x2', '\x2', '\x3D6', '\x1E28', '\x3', '\x2', '\x2', '\x2', '\x3D8', 
		'\x1E2B', '\x3', '\x2', '\x2', '\x2', '\x3DA', '\x1E3D', '\x3', '\x2', 
		'\x2', '\x2', '\x3DC', '\x1E3F', '\x3', '\x2', '\x2', '\x2', '\x3DE', 
		'\x1E45', '\x3', '\x2', '\x2', '\x2', '\x3E0', '\x1E49', '\x3', '\x2', 
		'\x2', '\x2', '\x3E2', '\x1E51', '\x3', '\x2', '\x2', '\x2', '\x3E4', 
		'\x1E59', '\x3', '\x2', '\x2', '\x2', '\x3E6', '\x1E61', '\x3', '\x2', 
		'\x2', '\x2', '\x3E8', '\x1E79', '\x3', '\x2', '\x2', '\x2', '\x3EA', 
		'\x1E98', '\x3', '\x2', '\x2', '\x2', '\x3EC', '\x1E9C', '\x3', '\x2', 
		'\x2', '\x2', '\x3EE', '\x1EA0', '\x3', '\x2', '\x2', '\x2', '\x3F0', 
		'\x1EAD', '\x3', '\x2', '\x2', '\x2', '\x3F2', '\x1EAF', '\x3', '\x2', 
		'\x2', '\x2', '\x3F4', '\x1EB4', '\x3', '\x2', '\x2', '\x2', '\x3F6', 
		'\x1EB6', '\x3', '\x2', '\x2', '\x2', '\x3F8', '\x1EB9', '\x3', '\x2', 
		'\x2', '\x2', '\x3FA', '\x1EBB', '\x3', '\x2', '\x2', '\x2', '\x3FC', 
		'\x1EC4', '\x3', '\x2', '\x2', '\x2', '\x3FE', '\x1ECA', '\x3', '\x2', 
		'\x2', '\x2', '\x400', '\x1ECC', '\x3', '\x2', '\x2', '\x2', '\x402', 
		'\x1ECE', '\x3', '\x2', '\x2', '\x2', '\x404', '\x1ED9', '\x3', '\x2', 
		'\x2', '\x2', '\x406', '\x1EDD', '\x3', '\x2', '\x2', '\x2', '\x408', 
		'\x1EDF', '\x3', '\x2', '\x2', '\x2', '\x40A', '\x1EE1', '\x3', '\x2', 
		'\x2', '\x2', '\x40C', '\x1EE3', '\x3', '\x2', '\x2', '\x2', '\x40E', 
		'\x1EEC', '\x3', '\x2', '\x2', '\x2', '\x410', '\x1EEE', '\x3', '\x2', 
		'\x2', '\x2', '\x412', '\x1EF0', '\x3', '\x2', '\x2', '\x2', '\x414', 
		'\x1EF2', '\x3', '\x2', '\x2', '\x2', '\x416', '\x1EF4', '\x3', '\x2', 
		'\x2', '\x2', '\x418', '\x1EF6', '\x3', '\x2', '\x2', '\x2', '\x41A', 
		'\x1EF8', '\x3', '\x2', '\x2', '\x2', '\x41C', '\x1EFA', '\x3', '\x2', 
		'\x2', '\x2', '\x41E', '\x1EFE', '\x3', '\x2', '\x2', '\x2', '\x420', 
		'\x1F02', '\x3', '\x2', '\x2', '\x2', '\x422', '\x1F04', '\x3', '\x2', 
		'\x2', '\x2', '\x424', '\x1F06', '\x3', '\x2', '\x2', '\x2', '\x426', 
		'\x1F08', '\x3', '\x2', '\x2', '\x2', '\x428', '\x1F0A', '\x3', '\x2', 
		'\x2', '\x2', '\x42A', '\x1F0C', '\x3', '\x2', '\x2', '\x2', '\x42C', 
		'\x1F0E', '\x3', '\x2', '\x2', '\x2', '\x42E', '\x1F10', '\x3', '\x2', 
		'\x2', '\x2', '\x430', '\x1F12', '\x3', '\x2', '\x2', '\x2', '\x432', 
		'\x1F14', '\x3', '\x2', '\x2', '\x2', '\x434', '\x1F16', '\x3', '\x2', 
		'\x2', '\x2', '\x436', '\x1F1A', '\x3', '\x2', '\x2', '\x2', '\x438', 
		'\x1F1C', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x1F1F', '\x3', '\x2', 
		'\x2', '\x2', '\x43C', '\x1F2B', '\x3', '\x2', '\x2', '\x2', '\x43E', 
		'\x1F2D', '\x3', '\x2', '\x2', '\x2', '\x440', '\x1F35', '\x3', '\x2', 
		'\x2', '\x2', '\x442', '\x1F3D', '\x3', '\x2', '\x2', '\x2', '\x444', 
		'\x1F41', '\x3', '\x2', '\x2', '\x2', '\x446', '\x1F43', '\x3', '\x2', 
		'\x2', '\x2', '\x448', '\x1F47', '\x3', '\x2', '\x2', '\x2', '\x44A', 
		'\x1F49', '\x3', '\x2', '\x2', '\x2', '\x44C', '\x1F4B', '\x3', '\x2', 
		'\x2', '\x2', '\x44E', '\x1F4D', '\x3', '\x2', '\x2', '\x2', '\x450', 
		'\x1F4F', '\x3', '\x2', '\x2', '\x2', '\x452', '\x1F51', '\x3', '\x2', 
		'\x2', '\x2', '\x454', '\x1F56', '\x3', '\x2', '\x2', '\x2', '\x456', 
		'\x1F5A', '\x3', '\x2', '\x2', '\x2', '\x458', '\x1F5C', '\x3', '\x2', 
		'\x2', '\x2', '\x45A', '\x1F64', '\x3', '\x2', '\x2', '\x2', '\x45C', 
		'\x1F68', '\x3', '\x2', '\x2', '\x2', '\x45E', '\x1F77', '\x3', '\x2', 
		'\x2', '\x2', '\x460', '\x1F79', '\x3', '\x2', '\x2', '\x2', '\x462', 
		'\x1F7C', '\x3', '\x2', '\x2', '\x2', '\x464', '\x1F7E', '\x3', '\x2', 
		'\x2', '\x2', '\x466', '\x1F80', '\x3', '\x2', '\x2', '\x2', '\x468', 
		'\x1F87', '\x3', '\x2', '\x2', '\x2', '\x46A', '\x1F92', '\x3', '\x2', 
		'\x2', '\x2', '\x46C', '\x1F99', '\x3', '\x2', '\x2', '\x2', '\x46E', 
		'\x1F9B', '\x3', '\x2', '\x2', '\x2', '\x470', '\x1FA9', '\x3', '\x2', 
		'\x2', '\x2', '\x472', '\x1FAE', '\x3', '\x2', '\x2', '\x2', '\x474', 
		'\x1FB3', '\x3', '\x2', '\x2', '\x2', '\x476', '\x1FBA', '\x3', '\x2', 
		'\x2', '\x2', '\x478', '\x1FC2', '\x3', '\x2', '\x2', '\x2', '\x47A', 
		'\x1FC4', '\x3', '\x2', '\x2', '\x2', '\x47C', '\x1FCC', '\x3', '\x2', 
		'\x2', '\x2', '\x47E', '\x1FCE', '\x3', '\x2', '\x2', '\x2', '\x480', 
		'\x1FD0', '\x3', '\x2', '\x2', '\x2', '\x482', '\x1FD8', '\x3', '\x2', 
		'\x2', '\x2', '\x484', '\x1FDC', '\x3', '\x2', '\x2', '\x2', '\x486', 
		'\x1FDE', '\x3', '\x2', '\x2', '\x2', '\x488', '\x1FE0', '\x3', '\x2', 
		'\x2', '\x2', '\x48A', '\x1FE8', '\x3', '\x2', '\x2', '\x2', '\x48C', 
		'\x1FEC', '\x3', '\x2', '\x2', '\x2', '\x48E', '\x1FF0', '\x3', '\x2', 
		'\x2', '\x2', '\x490', '\x1FF4', '\x3', '\x2', '\x2', '\x2', '\x492', 
		'\x1FF6', '\x3', '\x2', '\x2', '\x2', '\x494', '\x1FF9', '\x3', '\x2', 
		'\x2', '\x2', '\x496', '\x1FFB', '\x3', '\x2', '\x2', '\x2', '\x498', 
		'\x2003', '\x3', '\x2', '\x2', '\x2', '\x49A', '\x200F', '\x3', '\x2', 
		'\x2', '\x2', '\x49C', '\x2022', '\x3', '\x2', '\x2', '\x2', '\x49E', 
		'\x2024', '\x3', '\x2', '\x2', '\x2', '\x4A0', '\x2026', '\x3', '\x2', 
		'\x2', '\x2', '\x4A2', '\x203A', '\x3', '\x2', '\x2', '\x2', '\x4A4', 
		'\x203C', '\x3', '\x2', '\x2', '\x2', '\x4A6', '\x203E', '\x3', '\x2', 
		'\x2', '\x2', '\x4A8', '\x204A', '\x3', '\x2', '\x2', '\x2', '\x4AA', 
		'\x2050', '\x3', '\x2', '\x2', '\x2', '\x4AC', '\x2052', '\x3', '\x2', 
		'\x2', '\x2', '\x4AE', '\x2059', '\x3', '\x2', '\x2', '\x2', '\x4B0', 
		'\x2064', '\x3', '\x2', '\x2', '\x2', '\x4B2', '\x4BF', '\a', '\x2', '\x2', 
		'\x3', '\x4B3', '\x4B6', '\x5', '\x4', '\x3', '\x2', '\x4B4', '\x4B6', 
		'\x5', '\x19E', '\xD0', '\x2', '\x4B5', '\x4B3', '\x3', '\x2', '\x2', 
		'\x2', '\x4B5', '\x4B4', '\x3', '\x2', '\x2', '\x2', '\x4B6', '\x4BC', 
		'\x3', '\x2', '\x2', '\x2', '\x4B7', '\x4B9', '\a', '\x199', '\x2', '\x2', 
		'\x4B8', '\x4BA', '\a', '\x2', '\x2', '\x3', '\x4B9', '\x4B8', '\x3', 
		'\x2', '\x2', '\x2', '\x4B9', '\x4BA', '\x3', '\x2', '\x2', '\x2', '\x4BA', 
		'\x4BD', '\x3', '\x2', '\x2', '\x2', '\x4BB', '\x4BD', '\a', '\x2', '\x2', 
		'\x3', '\x4BC', '\x4B7', '\x3', '\x2', '\x2', '\x2', '\x4BC', '\x4BB', 
		'\x3', '\x2', '\x2', '\x2', '\x4BD', '\x4BF', '\x3', '\x2', '\x2', '\x2', 
		'\x4BE', '\x4B2', '\x3', '\x2', '\x2', '\x2', '\x4BE', '\x4B5', '\x3', 
		'\x2', '\x2', '\x2', '\x4BF', '\x3', '\x3', '\x2', '\x2', '\x2', '\x4C0', 
		'\x4E3', '\x5', '\x6', '\x4', '\x2', '\x4C1', '\x4E3', '\x5', 'P', ')', 
		'\x2', '\x4C2', '\x4E3', '\x5', '\xB6', '\\', '\x2', '\x4C3', '\x4E3', 
		'\x5', '\xD6', 'l', '\x2', '\x4C4', '\x4E3', '\x5', '\xDA', 'n', '\x2', 
		'\x4C5', '\x4C6', '\x6', '\x3', '\x2', '\x2', '\x4C6', '\x4E3', '\x5', 
		'\xDC', 'o', '\x2', '\x4C7', '\x4E3', '\x5', '\xDE', 'p', '\x2', '\x4C8', 
		'\x4E3', '\x5', '\xE0', 'q', '\x2', '\x4C9', '\x4E3', '\x5', '\xE6', 't', 
		'\x2', '\x4CA', '\x4E3', '\x5', '\xE8', 'u', '\x2', '\x4CB', '\x4E3', 
		'\x5', '\xEC', 'w', '\x2', '\x4CC', '\x4E3', '\x5', '\xFE', '\x80', '\x2', 
		'\x4CD', '\x4E3', '\x5', '\x10A', '\x86', '\x2', '\x4CE', '\x4E3', '\x5', 
		'\x10C', '\x87', '\x2', '\x4CF', '\x4E3', '\x5', '\x198', '\xCD', '\x2', 
		'\x4D0', '\x4E3', '\x5', '\x19A', '\xCE', '\x2', '\x4D1', '\x4E3', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x4D2', '\x4E3', '\x5', '\x1E0', '\xF1', '\x2', 
		'\x4D3', '\x4D4', '\x6', '\x3', '\x3', '\x2', '\x4D4', '\x4E3', '\x5', 
		'\x1E6', '\xF4', '\x2', '\x4D5', '\x4E3', '\x5', '\x1EC', '\xF7', '\x2', 
		'\x4D6', '\x4E3', '\x5', '\x22A', '\x116', '\x2', '\x4D7', '\x4E3', '\x5', 
		'\x232', '\x11A', '\x2', '\x4D8', '\x4E3', '\x5', '\x234', '\x11B', '\x2', 
		'\x4D9', '\x4E3', '\x5', '\x242', '\x122', '\x2', '\x4DA', '\x4DB', '\x6', 
		'\x3', '\x4', '\x2', '\x4DB', '\x4E3', '\x5', '\x26E', '\x138', '\x2', 
		'\x4DC', '\x4E3', '\x5', '\x24E', '\x128', '\x2', '\x4DD', '\x4E3', '\x5', 
		'\x282', '\x142', '\x2', '\x4DE', '\x4DF', '\x6', '\x3', '\x5', '\x2', 
		'\x4DF', '\x4E3', '\x5', '\x334', '\x19B', '\x2', '\x4E0', '\x4E3', '\x5', 
		'\x33E', '\x1A0', '\x2', '\x4E1', '\x4E3', '\x5', '\x340', '\x1A1', '\x2', 
		'\x4E2', '\x4C0', '\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4C1', '\x3', 
		'\x2', '\x2', '\x2', '\x4E2', '\x4C2', '\x3', '\x2', '\x2', '\x2', '\x4E2', 
		'\x4C3', '\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4C4', '\x3', '\x2', '\x2', 
		'\x2', '\x4E2', '\x4C5', '\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4C7', 
		'\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4C8', '\x3', '\x2', '\x2', '\x2', 
		'\x4E2', '\x4C9', '\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4CA', '\x3', 
		'\x2', '\x2', '\x2', '\x4E2', '\x4CB', '\x3', '\x2', '\x2', '\x2', '\x4E2', 
		'\x4CC', '\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4CD', '\x3', '\x2', '\x2', 
		'\x2', '\x4E2', '\x4CE', '\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4CF', 
		'\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4D0', '\x3', '\x2', '\x2', '\x2', 
		'\x4E2', '\x4D1', '\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4D2', '\x3', 
		'\x2', '\x2', '\x2', '\x4E2', '\x4D3', '\x3', '\x2', '\x2', '\x2', '\x4E2', 
		'\x4D5', '\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4D6', '\x3', '\x2', '\x2', 
		'\x2', '\x4E2', '\x4D7', '\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4D8', 
		'\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4D9', '\x3', '\x2', '\x2', '\x2', 
		'\x4E2', '\x4DA', '\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4DC', '\x3', 
		'\x2', '\x2', '\x2', '\x4E2', '\x4DD', '\x3', '\x2', '\x2', '\x2', '\x4E2', 
		'\x4DE', '\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4E0', '\x3', '\x2', '\x2', 
		'\x2', '\x4E2', '\x4E1', '\x3', '\x2', '\x2', '\x2', '\x4E3', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x4E4', '\x4FF', '\a', '\x1AE', '\x2', '\x2', '\x4E5', 
		'\x500', '\x5', '\x14', '\v', '\x2', '\x4E6', '\x500', '\x5', '\b', '\x5', 
		'\x2', '\x4E7', '\x4E8', '\a', '\x253', '\x2', '\x2', '\x4E8', '\x4EA', 
		'\x5', '\x414', '\x20B', '\x2', '\x4E9', '\x4EB', '\x5', 'j', '\x36', 
		'\x2', '\x4EA', '\x4E9', '\x3', '\x2', '\x2', '\x2', '\x4EA', '\x4EB', 
		'\x3', '\x2', '\x2', '\x2', '\x4EB', '\x500', '\x3', '\x2', '\x2', '\x2', 
		'\x4EC', '\x4ED', '\a', '\x166', '\x2', '\x2', '\x4ED', '\x4EF', '\x5', 
		'\x418', '\x20D', '\x2', '\x4EE', '\x4F0', '\x5', 'j', '\x36', '\x2', 
		'\x4EF', '\x4EE', '\x3', '\x2', '\x2', '\x2', '\x4EF', '\x4F0', '\x3', 
		'\x2', '\x2', '\x2', '\x4F0', '\x500', '\x3', '\x2', '\x2', '\x2', '\x4F1', 
		'\x500', '\x5', 'H', '%', '\x2', '\x4F2', '\x500', '\x5', '\n', '\x6', 
		'\x2', '\x4F3', '\x500', '\x5', ':', '\x1E', '\x2', '\x4F4', '\x4F5', 
		'\x6', '\x4', '\x6', '\x2', '\x4F5', '\x500', '\x5', '<', '\x1F', '\x2', 
		'\x4F6', '\x500', '\x5', '\f', '\a', '\x2', '\x4F7', '\x500', '\x5', '\x12', 
		'\n', '\x2', '\x4F8', '\x4F9', '\x6', '\x4', '\a', '\x2', '\x4F9', '\x4FA', 
		'\a', '\xA7', '\x2', '\x2', '\x4FA', '\x4FB', '\a', '\x12A', '\x2', '\x2', 
		'\x4FB', '\x4FC', '\x5', '\x48A', '\x246', '\x2', '\x4FC', '\x4FD', '\a', 
		'\xBB', '\x2', '\x2', '\x4FD', '\x4FE', '\a', '\x21A', '\x2', '\x2', '\x4FE', 
		'\x500', '\x3', '\x2', '\x2', '\x2', '\x4FF', '\x4E5', '\x3', '\x2', '\x2', 
		'\x2', '\x4FF', '\x4E6', '\x3', '\x2', '\x2', '\x2', '\x4FF', '\x4E7', 
		'\x3', '\x2', '\x2', '\x2', '\x4FF', '\x4EC', '\x3', '\x2', '\x2', '\x2', 
		'\x4FF', '\x4F1', '\x3', '\x2', '\x2', '\x2', '\x4FF', '\x4F2', '\x3', 
		'\x2', '\x2', '\x2', '\x4FF', '\x4F3', '\x3', '\x2', '\x2', '\x2', '\x4FF', 
		'\x4F4', '\x3', '\x2', '\x2', '\x2', '\x4FF', '\x4F6', '\x3', '\x2', '\x2', 
		'\x2', '\x4FF', '\x4F7', '\x3', '\x2', '\x2', '\x2', '\x4FF', '\x4F8', 
		'\x3', '\x2', '\x2', '\x2', '\x500', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x501', '\x502', '\a', '\x1D5', '\x2', '\x2', '\x502', '\x50D', '\x5', 
		'\x410', '\x209', '\x2', '\x503', '\x505', '\x5', 'T', '+', '\x2', '\x504', 
		'\x503', '\x3', '\x2', '\x2', '\x2', '\x505', '\x506', '\x3', '\x2', '\x2', 
		'\x2', '\x506', '\x504', '\x3', '\x2', '\x2', '\x2', '\x506', '\x507', 
		'\x3', '\x2', '\x2', '\x2', '\x507', '\x50E', '\x3', '\x2', '\x2', '\x2', 
		'\x508', '\x509', '\x6', '\x5', '\b', '\x2', '\x509', '\x50A', '\a', '\x37', 
		'\x2', '\x2', '\x50A', '\x50B', '\a', 'o', '\x2', '\x2', '\x50B', '\x50C', 
		'\a', 'y', '\x2', '\x2', '\x50C', '\x50E', '\a', '\xE7', '\x2', '\x2', 
		'\x50D', '\x504', '\x3', '\x2', '\x2', '\x2', '\x50D', '\x508', '\x3', 
		'\x2', '\x2', '\x2', '\x50E', '\t', '\x3', '\x2', '\x2', '\x2', '\x50F', 
		'\x511', '\x5', '\x3C0', '\x1E1', '\x2', '\x510', '\x50F', '\x3', '\x2', 
		'\x2', '\x2', '\x510', '\x511', '\x3', '\x2', '\x2', '\x2', '\x511', '\x512', 
		'\x3', '\x2', '\x2', '\x2', '\x512', '\x513', '\a', '\x87', '\x2', '\x2', 
		'\x513', '\x517', '\x5', '\x42C', '\x217', '\x2', '\x514', '\x515', '\a', 
		'\x244', '\x2', '\x2', '\x515', '\x516', '\a', '\x131', '\x2', '\x2', 
		'\x516', '\x518', '\x5', '\x34A', '\x1A6', '\x2', '\x517', '\x514', '\x3', 
		'\x2', '\x2', '\x2', '\x517', '\x518', '\x3', '\x2', '\x2', '\x2', '\x518', 
		'\x51F', '\x3', '\x2', '\x2', '\x2', '\x519', '\x51A', '\a', '\x244', 
		'\x2', '\x2', '\x51A', '\x51C', '\a', '_', '\x2', '\x2', '\x51B', '\x51D', 
		'\a', '\x23E', '\x2', '\x2', '\x51C', '\x51B', '\x3', '\x2', '\x2', '\x2', 
		'\x51C', '\x51D', '\x3', '\x2', '\x2', '\x2', '\x51D', '\x51E', '\x3', 
		'\x2', '\x2', '\x2', '\x51E', '\x520', '\a', '\x104', '\x2', '\x2', '\x51F', 
		'\x519', '\x3', '\x2', '\x2', '\x2', '\x51F', '\x520', '\x3', '\x2', '\x2', 
		'\x2', '\x520', '\x524', '\x3', '\x2', '\x2', '\x2', '\x521', '\x522', 
		'\a', '\x25D', '\x2', '\x2', '\x522', '\x523', '\a', '\x28E', '\x2', '\x2', 
		'\x523', '\x525', '\x5', '\x456', '\x22C', '\x2', '\x524', '\x521', '\x3', 
		'\x2', '\x2', '\x2', '\x524', '\x525', '\x3', '\x2', '\x2', '\x2', '\x525', 
		'\x52C', '\x3', '\x2', '\x2', '\x2', '\x526', '\x52D', '\a', '\x91', '\x2', 
		'\x2', '\x527', '\x52A', '\a', 'z', '\x2', '\x2', '\x528', '\x529', '\a', 
		'\x244', '\x2', '\x2', '\x529', '\x52B', '\a', '/', '\x2', '\x2', '\x52A', 
		'\x528', '\x3', '\x2', '\x2', '\x2', '\x52A', '\x52B', '\x3', '\x2', '\x2', 
		'\x2', '\x52B', '\x52D', '\x3', '\x2', '\x2', '\x2', '\x52C', '\x526', 
		'\x3', '\x2', '\x2', '\x2', '\x52C', '\x527', '\x3', '\x2', '\x2', '\x2', 
		'\x52C', '\x52D', '\x3', '\x2', '\x2', '\x2', '\x52D', '\x530', '\x3', 
		'\x2', '\x2', '\x2', '\x52E', '\x52F', '\a', '\r', '\x2', '\x2', '\x52F', 
		'\x531', '\x5', '\x476', '\x23C', '\x2', '\x530', '\x52E', '\x3', '\x2', 
		'\x2', '\x2', '\x530', '\x531', '\x3', '\x2', '\x2', '\x2', '\x531', '\x534', 
		'\x3', '\x2', '\x2', '\x2', '\x532', '\x533', '\a', '\x11', '\x2', '\x2', 
		'\x533', '\x535', '\x5', '\x2FC', '\x17F', '\x2', '\x534', '\x532', '\x3', 
		'\x2', '\x2', '\x2', '\x534', '\x535', '\x3', '\x2', '\x2', '\x2', '\x535', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x536', '\x537', '\a', '\xB8', '\x2', 
		'\x2', '\x537', '\x538', '\a', '\x201', '\x2', '\x2', '\x538', '\x539', 
		'\x5', '\x428', '\x215', '\x2', '\x539', '\x53A', '\a', '\x1AC', '\x2', 
		'\x2', '\x53A', '\x53B', '\a', '\x16A', '\x2', '\x2', '\x53B', '\x53D', 
		'\x5', '\x476', '\x23C', '\x2', '\x53C', '\x53E', '\x5', '\xE', '\b', 
		'\x2', '\x53D', '\x53C', '\x3', '\x2', '\x2', '\x2', '\x53D', '\x53E', 
		'\x3', '\x2', '\x2', '\x2', '\x53E', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x53F', '\x546', '\x5', '\x10', '\t', '\x2', '\x540', '\x542', '\a', 
		'\x198', '\x2', '\x2', '\x541', '\x540', '\x3', '\x2', '\x2', '\x2', '\x541', 
		'\x542', '\x3', '\x2', '\x2', '\x2', '\x542', '\x543', '\x3', '\x2', '\x2', 
		'\x2', '\x543', '\x545', '\x5', '\x10', '\t', '\x2', '\x544', '\x541', 
		'\x3', '\x2', '\x2', '\x2', '\x545', '\x548', '\x3', '\x2', '\x2', '\x2', 
		'\x546', '\x544', '\x3', '\x2', '\x2', '\x2', '\x546', '\x547', '\x3', 
		'\x2', '\x2', '\x2', '\x547', '\xF', '\x3', '\x2', '\x2', '\x2', '\x548', 
		'\x546', '\x3', '\x2', '\x2', '\x2', '\x549', '\x54D', '\x5', '\x8C', 
		'G', '\x2', '\x54A', '\x54D', '\x5', '\x98', 'M', '\x2', '\x54B', '\x54D', 
		'\x5', '\x9A', 'N', '\x2', '\x54C', '\x549', '\x3', '\x2', '\x2', '\x2', 
		'\x54C', '\x54A', '\x3', '\x2', '\x2', '\x2', '\x54C', '\x54B', '\x3', 
		'\x2', '\x2', '\x2', '\x54D', '\x11', '\x3', '\x2', '\x2', '\x2', '\x54E', 
		'\x54F', '\a', '-', '\x2', '\x2', '\x54F', '\x550', '\x5', '\x432', '\x21A', 
		'\x2', '\x550', '\x551', '\x5', '|', '?', '\x2', '\x551', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x552', '\x554', '\x5', '\x3F6', '\x1FC', '\x2', 
		'\x553', '\x552', '\x3', '\x2', '\x2', '\x2', '\x553', '\x554', '\x3', 
		'\x2', '\x2', '\x2', '\x554', '\x557', '\x3', '\x2', '\x2', '\x2', '\x555', 
		'\x556', '\x6', '\v', '\t', '\x2', '\x556', '\x558', '\a', '\x209', '\x2', 
		'\x2', '\x557', '\x555', '\x3', '\x2', '\x2', '\x2', '\x557', '\x558', 
		'\x3', '\x2', '\x2', '\x2', '\x558', '\x559', '\x3', '\x2', '\x2', '\x2', 
		'\x559', '\x55A', '\a', '\x288', '\x2', '\x2', '\x55A', '\x55C', '\x5', 
		'\x43C', '\x21F', '\x2', '\x55B', '\x55D', '\x5', '\x16', '\f', '\x2', 
		'\x55C', '\x55B', '\x3', '\x2', '\x2', '\x2', '\x55C', '\x55D', '\x3', 
		'\x2', '\x2', '\x2', '\x55D', '\x15', '\x3', '\x2', '\x2', '\x2', '\x55E', 
		'\x561', '\x5', '\x18', '\r', '\x2', '\x55F', '\x562', '\x5', '\x3AA', 
		'\x1D6', '\x2', '\x560', '\x562', '\x5', '\x34', '\x1B', '\x2', '\x561', 
		'\x55F', '\x3', '\x2', '\x2', '\x2', '\x561', '\x560', '\x3', '\x2', '\x2', 
		'\x2', '\x561', '\x562', '\x3', '\x2', '\x2', '\x2', '\x562', '\x56C', 
		'\x3', '\x2', '\x2', '\x2', '\x563', '\x56C', '\x5', '\x3AA', '\x1D6', 
		'\x2', '\x564', '\x56C', '\x5', '\x34', '\x1B', '\x2', '\x565', '\x566', 
		'\x5', '\x1A', '\xE', '\x2', '\x566', '\x567', '\a', '\x198', '\x2', '\x2', 
		'\x567', '\x569', '\x3', '\x2', '\x2', '\x2', '\x568', '\x565', '\x3', 
		'\x2', '\x2', '\x2', '\x568', '\x569', '\x3', '\x2', '\x2', '\x2', '\x569', 
		'\x56A', '\x3', '\x2', '\x2', '\x2', '\x56A', '\x56C', '\x5', '\x1C', 
		'\xF', '\x2', '\x56B', '\x55E', '\x3', '\x2', '\x2', '\x2', '\x56B', '\x563', 
		'\x3', '\x2', '\x2', '\x2', '\x56B', '\x564', '\x3', '\x2', '\x2', '\x2', 
		'\x56B', '\x568', '\x3', '\x2', '\x2', '\x2', '\x56C', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x56D', '\x575', '\x5', '\x1A', '\xE', '\x2', '\x56E', 
		'\x56F', '\x5', '\x1A', '\xE', '\x2', '\x56F', '\x570', '\a', '\x198', 
		'\x2', '\x2', '\x570', '\x572', '\x3', '\x2', '\x2', '\x2', '\x571', '\x56E', 
		'\x3', '\x2', '\x2', '\x2', '\x571', '\x572', '\x3', '\x2', '\x2', '\x2', 
		'\x572', '\x573', '\x3', '\x2', '\x2', '\x2', '\x573', '\x575', '\x5', 
		' ', '\x11', '\x2', '\x574', '\x56D', '\x3', '\x2', '\x2', '\x2', '\x574', 
		'\x571', '\x3', '\x2', '\x2', '\x2', '\x575', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x576', '\x57B', '\x5', '\"', '\x12', '\x2', '\x577', '\x578', 
		'\a', '\x198', '\x2', '\x2', '\x578', '\x57A', '\x5', '\"', '\x12', '\x2', 
		'\x579', '\x577', '\x3', '\x2', '\x2', '\x2', '\x57A', '\x57D', '\x3', 
		'\x2', '\x2', '\x2', '\x57B', '\x579', '\x3', '\x2', '\x2', '\x2', '\x57B', 
		'\x57C', '\x3', '\x2', '\x2', '\x2', '\x57C', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x57D', '\x57B', '\x3', '\x2', '\x2', '\x2', '\x57E', '\x57F', 
		'\a', '{', '\x2', '\x2', '\x57F', '\x586', '\a', '\x158', '\x2', '\x2', 
		'\x580', '\x581', '\a', '\xA4', '\x2', '\x2', '\x581', '\x586', '\a', 
		'\x158', '\x2', '\x2', '\x582', '\x586', '\x5', '\x1E', '\x10', '\x2', 
		'\x583', '\x584', '\x6', '\xF', '\n', '\x2', '\x584', '\x586', '\t', '\x2', 
		'\x2', '\x2', '\x585', '\x57E', '\x3', '\x2', '\x2', '\x2', '\x585', '\x580', 
		'\x3', '\x2', '\x2', '\x2', '\x585', '\x582', '\x3', '\x2', '\x2', '\x2', 
		'\x585', '\x583', '\x3', '\x2', '\x2', '\x2', '\x586', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x587', '\x588', '\a', '\x1AC', '\x2', '\x2', '\x588', 
		'\x58A', '\a', '\"', '\x2', '\x2', '\x589', '\x58B', '\x5', '\x3F8', '\x1FD', 
		'\x2', '\x58A', '\x589', '\x3', '\x2', '\x2', '\x2', '\x58A', '\x58B', 
		'\x3', '\x2', '\x2', '\x2', '\x58B', '\x58F', '\x3', '\x2', '\x2', '\x2', 
		'\x58C', '\x590', '\x5', '\x3B2', '\x1DA', '\x2', '\x58D', '\x58E', '\a', 
		'\xFC', '\x2', '\x2', '\x58E', '\x590', '\x5', '\x464', '\x233', '\x2', 
		'\x58F', '\x58C', '\x3', '\x2', '\x2', '\x2', '\x58F', '\x58D', '\x3', 
		'\x2', '\x2', '\x2', '\x590', '\x5E9', '\x3', '\x2', '\x2', '\x2', '\x591', 
		'\x592', '\a', '\x1E9', '\x2', '\x2', '\x592', '\x593', '\a', '\"', '\x2', 
		'\x2', '\x593', '\x5E9', '\x5', '\x458', '\x22D', '\x2', '\x594', '\x595', 
		'\a', '\x110', '\x2', '\x2', '\x595', '\x597', '\a', '\"', '\x2', '\x2', 
		'\x596', '\x598', '\x5', '\x3F8', '\x1FD', '\x2', '\x597', '\x596', '\x3', 
		'\x2', '\x2', '\x2', '\x597', '\x598', '\x3', '\x2', '\x2', '\x2', '\x598', 
		'\x599', '\x3', '\x2', '\x2', '\x2', '\x599', '\x5E9', '\x5', '\x36', 
		'\x1C', '\x2', '\x59A', '\x59B', '\a', '\x247', '\x2', '\x2', '\x59B', 
		'\x59D', '\a', '\"', '\x2', '\x2', '\x59C', '\x59E', '\x5', '\x3F8', '\x1FD', 
		'\x2', '\x59D', '\x59C', '\x3', '\x2', '\x2', '\x2', '\x59D', '\x59E', 
		'\x3', '\x2', '\x2', '\x2', '\x59E', '\x59F', '\x3', '\x2', '\x2', '\x2', 
		'\x59F', '\x5A1', '\x5', '\x36', '\x1C', '\x2', '\x5A0', '\x5A2', '\x5', 
		'\x3F8', '\x1FD', '\x2', '\x5A1', '\x5A0', '\x3', '\x2', '\x2', '\x2', 
		'\x5A1', '\x5A2', '\x3', '\x2', '\x2', '\x2', '\x5A2', '\x5E9', '\x3', 
		'\x2', '\x2', '\x2', '\x5A3', '\x5A4', '\a', '\x41', '\x2', '\x2', '\x5A4', 
		'\x5A6', '\a', '\"', '\x2', '\x2', '\x5A5', '\x5A7', '\x5', '\x3F8', '\x1FD', 
		'\x2', '\x5A6', '\x5A5', '\x3', '\x2', '\x2', '\x2', '\x5A6', '\x5A7', 
		'\x3', '\x2', '\x2', '\x2', '\x5A7', '\x5A8', '\x3', '\x2', '\x2', '\x2', 
		'\x5A8', '\x5E9', '\x5', '\x36', '\x1C', '\x2', '\x5A9', '\x5AA', '\a', 
		'\x1C5', '\x2', '\x2', '\x5AA', '\x5AB', '\a', '\"', '\x2', '\x2', '\x5AB', 
		'\x5AF', '\x5', '\x36', '\x1C', '\x2', '\x5AC', '\x5AE', '\x5', '\x22E', 
		'\x118', '\x2', '\x5AD', '\x5AC', '\x3', '\x2', '\x2', '\x2', '\x5AE', 
		'\x5B1', '\x3', '\x2', '\x2', '\x2', '\x5AF', '\x5AD', '\x3', '\x2', '\x2', 
		'\x2', '\x5AF', '\x5B0', '\x3', '\x2', '\x2', '\x2', '\x5B0', '\x5E9', 
		'\x3', '\x2', '\x2', '\x2', '\x5B1', '\x5AF', '\x3', '\x2', '\x2', '\x2', 
		'\x5B2', '\x5B3', '\a', '\'', '\x2', '\x2', '\x5B3', '\x5B5', '\a', '\"', 
		'\x2', '\x2', '\x5B4', '\x5B6', '\x5', '\x3F8', '\x1FD', '\x2', '\x5B5', 
		'\x5B4', '\x3', '\x2', '\x2', '\x2', '\x5B5', '\x5B6', '\x3', '\x2', '\x2', 
		'\x2', '\x5B6', '\x5B7', '\x3', '\x2', '\x2', '\x2', '\x5B7', '\x5BB', 
		'\x5', '\x36', '\x1C', '\x2', '\x5B8', '\x5BA', '\x5', '\x230', '\x119', 
		'\x2', '\x5B9', '\x5B8', '\x3', '\x2', '\x2', '\x2', '\x5BA', '\x5BD', 
		'\x3', '\x2', '\x2', '\x2', '\x5BB', '\x5B9', '\x3', '\x2', '\x2', '\x2', 
		'\x5BB', '\x5BC', '\x3', '\x2', '\x2', '\x2', '\x5BC', '\x5E9', '\x3', 
		'\x2', '\x2', '\x2', '\x5BD', '\x5BB', '\x3', '\x2', '\x2', '\x2', '\x5BE', 
		'\x5BF', '\a', 'W', '\x2', '\x2', '\x5BF', '\x5C1', '\a', '\"', '\x2', 
		'\x2', '\x5C0', '\x5C2', '\x5', '\x3F8', '\x1FD', '\x2', '\x5C1', '\x5C0', 
		'\x3', '\x2', '\x2', '\x2', '\x5C1', '\x5C2', '\x3', '\x2', '\x2', '\x2', 
		'\x5C2', '\x5C3', '\x3', '\x2', '\x2', '\x2', '\x5C3', '\x5E9', '\x5', 
		'\x464', '\x233', '\x2', '\x5C4', '\x5C5', '\a', '\x34', '\x2', '\x2', 
		'\x5C5', '\x5C6', '\a', '\"', '\x2', '\x2', '\x5C6', '\x5E9', '\x5', '\x36', 
		'\x1C', '\x2', '\x5C7', '\x5E9', '\x5', '\x38', '\x1D', '\x2', '\x5C8', 
		'\x5C9', '\a', '\x11B', '\x2', '\x2', '\x5C9', '\x5CB', '\a', '\"', '\x2', 
		'\x2', '\x5CA', '\x5CC', '\x5', '\x3F8', '\x1FD', '\x2', '\x5CB', '\x5CA', 
		'\x3', '\x2', '\x2', '\x2', '\x5CB', '\x5CC', '\x3', '\x2', '\x2', '\x2', 
		'\x5CC', '\x5D1', '\x3', '\x2', '\x2', '\x2', '\x5CD', '\x5CE', '\x5', 
		'\x458', '\x22D', '\x2', '\x5CE', '\x5CF', '\a', '\x211', '\x2', '\x2', 
		'\x5CF', '\x5D0', '\x5', '\x3B2', '\x1DA', '\x2', '\x5D0', '\x5D2', '\x3', 
		'\x2', '\x2', '\x2', '\x5D1', '\x5CD', '\x3', '\x2', '\x2', '\x2', '\x5D1', 
		'\x5D2', '\x3', '\x2', '\x2', '\x2', '\x5D2', '\x5E9', '\x3', '\x2', '\x2', 
		'\x2', '\x5D3', '\x5D4', '\a', '\x1F1', '\x2', '\x2', '\x5D4', '\x5D5', 
		'\a', '\"', '\x2', '\x2', '\x5D5', '\x5D6', '\x5', '\x456', '\x22C', '\x2', 
		'\x5D6', '\x5D7', '\a', '\x2AB', '\x2', '\x2', '\x5D7', '\x5D8', '\a', 
		'\x288', '\x2', '\x2', '\x5D8', '\x5DA', '\x5', '\x43C', '\x21F', '\x2', 
		'\x5D9', '\x5DB', '\x5', '\x32', '\x1A', '\x2', '\x5DA', '\x5D9', '\x3', 
		'\x2', '\x2', '\x2', '\x5DA', '\x5DB', '\x3', '\x2', '\x2', '\x2', '\x5DB', 
		'\x5E9', '\x3', '\x2', '\x2', '\x2', '\x5DC', '\x5DD', '\x6', '\x10', 
		'\v', '\x2', '\x5DD', '\x5DE', '\a', '{', '\x2', '\x2', '\x5DE', '\x5DF', 
		'\a', '\"', '\x2', '\x2', '\x5DF', '\x5E0', '\x5', '\x36', '\x1C', '\x2', 
		'\x5E0', '\x5E1', '\a', '\x158', '\x2', '\x2', '\x5E1', '\x5E9', '\x3', 
		'\x2', '\x2', '\x2', '\x5E2', '\x5E3', '\x6', '\x10', '\f', '\x2', '\x5E3', 
		'\x5E4', '\a', '\xA4', '\x2', '\x2', '\x5E4', '\x5E5', '\a', '\"', '\x2', 
		'\x2', '\x5E5', '\x5E6', '\x5', '\x36', '\x1C', '\x2', '\x5E6', '\x5E7', 
		'\a', '\x158', '\x2', '\x2', '\x5E7', '\x5E9', '\x3', '\x2', '\x2', '\x2', 
		'\x5E8', '\x587', '\x3', '\x2', '\x2', '\x2', '\x5E8', '\x591', '\x3', 
		'\x2', '\x2', '\x2', '\x5E8', '\x594', '\x3', '\x2', '\x2', '\x2', '\x5E8', 
		'\x59A', '\x3', '\x2', '\x2', '\x2', '\x5E8', '\x5A3', '\x3', '\x2', '\x2', 
		'\x2', '\x5E8', '\x5A9', '\x3', '\x2', '\x2', '\x2', '\x5E8', '\x5B2', 
		'\x3', '\x2', '\x2', '\x2', '\x5E8', '\x5BE', '\x3', '\x2', '\x2', '\x2', 
		'\x5E8', '\x5C4', '\x3', '\x2', '\x2', '\x2', '\x5E8', '\x5C7', '\x3', 
		'\x2', '\x2', '\x2', '\x5E8', '\x5C8', '\x3', '\x2', '\x2', '\x2', '\x5E8', 
		'\x5D3', '\x3', '\x2', '\x2', '\x2', '\x5E8', '\x5DC', '\x3', '\x2', '\x2', 
		'\x2', '\x5E8', '\x5E2', '\x3', '\x2', '\x2', '\x2', '\x5E9', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x5EA', '\x5ED', '\x5', '$', '\x13', '\x2', 
		'\x5EB', '\x5ED', '\x5', '\x39E', '\x1D0', '\x2', '\x5EC', '\x5EA', '\x3', 
		'\x2', '\x2', '\x2', '\x5EC', '\x5EB', '\x3', '\x2', '\x2', '\x2', '\x5ED', 
		'\x5F6', '\x3', '\x2', '\x2', '\x2', '\x5EE', '\x5F2', '\a', '\x198', 
		'\x2', '\x2', '\x5EF', '\x5F3', '\x5', '$', '\x13', '\x2', '\x5F0', '\x5F3', 
		'\x5', '\"', '\x12', '\x2', '\x5F1', '\x5F3', '\x5', '\x39E', '\x1D0', 
		'\x2', '\x5F2', '\x5EF', '\x3', '\x2', '\x2', '\x2', '\x5F2', '\x5F0', 
		'\x3', '\x2', '\x2', '\x2', '\x5F2', '\x5F1', '\x3', '\x2', '\x2', '\x2', 
		'\x5F3', '\x5F5', '\x3', '\x2', '\x2', '\x2', '\x5F4', '\x5EE', '\x3', 
		'\x2', '\x2', '\x2', '\x5F5', '\x5F8', '\x3', '\x2', '\x2', '\x2', '\x5F6', 
		'\x5F4', '\x3', '\x2', '\x2', '\x2', '\x5F6', '\x5F7', '\x3', '\x2', '\x2', 
		'\x2', '\x5F7', '!', '\x3', '\x2', '\x2', '\x2', '\x5F8', '\x5F6', '\x3', 
		'\x2', '\x2', '\x2', '\x5F9', '\x5FA', '\x6', '\x12', '\r', '\x2', '\x5FA', 
		'\x5FF', '\x5', ',', '\x17', '\x2', '\x5FB', '\x5FC', '\x6', '\x12', '\xE', 
		'\x2', '\x5FC', '\x5FF', '\x5', '.', '\x18', '\x2', '\x5FD', '\x5FF', 
		'\x5', '\x32', '\x1A', '\x2', '\x5FE', '\x5F9', '\x3', '\x2', '\x2', '\x2', 
		'\x5FE', '\x5FB', '\x3', '\x2', '\x2', '\x2', '\x5FE', '\x5FD', '\x3', 
		'\x2', '\x2', '\x2', '\x5FF', '#', '\x3', '\x2', '\x2', '\x2', '\x600', 
		'\x602', '\a', '\x1AC', '\x2', '\x2', '\x601', '\x603', '\a', '\x1C7', 
		'\x2', '\x2', '\x602', '\x601', '\x3', '\x2', '\x2', '\x2', '\x602', '\x603', 
		'\x3', '\x2', '\x2', '\x2', '\x603', '\x610', '\x3', '\x2', '\x2', '\x2', 
		'\x604', '\x605', '\x5', '\x456', '\x22C', '\x2', '\x605', '\x607', '\x5', 
		'\x358', '\x1AD', '\x2', '\x606', '\x608', '\x5', '\x34E', '\x1A8', '\x2', 
		'\x607', '\x606', '\x3', '\x2', '\x2', '\x2', '\x607', '\x608', '\x3', 
		'\x2', '\x2', '\x2', '\x608', '\x60A', '\x3', '\x2', '\x2', '\x2', '\x609', 
		'\x60B', '\x5', '&', '\x14', '\x2', '\x60A', '\x609', '\x3', '\x2', '\x2', 
		'\x2', '\x60A', '\x60B', '\x3', '\x2', '\x2', '\x2', '\x60B', '\x611', 
		'\x3', '\x2', '\x2', '\x2', '\x60C', '\x60D', '\a', '\x19B', '\x2', '\x2', 
		'\x60D', '\x60E', '\x5', 'X', '-', '\x2', '\x60E', '\x60F', '\a', '\x19C', 
		'\x2', '\x2', '\x60F', '\x611', '\x3', '\x2', '\x2', '\x2', '\x610', '\x604', 
		'\x3', '\x2', '\x2', '\x2', '\x610', '\x60C', '\x3', '\x2', '\x2', '\x2', 
		'\x611', '\x686', '\x3', '\x2', '\x2', '\x2', '\x612', '\x613', '\a', 
		'\x1AC', '\x2', '\x2', '\x613', '\x686', '\x5', '\x354', '\x1AB', '\x2', 
		'\x614', '\x616', '\a', '\x1C3', '\x2', '\x2', '\x615', '\x617', '\a', 
		'\x1C7', '\x2', '\x2', '\x616', '\x615', '\x3', '\x2', '\x2', '\x2', '\x616', 
		'\x617', '\x3', '\x2', '\x2', '\x2', '\x617', '\x618', '\x3', '\x2', '\x2', 
		'\x2', '\x618', '\x619', '\x5', '\x400', '\x201', '\x2', '\x619', '\x61A', 
		'\x5', '\x456', '\x22C', '\x2', '\x61A', '\x61C', '\x5', '\x358', '\x1AD', 
		'\x2', '\x61B', '\x61D', '\x5', '&', '\x14', '\x2', '\x61C', '\x61B', 
		'\x3', '\x2', '\x2', '\x2', '\x61C', '\x61D', '\x3', '\x2', '\x2', '\x2', 
		'\x61D', '\x686', '\x3', '\x2', '\x2', '\x2', '\x61E', '\x620', '\a', 
		'\xDF', '\x2', '\x2', '\x61F', '\x621', '\a', '\x1C7', '\x2', '\x2', '\x620', 
		'\x61F', '\x3', '\x2', '\x2', '\x2', '\x620', '\x621', '\x3', '\x2', '\x2', 
		'\x2', '\x621', '\x622', '\x3', '\x2', '\x2', '\x2', '\x622', '\x623', 
		'\x5', '\x400', '\x201', '\x2', '\x623', '\x625', '\x5', '\x358', '\x1AD', 
		'\x2', '\x624', '\x626', '\x5', '&', '\x14', '\x2', '\x625', '\x624', 
		'\x3', '\x2', '\x2', '\x2', '\x625', '\x626', '\x3', '\x2', '\x2', '\x2', 
		'\x626', '\x686', '\x3', '\x2', '\x2', '\x2', '\x627', '\x63E', '\a', 
		'\x1E9', '\x2', '\x2', '\x628', '\x62A', '\a', '\x1C7', '\x2', '\x2', 
		'\x629', '\x628', '\x3', '\x2', '\x2', '\x2', '\x629', '\x62A', '\x3', 
		'\x2', '\x2', '\x2', '\x62A', '\x62B', '\x3', '\x2', '\x2', '\x2', '\x62B', 
		'\x62D', '\x5', '\x400', '\x201', '\x2', '\x62C', '\x62E', '\x5', '(', 
		'\x15', '\x2', '\x62D', '\x62C', '\x3', '\x2', '\x2', '\x2', '\x62D', 
		'\x62E', '\x3', '\x2', '\x2', '\x2', '\x62E', '\x63F', '\x3', '\x2', '\x2', 
		'\x2', '\x62F', '\x630', '\a', '\x1FA', '\x2', '\x2', '\x630', '\x637', 
		'\a', '\x21A', '\x2', '\x2', '\x631', '\x632', '\x6', '\x13', '\xF', '\x2', 
		'\x632', '\x638', '\x5', '\x400', '\x201', '\x2', '\x633', '\x635', '\x6', 
		'\x13', '\x10', '\x2', '\x634', '\x636', '\x5', '\x400', '\x201', '\x2', 
		'\x635', '\x634', '\x3', '\x2', '\x2', '\x2', '\x635', '\x636', '\x3', 
		'\x2', '\x2', '\x2', '\x636', '\x638', '\x3', '\x2', '\x2', '\x2', '\x637', 
		'\x631', '\x3', '\x2', '\x2', '\x2', '\x637', '\x633', '\x3', '\x2', '\x2', 
		'\x2', '\x638', '\x63F', '\x3', '\x2', '\x2', '\x2', '\x639', '\x63A', 
		'\a', '\x252', '\x2', '\x2', '\x63A', '\x63F', '\a', '\x21A', '\x2', '\x2', 
		'\x63B', '\x63C', '\x5', '\x18E', '\xC8', '\x2', '\x63C', '\x63D', '\x5', 
		'\x40A', '\x206', '\x2', '\x63D', '\x63F', '\x3', '\x2', '\x2', '\x2', 
		'\x63E', '\x629', '\x3', '\x2', '\x2', '\x2', '\x63E', '\x62F', '\x3', 
		'\x2', '\x2', '\x2', '\x63E', '\x639', '\x3', '\x2', '\x2', '\x2', '\x63E', 
		'\x63B', '\x3', '\x2', '\x2', '\x2', '\x63F', '\x686', '\x3', '\x2', '\x2', 
		'\x2', '\x640', '\x641', '\a', 'z', '\x2', '\x2', '\x641', '\x686', '\a', 
		'\x219', '\x2', '\x2', '\x642', '\x643', '\a', '\x91', '\x2', '\x2', '\x643', 
		'\x686', '\a', '\x219', '\x2', '\x2', '\x644', '\x646', '\a', '\x1AE', 
		'\x2', '\x2', '\x645', '\x647', '\a', '\x1C7', '\x2', '\x2', '\x646', 
		'\x645', '\x3', '\x2', '\x2', '\x2', '\x646', '\x647', '\x3', '\x2', '\x2', 
		'\x2', '\x647', '\x648', '\x3', '\x2', '\x2', '\x2', '\x648', '\x652', 
		'\x5', '\x400', '\x201', '\x2', '\x649', '\x64A', '\a', '\x26C', '\x2', 
		'\x2', '\x64A', '\x64E', '\a', '\x1E0', '\x2', '\x2', '\x64B', '\x64C', 
		'\x6', '\x13', '\x11', '\x2', '\x64C', '\x64F', '\x5', '\x2EE', '\x178', 
		'\x2', '\x64D', '\x64F', '\x5', '\x46C', '\x237', '\x2', '\x64E', '\x64B', 
		'\x3', '\x2', '\x2', '\x2', '\x64E', '\x64D', '\x3', '\x2', '\x2', '\x2', 
		'\x64F', '\x653', '\x3', '\x2', '\x2', '\x2', '\x650', '\x651', '\a', 
		'\x1E9', '\x2', '\x2', '\x651', '\x653', '\a', '\x1E0', '\x2', '\x2', 
		'\x652', '\x649', '\x3', '\x2', '\x2', '\x2', '\x652', '\x650', '\x3', 
		'\x2', '\x2', '\x2', '\x653', '\x686', '\x3', '\x2', '\x2', '\x2', '\x654', 
		'\x655', '\x6', '\x13', '\x12', '\x2', '\x655', '\x656', '\a', '\x1AE', 
		'\x2', '\x2', '\x656', '\x657', '\a', '\x20A', '\x2', '\x2', '\x657', 
		'\x658', '\x5', '\x40A', '\x206', '\x2', '\x658', '\x659', '\x5', '\x376', 
		'\x1BC', '\x2', '\x659', '\x686', '\x3', '\x2', '\x2', '\x2', '\x65A', 
		'\x65B', '\x6', '\x13', '\x13', '\x2', '\x65B', '\x65C', '\a', '\x1AE', 
		'\x2', '\x2', '\x65C', '\x65D', '\a', '\x1C5', '\x2', '\x2', '\x65D', 
		'\x65E', '\x5', '\x456', '\x22C', '\x2', '\x65E', '\x65F', '\x5', '\x352', 
		'\x1AA', '\x2', '\x65F', '\x686', '\x3', '\x2', '\x2', '\x2', '\x660', 
		'\x661', '\x6', '\x13', '\x14', '\x2', '\x661', '\x662', '\a', '\x25D', 
		'\x2', '\x2', '\x662', '\x663', '\a', '\x1C7', '\x2', '\x2', '\x663', 
		'\x664', '\x5', '\x400', '\x201', '\x2', '\x664', '\x665', '\a', '\x28E', 
		'\x2', '\x2', '\x665', '\x666', '\x5', '\x456', '\x22C', '\x2', '\x666', 
		'\x686', '\x3', '\x2', '\x2', '\x2', '\x667', '\x669', '\a', '\x25D', 
		'\x2', '\x2', '\x668', '\x66A', '\t', '\x3', '\x2', '\x2', '\x669', '\x668', 
		'\x3', '\x2', '\x2', '\x2', '\x669', '\x66A', '\x3', '\x2', '\x2', '\x2', 
		'\x66A', '\x66B', '\x3', '\x2', '\x2', '\x2', '\x66B', '\x686', '\x5', 
		'\x436', '\x21C', '\x2', '\x66C', '\x66D', '\x6', '\x13', '\x15', '\x2', 
		'\x66D', '\x66E', '\a', '\x25D', '\x2', '\x2', '\x66E', '\x66F', '\x5', 
		'\x18E', '\xC8', '\x2', '\x66F', '\x670', '\x5', '\x40A', '\x206', '\x2', 
		'\x670', '\x671', '\a', '\x28E', '\x2', '\x2', '\x671', '\x672', '\x5', 
		'\x408', '\x205', '\x2', '\x672', '\x686', '\x3', '\x2', '\x2', '\x2', 
		'\x673', '\x674', '\a', '\x1CB', '\x2', '\x2', '\x674', '\x675', '\a', 
		'\x28E', '\x2', '\x2', '\x675', '\x679', '\x5', '\x2E2', '\x172', '\x2', 
		'\x676', '\x677', '\x6', '\x13', '\x16', '\x2', '\x677', '\x67A', '\a', 
		'\x1E0', '\x2', '\x2', '\x678', '\x67A', '\x5', '\x398', '\x1CD', '\x2', 
		'\x679', '\x676', '\x3', '\x2', '\x2', '\x2', '\x679', '\x678', '\x3', 
		'\x2', '\x2', '\x2', '\x67A', '\x67C', '\x3', '\x2', '\x2', '\x2', '\x67B', 
		'\x67D', '\x5', '\x3CA', '\x1E6', '\x2', '\x67C', '\x67B', '\x3', '\x2', 
		'\x2', '\x2', '\x67C', '\x67D', '\x3', '\x2', '\x2', '\x2', '\x67D', '\x686', 
		'\x3', '\x2', '\x2', '\x2', '\x67E', '\x686', '\a', '\x1F9', '\x2', '\x2', 
		'\x67F', '\x680', '\a', '\x24B', '\x2', '\x2', '\x680', '\x681', '\a', 
		'\x1BE', '\x2', '\x2', '\x681', '\x686', '\x5', '*', '\x16', '\x2', '\x682', 
		'\x683', '\x6', '\x13', '\x17', '\x2', '\x683', '\x684', '\a', '\x37', 
		'\x2', '\x2', '\x684', '\x686', '\a', '\xFB', '\x2', '\x2', '\x685', '\x600', 
		'\x3', '\x2', '\x2', '\x2', '\x685', '\x612', '\x3', '\x2', '\x2', '\x2', 
		'\x685', '\x614', '\x3', '\x2', '\x2', '\x2', '\x685', '\x61E', '\x3', 
		'\x2', '\x2', '\x2', '\x685', '\x627', '\x3', '\x2', '\x2', '\x2', '\x685', 
		'\x640', '\x3', '\x2', '\x2', '\x2', '\x685', '\x642', '\x3', '\x2', '\x2', 
		'\x2', '\x685', '\x644', '\x3', '\x2', '\x2', '\x2', '\x685', '\x654', 
		'\x3', '\x2', '\x2', '\x2', '\x685', '\x65A', '\x3', '\x2', '\x2', '\x2', 
		'\x685', '\x660', '\x3', '\x2', '\x2', '\x2', '\x685', '\x667', '\x3', 
		'\x2', '\x2', '\x2', '\x685', '\x66C', '\x3', '\x2', '\x2', '\x2', '\x685', 
		'\x673', '\x3', '\x2', '\x2', '\x2', '\x685', '\x67E', '\x3', '\x2', '\x2', 
		'\x2', '\x685', '\x67F', '\x3', '\x2', '\x2', '\x2', '\x685', '\x682', 
		'\x3', '\x2', '\x2', '\x2', '\x686', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x687', '\x688', '\a', '=', '\x2', '\x2', '\x688', '\x68B', '\x5', '\x456', 
		'\x22C', '\x2', '\x689', '\x68B', '\a', '\x96', '\x2', '\x2', '\x68A', 
		'\x687', '\x3', '\x2', '\x2', '\x2', '\x68A', '\x689', '\x3', '\x2', '\x2', 
		'\x2', '\x68B', '\'', '\x3', '\x2', '\x2', '\x2', '\x68C', '\x68D', '\t', 
		'\x4', '\x2', '\x2', '\x68D', ')', '\x3', '\x2', '\x2', '\x2', '\x68E', 
		'\x690', '\x5', '\x456', '\x22C', '\x2', '\x68F', '\x691', '\x5', '\x14A', 
		'\xA6', '\x2', '\x690', '\x68F', '\x3', '\x2', '\x2', '\x2', '\x690', 
		'\x691', '\x3', '\x2', '\x2', '\x2', '\x691', '\x699', '\x3', '\x2', '\x2', 
		'\x2', '\x692', '\x693', '\a', '\x198', '\x2', '\x2', '\x693', '\x695', 
		'\x5', '\x456', '\x22C', '\x2', '\x694', '\x696', '\x5', '\x14A', '\xA6', 
		'\x2', '\x695', '\x694', '\x3', '\x2', '\x2', '\x2', '\x695', '\x696', 
		'\x3', '\x2', '\x2', '\x2', '\x696', '\x698', '\x3', '\x2', '\x2', '\x2', 
		'\x697', '\x692', '\x3', '\x2', '\x2', '\x2', '\x698', '\x69B', '\x3', 
		'\x2', '\x2', '\x2', '\x699', '\x697', '\x3', '\x2', '\x2', '\x2', '\x699', 
		'\x69A', '\x3', '\x2', '\x2', '\x2', '\x69A', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x69B', '\x699', '\x3', '\x2', '\x2', '\x2', '\x69C', '\x69E', 
		'\a', '@', '\x2', '\x2', '\x69D', '\x69F', '\a', '\x181', '\x2', '\x2', 
		'\x69E', '\x69D', '\x3', '\x2', '\x2', '\x2', '\x69E', '\x69F', '\x3', 
		'\x2', '\x2', '\x2', '\x69F', '\x6A2', '\x3', '\x2', '\x2', '\x2', '\x6A0', 
		'\x6A3', '\a', '\x1E0', '\x2', '\x2', '\x6A1', '\x6A3', '\x5', '\x456', 
		'\x22C', '\x2', '\x6A2', '\x6A0', '\x3', '\x2', '\x2', '\x2', '\x6A2', 
		'\x6A1', '\x3', '\x2', '\x2', '\x2', '\x6A3', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x6A4', '\x6A6', '\a', '\x225', '\x2', '\x2', '\x6A5', '\x6A7', 
		'\a', '\x181', '\x2', '\x2', '\x6A6', '\x6A5', '\x3', '\x2', '\x2', '\x2', 
		'\x6A6', '\x6A7', '\x3', '\x2', '\x2', '\x2', '\x6A7', '\x6AA', '\x3', 
		'\x2', '\x2', '\x2', '\x6A8', '\x6AB', '\a', '\x1E0', '\x2', '\x2', '\x6A9', 
		'\x6AB', '\x5', '\x456', '\x22C', '\x2', '\x6AA', '\x6A8', '\x3', '\x2', 
		'\x2', '\x2', '\x6AA', '\x6A9', '\x3', '\x2', '\x2', '\x2', '\x6AB', '/', 
		'\x3', '\x2', '\x2', '\x2', '\x6AC', '\x6B5', '\x6', '\x19', '\x18', '\x2', 
		'\x6AD', '\x6AF', '\x5', ',', '\x17', '\x2', '\x6AE', '\x6B0', '\x5', 
		'.', '\x18', '\x2', '\x6AF', '\x6AE', '\x3', '\x2', '\x2', '\x2', '\x6AF', 
		'\x6B0', '\x3', '\x2', '\x2', '\x2', '\x6B0', '\x6B6', '\x3', '\x2', '\x2', 
		'\x2', '\x6B1', '\x6B3', '\x5', '.', '\x18', '\x2', '\x6B2', '\x6B4', 
		'\x5', ',', '\x17', '\x2', '\x6B3', '\x6B2', '\x3', '\x2', '\x2', '\x2', 
		'\x6B3', '\x6B4', '\x3', '\x2', '\x2', '\x2', '\x6B4', '\x6B6', '\x3', 
		'\x2', '\x2', '\x2', '\x6B5', '\x6AD', '\x3', '\x2', '\x2', '\x2', '\x6B5', 
		'\x6B1', '\x3', '\x2', '\x2', '\x2', '\x6B6', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x6B7', '\x6B8', '\x6', '\x1A', '\x19', '\x2', '\x6B8', '\x6B9', 
		'\t', '\x5', '\x2', '\x2', '\x6B9', '\x6BA', '\a', '\x29F', '\x2', '\x2', 
		'\x6BA', '\x33', '\x3', '\x2', '\x2', '\x2', '\x6BB', '\x6BC', '\a', '&', 
		'\x2', '\x2', '\x6BC', '\x6BD', '\a', '\xFB', '\x2', '\x2', '\x6BD', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x6BE', '\x6C1', '\a', '\x1AD', '\x2', '\x2', 
		'\x6BF', '\x6C1', '\x5', '\x458', '\x22D', '\x2', '\x6C0', '\x6BE', '\x3', 
		'\x2', '\x2', '\x2', '\x6C0', '\x6BF', '\x3', '\x2', '\x2', '\x2', '\x6C1', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x6C2', '\x6C3', '\a', '\x11B', '\x2', 
		'\x2', '\x6C3', '\x6C5', '\a', '\"', '\x2', '\x2', '\x6C4', '\x6C6', '\x5', 
		'\x3F8', '\x1FD', '\x2', '\x6C5', '\x6C4', '\x3', '\x2', '\x2', '\x2', 
		'\x6C5', '\x6C6', '\x3', '\x2', '\x2', '\x2', '\x6C6', '\x6CB', '\x3', 
		'\x2', '\x2', '\x2', '\x6C7', '\x6C8', '\x5', '\x458', '\x22D', '\x2', 
		'\x6C8', '\x6C9', '\a', '\x211', '\x2', '\x2', '\x6C9', '\x6CA', '\x5', 
		'\x3B2', '\x1DA', '\x2', '\x6CA', '\x6CC', '\x3', '\x2', '\x2', '\x2', 
		'\x6CB', '\x6C7', '\x3', '\x2', '\x2', '\x2', '\x6CB', '\x6CC', '\x3', 
		'\x2', '\x2', '\x2', '\x6CC', '\x39', '\x3', '\x2', '\x2', '\x2', '\x6CD', 
		'\x6CE', '\a', '\x158', '\x2', '\x2', '\x6CE', '\x6F0', '\x5', '\x424', 
		'\x213', '\x2', '\x6CF', '\x6D0', '\t', '\x6', '\x2', '\x2', '\x6D0', 
		'\x6D1', '\a', 'p', '\x2', '\x2', '\x6D1', '\x6D3', '\x5', '\x476', '\x23C', 
		'\x2', '\x6D2', '\x6D4', '\x5', '\x42', '\"', '\x2', '\x6D3', '\x6D2', 
		'\x3', '\x2', '\x2', '\x2', '\x6D3', '\x6D4', '\x3', '\x2', '\x2', '\x2', 
		'\x6D4', '\x6F1', '\x3', '\x2', '\x2', '\x2', '\x6D5', '\x6E9', '\x6', 
		'\x1E', '\x1A', '\x2', '\x6D6', '\x6EA', '\x3', '\x2', '\x2', '\x2', '\x6D7', 
		'\x6D8', '\a', '\x1C3', '\x2', '\x2', '\x6D8', '\x6D9', '\a', 'p', '\x2', 
		'\x2', '\x6D9', '\x6E4', '\x5', '\x476', '\x23C', '\x2', '\x6DA', '\x6E1', 
		'\x5', '\x46', '$', '\x2', '\x6DB', '\x6DD', '\a', '\x198', '\x2', '\x2', 
		'\x6DC', '\x6DB', '\x3', '\x2', '\x2', '\x2', '\x6DC', '\x6DD', '\x3', 
		'\x2', '\x2', '\x2', '\x6DD', '\x6DE', '\x3', '\x2', '\x2', '\x2', '\x6DE', 
		'\x6E0', '\x5', '\x46', '$', '\x2', '\x6DF', '\x6DC', '\x3', '\x2', '\x2', 
		'\x2', '\x6E0', '\x6E3', '\x3', '\x2', '\x2', '\x2', '\x6E1', '\x6DF', 
		'\x3', '\x2', '\x2', '\x2', '\x6E1', '\x6E2', '\x3', '\x2', '\x2', '\x2', 
		'\x6E2', '\x6E5', '\x3', '\x2', '\x2', '\x2', '\x6E3', '\x6E1', '\x3', 
		'\x2', '\x2', '\x2', '\x6E4', '\x6DA', '\x3', '\x2', '\x2', '\x2', '\x6E4', 
		'\x6E5', '\x3', '\x2', '\x2', '\x2', '\x6E5', '\x6EA', '\x3', '\x2', '\x2', 
		'\x2', '\x6E6', '\x6EA', '\t', '\a', '\x2', '\x2', '\x6E7', '\x6E8', '\a', 
		'\x23E', '\x2', '\x2', '\x6E8', '\x6EA', '\a', '\x1AB', '\x2', '\x2', 
		'\x6E9', '\x6D6', '\x3', '\x2', '\x2', '\x2', '\x6E9', '\x6D7', '\x3', 
		'\x2', '\x2', '\x2', '\x6E9', '\x6E6', '\x3', '\x2', '\x2', '\x2', '\x6E9', 
		'\x6E7', '\x3', '\x2', '\x2', '\x2', '\x6EA', '\x6F1', '\x3', '\x2', '\x2', 
		'\x2', '\x6EB', '\x6EC', '\a', '\x25D', '\x2', '\x2', '\x6EC', '\x6ED', 
		'\a', '\x28E', '\x2', '\x2', '\x6ED', '\x6F1', '\x5', '\x456', '\x22C', 
		'\x2', '\x6EE', '\x6EF', '\x6', '\x1E', '\x1B', '\x2', '\x6EF', '\x6F1', 
		'\x5', '\x42', '\"', '\x2', '\x6F0', '\x6CF', '\x3', '\x2', '\x2', '\x2', 
		'\x6F0', '\x6D5', '\x3', '\x2', '\x2', '\x2', '\x6F0', '\x6EB', '\x3', 
		'\x2', '\x2', '\x2', '\x6F0', '\x6EE', '\x3', '\x2', '\x2', '\x2', '\x6F1', 
		';', '\x3', '\x2', '\x2', '\x2', '\x6F2', '\x6F3', '\a', '\x293', '\x2', 
		'\x2', '\x6F3', '\x6F4', '\a', '\x158', '\x2', '\x2', '\x6F4', '\x6F5', 
		'\x5', '\x424', '\x213', '\x2', '\x6F5', '\x6F6', '\a', '\x26C', '\x2', 
		'\x2', '\x6F6', '\x6F8', '\t', '\b', '\x2', '\x2', '\x6F7', '\x6F9', '\x5', 
		'>', ' ', '\x2', '\x6F8', '\x6F7', '\x3', '\x2', '\x2', '\x2', '\x6F8', 
		'\x6F9', '\x3', '\x2', '\x2', '\x2', '\x6F9', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x6FA', '\x701', '\x5', '@', '!', '\x2', '\x6FB', '\x6FD', '\a', 
		'\x198', '\x2', '\x2', '\x6FC', '\x6FB', '\x3', '\x2', '\x2', '\x2', '\x6FC', 
		'\x6FD', '\x3', '\x2', '\x2', '\x2', '\x6FD', '\x6FE', '\x3', '\x2', '\x2', 
		'\x2', '\x6FE', '\x700', '\x5', '@', '!', '\x2', '\x6FF', '\x6FC', '\x3', 
		'\x2', '\x2', '\x2', '\x700', '\x703', '\x3', '\x2', '\x2', '\x2', '\x701', 
		'\x6FF', '\x3', '\x2', '\x2', '\x2', '\x701', '\x702', '\x3', '\x2', '\x2', 
		'\x2', '\x702', '?', '\x3', '\x2', '\x2', '\x2', '\x703', '\x701', '\x3', 
		'\x2', '\x2', '\x2', '\x704', '\x705', '\x5', '\x98', 'M', '\x2', '\x705', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x706', '\x70D', '\x5', '\x44', '#', 
		'\x2', '\x707', '\x709', '\a', '\x198', '\x2', '\x2', '\x708', '\x707', 
		'\x3', '\x2', '\x2', '\x2', '\x708', '\x709', '\x3', '\x2', '\x2', '\x2', 
		'\x709', '\x70A', '\x3', '\x2', '\x2', '\x2', '\x70A', '\x70C', '\x5', 
		'\x44', '#', '\x2', '\x70B', '\x708', '\x3', '\x2', '\x2', '\x2', '\x70C', 
		'\x70F', '\x3', '\x2', '\x2', '\x2', '\x70D', '\x70B', '\x3', '\x2', '\x2', 
		'\x2', '\x70D', '\x70E', '\x3', '\x2', '\x2', '\x2', '\x70E', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x70F', '\x70D', '\x3', '\x2', '\x2', '\x2', 
		'\x710', '\x712', '\a', '\xA6', '\x2', '\x2', '\x711', '\x713', '\a', 
		'\x181', '\x2', '\x2', '\x712', '\x711', '\x3', '\x2', '\x2', '\x2', '\x712', 
		'\x713', '\x3', '\x2', '\x2', '\x2', '\x713', '\x714', '\x3', '\x2', '\x2', 
		'\x2', '\x714', '\x71B', '\x5', '\x490', '\x249', '\x2', '\x715', '\x71B', 
		'\x5', '\x90', 'I', '\x2', '\x716', '\x71B', '\x5', '\x92', 'J', '\x2', 
		'\x717', '\x71B', '\x5', '\x98', 'M', '\x2', '\x718', '\x71B', '\x5', 
		'\x9A', 'N', '\x2', '\x719', '\x71B', '\x5', '\xA0', 'Q', '\x2', '\x71A', 
		'\x710', '\x3', '\x2', '\x2', '\x2', '\x71A', '\x715', '\x3', '\x2', '\x2', 
		'\x2', '\x71A', '\x716', '\x3', '\x2', '\x2', '\x2', '\x71A', '\x717', 
		'\x3', '\x2', '\x2', '\x2', '\x71A', '\x718', '\x3', '\x2', '\x2', '\x2', 
		'\x71A', '\x719', '\x3', '\x2', '\x2', '\x2', '\x71B', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x71C', '\x71E', '\a', '\xA6', '\x2', '\x2', '\x71D', 
		'\x71F', '\a', '\x181', '\x2', '\x2', '\x71E', '\x71D', '\x3', '\x2', 
		'\x2', '\x2', '\x71E', '\x71F', '\x3', '\x2', '\x2', '\x2', '\x71F', '\x720', 
		'\x3', '\x2', '\x2', '\x2', '\x720', '\x724', '\x5', '\x490', '\x249', 
		'\x2', '\x721', '\x724', '\x5', '\x90', 'I', '\x2', '\x722', '\x724', 
		'\x5', '\x92', 'J', '\x2', '\x723', '\x71C', '\x3', '\x2', '\x2', '\x2', 
		'\x723', '\x721', '\x3', '\x2', '\x2', '\x2', '\x723', '\x722', '\x3', 
		'\x2', '\x2', '\x2', '\x724', 'G', '\x3', '\x2', '\x2', '\x2', '\x725', 
		'\x727', '\x5', '\xA6', 'T', '\x2', '\x726', '\x725', '\x3', '\x2', '\x2', 
		'\x2', '\x726', '\x727', '\x3', '\x2', '\x2', '\x2', '\x727', '\x729', 
		'\x3', '\x2', '\x2', '\x2', '\x728', '\x72A', '\x5', '\x3C0', '\x1E1', 
		'\x2', '\x729', '\x728', '\x3', '\x2', '\x2', '\x2', '\x729', '\x72A', 
		'\x3', '\x2', '\x2', '\x2', '\x72A', '\x72C', '\x3', '\x2', '\x2', '\x2', 
		'\x72B', '\x72D', '\x5', '\xA8', 'U', '\x2', '\x72C', '\x72B', '\x3', 
		'\x2', '\x2', '\x2', '\x72C', '\x72D', '\x3', '\x2', '\x2', '\x2', '\x72D', 
		'\x72E', '\x3', '\x2', '\x2', '\x2', '\x72E', '\x72F', '\a', '\x171', 
		'\x2', '\x2', '\x72F', '\x730', '\x5', '\x420', '\x211', '\x2', '\x730', 
		'\x731', '\x5', 'J', '&', '\x2', '\x731', 'I', '\x3', '\x2', '\x2', '\x2', 
		'\x732', '\x734', '\x5', '\x402', '\x202', '\x2', '\x733', '\x732', '\x3', 
		'\x2', '\x2', '\x2', '\x733', '\x734', '\x3', '\x2', '\x2', '\x2', '\x734', 
		'\x735', '\x3', '\x2', '\x2', '\x2', '\x735', '\x736', '\a', '\x1B1', 
		'\x2', '\x2', '\x736', '\x737', '\x5', 'L', '\'', '\x2', '\x737', 'K', 
		'\x3', '\x2', '\x2', '\x2', '\x738', '\x73A', '\x5', '^', '\x30', '\x2', 
		'\x739', '\x73B', '\x5', 'N', '(', '\x2', '\x73A', '\x739', '\x3', '\x2', 
		'\x2', '\x2', '\x73A', '\x73B', '\x3', '\x2', '\x2', '\x2', '\x73B', 'M', 
		'\x3', '\x2', '\x2', '\x2', '\x73C', '\x73E', '\a', '\x2AB', '\x2', '\x2', 
		'\x73D', '\x73F', '\t', '\t', '\x2', '\x2', '\x73E', '\x73D', '\x3', '\x2', 
		'\x2', '\x2', '\x73E', '\x73F', '\x3', '\x2', '\x2', '\x2', '\x73F', '\x740', 
		'\x3', '\x2', '\x2', '\x2', '\x740', '\x741', '\a', '\x1C5', '\x2', '\x2', 
		'\x741', '\x742', '\a', '\x249', '\x2', '\x2', '\x742', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x743', '\x756', '\a', '\x1CD', '\x2', '\x2', '\x744', 
		'\x757', '\x5', 'R', '*', '\x2', '\x745', '\x757', '\x5', 'V', ',', '\x2', 
		'\x746', '\x757', '\x5', '\x64', '\x33', '\x2', '\x747', '\x757', '\x5', 
		'\x62', '\x32', '\x2', '\x748', '\x757', '\x5', '\x66', '\x34', '\x2', 
		'\x749', '\x757', '\x5', 't', ';', '\x2', '\x74A', '\x757', '\x5', '\xA2', 
		'R', '\x2', '\x74B', '\x757', '\x5', '\xAA', 'V', '\x2', '\x74C', '\x757', 
		'\x5', 'n', '\x38', '\x2', '\x74D', '\x757', '\x5', 'z', '>', '\x2', '\x74E', 
		'\x757', '\x5', '\x80', '\x41', '\x2', '\x74F', '\x757', '\x5', '\xAE', 
		'X', '\x2', '\x750', '\x751', '\x6', ')', '\x1C', '\x2', '\x751', '\x757', 
		'\x5', '\xB0', 'Y', '\x2', '\x752', '\x753', '\x6', ')', '\x1D', '\x2', 
		'\x753', '\x757', '\x5', '\xB2', 'Z', '\x2', '\x754', '\x755', '\x6', 
		')', '\x1E', '\x2', '\x755', '\x757', '\x5', '\x82', '\x42', '\x2', '\x756', 
		'\x744', '\x3', '\x2', '\x2', '\x2', '\x756', '\x745', '\x3', '\x2', '\x2', 
		'\x2', '\x756', '\x746', '\x3', '\x2', '\x2', '\x2', '\x756', '\x747', 
		'\x3', '\x2', '\x2', '\x2', '\x756', '\x748', '\x3', '\x2', '\x2', '\x2', 
		'\x756', '\x749', '\x3', '\x2', '\x2', '\x2', '\x756', '\x74A', '\x3', 
		'\x2', '\x2', '\x2', '\x756', '\x74B', '\x3', '\x2', '\x2', '\x2', '\x756', 
		'\x74C', '\x3', '\x2', '\x2', '\x2', '\x756', '\x74D', '\x3', '\x2', '\x2', 
		'\x2', '\x756', '\x74E', '\x3', '\x2', '\x2', '\x2', '\x756', '\x74F', 
		'\x3', '\x2', '\x2', '\x2', '\x756', '\x750', '\x3', '\x2', '\x2', '\x2', 
		'\x756', '\x752', '\x3', '\x2', '\x2', '\x2', '\x756', '\x754', '\x3', 
		'\x2', '\x2', '\x2', '\x757', 'Q', '\x3', '\x2', '\x2', '\x2', '\x758', 
		'\x75A', '\a', '\x1D5', '\x2', '\x2', '\x759', '\x75B', '\x5', '\x3C4', 
		'\x1E3', '\x2', '\x75A', '\x759', '\x3', '\x2', '\x2', '\x2', '\x75A', 
		'\x75B', '\x3', '\x2', '\x2', '\x2', '\x75B', '\x75C', '\x3', '\x2', '\x2', 
		'\x2', '\x75C', '\x760', '\x5', '\x40E', '\x208', '\x2', '\x75D', '\x75F', 
		'\x5', 'T', '+', '\x2', '\x75E', '\x75D', '\x3', '\x2', '\x2', '\x2', 
		'\x75F', '\x762', '\x3', '\x2', '\x2', '\x2', '\x760', '\x75E', '\x3', 
		'\x2', '\x2', '\x2', '\x760', '\x761', '\x3', '\x2', '\x2', '\x2', '\x761', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x762', '\x760', '\x3', '\x2', '\x2', 
		'\x2', '\x763', '\x768', '\x5', '\x3A8', '\x1D5', '\x2', '\x764', '\x768', 
		'\x5', '\x3A4', '\x1D3', '\x2', '\x765', '\x766', '\x6', '+', '\x1F', 
		'\x2', '\x766', '\x768', '\x5', '\x3A6', '\x1D4', '\x2', '\x767', '\x763', 
		'\x3', '\x2', '\x2', '\x2', '\x767', '\x764', '\x3', '\x2', '\x2', '\x2', 
		'\x767', '\x765', '\x3', '\x2', '\x2', '\x2', '\x768', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\x769', '\x76B', '\a', '\x159', '\x2', '\x2', '\x76A', 
		'\x769', '\x3', '\x2', '\x2', '\x2', '\x76A', '\x76B', '\x3', '\x2', '\x2', 
		'\x2', '\x76B', '\x76C', '\x3', '\x2', '\x2', '\x2', '\x76C', '\x76E', 
		'\a', '\x288', '\x2', '\x2', '\x76D', '\x76F', '\x5', '\x3C4', '\x1E3', 
		'\x2', '\x76E', '\x76D', '\x3', '\x2', '\x2', '\x2', '\x76E', '\x76F', 
		'\x3', '\x2', '\x2', '\x2', '\x76F', '\x770', '\x3', '\x2', '\x2', '\x2', 
		'\x770', '\x787', '\x5', '\x436', '\x21C', '\x2', '\x771', '\x772', '\a', 
		'\x19B', '\x2', '\x2', '\x772', '\x773', '\x5', 'X', '-', '\x2', '\x773', 
		'\x774', '\a', '\x19C', '\x2', '\x2', '\x774', '\x776', '\x3', '\x2', 
		'\x2', '\x2', '\x775', '\x771', '\x3', '\x2', '\x2', '\x2', '\x775', '\x776', 
		'\x3', '\x2', '\x2', '\x2', '\x776', '\x778', '\x3', '\x2', '\x2', '\x2', 
		'\x777', '\x779', '\x5', '\x39C', '\x1CF', '\x2', '\x778', '\x777', '\x3', 
		'\x2', '\x2', '\x2', '\x778', '\x779', '\x3', '\x2', '\x2', '\x2', '\x779', 
		'\x77B', '\x3', '\x2', '\x2', '\x2', '\x77A', '\x77C', '\x5', '\x3AA', 
		'\x1D6', '\x2', '\x77B', '\x77A', '\x3', '\x2', '\x2', '\x2', '\x77B', 
		'\x77C', '\x3', '\x2', '\x2', '\x2', '\x77C', '\x77E', '\x3', '\x2', '\x2', 
		'\x2', '\x77D', '\x77F', '\x5', '\\', '/', '\x2', '\x77E', '\x77D', '\x3', 
		'\x2', '\x2', '\x2', '\x77E', '\x77F', '\x3', '\x2', '\x2', '\x2', '\x77F', 
		'\x788', '\x3', '\x2', '\x2', '\x2', '\x780', '\x781', '\a', '\x21F', 
		'\x2', '\x2', '\x781', '\x788', '\x5', '\x43C', '\x21F', '\x2', '\x782', 
		'\x783', '\a', '\x19B', '\x2', '\x2', '\x783', '\x784', '\a', '\x21F', 
		'\x2', '\x2', '\x784', '\x785', '\x5', '\x43C', '\x21F', '\x2', '\x785', 
		'\x786', '\a', '\x19C', '\x2', '\x2', '\x786', '\x788', '\x3', '\x2', 
		'\x2', '\x2', '\x787', '\x775', '\x3', '\x2', '\x2', '\x2', '\x787', '\x780', 
		'\x3', '\x2', '\x2', '\x2', '\x787', '\x782', '\x3', '\x2', '\x2', '\x2', 
		'\x788', 'W', '\x3', '\x2', '\x2', '\x2', '\x789', '\x78E', '\x5', 'Z', 
		'.', '\x2', '\x78A', '\x78B', '\a', '\x198', '\x2', '\x2', '\x78B', '\x78D', 
		'\x5', 'Z', '.', '\x2', '\x78C', '\x78A', '\x3', '\x2', '\x2', '\x2', 
		'\x78D', '\x790', '\x3', '\x2', '\x2', '\x2', '\x78E', '\x78C', '\x3', 
		'\x2', '\x2', '\x2', '\x78E', '\x78F', '\x3', '\x2', '\x2', '\x2', '\x78F', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x790', '\x78E', '\x3', '\x2', '\x2', 
		'\x2', '\x791', '\x794', '\x5', '\x34C', '\x1A7', '\x2', '\x792', '\x794', 
		'\x5', '\x354', '\x1AB', '\x2', '\x793', '\x791', '\x3', '\x2', '\x2', 
		'\x2', '\x793', '\x792', '\x3', '\x2', '\x2', '\x2', '\x794', '[', '\x3', 
		'\x2', '\x2', '\x2', '\x795', '\x797', '\t', '\n', '\x2', '\x2', '\x796', 
		'\x795', '\x3', '\x2', '\x2', '\x2', '\x796', '\x797', '\x3', '\x2', '\x2', 
		'\x2', '\x797', '\x799', '\x3', '\x2', '\x2', '\x2', '\x798', '\x79A', 
		'\a', '\x1B1', '\x2', '\x2', '\x799', '\x798', '\x3', '\x2', '\x2', '\x2', 
		'\x799', '\x79A', '\x3', '\x2', '\x2', '\x2', '\x79A', '\x79B', '\x3', 
		'\x2', '\x2', '\x2', '\x79B', '\x79C', '\x5', '^', '\x30', '\x2', '\x79C', 
		']', '\x3', '\x2', '\x2', '\x2', '\x79D', '\x7A0', '\x5', '\x110', '\x89', 
		'\x2', '\x79E', '\x7A0', '\x5', '\x114', '\x8B', '\x2', '\x79F', '\x79D', 
		'\x3', '\x2', '\x2', '\x2', '\x79F', '\x79E', '\x3', '\x2', '\x2', '\x2', 
		'\x7A0', '_', '\x3', '\x2', '\x2', '\x2', '\x7A1', '\x7A5', '\a', '\x1CD', 
		'\x2', '\x2', '\x7A2', '\x7A6', '\x5', '\x62', '\x32', '\x2', '\x7A3', 
		'\x7A6', '\x5', '\x64', '\x33', '\x2', '\x7A4', '\x7A6', '\x5', '\x66', 
		'\x34', '\x2', '\x7A5', '\x7A2', '\x3', '\x2', '\x2', '\x2', '\x7A5', 
		'\x7A3', '\x3', '\x2', '\x2', '\x2', '\x7A5', '\x7A4', '\x3', '\x2', '\x2', 
		'\x2', '\x7A6', '\x7A8', '\x3', '\x2', '\x2', '\x2', '\x7A7', '\x7A9', 
		'\a', '\x199', '\x2', '\x2', '\x7A8', '\x7A7', '\x3', '\x2', '\x2', '\x2', 
		'\x7A8', '\x7A9', '\x3', '\x2', '\x2', '\x2', '\x7A9', '\x7AA', '\x3', 
		'\x2', '\x2', '\x2', '\x7AA', '\x7AB', '\a', '\x2', '\x2', '\x3', '\x7AB', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x7AC', '\x7AE', '\x5', '\x3C0', 
		'\x1E1', '\x2', '\x7AD', '\x7AC', '\x3', '\x2', '\x2', '\x2', '\x7AD', 
		'\x7AE', '\x3', '\x2', '\x2', '\x2', '\x7AE', '\x7AF', '\x3', '\x2', '\x2', 
		'\x2', '\x7AF', '\x7B0', '\a', '\x253', '\x2', '\x2', '\x7B0', '\x7B1', 
		'\x5', '\x412', '\x20A', '\x2', '\x7B1', '\x7BA', '\a', '\x19B', '\x2', 
		'\x2', '\x7B2', '\x7B7', '\x5', '\x3C6', '\x1E4', '\x2', '\x7B3', '\x7B4', 
		'\a', '\x198', '\x2', '\x2', '\x7B4', '\x7B6', '\x5', '\x3C6', '\x1E4', 
		'\x2', '\x7B5', '\x7B3', '\x3', '\x2', '\x2', '\x2', '\x7B6', '\x7B9', 
		'\x3', '\x2', '\x2', '\x2', '\x7B7', '\x7B5', '\x3', '\x2', '\x2', '\x2', 
		'\x7B7', '\x7B8', '\x3', '\x2', '\x2', '\x2', '\x7B8', '\x7BB', '\x3', 
		'\x2', '\x2', '\x2', '\x7B9', '\x7B7', '\x3', '\x2', '\x2', '\x2', '\x7BA', 
		'\x7B2', '\x3', '\x2', '\x2', '\x2', '\x7BA', '\x7BB', '\x3', '\x2', '\x2', 
		'\x2', '\x7BB', '\x7BC', '\x3', '\x2', '\x2', '\x2', '\x7BC', '\x7C0', 
		'\a', '\x19C', '\x2', '\x2', '\x7BD', '\x7BF', '\x5', 'h', '\x35', '\x2', 
		'\x7BE', '\x7BD', '\x3', '\x2', '\x2', '\x2', '\x7BF', '\x7C2', '\x3', 
		'\x2', '\x2', '\x2', '\x7C0', '\x7BE', '\x3', '\x2', '\x2', '\x2', '\x7C0', 
		'\x7C1', '\x3', '\x2', '\x2', '\x2', '\x7C1', '\x7C3', '\x3', '\x2', '\x2', 
		'\x2', '\x7C2', '\x7C0', '\x3', '\x2', '\x2', '\x2', '\x7C3', '\x7C4', 
		'\x5', '\x2FC', '\x17F', '\x2', '\x7C4', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x7C5', '\x7C7', '\x5', '\x3C0', '\x1E1', '\x2', '\x7C6', '\x7C5', 
		'\x3', '\x2', '\x2', '\x2', '\x7C6', '\x7C7', '\x3', '\x2', '\x2', '\x2', 
		'\x7C7', '\x7C8', '\x3', '\x2', '\x2', '\x2', '\x7C8', '\x7C9', '\a', 
		'\x166', '\x2', '\x2', '\x7C9', '\x7CA', '\x5', '\x416', '\x20C', '\x2', 
		'\x7CA', '\x7D3', '\a', '\x19B', '\x2', '\x2', '\x7CB', '\x7D0', '\x5', 
		'\x3C8', '\x1E5', '\x2', '\x7CC', '\x7CD', '\a', '\x198', '\x2', '\x2', 
		'\x7CD', '\x7CF', '\x5', '\x3C8', '\x1E5', '\x2', '\x7CE', '\x7CC', '\x3', 
		'\x2', '\x2', '\x2', '\x7CF', '\x7D2', '\x3', '\x2', '\x2', '\x2', '\x7D0', 
		'\x7CE', '\x3', '\x2', '\x2', '\x2', '\x7D0', '\x7D1', '\x3', '\x2', '\x2', 
		'\x2', '\x7D1', '\x7D4', '\x3', '\x2', '\x2', '\x2', '\x7D2', '\x7D0', 
		'\x3', '\x2', '\x2', '\x2', '\x7D3', '\x7CB', '\x3', '\x2', '\x2', '\x2', 
		'\x7D3', '\x7D4', '\x3', '\x2', '\x2', '\x2', '\x7D4', '\x7D5', '\x3', 
		'\x2', '\x2', '\x2', '\x7D5', '\x7D6', '\a', '\x19C', '\x2', '\x2', '\x7D6', 
		'\x7D7', '\a', '\x127', '\x2', '\x2', '\x7D7', '\x7DB', '\x5', '\x3CC', 
		'\x1E7', '\x2', '\x7D8', '\x7DA', '\x5', 'h', '\x35', '\x2', '\x7D9', 
		'\x7D8', '\x3', '\x2', '\x2', '\x2', '\x7DA', '\x7DD', '\x3', '\x2', '\x2', 
		'\x2', '\x7DB', '\x7D9', '\x3', '\x2', '\x2', '\x2', '\x7DB', '\x7DC', 
		'\x3', '\x2', '\x2', '\x2', '\x7DC', '\x7DE', '\x3', '\x2', '\x2', '\x2', 
		'\x7DD', '\x7DB', '\x3', '\x2', '\x2', '\x2', '\x7DE', '\x7DF', '\x5', 
		'\x2FC', '\x17F', '\x2', '\x7DF', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x7E0', '\x7E2', '\a', '?', '\x2', '\x2', '\x7E1', '\x7E0', '\x3', '\x2', 
		'\x2', '\x2', '\x7E1', '\x7E2', '\x3', '\x2', '\x2', '\x2', '\x7E2', '\x7E3', 
		'\x3', '\x2', '\x2', '\x2', '\x7E3', '\x7E4', '\a', '\x166', '\x2', '\x2', 
		'\x7E4', '\x7E5', '\x5', '\x42E', '\x218', '\x2', '\x7E5', '\x7E6', '\a', 
		'\x127', '\x2', '\x2', '\x7E6', '\x7E7', '\t', '\v', '\x2', '\x2', '\x7E7', 
		'\x7E8', '\a', '\x31', '\x2', '\x2', '\x7E8', '\x7E9', '\x5', '\x476', 
		'\x23C', '\x2', '\x7E9', 'g', '\x3', '\x2', '\x2', '\x2', '\x7EA', '\x7F0', 
		'\x5', 'l', '\x37', '\x2', '\x7EB', '\x7ED', '\a', '\x23E', '\x2', '\x2', 
		'\x7EC', '\x7EB', '\x3', '\x2', '\x2', '\x2', '\x7EC', '\x7ED', '\x3', 
		'\x2', '\x2', '\x2', '\x7ED', '\x7EE', '\x3', '\x2', '\x2', '\x2', '\x7EE', 
		'\x7F0', '\a', '\x1E5', '\x2', '\x2', '\x7EF', '\x7EA', '\x3', '\x2', 
		'\x2', '\x2', '\x7EF', '\x7EC', '\x3', '\x2', '\x2', '\x2', '\x7F0', 'i', 
		'\x3', '\x2', '\x2', '\x2', '\x7F1', '\x7F3', '\x5', 'h', '\x35', '\x2', 
		'\x7F2', '\x7F1', '\x3', '\x2', '\x2', '\x2', '\x7F3', '\x7F4', '\x3', 
		'\x2', '\x2', '\x2', '\x7F4', '\x7F2', '\x3', '\x2', '\x2', '\x2', '\x7F4', 
		'\x7F5', '\x3', '\x2', '\x2', '\x2', '\x7F5', 'k', '\x3', '\x2', '\x2', 
		'\x2', '\x7F6', '\x7F7', '\a', '\r', '\x2', '\x2', '\x7F7', '\x808', '\x5', 
		'\x476', '\x23C', '\x2', '\x7F8', '\x7F9', '\a', '\x1C', '\x2', '\x2', 
		'\x7F9', '\x808', '\a', '\x279', '\x2', '\x2', '\x7FA', '\x7FB', '\a', 
		'\x1D', '\x2', '\x2', '\x7FB', '\x808', '\a', '\x279', '\x2', '\x2', '\x7FC', 
		'\x7FD', '\a', '\xF', '\x2', '\x2', '\x7FD', '\x808', '\a', '\x279', '\x2', 
		'\x2', '\x7FE', '\x7FF', '\a', '\x256', '\x2', '\x2', '\x7FF', '\x800', 
		'\a', '\x279', '\x2', '\x2', '\x800', '\x808', '\a', 'o', '\x2', '\x2', 
		'\x801', '\x802', '\a', '\x238', '\x2', '\x2', '\x802', '\x803', '\a', 
		'\x279', '\x2', '\x2', '\x803', '\x808', '\a', 'o', '\x2', '\x2', '\x804', 
		'\x805', '\a', '\x279', '\x2', '\x2', '\x805', '\x806', '\a', ',', '\x2', 
		'\x2', '\x806', '\x808', '\t', '\f', '\x2', '\x2', '\x807', '\x7F6', '\x3', 
		'\x2', '\x2', '\x2', '\x807', '\x7F8', '\x3', '\x2', '\x2', '\x2', '\x807', 
		'\x7FA', '\x3', '\x2', '\x2', '\x2', '\x807', '\x7FC', '\x3', '\x2', '\x2', 
		'\x2', '\x807', '\x7FE', '\x3', '\x2', '\x2', '\x2', '\x807', '\x801', 
		'\x3', '\x2', '\x2', '\x2', '\x807', '\x804', '\x3', '\x2', '\x2', '\x2', 
		'\x808', 'm', '\x3', '\x2', '\x2', '\x2', '\x809', '\x80B', '\x5', '\x3F6', 
		'\x1FC', '\x2', '\x80A', '\x809', '\x3', '\x2', '\x2', '\x2', '\x80A', 
		'\x80B', '\x3', '\x2', '\x2', '\x2', '\x80B', '\x835', '\x3', '\x2', '\x2', 
		'\x2', '\x80C', '\x80E', '\a', '\x295', '\x2', '\x2', '\x80D', '\x80C', 
		'\x3', '\x2', '\x2', '\x2', '\x80D', '\x80E', '\x3', '\x2', '\x2', '\x2', 
		'\x80E', '\x80F', '\x3', '\x2', '\x2', '\x2', '\x80F', '\x818', '\a', 
		'\x20A', '\x2', '\x2', '\x810', '\x811', '\x6', '\x38', ' ', '\x2', '\x811', 
		'\x813', '\x5', '\x408', '\x205', '\x2', '\x812', '\x814', '\x5', '\x378', 
		'\x1BD', '\x2', '\x813', '\x812', '\x3', '\x2', '\x2', '\x2', '\x813', 
		'\x814', '\x3', '\x2', '\x2', '\x2', '\x814', '\x819', '\x3', '\x2', '\x2', 
		'\x2', '\x815', '\x817', '\x5', 'p', '\x39', '\x2', '\x816', '\x815', 
		'\x3', '\x2', '\x2', '\x2', '\x816', '\x817', '\x3', '\x2', '\x2', '\x2', 
		'\x817', '\x819', '\x3', '\x2', '\x2', '\x2', '\x818', '\x810', '\x3', 
		'\x2', '\x2', '\x2', '\x818', '\x816', '\x3', '\x2', '\x2', '\x2', '\x819', 
		'\x81A', '\x3', '\x2', '\x2', '\x2', '\x81A', '\x81E', '\x5', 'r', ':', 
		'\x2', '\x81B', '\x81D', '\x5', '\x372', '\x1BA', '\x2', '\x81C', '\x81B', 
		'\x3', '\x2', '\x2', '\x2', '\x81D', '\x820', '\x3', '\x2', '\x2', '\x2', 
		'\x81E', '\x81C', '\x3', '\x2', '\x2', '\x2', '\x81E', '\x81F', '\x3', 
		'\x2', '\x2', '\x2', '\x81F', '\x836', '\x3', '\x2', '\x2', '\x2', '\x820', 
		'\x81E', '\x3', '\x2', '\x2', '\x2', '\x821', '\x822', '\a', '\x1FD', 
		'\x2', '\x2', '\x822', '\x823', '\a', '\x20A', '\x2', '\x2', '\x823', 
		'\x824', '\x5', '\x408', '\x205', '\x2', '\x824', '\x828', '\x5', 'r', 
		':', '\x2', '\x825', '\x827', '\x5', '\x37A', '\x1BE', '\x2', '\x826', 
		'\x825', '\x3', '\x2', '\x2', '\x2', '\x827', '\x82A', '\x3', '\x2', '\x2', 
		'\x2', '\x828', '\x826', '\x3', '\x2', '\x2', '\x2', '\x828', '\x829', 
		'\x3', '\x2', '\x2', '\x2', '\x829', '\x836', '\x3', '\x2', '\x2', '\x2', 
		'\x82A', '\x828', '\x3', '\x2', '\x2', '\x2', '\x82B', '\x82C', '\a', 
		'\x271', '\x2', '\x2', '\x82C', '\x82D', '\a', '\x20A', '\x2', '\x2', 
		'\x82D', '\x82E', '\x5', '\x408', '\x205', '\x2', '\x82E', '\x832', '\x5', 
		'r', ':', '\x2', '\x82F', '\x831', '\x5', '\x37C', '\x1BF', '\x2', '\x830', 
		'\x82F', '\x3', '\x2', '\x2', '\x2', '\x831', '\x834', '\x3', '\x2', '\x2', 
		'\x2', '\x832', '\x830', '\x3', '\x2', '\x2', '\x2', '\x832', '\x833', 
		'\x3', '\x2', '\x2', '\x2', '\x833', '\x836', '\x3', '\x2', '\x2', '\x2', 
		'\x834', '\x832', '\x3', '\x2', '\x2', '\x2', '\x835', '\x80D', '\x3', 
		'\x2', '\x2', '\x2', '\x835', '\x821', '\x3', '\x2', '\x2', '\x2', '\x835', 
		'\x82B', '\x3', '\x2', '\x2', '\x2', '\x836', '\x838', '\x3', '\x2', '\x2', 
		'\x2', '\x837', '\x839', '\x5', '\x30', '\x19', '\x2', '\x838', '\x837', 
		'\x3', '\x2', '\x2', '\x2', '\x838', '\x839', '\x3', '\x2', '\x2', '\x2', 
		'\x839', 'o', '\x3', '\x2', '\x2', '\x2', '\x83A', '\x83D', '\x5', '\x408', 
		'\x205', '\x2', '\x83B', '\x83C', '\a', '\x29B', '\x2', '\x2', '\x83C', 
		'\x83E', '\x5', '\x370', '\x1B9', '\x2', '\x83D', '\x83B', '\x3', '\x2', 
		'\x2', '\x2', '\x83D', '\x83E', '\x3', '\x2', '\x2', '\x2', '\x83E', '\x844', 
		'\x3', '\x2', '\x2', '\x2', '\x83F', '\x840', '\x5', '\x408', '\x205', 
		'\x2', '\x840', '\x841', '\a', '\x164', '\x2', '\x2', '\x841', '\x842', 
		'\x5', '\x370', '\x1B9', '\x2', '\x842', '\x844', '\x3', '\x2', '\x2', 
		'\x2', '\x843', '\x83A', '\x3', '\x2', '\x2', '\x2', '\x843', '\x83F', 
		'\x3', '\x2', '\x2', '\x2', '\x844', 'q', '\x3', '\x2', '\x2', '\x2', 
		'\x845', '\x846', '\a', '\x244', '\x2', '\x2', '\x846', '\x847', '\x5', 
		'\x43C', '\x21F', '\x2', '\x847', '\x848', '\x5', '\x36E', '\x1B8', '\x2', 
		'\x848', 's', '\x3', '\x2', '\x2', '\x2', '\x849', '\x84A', '\a', '\xB8', 
		'\x2', '\x2', '\x84A', '\x84B', '\a', '\x201', '\x2', '\x2', '\x84B', 
		'\x84C', '\x5', '\x426', '\x214', '\x2', '\x84C', '\x84D', '\a', '\x1AC', 
		'\x2', '\x2', '\x84D', '\x84E', '\t', '\r', '\x2', '\x2', '\x84E', '\x850', 
		'\x5', '\x476', '\x23C', '\x2', '\x84F', '\x851', '\x5', 'v', '<', '\x2', 
		'\x850', '\x84F', '\x3', '\x2', '\x2', '\x2', '\x850', '\x851', '\x3', 
		'\x2', '\x2', '\x2', '\x851', 'u', '\x3', '\x2', '\x2', '\x2', '\x852', 
		'\x859', '\x5', 'x', '=', '\x2', '\x853', '\x855', '\a', '\x198', '\x2', 
		'\x2', '\x854', '\x853', '\x3', '\x2', '\x2', '\x2', '\x854', '\x855', 
		'\x3', '\x2', '\x2', '\x2', '\x855', '\x856', '\x3', '\x2', '\x2', '\x2', 
		'\x856', '\x858', '\x5', 'x', '=', '\x2', '\x857', '\x854', '\x3', '\x2', 
		'\x2', '\x2', '\x858', '\x85B', '\x3', '\x2', '\x2', '\x2', '\x859', '\x857', 
		'\x3', '\x2', '\x2', '\x2', '\x859', '\x85A', '\x3', '\x2', '\x2', '\x2', 
		'\x85A', 'w', '\x3', '\x2', '\x2', '\x2', '\x85B', '\x859', '\x3', '\x2', 
		'\x2', '\x2', '\x85C', '\x863', '\x5', '\x8C', 'G', '\x2', '\x85D', '\x863', 
		'\x5', '\x8E', 'H', '\x2', '\x85E', '\x863', '\x5', '\x96', 'L', '\x2', 
		'\x85F', '\x863', '\x5', '\x98', 'M', '\x2', '\x860', '\x863', '\x5', 
		'\x9A', 'N', '\x2', '\x861', '\x863', '\x5', '\x9C', 'O', '\x2', '\x862', 
		'\x85C', '\x3', '\x2', '\x2', '\x2', '\x862', '\x85D', '\x3', '\x2', '\x2', 
		'\x2', '\x862', '\x85E', '\x3', '\x2', '\x2', '\x2', '\x862', '\x85F', 
		'\x3', '\x2', '\x2', '\x2', '\x862', '\x860', '\x3', '\x2', '\x2', '\x2', 
		'\x862', '\x861', '\x3', '\x2', '\x2', '\x2', '\x863', 'y', '\x3', '\x2', 
		'\x2', '\x2', '\x864', '\x865', '\a', '-', '\x2', '\x2', '\x865', '\x866', 
		'\x5', '\x430', '\x219', '\x2', '\x866', '\x867', '\a', '\x1FA', '\x2', 
		'\x2', '\x867', '\x868', '\a', 'o', '\x2', '\x2', '\x868', '\x869', '\a', 
		'\x38', '\x2', '\x2', '\x869', '\x86A', '\x5', '\x48A', '\x246', '\x2', 
		'\x86A', '\x86B', '\x5', '|', '?', '\x2', '\x86B', '{', '\x3', '\x2', 
		'\x2', '\x2', '\x86C', '\x86D', '\a', '\x1F', '\x2', '\x2', '\x86D', '\x86E', 
		'\a', '\x19B', '\x2', '\x2', '\x86E', '\x873', '\x5', '~', '@', '\x2', 
		'\x86F', '\x870', '\a', '\x198', '\x2', '\x2', '\x870', '\x872', '\x5', 
		'~', '@', '\x2', '\x871', '\x86F', '\x3', '\x2', '\x2', '\x2', '\x872', 
		'\x875', '\x3', '\x2', '\x2', '\x2', '\x873', '\x871', '\x3', '\x2', '\x2', 
		'\x2', '\x873', '\x874', '\x3', '\x2', '\x2', '\x2', '\x874', '\x876', 
		'\x3', '\x2', '\x2', '\x2', '\x875', '\x873', '\x3', '\x2', '\x2', '\x2', 
		'\x876', '\x877', '\a', '\x19C', '\x2', '\x2', '\x877', '}', '\x3', '\x2', 
		'\x2', '\x2', '\x878', '\x879', '\a', '\x1A', '\x2', '\x2', '\x879', '\x887', 
		'\x5', '\x476', '\x23C', '\x2', '\x87A', '\x87B', '\a', '\x1D5', '\x2', 
		'\x2', '\x87B', '\x887', '\x5', '\x476', '\x23C', '\x2', '\x87C', '\x87D', 
		'\a', '\x16E', '\x2', '\x2', '\x87D', '\x887', '\x5', '\x476', '\x23C', 
		'\x2', '\x87E', '\x87F', '\a', '\xFD', '\x2', '\x2', '\x87F', '\x887', 
		'\x5', '\x476', '\x23C', '\x2', '\x880', '\x881', '\a', '\x30', '\x2', 
		'\x2', '\x881', '\x887', '\x5', '\x476', '\x23C', '\x2', '\x882', '\x883', 
		'\a', ' ', '\x2', '\x2', '\x883', '\x887', '\x5', '\x476', '\x23C', '\x2', 
		'\x884', '\x885', '\a', '#', '\x2', '\x2', '\x885', '\x887', '\x5', '\x462', 
		'\x232', '\x2', '\x886', '\x878', '\x3', '\x2', '\x2', '\x2', '\x886', 
		'\x87A', '\x3', '\x2', '\x2', '\x2', '\x886', '\x87C', '\x3', '\x2', '\x2', 
		'\x2', '\x886', '\x87E', '\x3', '\x2', '\x2', '\x2', '\x886', '\x880', 
		'\x3', '\x2', '\x2', '\x2', '\x886', '\x882', '\x3', '\x2', '\x2', '\x2', 
		'\x886', '\x884', '\x3', '\x2', '\x2', '\x2', '\x887', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x888', '\x889', '\a', '\x158', '\x2', '\x2', '\x889', 
		'\x88A', '\x5', '\x422', '\x212', '\x2', '\x88A', '\x88F', '\x5', '\x84', 
		'\x43', '\x2', '\x88B', '\x88C', '\a', '\x29A', '\x2', '\x2', '\x88C', 
		'\x88D', '\a', '\xB8', '\x2', '\x2', '\x88D', '\x88E', '\a', '\x201', 
		'\x2', '\x2', '\x88E', '\x890', '\x5', '\x428', '\x215', '\x2', '\x88F', 
		'\x88B', '\x3', '\x2', '\x2', '\x2', '\x88F', '\x890', '\x3', '\x2', '\x2', 
		'\x2', '\x890', '\x892', '\x3', '\x2', '\x2', '\x2', '\x891', '\x893', 
		'\x5', '\x88', '\x45', '\x2', '\x892', '\x891', '\x3', '\x2', '\x2', '\x2', 
		'\x892', '\x893', '\x3', '\x2', '\x2', '\x2', '\x893', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x894', '\x895', '\a', '\x293', '\x2', '\x2', '\x895', 
		'\x896', '\a', '\x158', '\x2', '\x2', '\x896', '\x897', '\x5', '\x422', 
		'\x212', '\x2', '\x897', '\x898', '\a', '\x1AC', '\x2', '\x2', '\x898', 
		'\x89A', '\x5', '\x86', '\x44', '\x2', '\x899', '\x89B', '\x5', '>', ' ', 
		'\x2', '\x89A', '\x899', '\x3', '\x2', '\x2', '\x2', '\x89A', '\x89B', 
		'\x3', '\x2', '\x2', '\x2', '\x89B', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x89C', '\x89F', '\x6', '\x43', '!', '\x2', '\x89D', '\x89E', '\a', '\x1AC', 
		'\x2', '\x2', '\x89E', '\x8A0', '\x5', '\x86', '\x44', '\x2', '\x89F', 
		'\x89D', '\x3', '\x2', '\x2', '\x2', '\x89F', '\x8A0', '\x3', '\x2', '\x2', 
		'\x2', '\x8A0', '\x8A4', '\x3', '\x2', '\x2', '\x2', '\x8A1', '\x8A2', 
		'\a', '\x1AC', '\x2', '\x2', '\x8A2', '\x8A4', '\x5', '\x86', '\x44', 
		'\x2', '\x8A3', '\x89C', '\x3', '\x2', '\x2', '\x2', '\x8A3', '\x8A1', 
		'\x3', '\x2', '\x2', '\x2', '\x8A4', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x8A5', '\x8A6', '\a', 'p', '\x2', '\x2', '\x8A6', '\x8A7', '\x5', '\x476', 
		'\x23C', '\x2', '\x8A7', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8A8', 
		'\x8AF', '\x5', '\x8A', '\x46', '\x2', '\x8A9', '\x8AB', '\a', '\x198', 
		'\x2', '\x2', '\x8AA', '\x8A9', '\x3', '\x2', '\x2', '\x2', '\x8AA', '\x8AB', 
		'\x3', '\x2', '\x2', '\x2', '\x8AB', '\x8AC', '\x3', '\x2', '\x2', '\x2', 
		'\x8AC', '\x8AE', '\x5', '\x8A', '\x46', '\x2', '\x8AD', '\x8AA', '\x3', 
		'\x2', '\x2', '\x2', '\x8AE', '\x8B1', '\x3', '\x2', '\x2', '\x2', '\x8AF', 
		'\x8AD', '\x3', '\x2', '\x2', '\x2', '\x8AF', '\x8B0', '\x3', '\x2', '\x2', 
		'\x2', '\x8B0', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8B1', '\x8AF', 
		'\x3', '\x2', '\x2', '\x2', '\x8B2', '\x8BF', '\x5', '\x8C', 'G', '\x2', 
		'\x8B3', '\x8BF', '\x5', '\x90', 'I', '\x2', '\x8B4', '\x8BF', '\x5', 
		'\x92', 'J', '\x2', '\x8B5', '\x8BF', '\x5', '\x94', 'K', '\x2', '\x8B6', 
		'\x8BF', '\x5', '\x96', 'L', '\x2', '\x8B7', '\x8BF', '\x5', '\x98', 'M', 
		'\x2', '\x8B8', '\x8BF', '\x5', '\x9A', 'N', '\x2', '\x8B9', '\x8BF', 
		'\x5', '\x9C', 'O', '\x2', '\x8BA', '\x8BB', '\x6', '\x46', '\"', '\x2', 
		'\x8BB', '\x8BF', '\x5', '\x9E', 'P', '\x2', '\x8BC', '\x8BD', '\x6', 
		'\x46', '#', '\x2', '\x8BD', '\x8BF', '\x5', '\xA0', 'Q', '\x2', '\x8BE', 
		'\x8B2', '\x3', '\x2', '\x2', '\x2', '\x8BE', '\x8B3', '\x3', '\x2', '\x2', 
		'\x2', '\x8BE', '\x8B4', '\x3', '\x2', '\x2', '\x2', '\x8BE', '\x8B5', 
		'\x3', '\x2', '\x2', '\x2', '\x8BE', '\x8B6', '\x3', '\x2', '\x2', '\x2', 
		'\x8BE', '\x8B7', '\x3', '\x2', '\x2', '\x2', '\x8BE', '\x8B8', '\x3', 
		'\x2', '\x2', '\x2', '\x8BE', '\x8B9', '\x3', '\x2', '\x2', '\x2', '\x8BE', 
		'\x8BA', '\x3', '\x2', '\x2', '\x2', '\x8BE', '\x8BC', '\x3', '\x2', '\x2', 
		'\x2', '\x8BF', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8C0', '\x8C2', 
		'\a', '\xA6', '\x2', '\x2', '\x8C1', '\x8C3', '\a', '\x181', '\x2', '\x2', 
		'\x8C2', '\x8C1', '\x3', '\x2', '\x2', '\x2', '\x8C2', '\x8C3', '\x3', 
		'\x2', '\x2', '\x2', '\x8C3', '\x8C4', '\x3', '\x2', '\x2', '\x2', '\x8C4', 
		'\x8C5', '\x5', '\x490', '\x249', '\x2', '\x8C5', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', '\x8C6', '\x8C8', '\t', '\xE', '\x2', '\x2', '\x8C7', '\x8C9', 
		'\a', '\x181', '\x2', '\x2', '\x8C8', '\x8C7', '\x3', '\x2', '\x2', '\x2', 
		'\x8C8', '\x8C9', '\x3', '\x2', '\x2', '\x2', '\x8C9', '\x8CA', '\x3', 
		'\x2', '\x2', '\x2', '\x8CA', '\x8CB', '\x5', '\x490', '\x249', '\x2', 
		'\x8CB', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8CC', '\x8CE', '\a', '\x46', 
		'\x2', '\x2', '\x8CD', '\x8CF', '\a', '\x181', '\x2', '\x2', '\x8CE', 
		'\x8CD', '\x3', '\x2', '\x2', '\x2', '\x8CE', '\x8CF', '\x3', '\x2', '\x2', 
		'\x2', '\x8CF', '\x8D0', '\x3', '\x2', '\x2', '\x2', '\x8D0', '\x8D1', 
		'\x5', '\x490', '\x249', '\x2', '\x8D1', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x8D2', '\x8D4', '\a', '\xD4', '\x2', '\x2', '\x8D3', '\x8D5', 
		'\a', '\x181', '\x2', '\x2', '\x8D4', '\x8D3', '\x3', '\x2', '\x2', '\x2', 
		'\x8D4', '\x8D5', '\x3', '\x2', '\x2', '\x2', '\x8D5', '\x8D6', '\x3', 
		'\x2', '\x2', '\x2', '\x8D6', '\x8D7', '\x5', '\x490', '\x249', '\x2', 
		'\x8D7', '\x93', '\x3', '\x2', '\x2', '\x2', '\x8D8', '\x8DA', '\a', '\x8D', 
		'\x2', '\x2', '\x8D9', '\x8DB', '\a', '\x181', '\x2', '\x2', '\x8DA', 
		'\x8D9', '\x3', '\x2', '\x2', '\x2', '\x8DA', '\x8DB', '\x3', '\x2', '\x2', 
		'\x2', '\x8DB', '\x8DC', '\x3', '\x2', '\x2', '\x2', '\x8DC', '\x8DD', 
		'\x5', '\x490', '\x249', '\x2', '\x8DD', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x8DE', '\x8E0', '\a', '\xF0', '\x2', '\x2', '\x8DF', '\x8E1', 
		'\a', '\x181', '\x2', '\x2', '\x8E0', '\x8DF', '\x3', '\x2', '\x2', '\x2', 
		'\x8E0', '\x8E1', '\x3', '\x2', '\x2', '\x2', '\x8E1', '\x8E2', '\x3', 
		'\x2', '\x2', '\x2', '\x8E2', '\x8E3', '\x5', '\x464', '\x233', '\x2', 
		'\x8E3', '\x97', '\x3', '\x2', '\x2', '\x2', '\x8E4', '\x8E6', '\a', '\x14A', 
		'\x2', '\x2', '\x8E5', '\x8E4', '\x3', '\x2', '\x2', '\x2', '\x8E5', '\x8E6', 
		'\x3', '\x2', '\x2', '\x2', '\x8E6', '\x8E7', '\x3', '\x2', '\x2', '\x2', 
		'\x8E7', '\x8E9', '\a', '\x82', '\x2', '\x2', '\x8E8', '\x8EA', '\a', 
		'\x181', '\x2', '\x2', '\x8E9', '\x8E8', '\x3', '\x2', '\x2', '\x2', '\x8E9', 
		'\x8EA', '\x3', '\x2', '\x2', '\x2', '\x8EA', '\x8EB', '\x3', '\x2', '\x2', 
		'\x2', '\x8EB', '\x8EC', '\x5', '\x434', '\x21B', '\x2', '\x8EC', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '\x8ED', '\x8EE', '\t', '\xF', '\x2', '\x2', 
		'\x8EE', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x8EF', '\x8F1', '\a', '\r', 
		'\x2', '\x2', '\x8F0', '\x8F2', '\a', '\x181', '\x2', '\x2', '\x8F1', 
		'\x8F0', '\x3', '\x2', '\x2', '\x2', '\x8F1', '\x8F2', '\x3', '\x2', '\x2', 
		'\x2', '\x8F2', '\x8F3', '\x3', '\x2', '\x2', '\x2', '\x8F3', '\x8F4', 
		'\x5', '\x476', '\x23C', '\x2', '\x8F4', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\x8F5', '\x8F7', '\a', '\x94', '\x2', '\x2', '\x8F6', '\x8F8', 
		'\a', '\x181', '\x2', '\x2', '\x8F7', '\x8F6', '\x3', '\x2', '\x2', '\x2', 
		'\x8F7', '\x8F8', '\x3', '\x2', '\x2', '\x2', '\x8F8', '\x8F9', '\x3', 
		'\x2', '\x2', '\x2', '\x8F9', '\x8FA', '\x5', '\x490', '\x249', '\x2', 
		'\x8FA', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x8FB', '\x8FD', '\a', '\x62', 
		'\x2', '\x2', '\x8FC', '\x8FE', '\a', '\x181', '\x2', '\x2', '\x8FD', 
		'\x8FC', '\x3', '\x2', '\x2', '\x2', '\x8FD', '\x8FE', '\x3', '\x2', '\x2', 
		'\x2', '\x8FE', '\x8FF', '\x3', '\x2', '\x2', '\x2', '\x8FF', '\x900', 
		'\x5', '\x470', '\x239', '\x2', '\x900', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\x901', '\x903', '\x5', '\xA4', 'S', '\x2', '\x902', '\x901', 
		'\x3', '\x2', '\x2', '\x2', '\x902', '\x903', '\x3', '\x2', '\x2', '\x2', 
		'\x903', '\x905', '\x3', '\x2', '\x2', '\x2', '\x904', '\x906', '\x5', 
		'\x3C0', '\x1E1', '\x2', '\x905', '\x904', '\x3', '\x2', '\x2', '\x2', 
		'\x905', '\x906', '\x3', '\x2', '\x2', '\x2', '\x906', '\x908', '\x3', 
		'\x2', '\x2', '\x2', '\x907', '\x909', '\x5', '\xA8', 'U', '\x2', '\x908', 
		'\x907', '\x3', '\x2', '\x2', '\x2', '\x908', '\x909', '\x3', '\x2', '\x2', 
		'\x2', '\x909', '\x90A', '\x3', '\x2', '\x2', '\x2', '\x90A', '\x90B', 
		'\a', '\x171', '\x2', '\x2', '\x90B', '\x90C', '\x5', '\x41E', '\x210', 
		'\x2', '\x90C', '\x90D', '\x5', 'J', '&', '\x2', '\x90D', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\x90E', '\x90F', '\a', '\x24C', '\x2', '\x2', '\x90F', 
		'\x911', '\a', '\x25F', '\x2', '\x2', '\x910', '\x912', '\x5', '\xA6', 
		'T', '\x2', '\x911', '\x910', '\x3', '\x2', '\x2', '\x2', '\x911', '\x912', 
		'\x3', '\x2', '\x2', '\x2', '\x912', '\x915', '\x3', '\x2', '\x2', '\x2', 
		'\x913', '\x915', '\x5', '\xA6', 'T', '\x2', '\x914', '\x90E', '\x3', 
		'\x2', '\x2', '\x2', '\x914', '\x913', '\x3', '\x2', '\x2', '\x2', '\x915', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\x916', '\x917', '\a', '@', '\x2', 
		'\x2', '\x917', '\x918', '\a', '\x181', '\x2', '\x2', '\x918', '\x919', 
		'\t', '\x10', '\x2', '\x2', '\x919', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\x91A', '\x91B', '\a', '\x279', '\x2', '\x2', '\x91B', '\x91C', '\a', 
		',', '\x2', '\x2', '\x91C', '\x91D', '\t', '\f', '\x2', '\x2', '\x91D', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\x91E', '\x920', '\x5', '\x3C0', 
		'\x1E1', '\x2', '\x91F', '\x91E', '\x3', '\x2', '\x2', '\x2', '\x91F', 
		'\x920', '\x3', '\x2', '\x2', '\x2', '\x920', '\x921', '\x3', '\x2', '\x2', 
		'\x2', '\x921', '\x922', '\a', '\x290', '\x2', '\x2', '\x922', '\x923', 
		'\x5', '\x41A', '\x20E', '\x2', '\x923', '\x924', '\t', '\x11', '\x2', 
		'\x2', '\x924', '\x925', '\t', '\x12', '\x2', '\x2', '\x925', '\x926', 
		'\a', '\x244', '\x2', '\x2', '\x926', '\x927', '\x5', '\x43C', '\x21F', 
		'\x2', '\x927', '\x928', '\a', '\x1FB', '\x2', '\x2', '\x928', '\x929', 
		'\a', '\x1EB', '\x2', '\x2', '\x929', '\x92B', '\a', '\x12F', '\x2', '\x2', 
		'\x92A', '\x92C', '\x5', '\xAC', 'W', '\x2', '\x92B', '\x92A', '\x3', 
		'\x2', '\x2', '\x2', '\x92B', '\x92C', '\x3', '\x2', '\x2', '\x2', '\x92C', 
		'\x92D', '\x3', '\x2', '\x2', '\x2', '\x92D', '\x92E', '\x5', '\x2FC', 
		'\x17F', '\x2', '\x92E', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x92F', 
		'\x930', '\x6', 'W', '$', '\x2', '\x930', '\x931', '\t', '\x13', '\x2', 
		'\x2', '\x931', '\x932', '\x5', '\x48A', '\x246', '\x2', '\x932', '\xAD', 
		'\x3', '\x2', '\x2', '\x2', '\x933', '\x935', '\x5', '\x3C0', '\x1E1', 
		'\x2', '\x934', '\x933', '\x3', '\x2', '\x2', '\x2', '\x934', '\x935', 
		'\x3', '\x2', '\x2', '\x2', '\x935', '\x936', '\x3', '\x2', '\x2', '\x2', 
		'\x936', '\x938', '\a', '\x87', '\x2', '\x2', '\x937', '\x939', '\x5', 
		'\x3C4', '\x1E3', '\x2', '\x938', '\x937', '\x3', '\x2', '\x2', '\x2', 
		'\x938', '\x939', '\x3', '\x2', '\x2', '\x2', '\x939', '\x93A', '\x3', 
		'\x2', '\x2', '\x2', '\x93A', '\x93B', '\x5', '\x42A', '\x216', '\x2', 
		'\x93B', '\x93C', '\a', '\x244', '\x2', '\x2', '\x93C', '\x93D', '\a', 
		'\x131', '\x2', '\x2', '\x93D', '\x944', '\x5', '\x34A', '\x1A6', '\x2', 
		'\x93E', '\x93F', '\a', '\x244', '\x2', '\x2', '\x93F', '\x941', '\a', 
		'_', '\x2', '\x2', '\x940', '\x942', '\a', '\x23E', '\x2', '\x2', '\x941', 
		'\x940', '\x3', '\x2', '\x2', '\x2', '\x941', '\x942', '\x3', '\x2', '\x2', 
		'\x2', '\x942', '\x943', '\x3', '\x2', '\x2', '\x2', '\x943', '\x945', 
		'\a', '\x104', '\x2', '\x2', '\x944', '\x93E', '\x3', '\x2', '\x2', '\x2', 
		'\x944', '\x945', '\x3', '\x2', '\x2', '\x2', '\x945', '\x94C', '\x3', 
		'\x2', '\x2', '\x2', '\x946', '\x94D', '\a', '\x91', '\x2', '\x2', '\x947', 
		'\x94A', '\a', 'z', '\x2', '\x2', '\x948', '\x949', '\a', '\x244', '\x2', 
		'\x2', '\x949', '\x94B', '\a', '/', '\x2', '\x2', '\x94A', '\x948', '\x3', 
		'\x2', '\x2', '\x2', '\x94A', '\x94B', '\x3', '\x2', '\x2', '\x2', '\x94B', 
		'\x94D', '\x3', '\x2', '\x2', '\x2', '\x94C', '\x946', '\x3', '\x2', '\x2', 
		'\x2', '\x94C', '\x947', '\x3', '\x2', '\x2', '\x2', '\x94C', '\x94D', 
		'\x3', '\x2', '\x2', '\x2', '\x94D', '\x950', '\x3', '\x2', '\x2', '\x2', 
		'\x94E', '\x94F', '\a', '\r', '\x2', '\x2', '\x94F', '\x951', '\x5', '\x476', 
		'\x23C', '\x2', '\x950', '\x94E', '\x3', '\x2', '\x2', '\x2', '\x950', 
		'\x951', '\x3', '\x2', '\x2', '\x2', '\x951', '\x952', '\x3', '\x2', '\x2', 
		'\x2', '\x952', '\x953', '\a', '\x11', '\x2', '\x2', '\x953', '\x954', 
		'\x5', '\x2FC', '\x17F', '\x2', '\x954', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\x955', '\x957', '\a', '\x2B4', '\x2', '\x2', '\x956', '\x958', 
		'\x5', '\x3C4', '\x1E3', '\x2', '\x957', '\x956', '\x3', '\x2', '\x2', 
		'\x2', '\x957', '\x958', '\x3', '\x2', '\x2', '\x2', '\x958', '\x959', 
		'\x3', '\x2', '\x2', '\x2', '\x959', '\x95A', '\x5', '\x226', '\x114', 
		'\x2', '\x95A', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x95B', '\x95C', 
		'\a', '\x24C', '\x2', '\x2', '\x95C', '\x95D', '\a', '\x25F', '\x2', '\x2', 
		'\x95D', '\x95E', '\a', '\x271', '\x2', '\x2', '\x95E', '\x95F', '\a', 
		'\x2EF', '\x2', '\x2', '\x95F', '\x960', '\a', '\x2E7', '\x2', '\x2', 
		'\x960', '\x964', '\x5', '\x468', '\x235', '\x2', '\x961', '\x963', '\x5', 
		'\xB4', '[', '\x2', '\x962', '\x961', '\x3', '\x2', '\x2', '\x2', '\x963', 
		'\x966', '\x3', '\x2', '\x2', '\x2', '\x964', '\x962', '\x3', '\x2', '\x2', 
		'\x2', '\x964', '\x965', '\x3', '\x2', '\x2', '\x2', '\x965', '\x975', 
		'\x3', '\x2', '\x2', '\x2', '\x966', '\x964', '\x3', '\x2', '\x2', '\x2', 
		'\x967', '\x968', '\a', '\x271', '\x2', '\x2', '\x968', '\x969', '\a', 
		'\x2EF', '\x2', '\x2', '\x969', '\x96B', '\a', '\x2E7', '\x2', '\x2', 
		'\x96A', '\x96C', '\x5', '\x3C4', '\x1E3', '\x2', '\x96B', '\x96A', '\x3', 
		'\x2', '\x2', '\x2', '\x96B', '\x96C', '\x3', '\x2', '\x2', '\x2', '\x96C', 
		'\x96D', '\x3', '\x2', '\x2', '\x2', '\x96D', '\x971', '\x5', '\x468', 
		'\x235', '\x2', '\x96E', '\x970', '\x5', '\xB4', '[', '\x2', '\x96F', 
		'\x96E', '\x3', '\x2', '\x2', '\x2', '\x970', '\x973', '\x3', '\x2', '\x2', 
		'\x2', '\x971', '\x96F', '\x3', '\x2', '\x2', '\x2', '\x971', '\x972', 
		'\x3', '\x2', '\x2', '\x2', '\x972', '\x975', '\x3', '\x2', '\x2', '\x2', 
		'\x973', '\x971', '\x3', '\x2', '\x2', '\x2', '\x974', '\x95B', '\x3', 
		'\x2', '\x2', '\x2', '\x974', '\x967', '\x3', '\x2', '\x2', '\x2', '\x975', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\x976', '\x977', '\a', '\xE7', '\x2', 
		'\x2', '\x977', '\x978', '\a', '\x15B', '\x2', '\x2', '\x978', '\x986', 
		'\x5', '\x478', '\x23D', '\x2', '\x979', '\x97A', '\a', '\x2EC', '\x2', 
		'\x2', '\x97A', '\x97B', '\a', '\x15B', '\x2', '\x2', '\x97B', '\x986', 
		'\x5', '\x478', '\x23D', '\x2', '\x97C', '\x97D', '\a', '\x2EE', '\x2', 
		'\x2', '\x97D', '\x97E', '\x5', '\x478', '\x23D', '\x2', '\x97E', '\x97F', 
		'\a', '\xA1', '\x2', '\x2', '\x97F', '\x980', '\a', '\x1BE', '\x2', '\x2', 
		'\x980', '\x981', '\x5', '\x468', '\x235', '\x2', '\x981', '\x986', '\x3', 
		'\x2', '\x2', '\x2', '\x982', '\x983', '\a', '\x2ED', '\x2', '\x2', '\x983', 
		'\x984', '\a', '\x15B', '\x2', '\x2', '\x984', '\x986', '\x5', '\x478', 
		'\x23D', '\x2', '\x985', '\x976', '\x3', '\x2', '\x2', '\x2', '\x985', 
		'\x979', '\x3', '\x2', '\x2', '\x2', '\x985', '\x97C', '\x3', '\x2', '\x2', 
		'\x2', '\x985', '\x982', '\x3', '\x2', '\x2', '\x2', '\x986', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\x987', '\x999', '\a', '\x1E9', '\x2', '\x2', 
		'\x988', '\x99A', '\x5', '\xB8', ']', '\x2', '\x989', '\x99A', '\x5', 
		'\xBA', '^', '\x2', '\x98A', '\x99A', '\x5', '\xBC', '_', '\x2', '\x98B', 
		'\x99A', '\x5', '\xBE', '`', '\x2', '\x98C', '\x99A', '\x5', '\xC0', '\x61', 
		'\x2', '\x98D', '\x99A', '\x5', '\xC2', '\x62', '\x2', '\x98E', '\x99A', 
		'\x5', '\xC6', '\x64', '\x2', '\x98F', '\x99A', '\x5', '\xC8', '\x65', 
		'\x2', '\x990', '\x99A', '\x5', '\xCA', '\x66', '\x2', '\x991', '\x99A', 
		'\x5', '\xCC', 'g', '\x2', '\x992', '\x99A', '\x5', '\xCE', 'h', '\x2', 
		'\x993', '\x994', '\x6', '\\', '%', '\x2', '\x994', '\x99A', '\x5', '\xD0', 
		'i', '\x2', '\x995', '\x996', '\x6', '\\', '&', '\x2', '\x996', '\x99A', 
		'\x5', '\xD2', 'j', '\x2', '\x997', '\x998', '\x6', '\\', '\'', '\x2', 
		'\x998', '\x99A', '\x5', '\xD4', 'k', '\x2', '\x999', '\x988', '\x3', 
		'\x2', '\x2', '\x2', '\x999', '\x989', '\x3', '\x2', '\x2', '\x2', '\x999', 
		'\x98A', '\x3', '\x2', '\x2', '\x2', '\x999', '\x98B', '\x3', '\x2', '\x2', 
		'\x2', '\x999', '\x98C', '\x3', '\x2', '\x2', '\x2', '\x999', '\x98D', 
		'\x3', '\x2', '\x2', '\x2', '\x999', '\x98E', '\x3', '\x2', '\x2', '\x2', 
		'\x999', '\x98F', '\x3', '\x2', '\x2', '\x2', '\x999', '\x990', '\x3', 
		'\x2', '\x2', '\x2', '\x999', '\x991', '\x3', '\x2', '\x2', '\x2', '\x999', 
		'\x992', '\x3', '\x2', '\x2', '\x2', '\x999', '\x993', '\x3', '\x2', '\x2', 
		'\x2', '\x999', '\x995', '\x3', '\x2', '\x2', '\x2', '\x999', '\x997', 
		'\x3', '\x2', '\x2', '\x2', '\x99A', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\x99B', '\x99D', '\a', '\x1D5', '\x2', '\x2', '\x99C', '\x99E', '\x5', 
		'\x3C2', '\x1E2', '\x2', '\x99D', '\x99C', '\x3', '\x2', '\x2', '\x2', 
		'\x99D', '\x99E', '\x3', '\x2', '\x2', '\x2', '\x99E', '\x99F', '\x3', 
		'\x2', '\x2', '\x2', '\x99F', '\x9A0', '\x5', '\x410', '\x209', '\x2', 
		'\x9A0', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x9A1', '\x9A3', '\a', '\x87', 
		'\x2', '\x2', '\x9A2', '\x9A4', '\x5', '\x3C2', '\x1E2', '\x2', '\x9A3', 
		'\x9A2', '\x3', '\x2', '\x2', '\x2', '\x9A3', '\x9A4', '\x3', '\x2', '\x2', 
		'\x2', '\x9A4', '\x9A5', '\x3', '\x2', '\x2', '\x2', '\x9A5', '\x9A6', 
		'\x5', '\x42C', '\x217', '\x2', '\x9A6', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\x9A7', '\x9A9', '\a', '\x166', '\x2', '\x2', '\x9A8', '\x9AA', 
		'\x5', '\x3C2', '\x1E2', '\x2', '\x9A9', '\x9A8', '\x3', '\x2', '\x2', 
		'\x2', '\x9A9', '\x9AA', '\x3', '\x2', '\x2', '\x2', '\x9AA', '\x9AB', 
		'\x3', '\x2', '\x2', '\x2', '\x9AB', '\x9AC', '\x5', '\x418', '\x20D', 
		'\x2', '\x9AC', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x9AD', '\x9AF', 
		'\a', '\x253', '\x2', '\x2', '\x9AE', '\x9B0', '\x5', '\x3C2', '\x1E2', 
		'\x2', '\x9AF', '\x9AE', '\x3', '\x2', '\x2', '\x2', '\x9AF', '\x9B0', 
		'\x3', '\x2', '\x2', '\x2', '\x9B0', '\x9B1', '\x3', '\x2', '\x2', '\x2', 
		'\x9B1', '\x9B2', '\x5', '\x414', '\x20B', '\x2', '\x9B2', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\x9B3', '\x9B5', '\x5', '\x3F6', '\x1FC', '\x2', 
		'\x9B4', '\x9B3', '\x3', '\x2', '\x2', '\x2', '\x9B4', '\x9B5', '\x3', 
		'\x2', '\x2', '\x2', '\x9B5', '\x9B6', '\x3', '\x2', '\x2', '\x2', '\x9B6', 
		'\x9B7', '\a', '\x20A', '\x2', '\x2', '\x9B7', '\x9B8', '\x5', '\x40A', 
		'\x206', '\x2', '\x9B8', '\x9B9', '\a', '\x244', '\x2', '\x2', '\x9B9', 
		'\x9BB', '\x5', '\x43C', '\x21F', '\x2', '\x9BA', '\x9BC', '\x5', '\x30', 
		'\x19', '\x2', '\x9BB', '\x9BA', '\x3', '\x2', '\x2', '\x2', '\x9BB', 
		'\x9BC', '\x3', '\x2', '\x2', '\x2', '\x9BC', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\x9BD', '\x9BE', '\a', '\xB8', '\x2', '\x2', '\x9BE', '\x9BF', 
		'\a', '\x201', '\x2', '\x2', '\x9BF', '\x9CA', '\x5', '\x428', '\x215', 
		'\x2', '\x9C0', '\x9C7', '\x5', '\xC4', '\x63', '\x2', '\x9C1', '\x9C3', 
		'\a', '\x198', '\x2', '\x2', '\x9C2', '\x9C1', '\x3', '\x2', '\x2', '\x2', 
		'\x9C2', '\x9C3', '\x3', '\x2', '\x2', '\x2', '\x9C3', '\x9C4', '\x3', 
		'\x2', '\x2', '\x2', '\x9C4', '\x9C6', '\x5', '\xC4', '\x63', '\x2', '\x9C5', 
		'\x9C2', '\x3', '\x2', '\x2', '\x2', '\x9C6', '\x9C9', '\x3', '\x2', '\x2', 
		'\x2', '\x9C7', '\x9C5', '\x3', '\x2', '\x2', '\x2', '\x9C7', '\x9C8', 
		'\x3', '\x2', '\x2', '\x2', '\x9C8', '\x9CB', '\x3', '\x2', '\x2', '\x2', 
		'\x9C9', '\x9C7', '\x3', '\x2', '\x2', '\x2', '\x9CA', '\x9C0', '\x3', 
		'\x2', '\x2', '\x2', '\x9CA', '\x9CB', '\x3', '\x2', '\x2', '\x2', '\x9CB', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\x9CC', '\x9CF', '\x5', '\x9A', 'N', 
		'\x2', '\x9CD', '\x9CF', '\x5', '\x98', 'M', '\x2', '\x9CE', '\x9CC', 
		'\x3', '\x2', '\x2', '\x2', '\x9CE', '\x9CD', '\x3', '\x2', '\x2', '\x2', 
		'\x9CF', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x9D0', '\x9D2', '\a', '-', 
		'\x2', '\x2', '\x9D1', '\x9D3', '\x5', '\x3C2', '\x1E2', '\x2', '\x9D2', 
		'\x9D1', '\x3', '\x2', '\x2', '\x2', '\x9D2', '\x9D3', '\x3', '\x2', '\x2', 
		'\x2', '\x9D3', '\x9D4', '\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9D5', 
		'\x5', '\x432', '\x21A', '\x2', '\x9D5', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\x9D6', '\x9D8', '\a', '\x159', '\x2', '\x2', '\x9D7', '\x9D6', 
		'\x3', '\x2', '\x2', '\x2', '\x9D7', '\x9D8', '\x3', '\x2', '\x2', '\x2', 
		'\x9D8', '\x9D9', '\x3', '\x2', '\x2', '\x2', '\x9D9', '\x9DB', '\t', 
		'\x14', '\x2', '\x2', '\x9DA', '\x9DC', '\x5', '\x3C2', '\x1E2', '\x2', 
		'\x9DB', '\x9DA', '\x3', '\x2', '\x2', '\x2', '\x9DB', '\x9DC', '\x3', 
		'\x2', '\x2', '\x2', '\x9DC', '\x9DD', '\x3', '\x2', '\x2', '\x2', '\x9DD', 
		'\x9DF', '\x5', '\x43E', '\x220', '\x2', '\x9DE', '\x9E0', '\t', '\x4', 
		'\x2', '\x2', '\x9DF', '\x9DE', '\x3', '\x2', '\x2', '\x2', '\x9DF', '\x9E0', 
		'\x3', '\x2', '\x2', '\x2', '\x9E0', '\xC9', '\x3', '\x2', '\x2', '\x2', 
		'\x9E1', '\x9E2', '\a', '\x158', '\x2', '\x2', '\x9E2', '\x9ED', '\x5', 
		'\x424', '\x213', '\x2', '\x9E3', '\x9EA', '\x5', '\xC4', '\x63', '\x2', 
		'\x9E4', '\x9E6', '\a', '\x198', '\x2', '\x2', '\x9E5', '\x9E4', '\x3', 
		'\x2', '\x2', '\x2', '\x9E5', '\x9E6', '\x3', '\x2', '\x2', '\x2', '\x9E6', 
		'\x9E7', '\x3', '\x2', '\x2', '\x2', '\x9E7', '\x9E9', '\x5', '\xC4', 
		'\x63', '\x2', '\x9E8', '\x9E5', '\x3', '\x2', '\x2', '\x2', '\x9E9', 
		'\x9EC', '\x3', '\x2', '\x2', '\x2', '\x9EA', '\x9E8', '\x3', '\x2', '\x2', 
		'\x2', '\x9EA', '\x9EB', '\x3', '\x2', '\x2', '\x2', '\x9EB', '\x9EE', 
		'\x3', '\x2', '\x2', '\x2', '\x9EC', '\x9EA', '\x3', '\x2', '\x2', '\x2', 
		'\x9ED', '\x9E3', '\x3', '\x2', '\x2', '\x2', '\x9ED', '\x9EE', '\x3', 
		'\x2', '\x2', '\x2', '\x9EE', '\xCB', '\x3', '\x2', '\x2', '\x2', '\x9EF', 
		'\x9F1', '\a', '\x290', '\x2', '\x2', '\x9F0', '\x9F2', '\x5', '\x3C2', 
		'\x1E2', '\x2', '\x9F1', '\x9F0', '\x3', '\x2', '\x2', '\x2', '\x9F1', 
		'\x9F2', '\x3', '\x2', '\x2', '\x2', '\x9F2', '\x9F3', '\x3', '\x2', '\x2', 
		'\x2', '\x9F3', '\x9F4', '\x5', '\x41C', '\x20F', '\x2', '\x9F4', '\xCD', 
		'\x3', '\x2', '\x2', '\x2', '\x9F5', '\x9F7', '\a', '\x171', '\x2', '\x2', 
		'\x9F6', '\x9F8', '\x5', '\x3C2', '\x1E2', '\x2', '\x9F7', '\x9F6', '\x3', 
		'\x2', '\x2', '\x2', '\x9F7', '\x9F8', '\x3', '\x2', '\x2', '\x2', '\x9F8', 
		'\x9F9', '\x3', '\x2', '\x2', '\x2', '\x9F9', '\x9FB', '\x5', '\x3D0', 
		'\x1E9', '\x2', '\x9FA', '\x9FC', '\t', '\x4', '\x2', '\x2', '\x9FB', 
		'\x9FA', '\x3', '\x2', '\x2', '\x2', '\x9FB', '\x9FC', '\x3', '\x2', '\x2', 
		'\x2', '\x9FC', '\xCF', '\x3', '\x2', '\x2', '\x2', '\x9FD', '\x9FF', 
		'\a', '\x2B4', '\x2', '\x2', '\x9FE', '\xA00', '\x5', '\x3C2', '\x1E2', 
		'\x2', '\x9FF', '\x9FE', '\x3', '\x2', '\x2', '\x2', '\x9FF', '\xA00', 
		'\x3', '\x2', '\x2', '\x2', '\xA00', '\xA01', '\x3', '\x2', '\x2', '\x2', 
		'\xA01', '\xA02', '\x5', '\x226', '\x114', '\x2', '\xA02', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\xA03', '\xA04', '\a', '\x271', '\x2', '\x2', '\xA04', 
		'\xA05', '\a', '\x2EF', '\x2', '\x2', '\xA05', '\xA07', '\a', '\x2E7', 
		'\x2', '\x2', '\xA06', '\xA08', '\x5', '\x3C2', '\x1E2', '\x2', '\xA07', 
		'\xA06', '\x3', '\x2', '\x2', '\x2', '\xA07', '\xA08', '\x3', '\x2', '\x2', 
		'\x2', '\xA08', '\xA09', '\x3', '\x2', '\x2', '\x2', '\xA09', '\xA0A', 
		'\x5', '\x468', '\x235', '\x2', '\xA0A', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xA0B', '\xA0C', '\a', '\x293', '\x2', '\x2', '\xA0C', '\xA0D', 
		'\a', '\x158', '\x2', '\x2', '\xA0D', '\xA0F', '\x5', '\x424', '\x213', 
		'\x2', '\xA0E', '\xA10', '\x5', '>', ' ', '\x2', '\xA0F', '\xA0E', '\x3', 
		'\x2', '\x2', '\x2', '\xA0F', '\xA10', '\x3', '\x2', '\x2', '\x2', '\xA10', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\xA11', '\xA12', '\a', '\x25D', '\x2', 
		'\x2', '\xA12', '\xA13', '\t', '\x14', '\x2', '\x2', '\xA13', '\xA18', 
		'\x5', '\xD8', 'm', '\x2', '\xA14', '\xA15', '\a', '\x198', '\x2', '\x2', 
		'\xA15', '\xA17', '\x5', '\xD8', 'm', '\x2', '\xA16', '\xA14', '\x3', 
		'\x2', '\x2', '\x2', '\xA17', '\xA1A', '\x3', '\x2', '\x2', '\x2', '\xA18', 
		'\xA16', '\x3', '\x2', '\x2', '\x2', '\xA18', '\xA19', '\x3', '\x2', '\x2', 
		'\x2', '\xA19', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xA1A', '\xA18', 
		'\x3', '\x2', '\x2', '\x2', '\xA1B', '\xA1C', '\x5', '\x43C', '\x21F', 
		'\x2', '\xA1C', '\xA1D', '\a', '\x28E', '\x2', '\x2', '\xA1D', '\xA1E', 
		'\x5', '\x436', '\x21C', '\x2', '\xA1E', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '\xA1F', '\xA21', '\a', '\x34', '\x2', '\x2', '\xA20', '\xA22', 
		'\a', '\x288', '\x2', '\x2', '\xA21', '\xA20', '\x3', '\x2', '\x2', '\x2', 
		'\xA21', '\xA22', '\x3', '\x2', '\x2', '\x2', '\xA22', '\xA23', '\x3', 
		'\x2', '\x2', '\x2', '\xA23', '\xA24', '\x5', '\x43C', '\x21F', '\x2', 
		'\xA24', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xA25', '\xA26', '\a', '\xA4', 
		'\x2', '\x2', '\xA26', '\xA27', '\a', '\x288', '\x2', '\x2', '\xA27', 
		'\xA28', '\a', '\x1FC', '\x2', '\x2', '\xA28', '\xA29', '\x5', '\x47A', 
		'\x23E', '\x2', '\xA29', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xA2A', 
		'\xA2B', '\a', '\x1BF', '\x2', '\x2', '\xA2B', '\xA31', '\x5', '\x414', 
		'\x20B', '\x2', '\xA2C', '\xA2E', '\a', '\x19B', '\x2', '\x2', '\xA2D', 
		'\xA2F', '\x5', '\x2E0', '\x171', '\x2', '\xA2E', '\xA2D', '\x3', '\x2', 
		'\x2', '\x2', '\xA2E', '\xA2F', '\x3', '\x2', '\x2', '\x2', '\xA2F', '\xA30', 
		'\x3', '\x2', '\x2', '\x2', '\xA30', '\xA32', '\a', '\x19C', '\x2', '\x2', 
		'\xA31', '\xA2C', '\x3', '\x2', '\x2', '\x2', '\xA31', '\xA32', '\x3', 
		'\x2', '\x2', '\x2', '\xA32', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xA33', 
		'\xA34', '\x6', 'q', '(', '\x2', '\xA34', '\xA36', '\x5', '\x140', '\xA1', 
		'\x2', '\xA35', '\xA33', '\x3', '\x2', '\x2', '\x2', '\xA35', '\xA36', 
		'\x3', '\x2', '\x2', '\x2', '\xA36', '\xA37', '\x3', '\x2', '\x2', '\x2', 
		'\xA37', '\xA3B', '\a', '\x1E2', '\x2', '\x2', '\xA38', '\xA3A', '\x5', 
		'\xE4', 's', '\x2', '\xA39', '\xA38', '\x3', '\x2', '\x2', '\x2', '\xA3A', 
		'\xA3D', '\x3', '\x2', '\x2', '\x2', '\xA3B', '\xA39', '\x3', '\x2', '\x2', 
		'\x2', '\xA3B', '\xA3C', '\x3', '\x2', '\x2', '\x2', '\xA3C', '\xA5E', 
		'\x3', '\x2', '\x2', '\x2', '\xA3D', '\xA3B', '\x3', '\x2', '\x2', '\x2', 
		'\xA3E', '\xA56', '\a', '\x1FC', '\x2', '\x2', '\xA3F', '\xA40', '\x5', 
		'\x440', '\x221', '\x2', '\xA40', '\xA41', '\a', '\x29B', '\x2', '\x2', 
		'\xA41', '\xA43', '\x5', '\x14E', '\xA8', '\x2', '\xA42', '\xA44', '\x5', 
		'\x15E', '\xB0', '\x2', '\xA43', '\xA42', '\x3', '\x2', '\x2', '\x2', 
		'\xA43', '\xA44', '\x3', '\x2', '\x2', '\x2', '\xA44', '\xA57', '\x3', 
		'\x2', '\x2', '\x2', '\xA45', '\xA48', '\x5', '\x43C', '\x21F', '\x2', 
		'\xA46', '\xA47', '\x6', 'q', ')', '\x2', '\xA47', '\xA49', '\x5', '\x186', 
		'\xC4', '\x2', '\xA48', '\xA46', '\x3', '\x2', '\x2', '\x2', '\xA48', 
		'\xA49', '\x3', '\x2', '\x2', '\x2', '\xA49', '\xA4B', '\x3', '\x2', '\x2', 
		'\x2', '\xA4A', '\xA4C', '\x5', '\xE2', 'r', '\x2', '\xA4B', '\xA4A', 
		'\x3', '\x2', '\x2', '\x2', '\xA4B', '\xA4C', '\x3', '\x2', '\x2', '\x2', 
		'\xA4C', '\xA4E', '\x3', '\x2', '\x2', '\x2', '\xA4D', '\xA4F', '\x5', 
		'\x15E', '\xB0', '\x2', '\xA4E', '\xA4D', '\x3', '\x2', '\x2', '\x2', 
		'\xA4E', '\xA4F', '\x3', '\x2', '\x2', '\x2', '\xA4F', '\xA51', '\x3', 
		'\x2', '\x2', '\x2', '\xA50', '\xA52', '\x5', '\x148', '\xA5', '\x2', 
		'\xA51', '\xA50', '\x3', '\x2', '\x2', '\x2', '\xA51', '\xA52', '\x3', 
		'\x2', '\x2', '\x2', '\xA52', '\xA54', '\x3', '\x2', '\x2', '\x2', '\xA53', 
		'\xA55', '\x5', '\x11E', '\x90', '\x2', '\xA54', '\xA53', '\x3', '\x2', 
		'\x2', '\x2', '\xA54', '\xA55', '\x3', '\x2', '\x2', '\x2', '\xA55', '\xA57', 
		'\x3', '\x2', '\x2', '\x2', '\xA56', '\xA3F', '\x3', '\x2', '\x2', '\x2', 
		'\xA56', '\xA45', '\x3', '\x2', '\x2', '\x2', '\xA57', '\xA5F', '\x3', 
		'\x2', '\x2', '\x2', '\xA58', '\xA59', '\x5', '\x440', '\x221', '\x2', 
		'\xA59', '\xA5A', '\a', '\x1FC', '\x2', '\x2', '\xA5A', '\xA5C', '\x5', 
		'\x14E', '\xA8', '\x2', '\xA5B', '\xA5D', '\x5', '\x15E', '\xB0', '\x2', 
		'\xA5C', '\xA5B', '\x3', '\x2', '\x2', '\x2', '\xA5C', '\xA5D', '\x3', 
		'\x2', '\x2', '\x2', '\xA5D', '\xA5F', '\x3', '\x2', '\x2', '\x2', '\xA5E', 
		'\xA3E', '\x3', '\x2', '\x2', '\x2', '\xA5E', '\xA58', '\x3', '\x2', '\x2', 
		'\x2', '\xA5F', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xA60', '\xA61', 
		'\x6', 'r', '*', '\x2', '\xA61', '\xA62', '\a', '\"', '\x2', '\x2', '\xA62', 
		'\xA63', '\a', '\x19B', '\x2', '\x2', '\xA63', '\xA64', '\x5', '\x458', 
		'\x22D', '\x2', '\xA64', '\xA65', '\a', '\x19C', '\x2', '\x2', '\xA65', 
		'\xE3', '\x3', '\x2', '\x2', '\x2', '\xA66', '\xA67', '\t', '\x15', '\x2', 
		'\x2', '\xA67', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xA68', '\xA6D', 
		'\a', '\x11', '\x2', '\x2', '\xA69', '\xA6A', '\x6', 't', '+', '\x2', 
		'\xA6A', '\xA6E', '\x5', '\x2E0', '\x171', '\x2', '\xA6B', '\xA6C', '\x6', 
		't', ',', '\x2', '\xA6C', '\xA6E', '\x5', '\x158', '\xAD', '\x2', '\xA6D', 
		'\xA69', '\x3', '\x2', '\x2', '\x2', '\xA6D', '\xA6B', '\x3', '\x2', '\x2', 
		'\x2', '\xA6E', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xA6F', '\xA81', 
		'\a', '\x18', '\x2', '\x2', '\xA70', '\xA71', '\x5', '\x43C', '\x21F', 
		'\x2', '\xA71', '\xA73', '\a', '\x1E', '\x2', '\x2', '\xA72', '\xA74', 
		'\x5', '\x186', '\xC4', '\x2', '\xA73', '\xA72', '\x3', '\x2', '\x2', 
		'\x2', '\xA73', '\xA74', '\x3', '\x2', '\x2', '\x2', '\xA74', '\xA82', 
		'\x3', '\x2', '\x2', '\x2', '\xA75', '\xA7F', '\x5', '\x456', '\x22C', 
		'\x2', '\xA76', '\xA80', '\a', '\f', '\x2', '\x2', '\xA77', '\xA78', '\a', 
		'\x257', '\x2', '\x2', '\xA78', '\xA7A', '\x5', '\xEA', 'v', '\x2', '\xA79', 
		'\xA7B', '\x5', '\x15E', '\xB0', '\x2', '\xA7A', '\xA79', '\x3', '\x2', 
		'\x2', '\x2', '\xA7A', '\xA7B', '\x3', '\x2', '\x2', '\x2', '\xA7B', '\xA7D', 
		'\x3', '\x2', '\x2', '\x2', '\xA7C', '\xA7E', '\x5', '\x11C', '\x8F', 
		'\x2', '\xA7D', '\xA7C', '\x3', '\x2', '\x2', '\x2', '\xA7D', '\xA7E', 
		'\x3', '\x2', '\x2', '\x2', '\xA7E', '\xA80', '\x3', '\x2', '\x2', '\x2', 
		'\xA7F', '\xA76', '\x3', '\x2', '\x2', '\x2', '\xA7F', '\xA77', '\x3', 
		'\x2', '\x2', '\x2', '\xA80', '\xA82', '\x3', '\x2', '\x2', '\x2', '\xA81', 
		'\xA70', '\x3', '\x2', '\x2', '\x2', '\xA81', '\xA75', '\x3', '\x2', '\x2', 
		'\x2', '\xA82', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xA83', '\xA8E', 
		'\t', '\x16', '\x2', '\x2', '\xA84', '\xA8B', '\x5', '\x456', '\x22C', 
		'\x2', '\xA85', '\xA8C', '\t', '\x17', '\x2', '\x2', '\xA86', '\xA87', 
		'\t', '\x18', '\x2', '\x2', '\xA87', '\xA88', '\a', '\x19B', '\x2', '\x2', 
		'\xA88', '\xA89', '\x5', '\xFA', '~', '\x2', '\xA89', '\xA8A', '\a', '\x19C', 
		'\x2', '\x2', '\xA8A', '\xA8C', '\x3', '\x2', '\x2', '\x2', '\xA8B', '\xA85', 
		'\x3', '\x2', '\x2', '\x2', '\xA8B', '\xA86', '\x3', '\x2', '\x2', '\x2', 
		'\xA8C', '\xA8E', '\x3', '\x2', '\x2', '\x2', '\xA8D', '\xA83', '\x3', 
		'\x2', '\x2', '\x2', '\xA8D', '\xA84', '\x3', '\x2', '\x2', '\x2', '\xA8E', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\xA8F', '\xA91', '\a', '\x20F', '\x2', 
		'\x2', '\xA90', '\xA92', '\x5', '\xEE', 'x', '\x2', '\xA91', '\xA90', 
		'\x3', '\x2', '\x2', '\x2', '\xA91', '\xA92', '\x3', '\x2', '\x2', '\x2', 
		'\xA92', '\xA94', '\x3', '\x2', '\x2', '\x2', '\xA93', '\xA95', '\a', 
		'\x209', '\x2', '\x2', '\xA94', '\xA93', '\x3', '\x2', '\x2', '\x2', '\xA94', 
		'\xA95', '\x3', '\x2', '\x2', '\x2', '\xA95', '\xA97', '\x3', '\x2', '\x2', 
		'\x2', '\xA96', '\xA98', '\a', '\x211', '\x2', '\x2', '\xA97', '\xA96', 
		'\x3', '\x2', '\x2', '\x2', '\xA97', '\xA98', '\x3', '\x2', '\x2', '\x2', 
		'\xA98', '\xA99', '\x3', '\x2', '\x2', '\x2', '\xA99', '\xA9B', '\x5', 
		'\x43C', '\x21F', '\x2', '\xA9A', '\xA9C', '\x5', '\x3FA', '\x1FE', '\x2', 
		'\xA9B', '\xA9A', '\x3', '\x2', '\x2', '\x2', '\xA9B', '\xA9C', '\x3', 
		'\x2', '\x2', '\x2', '\xA9C', '\xAA1', '\x3', '\x2', '\x2', '\x2', '\xA9D', 
		'\xAA2', '\x5', '\xF0', 'y', '\x2', '\xA9E', '\xA9F', '\a', '\x26C', '\x2', 
		'\x2', '\xA9F', '\xAA2', '\x5', '\x3D2', '\x1EA', '\x2', '\xAA0', '\xAA2', 
		'\x5', '\xF6', '|', '\x2', '\xAA1', '\xA9D', '\x3', '\x2', '\x2', '\x2', 
		'\xAA1', '\xA9E', '\x3', '\x2', '\x2', '\x2', '\xAA1', '\xAA0', '\x3', 
		'\x2', '\x2', '\x2', '\xAA2', '\xAA4', '\x3', '\x2', '\x2', '\x2', '\xAA3', 
		'\xAA5', '\x5', '\xFC', '\x7F', '\x2', '\xAA4', '\xAA3', '\x3', '\x2', 
		'\x2', '\x2', '\xAA4', '\xAA5', '\x3', '\x2', '\x2', '\x2', '\xAA5', '\xED', 
		'\x3', '\x2', '\x2', '\x2', '\xAA6', '\xAA7', '\t', '\x19', '\x2', '\x2', 
		'\xAA7', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xAA8', '\xAAA', '\a', '\x19B', 
		'\x2', '\x2', '\xAA9', '\xAAB', '\x5', '\xF2', 'z', '\x2', '\xAAA', '\xAA9', 
		'\x3', '\x2', '\x2', '\x2', '\xAAA', '\xAAB', '\x3', '\x2', '\x2', '\x2', 
		'\xAAB', '\xAAC', '\x3', '\x2', '\x2', '\x2', '\xAAC', '\xAAE', '\a', 
		'\x19C', '\x2', '\x2', '\xAAD', '\xAA8', '\x3', '\x2', '\x2', '\x2', '\xAAD', 
		'\xAAE', '\x3', '\x2', '\x2', '\x2', '\xAAE', '\xAAF', '\x3', '\x2', '\x2', 
		'\x2', '\xAAF', '\xAB0', '\x5', '\xF4', '{', '\x2', '\xAB0', '\xF1', '\x3', 
		'\x2', '\x2', '\x2', '\xAB1', '\xAB6', '\x5', '\x406', '\x204', '\x2', 
		'\xAB2', '\xAB3', '\a', '\x198', '\x2', '\x2', '\xAB3', '\xAB5', '\x5', 
		'\x406', '\x204', '\x2', '\xAB4', '\xAB2', '\x3', '\x2', '\x2', '\x2', 
		'\xAB5', '\xAB8', '\x3', '\x2', '\x2', '\x2', '\xAB6', '\xAB4', '\x3', 
		'\x2', '\x2', '\x2', '\xAB6', '\xAB7', '\x3', '\x2', '\x2', '\x2', '\xAB7', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\xAB8', '\xAB6', '\x3', '\x2', '\x2', 
		'\x2', '\xAB9', '\xABA', '\t', '\x1A', '\x2', '\x2', '\xABA', '\xABB', 
		'\x5', '\xF8', '}', '\x2', '\xABB', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\xABC', '\xAC4', '\x5', '^', '\x30', '\x2', '\xABD', '\xABF', '\a', '\x19B', 
		'\x2', '\x2', '\xABE', '\xAC0', '\x5', '\xF2', 'z', '\x2', '\xABF', '\xABE', 
		'\x3', '\x2', '\x2', '\x2', '\xABF', '\xAC0', '\x3', '\x2', '\x2', '\x2', 
		'\xAC0', '\xAC1', '\x3', '\x2', '\x2', '\x2', '\xAC1', '\xAC2', '\a', 
		'\x19C', '\x2', '\x2', '\xAC2', '\xAC4', '\x5', '^', '\x30', '\x2', '\xAC3', 
		'\xABC', '\x3', '\x2', '\x2', '\x2', '\xAC3', '\xABD', '\x3', '\x2', '\x2', 
		'\x2', '\xAC4', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xAC5', '\xAC7', 
		'\a', '\x19B', '\x2', '\x2', '\xAC6', '\xAC8', '\x5', '\xFA', '~', '\x2', 
		'\xAC7', '\xAC6', '\x3', '\x2', '\x2', '\x2', '\xAC7', '\xAC8', '\x3', 
		'\x2', '\x2', '\x2', '\xAC8', '\xAC9', '\x3', '\x2', '\x2', '\x2', '\xAC9', 
		'\xAD2', '\a', '\x19C', '\x2', '\x2', '\xACA', '\xACB', '\a', '\x198', 
		'\x2', '\x2', '\xACB', '\xACD', '\a', '\x19B', '\x2', '\x2', '\xACC', 
		'\xACE', '\x5', '\xFA', '~', '\x2', '\xACD', '\xACC', '\x3', '\x2', '\x2', 
		'\x2', '\xACD', '\xACE', '\x3', '\x2', '\x2', '\x2', '\xACE', '\xACF', 
		'\x3', '\x2', '\x2', '\x2', '\xACF', '\xAD1', '\a', '\x19C', '\x2', '\x2', 
		'\xAD0', '\xACA', '\x3', '\x2', '\x2', '\x2', '\xAD1', '\xAD4', '\x3', 
		'\x2', '\x2', '\x2', '\xAD2', '\xAD0', '\x3', '\x2', '\x2', '\x2', '\xAD2', 
		'\xAD3', '\x3', '\x2', '\x2', '\x2', '\xAD3', '\xF9', '\x3', '\x2', '\x2', 
		'\x2', '\xAD4', '\xAD2', '\x3', '\x2', '\x2', '\x2', '\xAD5', '\xAD8', 
		'\x5', '\x290', '\x149', '\x2', '\xAD6', '\xAD8', '\a', '\x1E0', '\x2', 
		'\x2', '\xAD7', '\xAD5', '\x3', '\x2', '\x2', '\x2', '\xAD7', '\xAD6', 
		'\x3', '\x2', '\x2', '\x2', '\xAD8', '\xAE0', '\x3', '\x2', '\x2', '\x2', 
		'\xAD9', '\xADC', '\a', '\x198', '\x2', '\x2', '\xADA', '\xADD', '\x5', 
		'\x290', '\x149', '\x2', '\xADB', '\xADD', '\a', '\x1E0', '\x2', '\x2', 
		'\xADC', '\xADA', '\x3', '\x2', '\x2', '\x2', '\xADC', '\xADB', '\x3', 
		'\x2', '\x2', '\x2', '\xADD', '\xADF', '\x3', '\x2', '\x2', '\x2', '\xADE', 
		'\xAD9', '\x3', '\x2', '\x2', '\x2', '\xADF', '\xAE2', '\x3', '\x2', '\x2', 
		'\x2', '\xAE0', '\xADE', '\x3', '\x2', '\x2', '\x2', '\xAE0', '\xAE1', 
		'\x3', '\x2', '\x2', '\x2', '\xAE1', '\xFB', '\x3', '\x2', '\x2', '\x2', 
		'\xAE2', '\xAE0', '\x3', '\x2', '\x2', '\x2', '\xAE3', '\xAE4', '\a', 
		'\x244', '\x2', '\x2', '\xAE4', '\xAE5', '\a', '~', '\x2', '\x2', '\xAE5', 
		'\xAE6', '\a', '\x21A', '\x2', '\x2', '\xAE6', '\xAE7', '\a', '\x298', 
		'\x2', '\x2', '\xAE7', '\xAE8', '\x5', '\x3D2', '\x1EA', '\x2', '\xAE8', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '\xAE9', '\xAEA', '\a', '\x223', '\x2', 
		'\x2', '\xAEA', '\xAEC', '\x5', '\x100', '\x81', '\x2', '\xAEB', '\xAED', 
		'\t', '\x1B', '\x2', '\x2', '\xAEC', '\xAEB', '\x3', '\x2', '\x2', '\x2', 
		'\xAEC', '\xAED', '\x3', '\x2', '\x2', '\x2', '\xAED', '\xAEF', '\x3', 
		'\x2', '\x2', '\x2', '\xAEE', '\xAF0', '\a', '\xB6', '\x2', '\x2', '\xAEF', 
		'\xAEE', '\x3', '\x2', '\x2', '\x2', '\xAEF', '\xAF0', '\x3', '\x2', '\x2', 
		'\x2', '\xAF0', '\xAF1', '\x3', '\x2', '\x2', '\x2', '\xAF1', '\xAF2', 
		'\a', '\x20B', '\x2', '\x2', '\xAF2', '\xAF4', '\x5', '\x476', '\x23C', 
		'\x2', '\xAF3', '\xAF5', '\t', '\n', '\x2', '\x2', '\xAF4', '\xAF3', '\x3', 
		'\x2', '\x2', '\x2', '\xAF4', '\xAF5', '\x3', '\x2', '\x2', '\x2', '\xAF5', 
		'\xAF6', '\x3', '\x2', '\x2', '\x2', '\xAF6', '\xAF7', '\a', '\x211', 
		'\x2', '\x2', '\xAF7', '\xAF8', '\a', '\x288', '\x2', '\x2', '\xAF8', 
		'\xAFA', '\x5', '\x43C', '\x21F', '\x2', '\xAF9', '\xAFB', '\x5', '\x3FA', 
		'\x1FE', '\x2', '\xAFA', '\xAF9', '\x3', '\x2', '\x2', '\x2', '\xAFA', 
		'\xAFB', '\x3', '\x2', '\x2', '\x2', '\xAFB', '\xAFD', '\x3', '\x2', '\x2', 
		'\x2', '\xAFC', '\xAFE', '\x5', '\x3D6', '\x1EC', '\x2', '\xAFD', '\xAFC', 
		'\x3', '\x2', '\x2', '\x2', '\xAFD', '\xAFE', '\x3', '\x2', '\x2', '\x2', 
		'\xAFE', '\xB00', '\x3', '\x2', '\x2', '\x2', '\xAFF', '\xB01', '\x5', 
		'\x102', '\x82', '\x2', '\xB00', '\xAFF', '\x3', '\x2', '\x2', '\x2', 
		'\xB00', '\xB01', '\x3', '\x2', '\x2', '\x2', '\xB01', '\xB03', '\x3', 
		'\x2', '\x2', '\x2', '\xB02', '\xB04', '\x5', '\x3D8', '\x1ED', '\x2', 
		'\xB03', '\xB02', '\x3', '\x2', '\x2', '\x2', '\xB03', '\xB04', '\x3', 
		'\x2', '\x2', '\x2', '\xB04', '\xB06', '\x3', '\x2', '\x2', '\x2', '\xB05', 
		'\xB07', '\x5', '\x3DC', '\x1EF', '\x2', '\xB06', '\xB05', '\x3', '\x2', 
		'\x2', '\x2', '\xB06', '\xB07', '\x3', '\x2', '\x2', '\x2', '\xB07', '\xB08', 
		'\x3', '\x2', '\x2', '\x2', '\xB08', '\xB09', '\x5', '\x104', '\x83', 
		'\x2', '\xB09', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xB0A', '\xB0B', 
		'\t', '\x1C', '\x2', '\x2', '\xB0B', '\x101', '\x3', '\x2', '\x2', '\x2', 
		'\xB0C', '\xB0D', '\a', '\x12C', '\x2', '\x2', '\xB0D', '\xB0E', '\a', 
		'\xA1', '\x2', '\x2', '\xB0E', '\xB0F', '\a', '\x1BE', '\x2', '\x2', '\xB0F', 
		'\xB10', '\x5', '\x472', '\x23A', '\x2', '\xB10', '\x103', '\x3', '\x2', 
		'\x2', '\x2', '\xB11', '\xB12', '\a', '\x209', '\x2', '\x2', '\xB12', 
		'\xB13', '\a', '\x17E', '\x2', '\x2', '\xB13', '\xB15', '\t', '\x1D', 
		'\x2', '\x2', '\xB14', '\xB11', '\x3', '\x2', '\x2', '\x2', '\xB14', '\xB15', 
		'\x3', '\x2', '\x2', '\x2', '\xB15', '\xB17', '\x3', '\x2', '\x2', '\x2', 
		'\xB16', '\xB18', '\x5', '\x106', '\x84', '\x2', '\xB17', '\xB16', '\x3', 
		'\x2', '\x2', '\x2', '\xB17', '\xB18', '\x3', '\x2', '\x2', '\x2', '\xB18', 
		'\xB1B', '\x3', '\x2', '\x2', '\x2', '\xB19', '\xB1A', '\a', '\x26C', 
		'\x2', '\x2', '\xB1A', '\xB1C', '\x5', '\x3D2', '\x1EA', '\x2', '\xB1B', 
		'\xB19', '\x3', '\x2', '\x2', '\x2', '\xB1B', '\xB1C', '\x3', '\x2', '\x2', 
		'\x2', '\xB1C', '\x105', '\x3', '\x2', '\x2', '\x2', '\xB1D', '\xB1F', 
		'\a', '\x19B', '\x2', '\x2', '\xB1E', '\xB20', '\x5', '\x108', '\x85', 
		'\x2', '\xB1F', '\xB1E', '\x3', '\x2', '\x2', '\x2', '\xB1F', '\xB20', 
		'\x3', '\x2', '\x2', '\x2', '\xB20', '\xB21', '\x3', '\x2', '\x2', '\x2', 
		'\xB21', '\xB22', '\a', '\x19C', '\x2', '\x2', '\xB22', '\x107', '\x3', 
		'\x2', '\x2', '\x2', '\xB23', '\xB26', '\x5', '\x404', '\x203', '\x2', 
		'\xB24', '\xB26', '\x5', '\x2D2', '\x16A', '\x2', '\xB25', '\xB23', '\x3', 
		'\x2', '\x2', '\x2', '\xB25', '\xB24', '\x3', '\x2', '\x2', '\x2', '\xB26', 
		'\xB2E', '\x3', '\x2', '\x2', '\x2', '\xB27', '\xB2A', '\a', '\x198', 
		'\x2', '\x2', '\xB28', '\xB2B', '\x5', '\x404', '\x203', '\x2', '\xB29', 
		'\xB2B', '\x5', '\x2D2', '\x16A', '\x2', '\xB2A', '\xB28', '\x3', '\x2', 
		'\x2', '\x2', '\xB2A', '\xB29', '\x3', '\x2', '\x2', '\x2', '\xB2B', '\xB2D', 
		'\x3', '\x2', '\x2', '\x2', '\xB2C', '\xB27', '\x3', '\x2', '\x2', '\x2', 
		'\xB2D', '\xB30', '\x3', '\x2', '\x2', '\x2', '\xB2E', '\xB2C', '\x3', 
		'\x2', '\x2', '\x2', '\xB2E', '\xB2F', '\x3', '\x2', '\x2', '\x2', '\xB2F', 
		'\x109', '\x3', '\x2', '\x2', '\x2', '\xB30', '\xB2E', '\x3', '\x2', '\x2', 
		'\x2', '\xB31', '\xB33', '\a', '\x25F', '\x2', '\x2', '\xB32', '\xB34', 
		'\t', '\x1E', '\x2', '\x2', '\xB33', '\xB32', '\x3', '\x2', '\x2', '\x2', 
		'\xB33', '\xB34', '\x3', '\x2', '\x2', '\x2', '\xB34', '\xB36', '\x3', 
		'\x2', '\x2', '\x2', '\xB35', '\xB37', '\a', '\x211', '\x2', '\x2', '\xB36', 
		'\xB35', '\x3', '\x2', '\x2', '\x2', '\xB36', '\xB37', '\x3', '\x2', '\x2', 
		'\x2', '\xB37', '\xB38', '\x3', '\x2', '\x2', '\x2', '\xB38', '\xB3A', 
		'\x5', '\x43C', '\x21F', '\x2', '\xB39', '\xB3B', '\x5', '\x3FA', '\x1FE', 
		'\x2', '\xB3A', '\xB39', '\x3', '\x2', '\x2', '\x2', '\xB3A', '\xB3B', 
		'\x3', '\x2', '\x2', '\x2', '\xB3B', '\xB40', '\x3', '\x2', '\x2', '\x2', 
		'\xB3C', '\xB41', '\x5', '\xF0', 'y', '\x2', '\xB3D', '\xB3E', '\a', '\x26C', 
		'\x2', '\x2', '\xB3E', '\xB41', '\x5', '\x3D2', '\x1EA', '\x2', '\xB3F', 
		'\xB41', '\x5', '\xF6', '|', '\x2', '\xB40', '\xB3C', '\x3', '\x2', '\x2', 
		'\x2', '\xB40', '\xB3D', '\x3', '\x2', '\x2', '\x2', '\xB40', '\xB3F', 
		'\x3', '\x2', '\x2', '\x2', '\xB41', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'\xB42', '\xB46', '\x5', '\x110', '\x89', '\x2', '\xB43', '\xB46', '\x5', 
		'\x114', '\x8B', '\x2', '\xB44', '\xB46', '\x5', '\x10E', '\x88', '\x2', 
		'\xB45', '\xB42', '\x3', '\x2', '\x2', '\x2', '\xB45', '\xB43', '\x3', 
		'\x2', '\x2', '\x2', '\xB45', '\xB44', '\x3', '\x2', '\x2', '\x2', '\xB46', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\xB47', '\xB48', '\a', '\x19B', 
		'\x2', '\x2', '\xB48', '\xB49', '\x5', '\x10E', '\x88', '\x2', '\xB49', 
		'\xB4A', '\a', '\x19C', '\x2', '\x2', '\xB4A', '\xB4F', '\x3', '\x2', 
		'\x2', '\x2', '\xB4B', '\xB4C', '\x5', '\x110', '\x89', '\x2', '\xB4C', 
		'\xB4D', '\x5', '\x124', '\x93', '\x2', '\xB4D', '\xB4F', '\x3', '\x2', 
		'\x2', '\x2', '\xB4E', '\xB47', '\x3', '\x2', '\x2', '\x2', '\xB4E', '\xB4B', 
		'\x3', '\x2', '\x2', '\x2', '\xB4F', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'\xB50', '\xB51', '\x6', '\x89', '-', '\x2', '\xB51', '\xB53', '\x5', 
		'\x140', '\xA1', '\x2', '\xB52', '\xB50', '\x3', '\x2', '\x2', '\x2', 
		'\xB52', '\xB53', '\x3', '\x2', '\x2', '\x2', '\xB53', '\xB63', '\x3', 
		'\x2', '\x2', '\x2', '\xB54', '\xB56', '\x5', '\x112', '\x8A', '\x2', 
		'\xB55', '\xB57', '\x5', '\x148', '\xA5', '\x2', '\xB56', '\xB55', '\x3', 
		'\x2', '\x2', '\x2', '\xB56', '\xB57', '\x3', '\x2', '\x2', '\x2', '\xB57', 
		'\xB59', '\x3', '\x2', '\x2', '\x2', '\xB58', '\xB5A', '\x5', '\x11C', 
		'\x8F', '\x2', '\xB59', '\xB58', '\x3', '\x2', '\x2', '\x2', '\xB59', 
		'\xB5A', '\x3', '\x2', '\x2', '\x2', '\xB5A', '\xB64', '\x3', '\x2', '\x2', 
		'\x2', '\xB5B', '\xB61', '\x5', '\x114', '\x8B', '\x2', '\xB5C', '\xB5E', 
		'\x5', '\x148', '\xA5', '\x2', '\xB5D', '\xB5F', '\x5', '\x11C', '\x8F', 
		'\x2', '\xB5E', '\xB5D', '\x3', '\x2', '\x2', '\x2', '\xB5E', '\xB5F', 
		'\x3', '\x2', '\x2', '\x2', '\xB5F', '\xB62', '\x3', '\x2', '\x2', '\x2', 
		'\xB60', '\xB62', '\x5', '\x11C', '\x8F', '\x2', '\xB61', '\xB5C', '\x3', 
		'\x2', '\x2', '\x2', '\xB61', '\xB60', '\x3', '\x2', '\x2', '\x2', '\xB62', 
		'\xB64', '\x3', '\x2', '\x2', '\x2', '\xB63', '\xB54', '\x3', '\x2', '\x2', 
		'\x2', '\xB63', '\xB5B', '\x3', '\x2', '\x2', '\x2', '\xB64', '\xB67', 
		'\x3', '\x2', '\x2', '\x2', '\xB65', '\xB66', '\x6', '\x89', '.', '\x2', 
		'\xB66', '\xB68', '\x5', '\x126', '\x94', '\x2', '\xB67', '\xB65', '\x3', 
		'\x2', '\x2', '\x2', '\xB67', '\xB68', '\x3', '\x2', '\x2', '\x2', '\xB68', 
		'\xB6A', '\x3', '\x2', '\x2', '\x2', '\xB69', '\xB6B', '\x5', '\x152', 
		'\xAA', '\x2', '\xB6A', '\xB69', '\x3', '\x2', '\x2', '\x2', '\xB6A', 
		'\xB6B', '\x3', '\x2', '\x2', '\x2', '\xB6B', '\xB73', '\x3', '\x2', '\x2', 
		'\x2', '\xB6C', '\xB6D', '\x6', '\x89', '/', '\x2', '\xB6D', '\xB6E', 
		'\x5', '\x140', '\xA1', '\x2', '\xB6E', '\xB70', '\x5', '\x114', '\x8B', 
		'\x2', '\xB6F', '\xB71', '\x5', '\x152', '\xAA', '\x2', '\xB70', '\xB6F', 
		'\x3', '\x2', '\x2', '\x2', '\xB70', '\xB71', '\x3', '\x2', '\x2', '\x2', 
		'\xB71', '\xB73', '\x3', '\x2', '\x2', '\x2', '\xB72', '\xB52', '\x3', 
		'\x2', '\x2', '\x2', '\xB72', '\xB6C', '\x3', '\x2', '\x2', '\x2', '\xB73', 
		'\x111', '\x3', '\x2', '\x2', '\x2', '\xB74', '\xB75', '\b', '\x8A', '\x1', 
		'\x2', '\xB75', '\xB80', '\x5', '\x116', '\x8C', '\x2', '\xB76', '\xB77', 
		'\x5', '\x114', '\x8B', '\x2', '\xB77', '\xB79', '\a', '\x294', '\x2', 
		'\x2', '\xB78', '\xB7A', '\x5', '\x184', '\xC3', '\x2', '\xB79', '\xB78', 
		'\x3', '\x2', '\x2', '\x2', '\xB79', '\xB7A', '\x3', '\x2', '\x2', '\x2', 
		'\xB7A', '\xB7D', '\x3', '\x2', '\x2', '\x2', '\xB7B', '\xB7E', '\x5', 
		'\x116', '\x8C', '\x2', '\xB7C', '\xB7E', '\x5', '\x114', '\x8B', '\x2', 
		'\xB7D', '\xB7B', '\x3', '\x2', '\x2', '\x2', '\xB7D', '\xB7C', '\x3', 
		'\x2', '\x2', '\x2', '\xB7E', '\xB80', '\x3', '\x2', '\x2', '\x2', '\xB7F', 
		'\xB74', '\x3', '\x2', '\x2', '\x2', '\xB7F', '\xB76', '\x3', '\x2', '\x2', 
		'\x2', '\xB80', '\xB8C', '\x3', '\x2', '\x2', '\x2', '\xB81', '\xB82', 
		'\f', '\x4', '\x2', '\x2', '\xB82', '\xB84', '\a', '\x294', '\x2', '\x2', 
		'\xB83', '\xB85', '\x5', '\x184', '\xC3', '\x2', '\xB84', '\xB83', '\x3', 
		'\x2', '\x2', '\x2', '\xB84', '\xB85', '\x3', '\x2', '\x2', '\x2', '\xB85', 
		'\xB88', '\x3', '\x2', '\x2', '\x2', '\xB86', '\xB89', '\x5', '\x116', 
		'\x8C', '\x2', '\xB87', '\xB89', '\x5', '\x114', '\x8B', '\x2', '\xB88', 
		'\xB86', '\x3', '\x2', '\x2', '\x2', '\xB88', '\xB87', '\x3', '\x2', '\x2', 
		'\x2', '\xB89', '\xB8B', '\x3', '\x2', '\x2', '\x2', '\xB8A', '\xB81', 
		'\x3', '\x2', '\x2', '\x2', '\xB8B', '\xB8E', '\x3', '\x2', '\x2', '\x2', 
		'\xB8C', '\xB8A', '\x3', '\x2', '\x2', '\x2', '\xB8C', '\xB8D', '\x3', 
		'\x2', '\x2', '\x2', '\xB8D', '\x113', '\x3', '\x2', '\x2', '\x2', '\xB8E', 
		'\xB8C', '\x3', '\x2', '\x2', '\x2', '\xB8F', '\xB92', '\a', '\x19B', 
		'\x2', '\x2', '\xB90', '\xB93', '\x5', '\x114', '\x8B', '\x2', '\xB91', 
		'\xB93', '\x5', '\x110', '\x89', '\x2', '\xB92', '\xB90', '\x3', '\x2', 
		'\x2', '\x2', '\xB92', '\xB91', '\x3', '\x2', '\x2', '\x2', '\xB93', '\xB94', 
		'\x3', '\x2', '\x2', '\x2', '\xB94', '\xB95', '\a', '\x19C', '\x2', '\x2', 
		'\xB95', '\x115', '\x3', '\x2', '\x2', '\x2', '\xB96', '\xB9A', '\a', 
		'\x267', '\x2', '\x2', '\xB97', '\xB99', '\x5', '\x150', '\xA9', '\x2', 
		'\xB98', '\xB97', '\x3', '\x2', '\x2', '\x2', '\xB99', '\xB9C', '\x3', 
		'\x2', '\x2', '\x2', '\xB9A', '\xB98', '\x3', '\x2', '\x2', '\x2', '\xB9A', 
		'\xB9B', '\x3', '\x2', '\x2', '\x2', '\xB9B', '\xB9D', '\x3', '\x2', '\x2', 
		'\x2', '\xB9C', '\xB9A', '\x3', '\x2', '\x2', '\x2', '\xB9D', '\xB9F', 
		'\x5', '\x158', '\xAD', '\x2', '\xB9E', '\xBA0', '\x5', '\x124', '\x93', 
		'\x2', '\xB9F', '\xB9E', '\x3', '\x2', '\x2', '\x2', '\xB9F', '\xBA0', 
		'\x3', '\x2', '\x2', '\x2', '\xBA0', '\xBA2', '\x3', '\x2', '\x2', '\x2', 
		'\xBA1', '\xBA3', '\x5', '\x14C', '\xA7', '\x2', '\xBA2', '\xBA1', '\x3', 
		'\x2', '\x2', '\x2', '\xBA2', '\xBA3', '\x3', '\x2', '\x2', '\x2', '\xBA3', 
		'\xBA5', '\x3', '\x2', '\x2', '\x2', '\xBA4', '\xBA6', '\x5', '\x15E', 
		'\xB0', '\x2', '\xBA5', '\xBA4', '\x3', '\x2', '\x2', '\x2', '\xBA5', 
		'\xBA6', '\x3', '\x2', '\x2', '\x2', '\xBA6', '\xBA8', '\x3', '\x2', '\x2', 
		'\x2', '\xBA7', '\xBA9', '\x5', '\x144', '\xA3', '\x2', '\xBA8', '\xBA7', 
		'\x3', '\x2', '\x2', '\x2', '\xBA8', '\xBA9', '\x3', '\x2', '\x2', '\x2', 
		'\xBA9', '\xBAB', '\x3', '\x2', '\x2', '\x2', '\xBAA', '\xBAC', '\x5', 
		'\x128', '\x95', '\x2', '\xBAB', '\xBAA', '\x3', '\x2', '\x2', '\x2', 
		'\xBAB', '\xBAC', '\x3', '\x2', '\x2', '\x2', '\xBAC', '\xBAF', '\x3', 
		'\x2', '\x2', '\x2', '\xBAD', '\xBAE', '\x6', '\x8C', '\x31', '\x2', '\xBAE', 
		'\xBB0', '\x5', '\x12A', '\x96', '\x2', '\xBAF', '\xBAD', '\x3', '\x2', 
		'\x2', '\x2', '\xBAF', '\xBB0', '\x3', '\x2', '\x2', '\x2', '\xBB0', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '\xBB1', '\xBB2', '\x5', '\x114', '\x8B', 
		'\x2', '\xBB2', '\x119', '\x3', '\x2', '\x2', '\x2', '\xBB3', '\xBB4', 
		'\t', '\x1F', '\x2', '\x2', '\xBB4', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\xBB5', '\xBB6', '\a', '\x220', '\x2', '\x2', '\xBB6', '\xBB7', '\x5', 
		'\x120', '\x91', '\x2', '\xBB7', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'\xBB8', '\xBB9', '\a', '\x220', '\x2', '\x2', '\xBB9', '\xBBA', '\x5', 
		'\x122', '\x92', '\x2', '\xBBA', '\x11F', '\x3', '\x2', '\x2', '\x2', 
		'\xBBB', '\xBBE', '\x5', '\x122', '\x92', '\x2', '\xBBC', '\xBBD', '\t', 
		' ', '\x2', '\x2', '\xBBD', '\xBBF', '\x5', '\x122', '\x92', '\x2', '\xBBE', 
		'\xBBC', '\x3', '\x2', '\x2', '\x2', '\xBBE', '\xBBF', '\x3', '\x2', '\x2', 
		'\x2', '\xBBF', '\x121', '\x3', '\x2', '\x2', '\x2', '\xBC0', '\xBC3', 
		'\x5', '\x456', '\x22C', '\x2', '\xBC1', '\xBC3', '\t', '!', '\x2', '\x2', 
		'\xBC2', '\xBC0', '\x3', '\x2', '\x2', '\x2', '\xBC2', '\xBC1', '\x3', 
		'\x2', '\x2', '\x2', '\xBC3', '\x123', '\x3', '\x2', '\x2', '\x2', '\xBC4', 
		'\xBE0', '\a', '\x211', '\x2', '\x2', '\xBC5', '\xBC6', '\a', '\x24E', 
		'\x2', '\x2', '\xBC6', '\xBC8', '\x5', '\x470', '\x239', '\x2', '\xBC7', 
		'\xBC9', '\x5', '\x3D6', '\x1EC', '\x2', '\xBC8', '\xBC7', '\x3', '\x2', 
		'\x2', '\x2', '\xBC8', '\xBC9', '\x3', '\x2', '\x2', '\x2', '\xBC9', '\xBCB', 
		'\x3', '\x2', '\x2', '\x2', '\xBCA', '\xBCC', '\x5', '\x3D8', '\x1ED', 
		'\x2', '\xBCB', '\xBCA', '\x3', '\x2', '\x2', '\x2', '\xBCB', '\xBCC', 
		'\x3', '\x2', '\x2', '\x2', '\xBCC', '\xBCE', '\x3', '\x2', '\x2', '\x2', 
		'\xBCD', '\xBCF', '\x5', '\x3DC', '\x1EF', '\x2', '\xBCE', '\xBCD', '\x3', 
		'\x2', '\x2', '\x2', '\xBCE', '\xBCF', '\x3', '\x2', '\x2', '\x2', '\xBCF', 
		'\xBE1', '\x3', '\x2', '\x2', '\x2', '\xBD0', '\xBD1', '\a', '}', '\x2', 
		'\x2', '\xBD1', '\xBE1', '\x5', '\x470', '\x239', '\x2', '\xBD2', '\xBD5', 
		'\x5', '\x48A', '\x246', '\x2', '\xBD3', '\xBD5', '\x5', '\x2D2', '\x16A', 
		'\x2', '\xBD4', '\xBD2', '\x3', '\x2', '\x2', '\x2', '\xBD4', '\xBD3', 
		'\x3', '\x2', '\x2', '\x2', '\xBD5', '\xBDD', '\x3', '\x2', '\x2', '\x2', 
		'\xBD6', '\xBD9', '\a', '\x198', '\x2', '\x2', '\xBD7', '\xBDA', '\x5', 
		'\x48A', '\x246', '\x2', '\xBD8', '\xBDA', '\x5', '\x2D2', '\x16A', '\x2', 
		'\xBD9', '\xBD7', '\x3', '\x2', '\x2', '\x2', '\xBD9', '\xBD8', '\x3', 
		'\x2', '\x2', '\x2', '\xBDA', '\xBDC', '\x3', '\x2', '\x2', '\x2', '\xBDB', 
		'\xBD6', '\x3', '\x2', '\x2', '\x2', '\xBDC', '\xBDF', '\x3', '\x2', '\x2', 
		'\x2', '\xBDD', '\xBDB', '\x3', '\x2', '\x2', '\x2', '\xBDD', '\xBDE', 
		'\x3', '\x2', '\x2', '\x2', '\xBDE', '\xBE1', '\x3', '\x2', '\x2', '\x2', 
		'\xBDF', '\xBDD', '\x3', '\x2', '\x2', '\x2', '\xBE0', '\xBC5', '\x3', 
		'\x2', '\x2', '\x2', '\xBE0', '\xBD0', '\x3', '\x2', '\x2', '\x2', '\xBE0', 
		'\xBD4', '\x3', '\x2', '\x2', '\x2', '\xBE1', '\x125', '\x3', '\x2', '\x2', 
		'\x2', '\xBE2', '\xBE3', '\a', '\x253', '\x2', '\x2', '\xBE3', '\xBE4', 
		'\a', '\x1AF', '\x2', '\x2', '\xBE4', '\xBEA', '\a', '\x19B', '\x2', '\x2', 
		'\xBE5', '\xBE8', '\a', '\x17E', '\x2', '\x2', '\xBE6', '\xBE7', '\a', 
		'\x198', '\x2', '\x2', '\xBE7', '\xBE9', '\a', '\x17E', '\x2', '\x2', 
		'\xBE8', '\xBE6', '\x3', '\x2', '\x2', '\x2', '\xBE8', '\xBE9', '\x3', 
		'\x2', '\x2', '\x2', '\xBE9', '\xBEB', '\x3', '\x2', '\x2', '\x2', '\xBEA', 
		'\xBE5', '\x3', '\x2', '\x2', '\x2', '\xBEA', '\xBEB', '\x3', '\x2', '\x2', 
		'\x2', '\xBEB', '\xBEC', '\x3', '\x2', '\x2', '\x2', '\xBEC', '\xBED', 
		'\a', '\x19C', '\x2', '\x2', '\xBED', '\x127', '\x3', '\x2', '\x2', '\x2', 
		'\xBEE', '\xBEF', '\a', '\x203', '\x2', '\x2', '\xBEF', '\xBF0', '\x5', 
		'\x290', '\x149', '\x2', '\xBF0', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\xBF1', '\xBF2', '\a', '\x2DC', '\x2', '\x2', '\xBF2', '\xBF7', '\x5', 
		'\x12C', '\x97', '\x2', '\xBF3', '\xBF4', '\a', '\x198', '\x2', '\x2', 
		'\xBF4', '\xBF6', '\x5', '\x12C', '\x97', '\x2', '\xBF5', '\xBF3', '\x3', 
		'\x2', '\x2', '\x2', '\xBF6', '\xBF9', '\x3', '\x2', '\x2', '\x2', '\xBF7', 
		'\xBF5', '\x3', '\x2', '\x2', '\x2', '\xBF7', '\xBF8', '\x3', '\x2', '\x2', 
		'\x2', '\xBF8', '\x12B', '\x3', '\x2', '\x2', '\x2', '\xBF9', '\xBF7', 
		'\x3', '\x2', '\x2', '\x2', '\xBFA', '\xBFB', '\x5', '\x452', '\x22A', 
		'\x2', '\xBFB', '\xBFC', '\a', '\x1B1', '\x2', '\x2', '\xBFC', '\xBFD', 
		'\x5', '\x12E', '\x98', '\x2', '\xBFD', '\x12D', '\x3', '\x2', '\x2', 
		'\x2', '\xBFE', '\xBFF', '\a', '\x19B', '\x2', '\x2', '\xBFF', '\xC00', 
		'\x5', '\x130', '\x99', '\x2', '\xC00', '\xC01', '\a', '\x19C', '\x2', 
		'\x2', '\xC01', '\x12F', '\x3', '\x2', '\x2', '\x2', '\xC02', '\xC04', 
		'\x5', '\x452', '\x22A', '\x2', '\xC03', '\xC02', '\x3', '\x2', '\x2', 
		'\x2', '\xC03', '\xC04', '\x3', '\x2', '\x2', '\x2', '\xC04', '\xC08', 
		'\x3', '\x2', '\x2', '\x2', '\xC05', '\xC06', '\a', '\"', '\x2', '\x2', 
		'\xC06', '\xC07', '\a', '\x1BE', '\x2', '\x2', '\xC07', '\xC09', '\x5', 
		'\x2F2', '\x17A', '\x2', '\xC08', '\xC05', '\x3', '\x2', '\x2', '\x2', 
		'\xC08', '\xC09', '\x3', '\x2', '\x2', '\x2', '\xC09', '\xC0B', '\x3', 
		'\x2', '\x2', '\x2', '\xC0A', '\xC0C', '\x5', '\x148', '\xA5', '\x2', 
		'\xC0B', '\xC0A', '\x3', '\x2', '\x2', '\x2', '\xC0B', '\xC0C', '\x3', 
		'\x2', '\x2', '\x2', '\xC0C', '\xC0E', '\x3', '\x2', '\x2', '\x2', '\xC0D', 
		'\xC0F', '\x5', '\x132', '\x9A', '\x2', '\xC0E', '\xC0D', '\x3', '\x2', 
		'\x2', '\x2', '\xC0E', '\xC0F', '\x3', '\x2', '\x2', '\x2', '\xC0F', '\x131', 
		'\x3', '\x2', '\x2', '\x2', '\xC10', '\xC11', '\x5', '\x134', '\x9B', 
		'\x2', '\xC11', '\xC13', '\x5', '\x136', '\x9C', '\x2', '\xC12', '\xC14', 
		'\x5', '\x13E', '\xA0', '\x2', '\xC13', '\xC12', '\x3', '\x2', '\x2', 
		'\x2', '\xC13', '\xC14', '\x3', '\x2', '\x2', '\x2', '\xC14', '\x133', 
		'\x3', '\x2', '\x2', '\x2', '\xC15', '\xC16', '\t', '\"', '\x2', '\x2', 
		'\xC16', '\x135', '\x3', '\x2', '\x2', '\x2', '\xC17', '\xC1A', '\x5', 
		'\x138', '\x9D', '\x2', '\xC18', '\xC1A', '\x5', '\x13A', '\x9E', '\x2', 
		'\xC19', '\xC17', '\x3', '\x2', '\x2', '\x2', '\xC19', '\xC18', '\x3', 
		'\x2', '\x2', '\x2', '\xC1A', '\x137', '\x3', '\x2', '\x2', '\x2', '\xC1B', 
		'\xC1C', '\a', '\x2DB', '\x2', '\x2', '\xC1C', '\xC2A', '\a', '\x2D6', 
		'\x2', '\x2', '\xC1D', '\xC1E', '\x5', '\x466', '\x234', '\x2', '\xC1E', 
		'\xC1F', '\a', '\x2D6', '\x2', '\x2', '\xC1F', '\xC2A', '\x3', '\x2', 
		'\x2', '\x2', '\xC20', '\xC21', '\a', '\x1A6', '\x2', '\x2', '\xC21', 
		'\xC2A', '\a', '\x2D6', '\x2', '\x2', '\xC22', '\xC23', '\a', '\x210', 
		'\x2', '\x2', '\xC23', '\xC24', '\x5', '\x290', '\x149', '\x2', '\xC24', 
		'\xC25', '\x5', '\x2E8', '\x175', '\x2', '\xC25', '\xC26', '\a', '\x2D6', 
		'\x2', '\x2', '\xC26', '\xC2A', '\x3', '\x2', '\x2', '\x2', '\xC27', '\xC28', 
		'\a', 'm', '\x2', '\x2', '\xC28', '\xC2A', '\a', '\x12F', '\x2', '\x2', 
		'\xC29', '\xC1B', '\x3', '\x2', '\x2', '\x2', '\xC29', '\xC1D', '\x3', 
		'\x2', '\x2', '\x2', '\xC29', '\xC20', '\x3', '\x2', '\x2', '\x2', '\xC29', 
		'\xC22', '\x3', '\x2', '\x2', '\x2', '\xC29', '\xC27', '\x3', '\x2', '\x2', 
		'\x2', '\xC2A', '\x139', '\x3', '\x2', '\x2', '\x2', '\xC2B', '\xC2C', 
		'\a', '\x1B5', '\x2', '\x2', '\xC2C', '\xC2D', '\x5', '\x13C', '\x9F', 
		'\x2', '\xC2D', '\xC2E', '\a', '\x1B0', '\x2', '\x2', '\xC2E', '\xC2F', 
		'\x5', '\x13C', '\x9F', '\x2', '\xC2F', '\x13B', '\x3', '\x2', '\x2', 
		'\x2', '\xC30', '\xC3E', '\x5', '\x138', '\x9D', '\x2', '\xC31', '\xC32', 
		'\a', '\x2DB', '\x2', '\x2', '\xC32', '\xC3E', '\a', '\x2CB', '\x2', '\x2', 
		'\xC33', '\xC34', '\x5', '\x466', '\x234', '\x2', '\xC34', '\xC35', '\a', 
		'\x2CB', '\x2', '\x2', '\xC35', '\xC3E', '\x3', '\x2', '\x2', '\x2', '\xC36', 
		'\xC37', '\a', '\x1A6', '\x2', '\x2', '\xC37', '\xC3E', '\a', '\x2CB', 
		'\x2', '\x2', '\xC38', '\xC39', '\a', '\x210', '\x2', '\x2', '\xC39', 
		'\xC3A', '\x5', '\x290', '\x149', '\x2', '\xC3A', '\xC3B', '\x5', '\x2E8', 
		'\x175', '\x2', '\xC3B', '\xC3C', '\a', '\x2CB', '\x2', '\x2', '\xC3C', 
		'\xC3E', '\x3', '\x2', '\x2', '\x2', '\xC3D', '\xC30', '\x3', '\x2', '\x2', 
		'\x2', '\xC3D', '\xC31', '\x3', '\x2', '\x2', '\x2', '\xC3D', '\xC33', 
		'\x3', '\x2', '\x2', '\x2', '\xC3D', '\xC36', '\x3', '\x2', '\x2', '\x2', 
		'\xC3D', '\xC38', '\x3', '\x2', '\x2', '\x2', '\xC3E', '\x13D', '\x3', 
		'\x2', '\x2', '\x2', '\xC3F', '\xC46', '\a', '\x2C9', '\x2', '\x2', '\xC40', 
		'\xC41', '\a', 'm', '\x2', '\x2', '\xC41', '\xC47', '\a', '\x12F', '\x2', 
		'\x2', '\xC42', '\xC47', '\a', '\x201', '\x2', '\x2', '\xC43', '\xC47', 
		'\a', '\x2DA', '\x2', '\x2', '\xC44', '\xC45', '\a', '\x1D', '\x2', '\x2', 
		'\xC45', '\xC47', '\a', '\x2D3', '\x2', '\x2', '\xC46', '\xC40', '\x3', 
		'\x2', '\x2', '\x2', '\xC46', '\xC42', '\x3', '\x2', '\x2', '\x2', '\xC46', 
		'\xC43', '\x3', '\x2', '\x2', '\x2', '\xC46', '\xC44', '\x3', '\x2', '\x2', 
		'\x2', '\xC47', '\x13F', '\x3', '\x2', '\x2', '\x2', '\xC48', '\xC4A', 
		'\a', '\x2AB', '\x2', '\x2', '\xC49', '\xC4B', '\a', '\x2BA', '\x2', '\x2', 
		'\xC4A', '\xC49', '\x3', '\x2', '\x2', '\x2', '\xC4A', '\xC4B', '\x3', 
		'\x2', '\x2', '\x2', '\xC4B', '\xC4C', '\x3', '\x2', '\x2', '\x2', '\xC4C', 
		'\xC51', '\x5', '\x142', '\xA2', '\x2', '\xC4D', '\xC4E', '\a', '\x198', 
		'\x2', '\x2', '\xC4E', '\xC50', '\x5', '\x142', '\xA2', '\x2', '\xC4F', 
		'\xC4D', '\x3', '\x2', '\x2', '\x2', '\xC50', '\xC53', '\x3', '\x2', '\x2', 
		'\x2', '\xC51', '\xC4F', '\x3', '\x2', '\x2', '\x2', '\xC51', '\xC52', 
		'\x3', '\x2', '\x2', '\x2', '\xC52', '\x141', '\x3', '\x2', '\x2', '\x2', 
		'\xC53', '\xC51', '\x3', '\x2', '\x2', '\x2', '\xC54', '\xC56', '\x5', 
		'\x456', '\x22C', '\x2', '\xC55', '\xC57', '\x5', '\x402', '\x202', '\x2', 
		'\xC56', '\xC55', '\x3', '\x2', '\x2', '\x2', '\xC56', '\xC57', '\x3', 
		'\x2', '\x2', '\x2', '\xC57', '\xC58', '\x3', '\x2', '\x2', '\x2', '\xC58', 
		'\xC59', '\a', '\x1B1', '\x2', '\x2', '\xC59', '\xC5A', '\x5', '\x118', 
		'\x8D', '\x2', '\xC5A', '\x143', '\x3', '\x2', '\x2', '\x2', '\xC5B', 
		'\xC5C', '\a', '\x201', '\x2', '\x2', '\xC5C', '\xC5D', '\a', '\x1BE', 
		'\x2', '\x2', '\xC5D', '\xC5F', '\x5', '\x2F2', '\x17A', '\x2', '\xC5E', 
		'\xC60', '\x5', '\x146', '\xA4', '\x2', '\xC5F', '\xC5E', '\x3', '\x2', 
		'\x2', '\x2', '\xC5F', '\xC60', '\x3', '\x2', '\x2', '\x2', '\xC60', '\x145', 
		'\x3', '\x2', '\x2', '\x2', '\xC61', '\xC62', '\a', '\x2AB', '\x2', '\x2', 
		'\xC62', '\xC67', '\a', '\x129', '\x2', '\x2', '\xC63', '\xC64', '\x6', 
		'\xA4', '\x32', '\x2', '\xC64', '\xC65', '\a', '\x2AB', '\x2', '\x2', 
		'\xC65', '\xC67', '\a', 'l', '\x2', '\x2', '\xC66', '\xC61', '\x3', '\x2', 
		'\x2', '\x2', '\xC66', '\xC63', '\x3', '\x2', '\x2', '\x2', '\xC67', '\x147', 
		'\x3', '\x2', '\x2', '\x2', '\xC68', '\xC69', '\a', '\x24B', '\x2', '\x2', 
		'\xC69', '\xC6A', '\a', '\x1BE', '\x2', '\x2', '\xC6A', '\xC6B', '\x5', 
		'\x2F2', '\x17A', '\x2', '\xC6B', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'\xC6C', '\xC6D', '\t', '#', '\x2', '\x2', '\xC6D', '\x14B', '\x3', '\x2', 
		'\x2', '\x2', '\xC6E', '\xC71', '\a', '\x1FC', '\x2', '\x2', '\xC6F', 
		'\xC72', '\a', '\x1EA', '\x2', '\x2', '\xC70', '\xC72', '\x5', '\x14E', 
		'\xA8', '\x2', '\xC71', '\xC6F', '\x3', '\x2', '\x2', '\x2', '\xC71', 
		'\xC70', '\x3', '\x2', '\x2', '\x2', '\xC72', '\x14D', '\x3', '\x2', '\x2', 
		'\x2', '\xC73', '\xC78', '\x5', '\x160', '\xB1', '\x2', '\xC74', '\xC75', 
		'\a', '\x198', '\x2', '\x2', '\xC75', '\xC77', '\x5', '\x160', '\xB1', 
		'\x2', '\xC76', '\xC74', '\x3', '\x2', '\x2', '\x2', '\xC77', '\xC7A', 
		'\x3', '\x2', '\x2', '\x2', '\xC78', '\xC76', '\x3', '\x2', '\x2', '\x2', 
		'\xC78', '\xC79', '\x3', '\x2', '\x2', '\x2', '\xC79', '\x14F', '\x3', 
		'\x2', '\x2', '\x2', '\xC7A', '\xC78', '\x3', '\x2', '\x2', '\x2', '\xC7B', 
		'\xC84', '\x5', '\x11A', '\x8E', '\x2', '\xC7C', '\xC84', '\a', '\x142', 
		'\x2', '\x2', '\xC7D', '\xC7E', '\x6', '\xA9', '\x33', '\x2', '\xC7E', 
		'\xC84', '\a', '\x140', '\x2', '\x2', '\xC7F', '\xC80', '\x6', '\xA9', 
		'\x34', '\x2', '\xC80', '\xC81', '\a', '\xD3', '\x2', '\x2', '\xC81', 
		'\xC82', '\a', '\x181', '\x2', '\x2', '\xC82', '\xC84', '\x5', '\x464', 
		'\x233', '\x2', '\xC83', '\xC7B', '\x3', '\x2', '\x2', '\x2', '\xC83', 
		'\xC7C', '\x3', '\x2', '\x2', '\x2', '\xC83', '\xC7D', '\x3', '\x2', '\x2', 
		'\x2', '\xC83', '\xC7F', '\x3', '\x2', '\x2', '\x2', '\xC84', '\x151', 
		'\x3', '\x2', '\x2', '\x2', '\xC85', '\xC86', '\a', '\x1FB', '\x2', '\x2', 
		'\xC86', '\xC8A', '\x5', '\x154', '\xAB', '\x2', '\xC87', '\xC88', '\x6', 
		'\xAA', '\x35', '\x2', '\xC88', '\xC89', '\a', '\x2BD', '\x2', '\x2', 
		'\xC89', '\xC8B', '\x5', '\x440', '\x221', '\x2', '\xC8A', '\xC87', '\x3', 
		'\x2', '\x2', '\x2', '\xC8A', '\xC8B', '\x3', '\x2', '\x2', '\x2', '\xC8B', 
		'\xC8E', '\x3', '\x2', '\x2', '\x2', '\xC8C', '\xC8D', '\x6', '\xAA', 
		'\x36', '\x2', '\xC8D', '\xC8F', '\x5', '\x156', '\xAC', '\x2', '\xC8E', 
		'\xC8C', '\x3', '\x2', '\x2', '\x2', '\xC8E', '\xC8F', '\x3', '\x2', '\x2', 
		'\x2', '\xC8F', '\xC95', '\x3', '\x2', '\x2', '\x2', '\xC90', '\xC91', 
		'\a', '\x225', '\x2', '\x2', '\xC91', '\xC92', '\a', '\x213', '\x2', '\x2', 
		'\xC92', '\xC93', '\a', '\x138', '\x2', '\x2', '\xC93', '\xC95', '\a', 
		'\xE0', '\x2', '\x2', '\xC94', '\xC85', '\x3', '\x2', '\x2', '\x2', '\xC94', 
		'\xC90', '\x3', '\x2', '\x2', '\x2', '\xC95', '\x153', '\x3', '\x2', '\x2', 
		'\x2', '\xC96', '\xC9A', '\a', '\x298', '\x2', '\x2', '\xC97', '\xC98', 
		'\x6', '\xAB', '\x37', '\x2', '\xC98', '\xC9A', '\a', '\x138', '\x2', 
		'\x2', '\xC99', '\xC96', '\x3', '\x2', '\x2', '\x2', '\xC99', '\xC97', 
		'\x3', '\x2', '\x2', '\x2', '\xC9A', '\x155', '\x3', '\x2', '\x2', '\x2', 
		'\xC9B', '\xC9C', '\a', '\x2BE', '\x2', '\x2', '\xC9C', '\xC9F', '\a', 
		'\x2BF', '\x2', '\x2', '\xC9D', '\xC9F', '\a', '\x2C0', '\x2', '\x2', 
		'\xC9E', '\xC9B', '\x3', '\x2', '\x2', '\x2', '\xC9E', '\xC9D', '\x3', 
		'\x2', '\x2', '\x2', '\xC9F', '\x157', '\x3', '\x2', '\x2', '\x2', '\xCA0', 
		'\xCA3', '\x5', '\x15A', '\xAE', '\x2', '\xCA1', '\xCA3', '\a', '\x18B', 
		'\x2', '\x2', '\xCA2', '\xCA0', '\x3', '\x2', '\x2', '\x2', '\xCA2', '\xCA1', 
		'\x3', '\x2', '\x2', '\x2', '\xCA3', '\xCA8', '\x3', '\x2', '\x2', '\x2', 
		'\xCA4', '\xCA5', '\a', '\x198', '\x2', '\x2', '\xCA5', '\xCA7', '\x5', 
		'\x15A', '\xAE', '\x2', '\xCA6', '\xCA4', '\x3', '\x2', '\x2', '\x2', 
		'\xCA7', '\xCAA', '\x3', '\x2', '\x2', '\x2', '\xCA8', '\xCA6', '\x3', 
		'\x2', '\x2', '\x2', '\xCA8', '\xCA9', '\x3', '\x2', '\x2', '\x2', '\xCA9', 
		'\x159', '\x3', '\x2', '\x2', '\x2', '\xCAA', '\xCA8', '\x3', '\x2', '\x2', 
		'\x2', '\xCAB', '\xCB1', '\x5', '\x40C', '\x207', '\x2', '\xCAC', '\xCAE', 
		'\x5', '\x290', '\x149', '\x2', '\xCAD', '\xCAF', '\x5', '\x15C', '\xAF', 
		'\x2', '\xCAE', '\xCAD', '\x3', '\x2', '\x2', '\x2', '\xCAE', '\xCAF', 
		'\x3', '\x2', '\x2', '\x2', '\xCAF', '\xCB1', '\x3', '\x2', '\x2', '\x2', 
		'\xCB0', '\xCAB', '\x3', '\x2', '\x2', '\x2', '\xCB0', '\xCAC', '\x3', 
		'\x2', '\x2', '\x2', '\xCB1', '\x15B', '\x3', '\x2', '\x2', '\x2', '\xCB2', 
		'\xCB4', '\a', '\x1B1', '\x2', '\x2', '\xCB3', '\xCB2', '\x3', '\x2', 
		'\x2', '\x2', '\xCB3', '\xCB4', '\x3', '\x2', '\x2', '\x2', '\xCB4', '\xCB7', 
		'\x3', '\x2', '\x2', '\x2', '\xCB5', '\xCB8', '\x5', '\x456', '\x22C', 
		'\x2', '\xCB6', '\xCB8', '\x5', '\x470', '\x239', '\x2', '\xCB7', '\xCB5', 
		'\x3', '\x2', '\x2', '\x2', '\xCB7', '\xCB6', '\x3', '\x2', '\x2', '\x2', 
		'\xCB8', '\x15D', '\x3', '\x2', '\x2', '\x2', '\xCB9', '\xCBA', '\a', 
		'\x2A9', '\x2', '\x2', '\xCBA', '\xCBB', '\x5', '\x290', '\x149', '\x2', 
		'\xCBB', '\x15F', '\x3', '\x2', '\x2', '\x2', '\xCBC', '\xCC7', '\x5', 
		'\x16C', '\xB7', '\x2', '\xCBD', '\xCC1', '\a', '\x19D', '\x2', '\x2', 
		'\xCBE', '\xCBF', '\x6', '\xB1', '\x38', '\x2', '\xCBF', '\xCC2', '\x5', 
		'\x456', '\x22C', '\x2', '\xCC0', '\xCC2', '\a', '\x2FD', '\x2', '\x2', 
		'\xCC1', '\xCBE', '\x3', '\x2', '\x2', '\x2', '\xCC1', '\xCC0', '\x3', 
		'\x2', '\x2', '\x2', '\xCC2', '\xCC3', '\x3', '\x2', '\x2', '\x2', '\xCC3', 
		'\xCC4', '\x5', '\x162', '\xB2', '\x2', '\xCC4', '\xCC5', '\a', '\x19E', 
		'\x2', '\x2', '\xCC5', '\xCC7', '\x3', '\x2', '\x2', '\x2', '\xCC6', '\xCBC', 
		'\x3', '\x2', '\x2', '\x2', '\xCC6', '\xCBD', '\x3', '\x2', '\x2', '\x2', 
		'\xCC7', '\xCCB', '\x3', '\x2', '\x2', '\x2', '\xCC8', '\xCCA', '\x5', 
		'\x164', '\xB3', '\x2', '\xCC9', '\xCC8', '\x3', '\x2', '\x2', '\x2', 
		'\xCCA', '\xCCD', '\x3', '\x2', '\x2', '\x2', '\xCCB', '\xCC9', '\x3', 
		'\x2', '\x2', '\x2', '\xCCB', '\xCCC', '\x3', '\x2', '\x2', '\x2', '\xCCC', 
		'\x161', '\x3', '\x2', '\x2', '\x2', '\xCCD', '\xCCB', '\x3', '\x2', '\x2', 
		'\x2', '\xCCE', '\xCD2', '\x5', '\x16C', '\xB7', '\x2', '\xCCF', '\xCD1', 
		'\x5', '\x164', '\xB3', '\x2', '\xCD0', '\xCCF', '\x3', '\x2', '\x2', 
		'\x2', '\xCD1', '\xCD4', '\x3', '\x2', '\x2', '\x2', '\xCD2', '\xCD0', 
		'\x3', '\x2', '\x2', '\x2', '\xCD2', '\xCD3', '\x3', '\x2', '\x2', '\x2', 
		'\xCD3', '\x163', '\x3', '\x2', '\x2', '\x2', '\xCD4', '\xCD2', '\x3', 
		'\x2', '\x2', '\x2', '\xCD5', '\xCD6', '\x5', '\x168', '\xB5', '\x2', 
		'\xCD6', '\xCDB', '\x5', '\x160', '\xB1', '\x2', '\xCD7', '\xCD8', '\a', 
		'\x244', '\x2', '\x2', '\xCD8', '\xCDC', '\x5', '\x290', '\x149', '\x2', 
		'\xCD9', '\xCDA', '\a', '\x29B', '\x2', '\x2', '\xCDA', '\xCDC', '\x5', 
		'\x45A', '\x22E', '\x2', '\xCDB', '\xCD7', '\x3', '\x2', '\x2', '\x2', 
		'\xCDB', '\xCD9', '\x3', '\x2', '\x2', '\x2', '\xCDB', '\xCDC', '\x3', 
		'\x2', '\x2', '\x2', '\xCDC', '\xCE9', '\x3', '\x2', '\x2', '\x2', '\xCDD', 
		'\xCDE', '\x5', '\x16A', '\xB6', '\x2', '\xCDE', '\xCE3', '\x5', '\x160', 
		'\xB1', '\x2', '\xCDF', '\xCE0', '\a', '\x244', '\x2', '\x2', '\xCE0', 
		'\xCE4', '\x5', '\x290', '\x149', '\x2', '\xCE1', '\xCE2', '\a', '\x29B', 
		'\x2', '\x2', '\xCE2', '\xCE4', '\x5', '\x45A', '\x22E', '\x2', '\xCE3', 
		'\xCDF', '\x3', '\x2', '\x2', '\x2', '\xCE3', '\xCE1', '\x3', '\x2', '\x2', 
		'\x2', '\xCE4', '\xCE9', '\x3', '\x2', '\x2', '\x2', '\xCE5', '\xCE6', 
		'\x5', '\x166', '\xB4', '\x2', '\xCE6', '\xCE7', '\x5', '\x16C', '\xB7', 
		'\x2', '\xCE7', '\xCE9', '\x3', '\x2', '\x2', '\x2', '\xCE8', '\xCD5', 
		'\x3', '\x2', '\x2', '\x2', '\xCE8', '\xCDD', '\x3', '\x2', '\x2', '\x2', 
		'\xCE8', '\xCE5', '\x3', '\x2', '\x2', '\x2', '\xCE9', '\x165', '\x3', 
		'\x2', '\x2', '\x2', '\xCEA', '\xCEC', '\a', '\x23A', '\x2', '\x2', '\xCEB', 
		'\xCED', '\a', '\x20C', '\x2', '\x2', '\xCEC', '\xCEB', '\x3', '\x2', 
		'\x2', '\x2', '\xCEC', '\xCED', '\x3', '\x2', '\x2', '\x2', '\xCED', '\xCEE', 
		'\x3', '\x2', '\x2', '\x2', '\xCEE', '\xCF6', '\a', '\x218', '\x2', '\x2', 
		'\xCEF', '\xCF0', '\a', '\x23A', '\x2', '\x2', '\xCF0', '\xCF2', '\t', 
		'$', '\x2', '\x2', '\xCF1', '\xCF3', '\a', '\x24D', '\x2', '\x2', '\xCF2', 
		'\xCF1', '\x3', '\x2', '\x2', '\x2', '\xCF2', '\xCF3', '\x3', '\x2', '\x2', 
		'\x2', '\xCF3', '\xCF4', '\x3', '\x2', '\x2', '\x2', '\xCF4', '\xCF6', 
		'\a', '\x218', '\x2', '\x2', '\xCF5', '\xCEA', '\x3', '\x2', '\x2', '\x2', 
		'\xCF5', '\xCEF', '\x3', '\x2', '\x2', '\x2', '\xCF6', '\x167', '\x3', 
		'\x2', '\x2', '\x2', '\xCF7', '\xCF9', '\t', '%', '\x2', '\x2', '\xCF8', 
		'\xCF7', '\x3', '\x2', '\x2', '\x2', '\xCF8', '\xCF9', '\x3', '\x2', '\x2', 
		'\x2', '\xCF9', '\xCFA', '\x3', '\x2', '\x2', '\x2', '\xCFA', '\xCFD', 
		'\a', '\x218', '\x2', '\x2', '\xCFB', '\xCFD', '\a', '\x281', '\x2', '\x2', 
		'\xCFC', '\xCF8', '\x3', '\x2', '\x2', '\x2', '\xCFC', '\xCFB', '\x3', 
		'\x2', '\x2', '\x2', '\xCFD', '\x169', '\x3', '\x2', '\x2', '\x2', '\xCFE', 
		'\xD00', '\t', '$', '\x2', '\x2', '\xCFF', '\xD01', '\a', '\x24D', '\x2', 
		'\x2', '\xD00', '\xCFF', '\x3', '\x2', '\x2', '\x2', '\xD00', '\xD01', 
		'\x3', '\x2', '\x2', '\x2', '\xD01', '\xD02', '\x3', '\x2', '\x2', '\x2', 
		'\xD02', '\xD03', '\a', '\x218', '\x2', '\x2', '\xD03', '\x16B', '\x3', 
		'\x2', '\x2', '\x2', '\xD04', '\xD0B', '\x5', '\x16E', '\xB8', '\x2', 
		'\xD05', '\xD0B', '\x5', '\x170', '\xB9', '\x2', '\xD06', '\xD0B', '\x5', 
		'\x172', '\xBA', '\x2', '\xD07', '\xD0B', '\x5', '\x174', '\xBB', '\x2', 
		'\xD08', '\xD09', '\x6', '\xB7', '\x39', '\x2', '\xD09', '\xD0B', '\x5', 
		'\x176', '\xBC', '\x2', '\xD0A', '\xD04', '\x3', '\x2', '\x2', '\x2', 
		'\xD0A', '\xD05', '\x3', '\x2', '\x2', '\x2', '\xD0A', '\xD06', '\x3', 
		'\x2', '\x2', '\x2', '\xD0A', '\xD07', '\x3', '\x2', '\x2', '\x2', '\xD0A', 
		'\xD08', '\x3', '\x2', '\x2', '\x2', '\xD0B', '\x16D', '\x3', '\x2', '\x2', 
		'\x2', '\xD0C', '\xD0E', '\x5', '\x43C', '\x21F', '\x2', '\xD0D', '\xD0F', 
		'\x5', '\x3FA', '\x1FE', '\x2', '\xD0E', '\xD0D', '\x3', '\x2', '\x2', 
		'\x2', '\xD0E', '\xD0F', '\x3', '\x2', '\x2', '\x2', '\xD0F', '\xD11', 
		'\x3', '\x2', '\x2', '\x2', '\xD10', '\xD12', '\x5', '\x186', '\xC4', 
		'\x2', '\xD11', '\xD10', '\x3', '\x2', '\x2', '\x2', '\xD11', '\xD12', 
		'\x3', '\x2', '\x2', '\x2', '\xD12', '\xD14', '\x3', '\x2', '\x2', '\x2', 
		'\xD13', '\xD15', '\x5', '\x188', '\xC5', '\x2', '\xD14', '\xD13', '\x3', 
		'\x2', '\x2', '\x2', '\xD14', '\xD15', '\x3', '\x2', '\x2', '\x2', '\xD15', 
		'\x16F', '\x3', '\x2', '\x2', '\x2', '\xD16', '\xD19', '\a', '\x19B', 
		'\x2', '\x2', '\xD17', '\xD1A', '\x5', '\x16E', '\xB8', '\x2', '\xD18', 
		'\xD1A', '\x5', '\x170', '\xB9', '\x2', '\xD19', '\xD17', '\x3', '\x2', 
		'\x2', '\x2', '\xD19', '\xD18', '\x3', '\x2', '\x2', '\x2', '\xD1A', '\xD1B', 
		'\x3', '\x2', '\x2', '\x2', '\xD1B', '\xD1C', '\a', '\x19C', '\x2', '\x2', 
		'\xD1C', '\x171', '\x3', '\x2', '\x2', '\x2', '\xD1D', '\xD1F', '\x5', 
		'\x118', '\x8D', '\x2', '\xD1E', '\xD20', '\x5', '\x186', '\xC4', '\x2', 
		'\xD1F', '\xD1E', '\x3', '\x2', '\x2', '\x2', '\xD1F', '\xD20', '\x3', 
		'\x2', '\x2', '\x2', '\xD20', '\xD23', '\x3', '\x2', '\x2', '\x2', '\xD21', 
		'\xD22', '\x6', '\xBA', ':', '\x2', '\xD22', '\xD24', '\x5', '\x402', 
		'\x202', '\x2', '\xD23', '\xD21', '\x3', '\x2', '\x2', '\x2', '\xD23', 
		'\xD24', '\x3', '\x2', '\x2', '\x2', '\xD24', '\xD2F', '\x3', '\x2', '\x2', 
		'\x2', '\xD25', '\xD26', '\x6', '\xBA', ';', '\x2', '\xD26', '\xD27', 
		'\a', '\x2F7', '\x2', '\x2', '\xD27', '\xD29', '\x5', '\x118', '\x8D', 
		'\x2', '\xD28', '\xD2A', '\x5', '\x186', '\xC4', '\x2', '\xD29', '\xD28', 
		'\x3', '\x2', '\x2', '\x2', '\xD29', '\xD2A', '\x3', '\x2', '\x2', '\x2', 
		'\xD2A', '\xD2C', '\x3', '\x2', '\x2', '\x2', '\xD2B', '\xD2D', '\x5', 
		'\x402', '\x202', '\x2', '\xD2C', '\xD2B', '\x3', '\x2', '\x2', '\x2', 
		'\xD2C', '\xD2D', '\x3', '\x2', '\x2', '\x2', '\xD2D', '\xD2F', '\x3', 
		'\x2', '\x2', '\x2', '\xD2E', '\xD1D', '\x3', '\x2', '\x2', '\x2', '\xD2E', 
		'\xD25', '\x3', '\x2', '\x2', '\x2', '\xD2F', '\x173', '\x3', '\x2', '\x2', 
		'\x2', '\xD30', '\xD33', '\a', '\x19B', '\x2', '\x2', '\xD31', '\xD34', 
		'\x5', '\x14E', '\xA8', '\x2', '\xD32', '\xD34', '\x5', '\x174', '\xBB', 
		'\x2', '\xD33', '\xD31', '\x3', '\x2', '\x2', '\x2', '\xD33', '\xD32', 
		'\x3', '\x2', '\x2', '\x2', '\xD34', '\xD35', '\x3', '\x2', '\x2', '\x2', 
		'\xD35', '\xD36', '\a', '\x19C', '\x2', '\x2', '\xD36', '\x175', '\x3', 
		'\x2', '\x2', '\x2', '\xD37', '\xD38', '\a', '\x2DE', '\x2', '\x2', '\xD38', 
		'\xD39', '\a', '\x19B', '\x2', '\x2', '\xD39', '\xD3A', '\x5', '\x290', 
		'\x149', '\x2', '\xD3A', '\xD3B', '\a', '\x198', '\x2', '\x2', '\xD3B', 
		'\xD3C', '\x5', '\x470', '\x239', '\x2', '\xD3C', '\xD3D', '\x5', '\x178', 
		'\xBD', '\x2', '\xD3D', '\xD3F', '\a', '\x19C', '\x2', '\x2', '\xD3E', 
		'\xD40', '\x5', '\x186', '\xC4', '\x2', '\xD3F', '\xD3E', '\x3', '\x2', 
		'\x2', '\x2', '\xD3F', '\xD40', '\x3', '\x2', '\x2', '\x2', '\xD40', '\x177', 
		'\x3', '\x2', '\x2', '\x2', '\xD41', '\xD42', '\a', '\\', '\x2', '\x2', 
		'\xD42', '\xD43', '\a', '\x19B', '\x2', '\x2', '\xD43', '\xD48', '\x5', 
		'\x17A', '\xBE', '\x2', '\xD44', '\xD45', '\a', '\x198', '\x2', '\x2', 
		'\xD45', '\xD47', '\x5', '\x17A', '\xBE', '\x2', '\xD46', '\xD44', '\x3', 
		'\x2', '\x2', '\x2', '\xD47', '\xD4A', '\x3', '\x2', '\x2', '\x2', '\xD48', 
		'\xD46', '\x3', '\x2', '\x2', '\x2', '\xD48', '\xD49', '\x3', '\x2', '\x2', 
		'\x2', '\xD49', '\xD4B', '\x3', '\x2', '\x2', '\x2', '\xD4A', '\xD48', 
		'\x3', '\x2', '\x2', '\x2', '\xD4B', '\xD4C', '\a', '\x19C', '\x2', '\x2', 
		'\xD4C', '\x179', '\x3', '\x2', '\x2', '\x2', '\xD4D', '\xD4E', '\x5', 
		'\x456', '\x22C', '\x2', '\xD4E', '\xD4F', '\a', '\x1FB', '\x2', '\x2', 
		'\xD4F', '\xD50', '\a', '\x2E0', '\x2', '\x2', '\xD50', '\xD65', '\x3', 
		'\x2', '\x2', '\x2', '\xD51', '\xD52', '\x5', '\x456', '\x22C', '\x2', 
		'\xD52', '\xD55', '\x5', '\x380', '\x1C1', '\x2', '\xD53', '\xD54', '\x6', 
		'\xBE', '<', '\x2', '\xD54', '\xD56', '\x5', '\x3CA', '\x1E6', '\x2', 
		'\xD55', '\xD53', '\x3', '\x2', '\x2', '\x2', '\xD55', '\xD56', '\x3', 
		'\x2', '\x2', '\x2', '\xD56', '\xD58', '\x3', '\x2', '\x2', '\x2', '\xD57', 
		'\xD59', '\a', '\x1F2', '\x2', '\x2', '\xD58', '\xD57', '\x3', '\x2', 
		'\x2', '\x2', '\xD58', '\xD59', '\x3', '\x2', '\x2', '\x2', '\xD59', '\xD5A', 
		'\x3', '\x2', '\x2', '\x2', '\xD5A', '\xD5B', '\a', '\x2E1', '\x2', '\x2', 
		'\xD5B', '\xD5D', '\x5', '\x470', '\x239', '\x2', '\xD5C', '\xD5E', '\x5', 
		'\x17C', '\xBF', '\x2', '\xD5D', '\xD5C', '\x3', '\x2', '\x2', '\x2', 
		'\xD5D', '\xD5E', '\x3', '\x2', '\x2', '\x2', '\xD5E', '\xD65', '\x3', 
		'\x2', '\x2', '\x2', '\xD5F', '\xD60', '\a', '\x2DF', '\x2', '\x2', '\xD60', 
		'\xD61', '\a', '\x2E1', '\x2', '\x2', '\xD61', '\xD62', '\x5', '\x470', 
		'\x239', '\x2', '\xD62', '\xD63', '\x5', '\x178', '\xBD', '\x2', '\xD63', 
		'\xD65', '\x3', '\x2', '\x2', '\x2', '\xD64', '\xD4D', '\x3', '\x2', '\x2', 
		'\x2', '\xD64', '\xD51', '\x3', '\x2', '\x2', '\x2', '\xD64', '\xD5F', 
		'\x3', '\x2', '\x2', '\x2', '\xD65', '\x17B', '\x3', '\x2', '\x2', '\x2', 
		'\xD66', '\xD68', '\x5', '\x17E', '\xC0', '\x2', '\xD67', '\xD69', '\x5', 
		'\x180', '\xC1', '\x2', '\xD68', '\xD67', '\x3', '\x2', '\x2', '\x2', 
		'\xD68', '\xD69', '\x3', '\x2', '\x2', '\x2', '\xD69', '\xD6F', '\x3', 
		'\x2', '\x2', '\x2', '\xD6A', '\xD6C', '\x5', '\x180', '\xC1', '\x2', 
		'\xD6B', '\xD6D', '\x5', '\x17E', '\xC0', '\x2', '\xD6C', '\xD6B', '\x3', 
		'\x2', '\x2', '\x2', '\xD6C', '\xD6D', '\x3', '\x2', '\x2', '\x2', '\xD6D', 
		'\xD6F', '\x3', '\x2', '\x2', '\x2', '\xD6E', '\xD66', '\x3', '\x2', '\x2', 
		'\x2', '\xD6E', '\xD6A', '\x3', '\x2', '\x2', '\x2', '\xD6F', '\x17D', 
		'\x3', '\x2', '\x2', '\x2', '\xD70', '\xD71', '\x5', '\x182', '\xC2', 
		'\x2', '\xD71', '\xD72', '\a', '\x244', '\x2', '\x2', '\xD72', '\xD73', 
		'\a', '\x2DD', '\x2', '\x2', '\xD73', '\x17F', '\x3', '\x2', '\x2', '\x2', 
		'\xD74', '\xD75', '\x5', '\x182', '\xC2', '\x2', '\xD75', '\xD76', '\a', 
		'\x244', '\x2', '\x2', '\xD76', '\xD77', '\a', '\x84', '\x2', '\x2', '\xD77', 
		'\x181', '\x3', '\x2', '\x2', '\x2', '\xD78', '\xD7D', '\a', '\x84', '\x2', 
		'\x2', '\xD79', '\xD7D', '\a', '\x241', '\x2', '\x2', '\xD7A', '\xD7B', 
		'\a', '\x1E0', '\x2', '\x2', '\xD7B', '\xD7D', '\x5', '\x470', '\x239', 
		'\x2', '\xD7C', '\xD78', '\x3', '\x2', '\x2', '\x2', '\xD7C', '\xD79', 
		'\x3', '\x2', '\x2', '\x2', '\xD7C', '\xD7A', '\x3', '\x2', '\x2', '\x2', 
		'\xD7D', '\x183', '\x3', '\x2', '\x2', '\x2', '\xD7E', '\xD7F', '\t', 
		'&', '\x2', '\x2', '\xD7F', '\x185', '\x3', '\x2', '\x2', '\x2', '\xD80', 
		'\xD84', '\a', '\x1B1', '\x2', '\x2', '\xD81', '\xD82', '\x6', '\xC4', 
		'=', '\x2', '\xD82', '\xD84', '\a', '\x181', '\x2', '\x2', '\xD83', '\xD80', 
		'\x3', '\x2', '\x2', '\x2', '\xD83', '\xD81', '\x3', '\x2', '\x2', '\x2', 
		'\xD83', '\xD84', '\x3', '\x2', '\x2', '\x2', '\xD84', '\xD85', '\x3', 
		'\x2', '\x2', '\x2', '\xD85', '\xD86', '\x5', '\x456', '\x22C', '\x2', 
		'\xD86', '\x187', '\x3', '\x2', '\x2', '\x2', '\xD87', '\xD8C', '\x5', 
		'\x18A', '\xC6', '\x2', '\xD88', '\xD89', '\a', '\x198', '\x2', '\x2', 
		'\xD89', '\xD8B', '\x5', '\x18A', '\xC6', '\x2', '\xD8A', '\xD88', '\x3', 
		'\x2', '\x2', '\x2', '\xD8B', '\xD8E', '\x3', '\x2', '\x2', '\x2', '\xD8C', 
		'\xD8A', '\x3', '\x2', '\x2', '\x2', '\xD8C', '\xD8D', '\x3', '\x2', '\x2', 
		'\x2', '\xD8D', '\x189', '\x3', '\x2', '\x2', '\x2', '\xD8E', '\xD8C', 
		'\x3', '\x2', '\x2', '\x2', '\xD8F', '\xD90', '\x5', '\x18C', '\xC7', 
		'\x2', '\xD90', '\xD92', '\x5', '\x18E', '\xC8', '\x2', '\xD91', '\xD93', 
		'\x5', '\x192', '\xCA', '\x2', '\xD92', '\xD91', '\x3', '\x2', '\x2', 
		'\x2', '\xD92', '\xD93', '\x3', '\x2', '\x2', '\x2', '\xD93', '\xD94', 
		'\x3', '\x2', '\x2', '\x2', '\xD94', '\xD95', '\a', '\x19B', '\x2', '\x2', 
		'\xD95', '\xD96', '\x5', '\x194', '\xCB', '\x2', '\xD96', '\xD97', '\a', 
		'\x19C', '\x2', '\x2', '\xD97', '\xDA4', '\x3', '\x2', '\x2', '\x2', '\xD98', 
		'\xD99', '\a', '\x29A', '\x2', '\x2', '\xD99', '\xD9B', '\x5', '\x18E', 
		'\xC8', '\x2', '\xD9A', '\xD9C', '\x5', '\x192', '\xCA', '\x2', '\xD9B', 
		'\xD9A', '\x3', '\x2', '\x2', '\x2', '\xD9B', '\xD9C', '\x3', '\x2', '\x2', 
		'\x2', '\xD9C', '\xD9D', '\x3', '\x2', '\x2', '\x2', '\xD9D', '\xD9F', 
		'\a', '\x19B', '\x2', '\x2', '\xD9E', '\xDA0', '\x5', '\x194', '\xCB', 
		'\x2', '\xD9F', '\xD9E', '\x3', '\x2', '\x2', '\x2', '\xD9F', '\xDA0', 
		'\x3', '\x2', '\x2', '\x2', '\xDA0', '\xDA1', '\x3', '\x2', '\x2', '\x2', 
		'\xDA1', '\xDA2', '\a', '\x19C', '\x2', '\x2', '\xDA2', '\xDA4', '\x3', 
		'\x2', '\x2', '\x2', '\xDA3', '\xD8F', '\x3', '\x2', '\x2', '\x2', '\xDA3', 
		'\xD98', '\x3', '\x2', '\x2', '\x2', '\xDA4', '\x18B', '\x3', '\x2', '\x2', 
		'\x2', '\xDA5', '\xDA6', '\t', '\'', '\x2', '\x2', '\xDA6', '\x18D', '\x3', 
		'\x2', '\x2', '\x2', '\xDA7', '\xDA8', '\t', '(', '\x2', '\x2', '\xDA8', 
		'\x18F', '\x3', '\x2', '\x2', '\x2', '\xDA9', '\xDAA', '\a', '\x252', 
		'\x2', '\x2', '\xDAA', '\xDB0', '\a', '\x21A', '\x2', '\x2', '\xDAB', 
		'\xDAD', '\a', '\x295', '\x2', '\x2', '\xDAC', '\xDAE', '\x5', '\x18E', 
		'\xC8', '\x2', '\xDAD', '\xDAC', '\x3', '\x2', '\x2', '\x2', '\xDAD', 
		'\xDAE', '\x3', '\x2', '\x2', '\x2', '\xDAE', '\xDB0', '\x3', '\x2', '\x2', 
		'\x2', '\xDAF', '\xDA9', '\x3', '\x2', '\x2', '\x2', '\xDAF', '\xDAB', 
		'\x3', '\x2', '\x2', '\x2', '\xDB0', '\x191', '\x3', '\x2', '\x2', '\x2', 
		'\xDB1', '\xDB7', '\a', '\x1FB', '\x2', '\x2', '\xDB2', '\xDB8', '\a', 
		'\x218', '\x2', '\x2', '\xDB3', '\xDB4', '\a', '\x24B', '\x2', '\x2', 
		'\xDB4', '\xDB8', '\a', '\x1BE', '\x2', '\x2', '\xDB5', '\xDB6', '\a', 
		'\x201', '\x2', '\x2', '\xDB6', '\xDB8', '\a', '\x1BE', '\x2', '\x2', 
		'\xDB7', '\xDB2', '\x3', '\x2', '\x2', '\x2', '\xDB7', '\xDB3', '\x3', 
		'\x2', '\x2', '\x2', '\xDB7', '\xDB5', '\x3', '\x2', '\x2', '\x2', '\xDB8', 
		'\x193', '\x3', '\x2', '\x2', '\x2', '\xDB9', '\xDBE', '\x5', '\x196', 
		'\xCC', '\x2', '\xDBA', '\xDBB', '\a', '\x198', '\x2', '\x2', '\xDBB', 
		'\xDBD', '\x5', '\x196', '\xCC', '\x2', '\xDBC', '\xDBA', '\x3', '\x2', 
		'\x2', '\x2', '\xDBD', '\xDC0', '\x3', '\x2', '\x2', '\x2', '\xDBE', '\xDBC', 
		'\x3', '\x2', '\x2', '\x2', '\xDBE', '\xDBF', '\x3', '\x2', '\x2', '\x2', 
		'\xDBF', '\x195', '\x3', '\x2', '\x2', '\x2', '\xDC0', '\xDBE', '\x3', 
		'\x2', '\x2', '\x2', '\xDC1', '\xDC4', '\x5', '\x456', '\x22C', '\x2', 
		'\xDC2', '\xDC4', '\a', '\x252', '\x2', '\x2', '\xDC3', '\xDC1', '\x3', 
		'\x2', '\x2', '\x2', '\xDC3', '\xDC2', '\x3', '\x2', '\x2', '\x2', '\xDC4', 
		'\x197', '\x3', '\x2', '\x2', '\x2', '\xDC5', '\xDC6', '\x6', '\xCD', 
		'>', '\x2', '\xDC6', '\xDC8', '\x5', '\x140', '\xA1', '\x2', '\xDC7', 
		'\xDC5', '\x3', '\x2', '\x2', '\x2', '\xDC7', '\xDC8', '\x3', '\x2', '\x2', 
		'\x2', '\xDC8', '\xDC9', '\x3', '\x2', '\x2', '\x2', '\xDC9', '\xDCB', 
		'\a', '\x298', '\x2', '\x2', '\xDCA', '\xDCC', '\a', '\x22B', '\x2', '\x2', 
		'\xDCB', '\xDCA', '\x3', '\x2', '\x2', '\x2', '\xDCB', '\xDCC', '\x3', 
		'\x2', '\x2', '\x2', '\xDCC', '\xDCE', '\x3', '\x2', '\x2', '\x2', '\xDCD', 
		'\xDCF', '\a', '\x209', '\x2', '\x2', '\xDCE', '\xDCD', '\x3', '\x2', 
		'\x2', '\x2', '\xDCE', '\xDCF', '\x3', '\x2', '\x2', '\x2', '\xDCF', '\xDD0', 
		'\x3', '\x2', '\x2', '\x2', '\xDD0', '\xDD1', '\x5', '\x14E', '\xA8', 
		'\x2', '\xDD1', '\xDD2', '\a', '\x26C', '\x2', '\x2', '\xDD2', '\xDD4', 
		'\x5', '\x3D2', '\x1EA', '\x2', '\xDD3', '\xDD5', '\x5', '\x15E', '\xB0', 
		'\x2', '\xDD4', '\xDD3', '\x3', '\x2', '\x2', '\x2', '\xDD4', '\xDD5', 
		'\x3', '\x2', '\x2', '\x2', '\xDD5', '\xDD7', '\x3', '\x2', '\x2', '\x2', 
		'\xDD6', '\xDD8', '\x5', '\x148', '\xA5', '\x2', '\xDD7', '\xDD6', '\x3', 
		'\x2', '\x2', '\x2', '\xDD7', '\xDD8', '\x3', '\x2', '\x2', '\x2', '\xDD8', 
		'\xDDA', '\x3', '\x2', '\x2', '\x2', '\xDD9', '\xDDB', '\x5', '\x11E', 
		'\x90', '\x2', '\xDDA', '\xDD9', '\x3', '\x2', '\x2', '\x2', '\xDDA', 
		'\xDDB', '\x3', '\x2', '\x2', '\x2', '\xDDB', '\x199', '\x3', '\x2', '\x2', 
		'\x2', '\xDDC', '\xDE1', '\x5', '\x19C', '\xCF', '\x2', '\xDDD', '\xDE1', 
		'\x5', '\x1A6', '\xD4', '\x2', '\xDDE', '\xDE1', '\x5', '\x1A8', '\xD5', 
		'\x2', '\xDDF', '\xDE1', '\x5', '\x1AE', '\xD8', '\x2', '\xDE0', '\xDDC', 
		'\x3', '\x2', '\x2', '\x2', '\xDE0', '\xDDD', '\x3', '\x2', '\x2', '\x2', 
		'\xDE0', '\xDDE', '\x3', '\x2', '\x2', '\x2', '\xDE0', '\xDDF', '\x3', 
		'\x2', '\x2', '\x2', '\xDE1', '\x19B', '\x3', '\x2', '\x2', '\x2', '\xDE2', 
		'\xDE3', '\a', '\x32', '\x2', '\x2', '\xDE3', '\xDE7', '\a', '\x15D', 
		'\x2', '\x2', '\xDE4', '\xDE6', '\x5', '\x1A0', '\xD1', '\x2', '\xDE5', 
		'\xDE4', '\x3', '\x2', '\x2', '\x2', '\xDE6', '\xDE9', '\x3', '\x2', '\x2', 
		'\x2', '\xDE7', '\xDE5', '\x3', '\x2', '\x2', '\x2', '\xDE7', '\xDE8', 
		'\x3', '\x2', '\x2', '\x2', '\xDE8', '\xDFC', '\x3', '\x2', '\x2', '\x2', 
		'\xDE9', '\xDE7', '\x3', '\x2', '\x2', '\x2', '\xDEA', '\xDEC', '\a', 
		'\xE', '\x2', '\x2', '\xDEB', '\xDED', '\a', '\x176', '\x2', '\x2', '\xDEC', 
		'\xDEB', '\x3', '\x2', '\x2', '\x2', '\xDEC', '\xDED', '\x3', '\x2', '\x2', 
		'\x2', '\xDED', '\xDF3', '\x3', '\x2', '\x2', '\x2', '\xDEE', '\xDF0', 
		'\a', '\x1B0', '\x2', '\x2', '\xDEF', '\xDF1', '\a', '\x1D', '\x2', '\x2', 
		'\xDF0', '\xDEF', '\x3', '\x2', '\x2', '\x2', '\xDF0', '\xDF1', '\x3', 
		'\x2', '\x2', '\x2', '\xDF1', '\xDF2', '\x3', '\x2', '\x2', '\x2', '\xDF2', 
		'\xDF4', '\a', 'Q', '\x2', '\x2', '\xDF3', '\xDEE', '\x3', '\x2', '\x2', 
		'\x2', '\xDF3', '\xDF4', '\x3', '\x2', '\x2', '\x2', '\xDF4', '\xDF9', 
		'\x3', '\x2', '\x2', '\x2', '\xDF5', '\xDF7', '\a', '\x1D', '\x2', '\x2', 
		'\xDF6', '\xDF5', '\x3', '\x2', '\x2', '\x2', '\xDF6', '\xDF7', '\x3', 
		'\x2', '\x2', '\x2', '\xDF7', '\xDF8', '\x3', '\x2', '\x2', '\x2', '\xDF8', 
		'\xDFA', '\a', '\x25C', '\x2', '\x2', '\xDF9', '\xDF6', '\x3', '\x2', 
		'\x2', '\x2', '\xDF9', '\xDFA', '\x3', '\x2', '\x2', '\x2', '\xDFA', '\xDFC', 
		'\x3', '\x2', '\x2', '\x2', '\xDFB', '\xDE2', '\x3', '\x2', '\x2', '\x2', 
		'\xDFB', '\xDEA', '\x3', '\x2', '\x2', '\x2', '\xDFC', '\x19D', '\x3', 
		'\x2', '\x2', '\x2', '\xDFD', '\xDFF', '\a', '\a', '\x2', '\x2', '\xDFE', 
		'\xE00', '\a', '\x176', '\x2', '\x2', '\xDFF', '\xDFE', '\x3', '\x2', 
		'\x2', '\x2', '\xDFF', '\xE00', '\x3', '\x2', '\x2', '\x2', '\xE00', '\x19F', 
		'\x3', '\x2', '\x2', '\x2', '\xE01', '\xE02', '\a', '\x2AB', '\x2', '\x2', 
		'\xE02', '\xE03', '\a', '\x65', '\x2', '\x2', '\xE03', '\xE08', '\a', 
		'\x13A', '\x2', '\x2', '\xE04', '\xE05', '\x6', '\xD1', '?', '\x2', '\xE05', 
		'\xE06', '\a', '\x257', '\x2', '\x2', '\xE06', '\xE08', '\t', ')', '\x2', 
		'\x2', '\xE07', '\xE01', '\x3', '\x2', '\x2', '\x2', '\xE07', '\xE04', 
		'\x3', '\x2', '\x2', '\x2', '\xE08', '\x1A1', '\x3', '\x2', '\x2', '\x2', 
		'\xE09', '\xE0A', '\a', '\xAB', '\x2', '\x2', '\xE0A', '\xE0B', '\a', 
		'\xB3', '\x2', '\x2', '\xE0B', '\xE10', '\x5', '\x1A4', '\xD3', '\x2', 
		'\xE0C', '\xE0D', '\x6', '\xD2', '@', '\x2', '\xE0D', '\xE0E', '\a', '\x257', 
		'\x2', '\x2', '\xE0E', '\xE10', '\t', ')', '\x2', '\x2', '\xE0F', '\xE09', 
		'\x3', '\x2', '\x2', '\x2', '\xE0F', '\xE0C', '\x3', '\x2', '\x2', '\x2', 
		'\xE10', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\xE11', '\xE12', '\a', 
		'\x11C', '\x2', '\x2', '\xE12', '\xE17', '\a', '\x257', '\x2', '\x2', 
		'\xE13', '\xE14', '\a', '\x257', '\x2', '\x2', '\xE14', '\xE17', '\t', 
		'*', '\x2', '\x2', '\xE15', '\xE17', '\a', '\x135', '\x2', '\x2', '\xE16', 
		'\xE11', '\x3', '\x2', '\x2', '\x2', '\xE16', '\xE13', '\x3', '\x2', '\x2', 
		'\x2', '\xE16', '\xE15', '\x3', '\x2', '\x2', '\x2', '\xE17', '\x1A5', 
		'\x3', '\x2', '\x2', '\x2', '\xE18', '\xE19', '\a', '+', '\x2', '\x2', 
		'\xE19', '\xE36', '\x5', '\x456', '\x22C', '\x2', '\xE1A', '\xE1C', '\a', 
		'*', '\x2', '\x2', '\xE1B', '\xE1D', '\a', '\x176', '\x2', '\x2', '\xE1C', 
		'\xE1B', '\x3', '\x2', '\x2', '\x2', '\xE1C', '\xE1D', '\x3', '\x2', '\x2', 
		'\x2', '\xE1D', '\xE30', '\x3', '\x2', '\x2', '\x2', '\xE1E', '\xE20', 
		'\a', '\x28E', '\x2', '\x2', '\xE1F', '\xE21', '\a', '+', '\x2', '\x2', 
		'\xE20', '\xE1F', '\x3', '\x2', '\x2', '\x2', '\xE20', '\xE21', '\x3', 
		'\x2', '\x2', '\x2', '\xE21', '\xE22', '\x3', '\x2', '\x2', '\x2', '\xE22', 
		'\xE31', '\x5', '\x456', '\x22C', '\x2', '\xE23', '\xE25', '\a', '\x1B0', 
		'\x2', '\x2', '\xE24', '\xE26', '\a', '\x1D', '\x2', '\x2', '\xE25', '\xE24', 
		'\x3', '\x2', '\x2', '\x2', '\xE25', '\xE26', '\x3', '\x2', '\x2', '\x2', 
		'\xE26', '\xE27', '\x3', '\x2', '\x2', '\x2', '\xE27', '\xE29', '\a', 
		'Q', '\x2', '\x2', '\xE28', '\xE23', '\x3', '\x2', '\x2', '\x2', '\xE28', 
		'\xE29', '\x3', '\x2', '\x2', '\x2', '\xE29', '\xE2E', '\x3', '\x2', '\x2', 
		'\x2', '\xE2A', '\xE2C', '\a', '\x1D', '\x2', '\x2', '\xE2B', '\xE2A', 
		'\x3', '\x2', '\x2', '\x2', '\xE2B', '\xE2C', '\x3', '\x2', '\x2', '\x2', 
		'\xE2C', '\xE2D', '\x3', '\x2', '\x2', '\x2', '\xE2D', '\xE2F', '\a', 
		'\x25C', '\x2', '\x2', '\xE2E', '\xE2B', '\x3', '\x2', '\x2', '\x2', '\xE2E', 
		'\xE2F', '\x3', '\x2', '\x2', '\x2', '\xE2F', '\xE31', '\x3', '\x2', '\x2', 
		'\x2', '\xE30', '\xE1E', '\x3', '\x2', '\x2', '\x2', '\xE30', '\xE28', 
		'\x3', '\x2', '\x2', '\x2', '\xE31', '\xE36', '\x3', '\x2', '\x2', '\x2', 
		'\xE32', '\xE33', '\a', '\x25C', '\x2', '\x2', '\xE33', '\xE34', '\a', 
		'+', '\x2', '\x2', '\xE34', '\xE36', '\x5', '\x456', '\x22C', '\x2', '\xE35', 
		'\xE18', '\x3', '\x2', '\x2', '\x2', '\xE35', '\xE1A', '\x3', '\x2', '\x2', 
		'\x2', '\xE35', '\xE32', '\x3', '\x2', '\x2', '\x2', '\xE36', '\x1A7', 
		'\x3', '\x2', '\x2', '\x2', '\xE37', '\xE38', '\a', '\x225', '\x2', '\x2', 
		'\xE38', '\xE39', '\t', '\x14', '\x2', '\x2', '\xE39', '\xE3E', '\x5', 
		'\x1AA', '\xD6', '\x2', '\xE3A', '\xE3B', '\a', '\x198', '\x2', '\x2', 
		'\xE3B', '\xE3D', '\x5', '\x1AA', '\xD6', '\x2', '\xE3C', '\xE3A', '\x3', 
		'\x2', '\x2', '\x2', '\xE3D', '\xE40', '\x3', '\x2', '\x2', '\x2', '\xE3E', 
		'\xE3C', '\x3', '\x2', '\x2', '\x2', '\xE3E', '\xE3F', '\x3', '\x2', '\x2', 
		'\x2', '\xE3F', '\xE4E', '\x3', '\x2', '\x2', '\x2', '\xE40', '\xE3E', 
		'\x3', '\x2', '\x2', '\x2', '\xE41', '\xE42', '\x6', '\xD5', '\x41', '\x2', 
		'\xE42', '\xE43', '\a', '\x225', '\x2', '\x2', '\xE43', '\xE44', '\a', 
		'\xA7', '\x2', '\x2', '\xE44', '\xE45', '\a', '\x1FB', '\x2', '\x2', '\xE45', 
		'\xE4E', '\a', '\x6', '\x2', '\x2', '\xE46', '\xE4B', '\a', '\x296', '\x2', 
		'\x2', '\xE47', '\xE4C', '\a', '\x156', '\x2', '\x2', '\xE48', '\xE4C', 
		'\a', '\x288', '\x2', '\x2', '\xE49', '\xE4A', '\x6', '\xD5', '\x42', 
		'\x2', '\xE4A', '\xE4C', '\a', '\xA7', '\x2', '\x2', '\xE4B', '\xE47', 
		'\x3', '\x2', '\x2', '\x2', '\xE4B', '\xE48', '\x3', '\x2', '\x2', '\x2', 
		'\xE4B', '\xE49', '\x3', '\x2', '\x2', '\x2', '\xE4C', '\xE4E', '\x3', 
		'\x2', '\x2', '\x2', '\xE4D', '\xE37', '\x3', '\x2', '\x2', '\x2', '\xE4D', 
		'\xE41', '\x3', '\x2', '\x2', '\x2', '\xE4D', '\xE46', '\x3', '\x2', '\x2', 
		'\x2', '\xE4E', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\xE4F', '\xE51', 
		'\x5', '\x43C', '\x21F', '\x2', '\xE50', '\xE52', '\x5', '\x186', '\xC4', 
		'\x2', '\xE51', '\xE50', '\x3', '\x2', '\x2', '\x2', '\xE51', '\xE52', 
		'\x3', '\x2', '\x2', '\x2', '\xE52', '\xE53', '\x3', '\x2', '\x2', '\x2', 
		'\xE53', '\xE54', '\x5', '\x1AC', '\xD7', '\x2', '\xE54', '\x1AB', '\x3', 
		'\x2', '\x2', '\x2', '\xE55', '\xE57', '\a', '\x257', '\x2', '\x2', '\xE56', 
		'\xE58', '\a', '\xB6', '\x2', '\x2', '\xE57', '\xE56', '\x3', '\x2', '\x2', 
		'\x2', '\xE57', '\xE58', '\x3', '\x2', '\x2', '\x2', '\xE58', '\xE5E', 
		'\x3', '\x2', '\x2', '\x2', '\xE59', '\xE5B', '\a', '\x22B', '\x2', '\x2', 
		'\xE5A', '\xE59', '\x3', '\x2', '\x2', '\x2', '\xE5A', '\xE5B', '\x3', 
		'\x2', '\x2', '\x2', '\xE5B', '\xE5C', '\x3', '\x2', '\x2', '\x2', '\xE5C', 
		'\xE5E', '\a', '\x2AF', '\x2', '\x2', '\xE5D', '\xE55', '\x3', '\x2', 
		'\x2', '\x2', '\xE5D', '\xE5A', '\x3', '\x2', '\x2', '\x2', '\xE5E', '\x1AD', 
		'\x3', '\x2', '\x2', '\x2', '\xE5F', '\xE7A', '\a', '\x39', '\x2', '\x2', 
		'\xE60', '\xE61', '\t', '+', '\x2', '\x2', '\xE61', '\xE63', '\x5', '\x1B2', 
		'\xDA', '\x2', '\xE62', '\xE64', '\t', ',', '\x2', '\x2', '\xE63', '\xE62', 
		'\x3', '\x2', '\x2', '\x2', '\xE63', '\xE64', '\x3', '\x2', '\x2', '\x2', 
		'\xE64', '\xE7B', '\x3', '\x2', '\x2', '\x2', '\xE65', '\xE66', '\a', 
		'\x12', '\x2', '\x2', '\xE66', '\xE6C', '\x5', '\x1B2', '\xDA', '\x2', 
		'\xE67', '\xE6A', '\a', '\x152', '\x2', '\x2', '\xE68', '\xE69', '\a', 
		'\x1FB', '\x2', '\x2', '\xE69', '\xE6B', '\a', '\xDC', '\x2', '\x2', '\xE6A', 
		'\xE68', '\x3', '\x2', '\x2', '\x2', '\xE6A', '\xE6B', '\x3', '\x2', '\x2', 
		'\x2', '\xE6B', '\xE6D', '\x3', '\x2', '\x2', '\x2', '\xE6C', '\xE67', 
		'\x3', '\x2', '\x2', '\x2', '\xE6C', '\xE6D', '\x3', '\x2', '\x2', '\x2', 
		'\xE6D', '\xE7B', '\x3', '\x2', '\x2', '\x2', '\xE6E', '\xE6F', '\a', 
		'%', '\x2', '\x2', '\xE6F', '\xE7B', '\x5', '\x1B2', '\xDA', '\x2', '\xE70', 
		'\xE71', '\a', '\xE', '\x2', '\x2', '\xE71', '\xE74', '\x5', '\x1B2', 
		'\xDA', '\x2', '\xE72', '\xE73', '\a', '\xF7', '\x2', '\x2', '\xE73', 
		'\xE75', '\a', '\xFE', '\x2', '\x2', '\xE74', '\xE72', '\x3', '\x2', '\x2', 
		'\x2', '\xE74', '\xE75', '\x3', '\x2', '\x2', '\x2', '\xE75', '\xE7B', 
		'\x3', '\x2', '\x2', '\x2', '\xE76', '\xE77', '\a', '*', '\x2', '\x2', 
		'\xE77', '\xE7B', '\x5', '\x1B2', '\xDA', '\x2', '\xE78', '\xE79', '\a', 
		'\x111', '\x2', '\x2', '\xE79', '\xE7B', '\x5', '\x1B0', '\xD9', '\x2', 
		'\xE7A', '\xE60', '\x3', '\x2', '\x2', '\x2', '\xE7A', '\xE65', '\x3', 
		'\x2', '\x2', '\x2', '\xE7A', '\xE6E', '\x3', '\x2', '\x2', '\x2', '\xE7A', 
		'\xE70', '\x3', '\x2', '\x2', '\x2', '\xE7A', '\xE76', '\x3', '\x2', '\x2', 
		'\x2', '\xE7A', '\xE78', '\x3', '\x2', '\x2', '\x2', '\xE7B', '\x1AF', 
		'\x3', '\x2', '\x2', '\x2', '\xE7C', '\xE7F', '\x6', '\xD9', '\x43', '\x2', 
		'\xE7D', '\xE7E', '\a', '\x1CB', '\x2', '\x2', '\xE7E', '\xE80', '\a', 
		'\x179', '\x2', '\x2', '\xE7F', '\xE7D', '\x3', '\x2', '\x2', '\x2', '\xE7F', 
		'\xE80', '\x3', '\x2', '\x2', '\x2', '\xE80', '\xE83', '\x3', '\x2', '\x2', 
		'\x2', '\xE81', '\xE83', '\x3', '\x2', '\x2', '\x2', '\xE82', '\xE7C', 
		'\x3', '\x2', '\x2', '\x2', '\xE82', '\xE81', '\x3', '\x2', '\x2', '\x2', 
		'\xE83', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\xE84', '\xE8B', '\x5', 
		'\x472', '\x23A', '\x2', '\xE85', '\xE86', '\a', '\x198', '\x2', '\x2', 
		'\xE86', '\xE89', '\x5', '\x472', '\x23A', '\x2', '\xE87', '\xE88', '\a', 
		'\x198', '\x2', '\x2', '\xE88', '\xE8A', '\x5', '\x462', '\x232', '\x2', 
		'\xE89', '\xE87', '\x3', '\x2', '\x2', '\x2', '\xE89', '\xE8A', '\x3', 
		'\x2', '\x2', '\x2', '\xE8A', '\xE8C', '\x3', '\x2', '\x2', '\x2', '\xE8B', 
		'\xE85', '\x3', '\x2', '\x2', '\x2', '\xE8B', '\xE8C', '\x3', '\x2', '\x2', 
		'\x2', '\xE8C', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\xE8D', '\xE8E', 
		'\a', '\x254', '\x2', '\x2', '\xE8E', '\xE8F', '\t', '-', '\x2', '\x2', 
		'\xE8F', '\xE94', '\a', '\xB9', '\x2', '\x2', '\xE90', '\xE91', '\a', 
		'\x28E', '\x2', '\x2', '\xE91', '\xE95', '\x5', '\x476', '\x23C', '\x2', 
		'\xE92', '\xE93', '\a', '\x1B4', '\x2', '\x2', '\xE93', '\xE95', '\x5', 
		'\x290', '\x149', '\x2', '\xE94', '\xE90', '\x3', '\x2', '\x2', '\x2', 
		'\xE94', '\xE92', '\x3', '\x2', '\x2', '\x2', '\xE95', '\xEAF', '\x3', 
		'\x2', '\x2', '\x2', '\xE96', '\xEAF', '\x5', '\x1BC', '\xDF', '\x2', 
		'\xE97', '\xE98', '\a', '(', '\x2', '\x2', '\xE98', '\xE9D', '\x5', '\x1B6', 
		'\xDC', '\x2', '\xE99', '\xE9A', '\a', '\x198', '\x2', '\x2', '\xE9A', 
		'\xE9C', '\x5', '\x1B6', '\xDC', '\x2', '\xE9B', '\xE99', '\x3', '\x2', 
		'\x2', '\x2', '\xE9C', '\xE9F', '\x3', '\x2', '\x2', '\x2', '\xE9D', '\xE9B', 
		'\x3', '\x2', '\x2', '\x2', '\xE9D', '\xE9E', '\x3', '\x2', '\x2', '\x2', 
		'\xE9E', '\xEAF', '\x3', '\x2', '\x2', '\x2', '\xE9F', '\xE9D', '\x3', 
		'\x2', '\x2', '\x2', '\xEA0', '\xEA1', '\x6', '\xDB', '\x44', '\x2', '\xEA1', 
		'\xEA2', '\a', '(', '\x2', '\x2', '\xEA2', '\xEA6', '\a', '\x2B3', '\x2', 
		'\x2', '\xEA3', '\xEA4', '\x5', '\x3C2', '\x1E2', '\x2', '\xEA4', '\xEA5', 
		'\x5', '\x456', '\x22C', '\x2', '\xEA5', '\xEA7', '\x3', '\x2', '\x2', 
		'\x2', '\xEA6', '\xEA3', '\x3', '\x2', '\x2', '\x2', '\xEA6', '\xEA7', 
		'\x3', '\x2', '\x2', '\x2', '\xEA7', '\xEAF', '\x3', '\x2', '\x2', '\x2', 
		'\xEA8', '\xEAF', '\x5', '\x1D4', '\xEB', '\x2', '\xEA9', '\xEAA', '\x6', 
		'\xDB', '\x45', '\x2', '\xEAA', '\xEAF', '\x5', '\x1C6', '\xE4', '\x2', 
		'\xEAB', '\xEAF', '\x5', '\x1BA', '\xDE', '\x2', '\xEAC', '\xEAD', '\x6', 
		'\xDB', '\x46', '\x2', '\xEAD', '\xEAF', '\x5', '\x1DE', '\xF0', '\x2', 
		'\xEAE', '\xE8D', '\x3', '\x2', '\x2', '\x2', '\xEAE', '\xE96', '\x3', 
		'\x2', '\x2', '\x2', '\xEAE', '\xE97', '\x3', '\x2', '\x2', '\x2', '\xEAE', 
		'\xEA0', '\x3', '\x2', '\x2', '\x2', '\xEAE', '\xEA8', '\x3', '\x2', '\x2', 
		'\x2', '\xEAE', '\xEA9', '\x3', '\x2', '\x2', '\x2', '\xEAE', '\xEAB', 
		'\x3', '\x2', '\x2', '\x2', '\xEAE', '\xEAC', '\x3', '\x2', '\x2', '\x2', 
		'\xEAF', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\xEB0', '\xEB2', '\a', 
		'\xBB', '\x2', '\x2', '\xEB1', '\xEB3', '\x5', '\x1B8', '\xDD', '\x2', 
		'\xEB2', '\xEB1', '\x3', '\x2', '\x2', '\x2', '\xEB2', '\xEB3', '\x3', 
		'\x2', '\x2', '\x2', '\xEB3', '\xEBF', '\x3', '\x2', '\x2', '\x2', '\xEB4', 
		'\xEB5', '\x6', '\xDC', 'G', '\x2', '\xEB5', '\xEB6', '\a', '\x10D', '\x2', 
		'\x2', '\xEB6', '\xEBF', '\a', '\t', '\x2', '\x2', '\xEB7', '\xEB9', '\a', 
		'/', '\x2', '\x2', '\xEB8', '\xEBA', '\a', '\x1AD', '\x2', '\x2', '\xEB9', 
		'\xEB8', '\x3', '\x2', '\x2', '\x2', '\xEB9', '\xEBA', '\x3', '\x2', '\x2', 
		'\x2', '\xEBA', '\xEBC', '\x3', '\x2', '\x2', '\x2', '\xEBB', '\xEBD', 
		'\x5', '\x2FA', '\x17E', '\x2', '\xEBC', '\xEBB', '\x3', '\x2', '\x2', 
		'\x2', '\xEBC', '\xEBD', '\x3', '\x2', '\x2', '\x2', '\xEBD', '\xEBF', 
		'\x3', '\x2', '\x2', '\x2', '\xEBE', '\xEB0', '\x3', '\x2', '\x2', '\x2', 
		'\xEBE', '\xEB4', '\x3', '\x2', '\x2', '\x2', '\xEBE', '\xEB7', '\x3', 
		'\x2', '\x2', '\x2', '\xEBF', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\xEC0', 
		'\xEC1', '\x6', '\xDD', 'H', '\x2', '\xEC1', '\xEC6', '\a', '\x28E', '\x2', 
		'\x2', '\xEC2', '\xEC3', '\x6', '\xDD', 'I', '\x2', '\xEC3', '\xEC7', 
		'\x5', '\x464', '\x233', '\x2', '\xEC4', '\xEC5', '\x6', '\xDD', 'J', 
		'\x2', '\xEC5', '\xEC7', '\x5', '\x468', '\x235', '\x2', '\xEC6', '\xEC2', 
		'\x3', '\x2', '\x2', '\x2', '\xEC6', '\xEC4', '\x3', '\x2', '\x2', '\x2', 
		'\xEC7', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\xEC8', '\xECC', '\a', 
		'\x223', '\x2', '\x2', '\xEC9', '\xECD', '\a', 'o', '\x2', '\x2', '\xECA', 
		'\xECB', '\a', '\x288', '\x2', '\x2', '\xECB', '\xECD', '\x5', '\x43C', 
		'\x21F', '\x2', '\xECC', '\xEC9', '\x3', '\x2', '\x2', '\x2', '\xECC', 
		'\xECA', '\x3', '\x2', '\x2', '\x2', '\xECD', '\xECE', '\x3', '\x2', '\x2', 
		'\x2', '\xECE', '\xECF', '\a', '\x1FC', '\x2', '\x2', '\xECF', '\xED0', 
		'\a', '\xBB', '\x2', '\x2', '\xED0', '\x1BB', '\x3', '\x2', '\x2', '\x2', 
		'\xED1', '\xED2', '\a', '\x1C3', '\x2', '\x2', '\xED2', '\xED3', '\a', 
		'\xBB', '\x2', '\x2', '\xED3', '\xED4', '\a', '\x28E', '\x2', '\x2', '\xED4', 
		'\xED6', '\x5', '\x1BE', '\xE0', '\x2', '\xED5', '\xED7', '\x5', '\x2FA', 
		'\x17E', '\x2', '\xED6', '\xED5', '\x3', '\x2', '\x2', '\x2', '\xED6', 
		'\xED7', '\x3', '\x2', '\x2', '\x2', '\xED7', '\x1BD', '\x3', '\x2', '\x2', 
		'\x2', '\xED8', '\xEDD', '\x5', '\x1C0', '\xE1', '\x2', '\xED9', '\xEDA', 
		'\a', '\x198', '\x2', '\x2', '\xEDA', '\xEDC', '\x5', '\x1C0', '\xE1', 
		'\x2', '\xEDB', '\xED9', '\x3', '\x2', '\x2', '\x2', '\xEDC', '\xEDF', 
		'\x3', '\x2', '\x2', '\x2', '\xEDD', '\xEDB', '\x3', '\x2', '\x2', '\x2', 
		'\xEDD', '\xEDE', '\x3', '\x2', '\x2', '\x2', '\xEDE', '\x1BF', '\x3', 
		'\x2', '\x2', '\x2', '\xEDF', '\xEDD', '\x3', '\x2', '\x2', '\x2', '\xEE0', 
		'\xEE1', '\a', '\xBD', '\x2', '\x2', '\xEE1', '\xEE2', '\a', '\x181', 
		'\x2', '\x2', '\xEE2', '\xF2A', '\x5', '\x478', '\x23D', '\x2', '\xEE3', 
		'\xEE4', '\a', '\x2FA', '\x2', '\x2', '\xEE4', '\xEE5', '\a', '\x181', 
		'\x2', '\x2', '\xEE5', '\xF2A', '\x5', '\x478', '\x23D', '\x2', '\xEE6', 
		'\xEE7', '\a', '\x22C', '\x2', '\x2', '\xEE7', '\xEE8', '\a', '\x181', 
		'\x2', '\x2', '\xEE8', '\xF2A', '\x5', '\x478', '\x23D', '\x2', '\xEE9', 
		'\xEEA', '\a', '\xC1', '\x2', '\x2', '\xEEA', '\xEEB', '\a', '\x181', 
		'\x2', '\x2', '\xEEB', '\xF2A', '\x5', '\x478', '\x23D', '\x2', '\xEEC', 
		'\xEED', '\a', '\xC2', '\x2', '\x2', '\xEED', '\xEEE', '\a', '\x181', 
		'\x2', '\x2', '\xEEE', '\xF2A', '\x5', '\x478', '\x23D', '\x2', '\xEEF', 
		'\xEF0', '\a', '\xBE', '\x2', '\x2', '\xEF0', '\xEF1', '\a', '\x181', 
		'\x2', '\x2', '\xEF1', '\xF2A', '\x5', '\x462', '\x232', '\x2', '\xEF2', 
		'\xEF3', '\a', '\xC4', '\x2', '\x2', '\xEF3', '\xEF4', '\a', '\x181', 
		'\x2', '\x2', '\xEF4', '\xF2A', '\x5', '\x462', '\x232', '\x2', '\xEF5', 
		'\xEF6', '\a', '\xC5', '\x2', '\x2', '\xEF6', '\xEF7', '\a', '\x181', 
		'\x2', '\x2', '\xEF7', '\xF2A', '\x5', '\x462', '\x232', '\x2', '\xEF8', 
		'\xEF9', '\a', '\xC6', '\x2', '\x2', '\xEF9', '\xEFA', '\a', '\x181', 
		'\x2', '\x2', '\xEFA', '\xF2A', '\x5', '\x462', '\x232', '\x2', '\xEFB', 
		'\xEFC', '\a', '\xC7', '\x2', '\x2', '\xEFC', '\xEFD', '\a', '\x181', 
		'\x2', '\x2', '\xEFD', '\xF2A', '\x5', '\x462', '\x232', '\x2', '\xEFE', 
		'\xEFF', '\a', '\xC8', '\x2', '\x2', '\xEFF', '\xF00', '\a', '\x181', 
		'\x2', '\x2', '\xF00', '\xF2A', '\x5', '\x478', '\x23D', '\x2', '\xF01', 
		'\xF02', '\a', '\xCA', '\x2', '\x2', '\xF02', '\xF03', '\a', '\x181', 
		'\x2', '\x2', '\xF03', '\xF2A', '\x5', '\x478', '\x23D', '\x2', '\xF04', 
		'\xF05', '\a', '\xC9', '\x2', '\x2', '\xF05', '\xF06', '\a', '\x181', 
		'\x2', '\x2', '\xF06', '\xF2A', '\x5', '\x478', '\x23D', '\x2', '\xF07', 
		'\xF08', '\a', '\xCB', '\x2', '\x2', '\xF08', '\xF09', '\a', '\x181', 
		'\x2', '\x2', '\xF09', '\xF2A', '\x5', '\x478', '\x23D', '\x2', '\xF0A', 
		'\xF0B', '\a', '\xCC', '\x2', '\x2', '\xF0B', '\xF0C', '\a', '\x181', 
		'\x2', '\x2', '\xF0C', '\xF2A', '\x5', '\x478', '\x23D', '\x2', '\xF0D', 
		'\xF0E', '\a', '\xCF', '\x2', '\x2', '\xF0E', '\xF0F', '\a', '\x181', 
		'\x2', '\x2', '\xF0F', '\xF2A', '\x5', '\x478', '\x23D', '\x2', '\xF10', 
		'\xF11', '\a', '\x22D', '\x2', '\x2', '\xF11', '\xF12', '\a', '\x181', 
		'\x2', '\x2', '\xF12', '\xF2A', '\x5', '\x462', '\x232', '\x2', '\xF13', 
		'\xF14', '\a', '\xCD', '\x2', '\x2', '\xF14', '\xF15', '\a', '\x181', 
		'\x2', '\x2', '\xF15', '\xF2A', '\x5', '\x476', '\x23C', '\x2', '\xF16', 
		'\xF17', '\a', '\xCE', '\x2', '\x2', '\xF17', '\xF18', '\a', '\x181', 
		'\x2', '\x2', '\xF18', '\xF2A', '\x5', '\x478', '\x23D', '\x2', '\xF19', 
		'\xF1A', '\a', '\x2E9', '\x2', '\x2', '\xF1A', '\xF1B', '\a', '\x181', 
		'\x2', '\x2', '\xF1B', '\xF2A', '\x5', '\x478', '\x23D', '\x2', '\xF1C', 
		'\xF1D', '\a', '\x2EA', '\x2', '\x2', '\xF1D', '\xF1E', '\a', '\x181', 
		'\x2', '\x2', '\xF1E', '\xF2A', '\x5', '\x462', '\x232', '\x2', '\xF1F', 
		'\xF20', '\a', '\xBC', '\x2', '\x2', '\xF20', '\xF21', '\a', '\x181', 
		'\x2', '\x2', '\xF21', '\xF2A', '\x5', '\x462', '\x232', '\x2', '\xF22', 
		'\xF23', '\a', '\xA2', '\x2', '\x2', '\xF23', '\xF24', '\a', '\x181', 
		'\x2', '\x2', '\xF24', '\xF2A', '\x5', '\x1C4', '\xE3', '\x2', '\xF25', 
		'\xF26', '\a', '\xD0', '\x2', '\x2', '\xF26', '\xF27', '\a', '\x181', 
		'\x2', '\x2', '\xF27', '\xF2A', '\x5', '\x462', '\x232', '\x2', '\xF28', 
		'\xF2A', '\x5', '\x1C2', '\xE2', '\x2', '\xF29', '\xEE0', '\x3', '\x2', 
		'\x2', '\x2', '\xF29', '\xEE3', '\x3', '\x2', '\x2', '\x2', '\xF29', '\xEE6', 
		'\x3', '\x2', '\x2', '\x2', '\xF29', '\xEE9', '\x3', '\x2', '\x2', '\x2', 
		'\xF29', '\xEEC', '\x3', '\x2', '\x2', '\x2', '\xF29', '\xEEF', '\x3', 
		'\x2', '\x2', '\x2', '\xF29', '\xEF2', '\x3', '\x2', '\x2', '\x2', '\xF29', 
		'\xEF5', '\x3', '\x2', '\x2', '\x2', '\xF29', '\xEF8', '\x3', '\x2', '\x2', 
		'\x2', '\xF29', '\xEFB', '\x3', '\x2', '\x2', '\x2', '\xF29', '\xEFE', 
		'\x3', '\x2', '\x2', '\x2', '\xF29', '\xF01', '\x3', '\x2', '\x2', '\x2', 
		'\xF29', '\xF04', '\x3', '\x2', '\x2', '\x2', '\xF29', '\xF07', '\x3', 
		'\x2', '\x2', '\x2', '\xF29', '\xF0A', '\x3', '\x2', '\x2', '\x2', '\xF29', 
		'\xF0D', '\x3', '\x2', '\x2', '\x2', '\xF29', '\xF10', '\x3', '\x2', '\x2', 
		'\x2', '\xF29', '\xF13', '\x3', '\x2', '\x2', '\x2', '\xF29', '\xF16', 
		'\x3', '\x2', '\x2', '\x2', '\xF29', '\xF19', '\x3', '\x2', '\x2', '\x2', 
		'\xF29', '\xF1C', '\x3', '\x2', '\x2', '\x2', '\xF29', '\xF1F', '\x3', 
		'\x2', '\x2', '\x2', '\xF29', '\xF22', '\x3', '\x2', '\x2', '\x2', '\xF29', 
		'\xF25', '\x3', '\x2', '\x2', '\x2', '\xF29', '\xF28', '\x3', '\x2', '\x2', 
		'\x2', '\xF2A', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\xF2B', '\xF2C', 
		'\a', '\xBF', '\x2', '\x2', '\xF2C', '\xF2D', '\a', '\x181', '\x2', '\x2', 
		'\xF2D', '\xF38', '\x5', '\x478', '\x23D', '\x2', '\xF2E', '\xF2F', '\a', 
		'\xC0', '\x2', '\x2', '\xF2F', '\xF30', '\a', '\x181', '\x2', '\x2', '\xF30', 
		'\xF38', '\x5', '\x466', '\x234', '\x2', '\xF31', '\xF32', '\a', '\x117', 
		'\x2', '\x2', '\xF32', '\xF33', '\a', '\x181', '\x2', '\x2', '\xF33', 
		'\xF38', '\x5', '\x478', '\x23D', '\x2', '\xF34', '\xF35', '\a', '\x118', 
		'\x2', '\x2', '\xF35', '\xF36', '\a', '\x181', '\x2', '\x2', '\xF36', 
		'\xF38', '\x5', '\x462', '\x232', '\x2', '\xF37', '\xF2B', '\x3', '\x2', 
		'\x2', '\x2', '\xF37', '\xF2E', '\x3', '\x2', '\x2', '\x2', '\xF37', '\xF31', 
		'\x3', '\x2', '\x2', '\x2', '\xF37', '\xF34', '\x3', '\x2', '\x2', '\x2', 
		'\xF38', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\xF39', '\xF42', '\a', 
		'\x19B', '\x2', '\x2', '\xF3A', '\xF3F', '\x5', '\x462', '\x232', '\x2', 
		'\xF3B', '\xF3C', '\a', '\x198', '\x2', '\x2', '\xF3C', '\xF3E', '\x5', 
		'\x462', '\x232', '\x2', '\xF3D', '\xF3B', '\x3', '\x2', '\x2', '\x2', 
		'\xF3E', '\xF41', '\x3', '\x2', '\x2', '\x2', '\xF3F', '\xF3D', '\x3', 
		'\x2', '\x2', '\x2', '\xF3F', '\xF40', '\x3', '\x2', '\x2', '\x2', '\xF40', 
		'\xF43', '\x3', '\x2', '\x2', '\x2', '\xF41', '\xF3F', '\x3', '\x2', '\x2', 
		'\x2', '\xF42', '\xF3A', '\x3', '\x2', '\x2', '\x2', '\xF42', '\xF43', 
		'\x3', '\x2', '\x2', '\x2', '\xF43', '\xF44', '\x3', '\x2', '\x2', '\x2', 
		'\xF44', '\xF45', '\a', '\x19C', '\x2', '\x2', '\xF45', '\x1C5', '\x3', 
		'\x2', '\x2', '\x2', '\xF46', '\xF47', '\a', '\x1C3', '\x2', '\x2', '\xF47', 
		'\xF48', '\a', '\x11D', '\x2', '\x2', '\xF48', '\xF49', '\a', '\x95', 
		'\x2', '\x2', '\xF49', '\xF4E', '\x5', '\x1C8', '\xE5', '\x2', '\xF4A', 
		'\xF4B', '\a', '\x198', '\x2', '\x2', '\xF4B', '\xF4D', '\x5', '\x1C8', 
		'\xE5', '\x2', '\xF4C', '\xF4A', '\x3', '\x2', '\x2', '\x2', '\xF4D', 
		'\xF50', '\x3', '\x2', '\x2', '\x2', '\xF4E', '\xF4C', '\x3', '\x2', '\x2', 
		'\x2', '\xF4E', '\xF4F', '\x3', '\x2', '\x2', '\x2', '\xF4F', '\xF53', 
		'\x3', '\x2', '\x2', '\x2', '\xF50', '\xF4E', '\x3', '\x2', '\x2', '\x2', 
		'\xF51', '\xF52', '\x6', '\xE4', 'K', '\x2', '\xF52', '\xF54', '\x5', 
		'\x2FA', '\x17E', '\x2', '\xF53', '\xF51', '\x3', '\x2', '\x2', '\x2', 
		'\xF53', '\xF54', '\x3', '\x2', '\x2', '\x2', '\xF54', '\x1C7', '\x3', 
		'\x2', '\x2', '\x2', '\xF55', '\xF56', '\a', '\x11E', '\x2', '\x2', '\xF56', 
		'\xF57', '\a', '\x181', '\x2', '\x2', '\xF57', '\xF59', '\a', '\x19B', 
		'\x2', '\x2', '\xF58', '\xF5A', '\x5', '\x1CA', '\xE6', '\x2', '\xF59', 
		'\xF58', '\x3', '\x2', '\x2', '\x2', '\xF59', '\xF5A', '\x3', '\x2', '\x2', 
		'\x2', '\xF5A', '\xF5B', '\x3', '\x2', '\x2', '\x2', '\xF5B', '\xF87', 
		'\a', '\x19C', '\x2', '\x2', '\xF5C', '\xF5D', '\a', '\x11F', '\x2', '\x2', 
		'\xF5D', '\xF5E', '\a', '\x181', '\x2', '\x2', '\xF5E', '\xF60', '\a', 
		'\x19B', '\x2', '\x2', '\xF5F', '\xF61', '\x5', '\x1CA', '\xE6', '\x2', 
		'\xF60', '\xF5F', '\x3', '\x2', '\x2', '\x2', '\xF60', '\xF61', '\x3', 
		'\x2', '\x2', '\x2', '\xF61', '\xF62', '\x3', '\x2', '\x2', '\x2', '\xF62', 
		'\xF87', '\a', '\x19C', '\x2', '\x2', '\xF63', '\xF64', '\a', '\x120', 
		'\x2', '\x2', '\xF64', '\xF65', '\a', '\x181', '\x2', '\x2', '\xF65', 
		'\xF67', '\a', '\x19B', '\x2', '\x2', '\xF66', '\xF68', '\x5', '\x1CC', 
		'\xE7', '\x2', '\xF67', '\xF66', '\x3', '\x2', '\x2', '\x2', '\xF67', 
		'\xF68', '\x3', '\x2', '\x2', '\x2', '\xF68', '\xF69', '\x3', '\x2', '\x2', 
		'\x2', '\xF69', '\xF87', '\a', '\x19C', '\x2', '\x2', '\xF6A', '\xF6B', 
		'\a', '\x121', '\x2', '\x2', '\xF6B', '\xF6C', '\a', '\x181', '\x2', '\x2', 
		'\xF6C', '\xF6E', '\a', '\x19B', '\x2', '\x2', '\xF6D', '\xF6F', '\x5', 
		'\x1CC', '\xE7', '\x2', '\xF6E', '\xF6D', '\x3', '\x2', '\x2', '\x2', 
		'\xF6E', '\xF6F', '\x3', '\x2', '\x2', '\x2', '\xF6F', '\xF70', '\x3', 
		'\x2', '\x2', '\x2', '\xF70', '\xF87', '\a', '\x19C', '\x2', '\x2', '\xF71', 
		'\xF72', '\a', '\x122', '\x2', '\x2', '\xF72', '\xF73', '\a', '\x181', 
		'\x2', '\x2', '\xF73', '\xF75', '\a', '\x19B', '\x2', '\x2', '\xF74', 
		'\xF76', '\x5', '\x1CE', '\xE8', '\x2', '\xF75', '\xF74', '\x3', '\x2', 
		'\x2', '\x2', '\xF75', '\xF76', '\x3', '\x2', '\x2', '\x2', '\xF76', '\xF77', 
		'\x3', '\x2', '\x2', '\x2', '\xF77', '\xF87', '\a', '\x19C', '\x2', '\x2', 
		'\xF78', '\xF79', '\a', '\x123', '\x2', '\x2', '\xF79', '\xF7A', '\a', 
		'\x181', '\x2', '\x2', '\xF7A', '\xF7C', '\a', '\x19B', '\x2', '\x2', 
		'\xF7B', '\xF7D', '\x5', '\x1CE', '\xE8', '\x2', '\xF7C', '\xF7B', '\x3', 
		'\x2', '\x2', '\x2', '\xF7C', '\xF7D', '\x3', '\x2', '\x2', '\x2', '\xF7D', 
		'\xF7E', '\x3', '\x2', '\x2', '\x2', '\xF7E', '\xF87', '\a', '\x19C', 
		'\x2', '\x2', '\xF7F', '\xF80', '\a', '\x124', '\x2', '\x2', '\xF80', 
		'\xF81', '\a', '\x181', '\x2', '\x2', '\xF81', '\xF83', '\a', '\x19B', 
		'\x2', '\x2', '\xF82', '\xF84', '\x5', '\x1D2', '\xEA', '\x2', '\xF83', 
		'\xF82', '\x3', '\x2', '\x2', '\x2', '\xF83', '\xF84', '\x3', '\x2', '\x2', 
		'\x2', '\xF84', '\xF85', '\x3', '\x2', '\x2', '\x2', '\xF85', '\xF87', 
		'\a', '\x19C', '\x2', '\x2', '\xF86', '\xF55', '\x3', '\x2', '\x2', '\x2', 
		'\xF86', '\xF5C', '\x3', '\x2', '\x2', '\x2', '\xF86', '\xF63', '\x3', 
		'\x2', '\x2', '\x2', '\xF86', '\xF6A', '\x3', '\x2', '\x2', '\x2', '\xF86', 
		'\xF71', '\x3', '\x2', '\x2', '\x2', '\xF86', '\xF78', '\x3', '\x2', '\x2', 
		'\x2', '\xF86', '\xF7F', '\x3', '\x2', '\x2', '\x2', '\xF87', '\x1C9', 
		'\x3', '\x2', '\x2', '\x2', '\xF88', '\xF8D', '\x5', '\x410', '\x209', 
		'\x2', '\xF89', '\xF8A', '\a', '\x198', '\x2', '\x2', '\xF8A', '\xF8C', 
		'\x5', '\x410', '\x209', '\x2', '\xF8B', '\xF89', '\x3', '\x2', '\x2', 
		'\x2', '\xF8C', '\xF8F', '\x3', '\x2', '\x2', '\x2', '\xF8D', '\xF8B', 
		'\x3', '\x2', '\x2', '\x2', '\xF8D', '\xF8E', '\x3', '\x2', '\x2', '\x2', 
		'\xF8E', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\xF8F', '\xF8D', '\x3', 
		'\x2', '\x2', '\x2', '\xF90', '\xF95', '\x5', '\x438', '\x21D', '\x2', 
		'\xF91', '\xF92', '\a', '\x198', '\x2', '\x2', '\xF92', '\xF94', '\x5', 
		'\x438', '\x21D', '\x2', '\xF93', '\xF91', '\x3', '\x2', '\x2', '\x2', 
		'\xF94', '\xF97', '\x3', '\x2', '\x2', '\x2', '\xF95', '\xF93', '\x3', 
		'\x2', '\x2', '\x2', '\xF95', '\xF96', '\x3', '\x2', '\x2', '\x2', '\xF96', 
		'\x1CD', '\x3', '\x2', '\x2', '\x2', '\xF97', '\xF95', '\x3', '\x2', '\x2', 
		'\x2', '\xF98', '\xF9D', '\x5', '\x1D0', '\xE9', '\x2', '\xF99', '\xF9A', 
		'\a', '\x198', '\x2', '\x2', '\xF9A', '\xF9C', '\x5', '\x1D0', '\xE9', 
		'\x2', '\xF9B', '\xF99', '\x3', '\x2', '\x2', '\x2', '\xF9C', '\xF9F', 
		'\x3', '\x2', '\x2', '\x2', '\xF9D', '\xF9B', '\x3', '\x2', '\x2', '\x2', 
		'\xF9D', '\xF9E', '\x3', '\x2', '\x2', '\x2', '\xF9E', '\x1CF', '\x3', 
		'\x2', '\x2', '\x2', '\xF9F', '\xF9D', '\x3', '\x2', '\x2', '\x2', '\xFA0', 
		'\xFA1', '\x5', '\x478', '\x23D', '\x2', '\xFA1', '\x1D1', '\x3', '\x2', 
		'\x2', '\x2', '\xFA2', '\xFA7', '\x5', '\x3CE', '\x1E8', '\x2', '\xFA3', 
		'\xFA4', '\a', '\x198', '\x2', '\x2', '\xFA4', '\xFA6', '\x5', '\x3CE', 
		'\x1E8', '\x2', '\xFA5', '\xFA3', '\x3', '\x2', '\x2', '\x2', '\xFA6', 
		'\xFA9', '\x3', '\x2', '\x2', '\x2', '\xFA7', '\xFA5', '\x3', '\x2', '\x2', 
		'\x2', '\xFA7', '\xFA8', '\x3', '\x2', '\x2', '\x2', '\xFA8', '\x1D3', 
		'\x3', '\x2', '\x2', '\x2', '\xFA9', '\xFA7', '\x3', '\x2', '\x2', '\x2', 
		'\xFAA', '\xFAB', '\a', '\x32', '\x2', '\x2', '\xFAB', '\xFAD', '\a', 
		'/', '\x2', '\x2', '\xFAC', '\xFAE', '\x5', '\x1DA', '\xEE', '\x2', '\xFAD', 
		'\xFAC', '\x3', '\x2', '\x2', '\x2', '\xFAD', '\xFAE', '\x3', '\x2', '\x2', 
		'\x2', '\xFAE', '\xFB1', '\x3', '\x2', '\x2', '\x2', '\xFAF', '\xFB0', 
		'\a', '\x16C', '\x2', '\x2', '\xFB0', '\xFB2', '\x5', '\x1D6', '\xEC', 
		'\x2', '\xFB1', '\xFAF', '\x3', '\x2', '\x2', '\x2', '\xFB1', '\xFB2', 
		'\x3', '\x2', '\x2', '\x2', '\xFB2', '\xFB3', '\x3', '\x2', '\x2', '\x2', 
		'\xFB3', '\xFB5', '\x5', '\x1D8', '\xED', '\x2', '\xFB4', '\xFB6', '\x5', 
		'\x2FA', '\x17E', '\x2', '\xFB5', '\xFB4', '\x3', '\x2', '\x2', '\x2', 
		'\xFB5', '\xFB6', '\x3', '\x2', '\x2', '\x2', '\xFB6', '\xFC0', '\x3', 
		'\x2', '\x2', '\x2', '\xFB7', '\xFB8', '\a', '\x33', '\x2', '\x2', '\xFB8', 
		'\xFBA', '\a', '/', '\x2', '\x2', '\xFB9', '\xFBB', '\x5', '\x1DA', '\xEE', 
		'\x2', '\xFBA', '\xFB9', '\x3', '\x2', '\x2', '\x2', '\xFBA', '\xFBB', 
		'\x3', '\x2', '\x2', '\x2', '\xFBB', '\xFBD', '\x3', '\x2', '\x2', '\x2', 
		'\xFBC', '\xFBE', '\x5', '\x2FA', '\x17E', '\x2', '\xFBD', '\xFBC', '\x3', 
		'\x2', '\x2', '\x2', '\xFBD', '\xFBE', '\x3', '\x2', '\x2', '\x2', '\xFBE', 
		'\xFC0', '\x3', '\x2', '\x2', '\x2', '\xFBF', '\xFAA', '\x3', '\x2', '\x2', 
		'\x2', '\xFBF', '\xFB7', '\x3', '\x2', '\x2', '\x2', '\xFC0', '\x1D5', 
		'\x3', '\x2', '\x2', '\x2', '\xFC1', '\xFC9', '\x5', '\x1C2', '\xE2', 
		'\x2', '\xFC2', '\xFC3', '\x6', '\xEC', 'L', '\x2', '\xFC3', '\xFC4', 
		'\t', '.', '\x2', '\x2', '\xFC4', '\xFC5', '\a', '\x181', '\x2', '\x2', 
		'\xFC5', '\xFC9', '\x5', '\x472', '\x23A', '\x2', '\xFC6', '\xFC7', '\x6', 
		'\xEC', 'M', '\x2', '\xFC7', '\xFC9', '\a', '\x13E', '\x2', '\x2', '\xFC8', 
		'\xFC1', '\x3', '\x2', '\x2', '\x2', '\xFC8', '\xFC2', '\x3', '\x2', '\x2', 
		'\x2', '\xFC8', '\xFC6', '\x3', '\x2', '\x2', '\x2', '\xFC9', '\xFCE', 
		'\x3', '\x2', '\x2', '\x2', '\xFCA', '\xFCB', '\a', '\x198', '\x2', '\x2', 
		'\xFCB', '\xFCD', '\x5', '\x1C2', '\xE2', '\x2', '\xFCC', '\xFCA', '\x3', 
		'\x2', '\x2', '\x2', '\xFCD', '\xFD0', '\x3', '\x2', '\x2', '\x2', '\xFCE', 
		'\xFCC', '\x3', '\x2', '\x2', '\x2', '\xFCE', '\xFCF', '\x3', '\x2', '\x2', 
		'\x2', '\xFCF', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\xFD0', '\xFCE', 
		'\x3', '\x2', '\x2', '\x2', '\xFD1', '\xFD5', '\x6', '\xED', 'N', '\x2', 
		'\xFD2', '\xFD3', '\a', '\x16E', '\x2', '\x2', '\xFD3', '\xFD4', '\a', 
		'\x181', '\x2', '\x2', '\xFD4', '\xFD6', '\x5', '\x472', '\x23A', '\x2', 
		'\xFD5', '\xFD2', '\x3', '\x2', '\x2', '\x2', '\xFD5', '\xFD6', '\x3', 
		'\x2', '\x2', '\x2', '\xFD6', '\xFDA', '\x3', '\x2', '\x2', '\x2', '\xFD7', 
		'\xFD8', '\a', '\xFD', '\x2', '\x2', '\xFD8', '\xFD9', '\a', '\x181', 
		'\x2', '\x2', '\xFD9', '\xFDB', '\x5', '\x472', '\x23A', '\x2', '\xFDA', 
		'\xFD7', '\x3', '\x2', '\x2', '\x2', '\xFDA', '\xFDB', '\x3', '\x2', '\x2', 
		'\x2', '\xFDB', '\xFDF', '\x3', '\x2', '\x2', '\x2', '\xFDC', '\xFDD', 
		'\a', 't', '\x2', '\x2', '\xFDD', '\xFDE', '\a', '\x181', '\x2', '\x2', 
		'\xFDE', '\xFE0', '\x5', '\x472', '\x23A', '\x2', '\xFDF', '\xFDC', '\x3', 
		'\x2', '\x2', '\x2', '\xFDF', '\xFE0', '\x3', '\x2', '\x2', '\x2', '\xFE0', 
		'\xFE4', '\x3', '\x2', '\x2', '\x2', '\xFE1', '\xFE2', '\a', '\xFF', '\x2', 
		'\x2', '\xFE2', '\xFE3', '\a', '\x181', '\x2', '\x2', '\xFE3', '\xFE5', 
		'\x5', '\x472', '\x23A', '\x2', '\xFE4', '\xFE1', '\x3', '\x2', '\x2', 
		'\x2', '\xFE4', '\xFE5', '\x3', '\x2', '\x2', '\x2', '\xFE5', '\xFE8', 
		'\x3', '\x2', '\x2', '\x2', '\xFE6', '\xFE8', '\x3', '\x2', '\x2', '\x2', 
		'\xFE7', '\xFD1', '\x3', '\x2', '\x2', '\x2', '\xFE7', '\xFE6', '\x3', 
		'\x2', '\x2', '\x2', '\xFE8', '\x1D9', '\x3', '\x2', '\x2', '\x2', '\xFE9', 
		'\xFEE', '\x5', '\x1DC', '\xEF', '\x2', '\xFEA', '\xFEB', '\a', '\x198', 
		'\x2', '\x2', '\xFEB', '\xFED', '\x5', '\x1DC', '\xEF', '\x2', '\xFEC', 
		'\xFEA', '\x3', '\x2', '\x2', '\x2', '\xFED', '\xFF0', '\x3', '\x2', '\x2', 
		'\x2', '\xFEE', '\xFEC', '\x3', '\x2', '\x2', '\x2', '\xFEE', '\xFEF', 
		'\x3', '\x2', '\x2', '\x2', '\xFEF', '\x1DB', '\x3', '\x2', '\x2', '\x2', 
		'\xFF0', '\xFEE', '\x3', '\x2', '\x2', '\x2', '\xFF1', '\xFF2', '\t', 
		'/', '\x2', '\x2', '\xFF2', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\xFF3', 
		'\xFF4', '\t', '\x30', '\x2', '\x2', '\xFF4', '\xFF5', '\a', '\x17', '\x2', 
		'\x2', '\xFF5', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\xFF6', '\xFF7', 
		'\a', '%', '\x2', '\x2', '\xFF7', '\xFF8', '\x5', '\x456', '\x22C', '\x2', 
		'\xFF8', '\xFFB', '\a', '\x1FC', '\x2', '\x2', '\xFF9', '\xFFC', '\x5', 
		'\x476', '\x23C', '\x2', '\xFFA', '\xFFC', '\x5', '\x2D2', '\x16A', '\x2', 
		'\xFFB', '\xFF9', '\x3', '\x2', '\x2', '\x2', '\xFFB', '\xFFA', '\x3', 
		'\x2', '\x2', '\x2', '\xFFC', '\x1002', '\x3', '\x2', '\x2', '\x2', '\xFFD', 
		'\x1002', '\x5', '\x1E2', '\xF2', '\x2', '\xFFE', '\xFFF', '\t', '\x31', 
		'\x2', '\x2', '\xFFF', '\x1000', '\a', '%', '\x2', '\x2', '\x1000', '\x1002', 
		'\x5', '\x456', '\x22C', '\x2', '\x1001', '\xFF6', '\x3', '\x2', '\x2', 
		'\x2', '\x1001', '\xFFD', '\x3', '\x2', '\x2', '\x2', '\x1001', '\xFFE', 
		'\x3', '\x2', '\x2', '\x2', '\x1002', '\x1E1', '\x3', '\x2', '\x2', '\x2', 
		'\x1003', '\x1004', '\a', '\x13', '\x2', '\x2', '\x1004', '\x1007', '\x5', 
		'\x456', '\x22C', '\x2', '\x1005', '\x1006', '\a', '\x29B', '\x2', '\x2', 
		'\x1006', '\x1008', '\x5', '\x1E4', '\xF3', '\x2', '\x1007', '\x1005', 
		'\x3', '\x2', '\x2', '\x2', '\x1007', '\x1008', '\x3', '\x2', '\x2', '\x2', 
		'\x1008', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1009', '\x100E', '\x5', 
		'\x2D2', '\x16A', '\x2', '\x100A', '\x100B', '\a', '\x198', '\x2', '\x2', 
		'\x100B', '\x100D', '\x5', '\x2D2', '\x16A', '\x2', '\x100C', '\x100A', 
		'\x3', '\x2', '\x2', '\x2', '\x100D', '\x1010', '\x3', '\x2', '\x2', '\x2', 
		'\x100E', '\x100C', '\x3', '\x2', '\x2', '\x2', '\x100E', '\x100F', '\x3', 
		'\x2', '\x2', '\x2', '\x100F', '\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1010', 
		'\x100E', '\x3', '\x2', '\x2', '\x2', '\x1011', '\x102A', '\a', '\x2C6', 
		'\x2', '\x2', '\x1012', '\x1013', '\a', '\xB6', '\x2', '\x2', '\x1013', 
		'\x1014', '\a', 'o', '\x2', '\x2', '\x1014', '\x1016', '\a', 'y', '\x2', 
		'\x2', '\x1015', '\x1017', '\x5', '\x494', '\x24B', '\x2', '\x1016', '\x1015', 
		'\x3', '\x2', '\x2', '\x2', '\x1016', '\x1017', '\x3', '\x2', '\x2', '\x2', 
		'\x1017', '\x1018', '\x3', '\x2', '\x2', '\x2', '\x1018', '\x102B', '\x5', 
		'\x470', '\x239', '\x2', '\x1019', '\x101C', '\a', '\x2C5', '\x2', '\x2', 
		'\x101A', '\x101B', '\a', '\x1FB', '\x2', '\x2', '\x101B', '\x101D', '\a', 
		'\x11D', '\x2', '\x2', '\x101C', '\x101A', '\x3', '\x2', '\x2', '\x2', 
		'\x101C', '\x101D', '\x3', '\x2', '\x2', '\x2', '\x101D', '\x102B', '\x3', 
		'\x2', '\x2', '\x2', '\x101E', '\x101F', '\x6', '\xF4', 'O', '\x2', '\x101F', 
		'\x1020', '\a', '\xA7', '\x2', '\x2', '\x1020', '\x1021', '\a', '\x1FC', 
		'\x2', '\x2', '\x1021', '\x1022', '\x5', '\x3F0', '\x1F9', '\x2', '\x1022', 
		'\x1023', '\a', '\x19A', '\x2', '\x2', '\x1023', '\x1024', '\x5', '\x462', 
		'\x232', '\x2', '\x1024', '\x1025', '\a', '\xA1', '\x2', '\x2', '\x1025', 
		'\x1026', '\a', '\x1BE', '\x2', '\x2', '\x1026', '\x1028', '\x5', '\x470', 
		'\x239', '\x2', '\x1027', '\x1029', '\x5', '\x1E8', '\xF5', '\x2', '\x1028', 
		'\x1027', '\x3', '\x2', '\x2', '\x2', '\x1028', '\x1029', '\x3', '\x2', 
		'\x2', '\x2', '\x1029', '\x102B', '\x3', '\x2', '\x2', '\x2', '\x102A', 
		'\x1012', '\x3', '\x2', '\x2', '\x2', '\x102A', '\x1019', '\x3', '\x2', 
		'\x2', '\x2', '\x102A', '\x101E', '\x3', '\x2', '\x2', '\x2', '\x102B', 
		'\x1E7', '\x3', '\x2', '\x2', '\x2', '\x102C', '\x1037', '\x5', '\x1EA', 
		'\xF6', '\x2', '\x102D', '\x102E', '\a', 'o', '\x2', '\x2', '\x102E', 
		'\x1030', '\a', 'y', '\x2', '\x2', '\x102F', '\x1031', '\x5', '\x494', 
		'\x24B', '\x2', '\x1030', '\x102F', '\x3', '\x2', '\x2', '\x2', '\x1030', 
		'\x1031', '\x3', '\x2', '\x2', '\x2', '\x1031', '\x1032', '\x3', '\x2', 
		'\x2', '\x2', '\x1032', '\x1034', '\x5', '\x470', '\x239', '\x2', '\x1033', 
		'\x1035', '\x5', '\x1EA', '\xF6', '\x2', '\x1034', '\x1033', '\x3', '\x2', 
		'\x2', '\x2', '\x1034', '\x1035', '\x3', '\x2', '\x2', '\x2', '\x1035', 
		'\x1037', '\x3', '\x2', '\x2', '\x2', '\x1036', '\x102C', '\x3', '\x2', 
		'\x2', '\x2', '\x1036', '\x102D', '\x3', '\x2', '\x2', '\x2', '\x1037', 
		'\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1038', '\x103A', '\a', '\x260', 
		'\x2', '\x2', '\x1039', '\x103B', '\a', '\x1D', '\x2', '\x2', '\x103A', 
		'\x1039', '\x3', '\x2', '\x2', '\x2', '\x103A', '\x103B', '\x3', '\x2', 
		'\x2', '\x2', '\x103B', '\x103C', '\x3', '\x2', '\x2', '\x2', '\x103C', 
		'\x103D', '\a', '\x27A', '\x2', '\x2', '\x103D', '\x1EB', '\x3', '\x2', 
		'\x2', '\x2', '\x103E', '\x103F', '\x6', '\xF7', 'P', '\x2', '\x103F', 
		'\x1049', '\x5', '\x1EE', '\xF8', '\x2', '\x1040', '\x1049', '\x5', '\x1F2', 
		'\xFA', '\x2', '\x1041', '\x1049', '\x5', '\x1FE', '\x100', '\x2', '\x1042', 
		'\x1049', '\x5', '\x200', '\x101', '\x2', '\x1043', '\x1049', '\x5', '\x20E', 
		'\x108', '\x2', '\x1044', '\x1049', '\x5', '\x210', '\x109', '\x2', '\x1045', 
		'\x1049', '\x5', '\x216', '\x10C', '\x2', '\x1046', '\x1047', '\x6', '\xF7', 
		'Q', '\x2', '\x1047', '\x1049', '\x5', '\x224', '\x113', '\x2', '\x1048', 
		'\x103E', '\x3', '\x2', '\x2', '\x2', '\x1048', '\x1040', '\x3', '\x2', 
		'\x2', '\x2', '\x1048', '\x1041', '\x3', '\x2', '\x2', '\x2', '\x1048', 
		'\x1042', '\x3', '\x2', '\x2', '\x2', '\x1048', '\x1043', '\x3', '\x2', 
		'\x2', '\x2', '\x1048', '\x1044', '\x3', '\x2', '\x2', '\x2', '\x1048', 
		'\x1045', '\x3', '\x2', '\x2', '\x2', '\x1048', '\x1046', '\x3', '\x2', 
		'\x2', '\x2', '\x1049', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x104A', 
		'\x104B', '\a', '\x1AE', '\x2', '\x2', '\x104B', '\x104E', '\a', '\x16E', 
		'\x2', '\x2', '\x104C', '\x104D', '\x6', '\xF8', 'R', '\x2', '\x104D', 
		'\x104F', '\x5', '\x3C2', '\x1E2', '\x2', '\x104E', '\x104C', '\x3', '\x2', 
		'\x2', '\x2', '\x104E', '\x104F', '\x3', '\x2', '\x2', '\x2', '\x104F', 
		'\x1050', '\x3', '\x2', '\x2', '\x2', '\x1050', '\x1051', '\x5', '\x1F0', 
		'\xF9', '\x2', '\x1051', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1052', 
		'\x1053', '\x6', '\xF9', 'S', '\x2', '\x1053', '\x1057', '\x5', '\x3E2', 
		'\x1F2', '\x2', '\x1054', '\x1055', '\x6', '\xF9', 'T', '\x2', '\x1055', 
		'\x1057', '\x5', '\x3E4', '\x1F3', '\x2', '\x1056', '\x1052', '\x3', '\x2', 
		'\x2', '\x2', '\x1056', '\x1054', '\x3', '\x2', '\x2', '\x2', '\x1057', 
		'\x1058', '\x3', '\x2', '\x2', '\x2', '\x1058', '\x1059', '\x5', '\x1F4', 
		'\xFB', '\x2', '\x1059', '\x1077', '\x3', '\x2', '\x2', '\x2', '\x105A', 
		'\x105B', '\x6', '\xF9', 'U', '\x2', '\x105B', '\x105C', '\a', '\x16E', 
		'\x2', '\x2', '\x105C', '\x105D', '\x5', '\x492', '\x24A', '\x2', '\x105D', 
		'\x105E', '\a', '\xA1', '\x2', '\x2', '\x105E', '\x105F', '\a', '\x1BE', 
		'\x2', '\x2', '\x105F', '\x1062', '\x5', '\x472', '\x23A', '\x2', '\x1060', 
		'\x1061', '\x6', '\xF9', 'V', '\x2', '\x1061', '\x1063', '\x5', '\x3EE', 
		'\x1F8', '\x2', '\x1062', '\x1060', '\x3', '\x2', '\x2', '\x2', '\x1062', 
		'\x1063', '\x3', '\x2', '\x2', '\x2', '\x1063', '\x1066', '\x3', '\x2', 
		'\x2', '\x2', '\x1064', '\x1065', '\x6', '\xF9', 'W', '\x2', '\x1065', 
		'\x1067', '\x5', '\x3EA', '\x1F6', '\x2', '\x1066', '\x1064', '\x3', '\x2', 
		'\x2', '\x2', '\x1066', '\x1067', '\x3', '\x2', '\x2', '\x2', '\x1067', 
		'\x1077', '\x3', '\x2', '\x2', '\x2', '\x1068', '\x1069', '\x6', '\xF9', 
		'X', '\x2', '\x1069', '\x106A', '\a', '\x16E', '\x2', '\x2', '\x106A', 
		'\x106B', '\x5', '\x492', '\x24A', '\x2', '\x106B', '\x106C', '\x5', '\x3EC', 
		'\x1F7', '\x2', '\x106C', '\x1077', '\x3', '\x2', '\x2', '\x2', '\x106D', 
		'\x106E', '\x6', '\xF9', 'Y', '\x2', '\x106E', '\x106F', '\x5', '\x3F0', 
		'\x1F9', '\x2', '\x106F', '\x1070', '\a', '\x1E0', '\x2', '\x2', '\x1070', 
		'\x1074', '\a', '\x2B4', '\x2', '\x2', '\x1071', '\x1075', '\a', '\x1AD', 
		'\x2', '\x2', '\x1072', '\x1075', '\a', '\xF1', '\x2', '\x2', '\x1073', 
		'\x1075', '\x5', '\x226', '\x114', '\x2', '\x1074', '\x1071', '\x3', '\x2', 
		'\x2', '\x2', '\x1074', '\x1072', '\x3', '\x2', '\x2', '\x2', '\x1074', 
		'\x1073', '\x3', '\x2', '\x2', '\x2', '\x1075', '\x1077', '\x3', '\x2', 
		'\x2', '\x2', '\x1076', '\x1056', '\x3', '\x2', '\x2', '\x2', '\x1076', 
		'\x105A', '\x3', '\x2', '\x2', '\x2', '\x1076', '\x1068', '\x3', '\x2', 
		'\x2', '\x2', '\x1076', '\x106D', '\x3', '\x2', '\x2', '\x2', '\x1077', 
		'\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1078', '\x1079', '\a', '\x1CD', 
		'\x2', '\x2', '\x1079', '\x107D', '\a', '\x16E', '\x2', '\x2', '\x107A', 
		'\x107B', '\x6', '\xFA', 'Z', '\x2', '\x107B', '\x107E', '\x5', '\x3C4', 
		'\x1E3', '\x2', '\x107C', '\x107E', '\x3', '\x2', '\x2', '\x2', '\x107D', 
		'\x107A', '\x3', '\x2', '\x2', '\x2', '\x107D', '\x107C', '\x3', '\x2', 
		'\x2', '\x2', '\x107E', '\x107F', '\x3', '\x2', '\x2', '\x2', '\x107F', 
		'\x1080', '\x5', '\x3E2', '\x1F2', '\x2', '\x1080', '\x1081', '\x5', '\x1F6', 
		'\xFC', '\x2', '\x1081', '\x1082', '\x5', '\x1F4', '\xFB', '\x2', '\x1082', 
		'\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1083', '\x1085', '\x6', '\xFB', 
		'[', '\x2', '\x1084', '\x1086', '\x5', '\x1F8', '\xFD', '\x2', '\x1085', 
		'\x1084', '\x3', '\x2', '\x2', '\x2', '\x1085', '\x1086', '\x3', '\x2', 
		'\x2', '\x2', '\x1086', '\x1088', '\x3', '\x2', '\x2', '\x2', '\x1087', 
		'\x1089', '\x5', '\x1FA', '\xFE', '\x2', '\x1088', '\x1087', '\x3', '\x2', 
		'\x2', '\x2', '\x1088', '\x1089', '\x3', '\x2', '\x2', '\x2', '\x1089', 
		'\x108D', '\x3', '\x2', '\x2', '\x2', '\x108A', '\x108C', '\x5', '\x1FC', 
		'\xFF', '\x2', '\x108B', '\x108A', '\x3', '\x2', '\x2', '\x2', '\x108C', 
		'\x108F', '\x3', '\x2', '\x2', '\x2', '\x108D', '\x108B', '\x3', '\x2', 
		'\x2', '\x2', '\x108D', '\x108E', '\x3', '\x2', '\x2', '\x2', '\x108E', 
		'\x1092', '\x3', '\x2', '\x2', '\x2', '\x108F', '\x108D', '\x3', '\x2', 
		'\x2', '\x2', '\x1090', '\x1092', '\x3', '\x2', '\x2', '\x2', '\x1091', 
		'\x1083', '\x3', '\x2', '\x2', '\x2', '\x1091', '\x1090', '\x3', '\x2', 
		'\x2', '\x2', '\x1092', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1093', 
		'\x1097', '\x6', '\xFC', '\\', '\x2', '\x1094', '\x1095', '\a', '\x1E0', 
		'\x2', '\x2', '\x1095', '\x1096', '\a', '\x2B4', '\x2', '\x2', '\x1096', 
		'\x1098', '\x5', '\x226', '\x114', '\x2', '\x1097', '\x1094', '\x3', '\x2', 
		'\x2', '\x2', '\x1097', '\x1098', '\x3', '\x2', '\x2', '\x2', '\x1098', 
		'\x109B', '\x3', '\x2', '\x2', '\x2', '\x1099', '\x109B', '\x3', '\x2', 
		'\x2', '\x2', '\x109A', '\x1093', '\x3', '\x2', '\x2', '\x2', '\x109A', 
		'\x1099', '\x3', '\x2', '\x2', '\x2', '\x109B', '\x1F7', '\x3', '\x2', 
		'\x2', '\x2', '\x109C', '\x109F', '\a', '\x260', '\x2', '\x2', '\x109D', 
		'\x10A0', '\x5', '\x21E', '\x110', '\x2', '\x109E', '\x10A0', '\t', '\x32', 
		'\x2', '\x2', '\x109F', '\x109D', '\x3', '\x2', '\x2', '\x2', '\x109F', 
		'\x109E', '\x3', '\x2', '\x2', '\x2', '\x10A0', '\x1F9', '\x3', '\x2', 
		'\x2', '\x2', '\x10A1', '\x10AA', '\a', '\x2AB', '\x2', '\x2', '\x10A2', 
		'\x10A3', '\a', '\xD2', '\x2', '\x2', '\x10A3', '\x10AB', '\x5', '\x462', 
		'\x232', '\x2', '\x10A4', '\x10A5', '\a', '\xD5', '\x2', '\x2', '\x10A5', 
		'\x10AB', '\x5', '\x462', '\x232', '\x2', '\x10A6', '\x10A7', '\a', '\xD1', 
		'\x2', '\x2', '\x10A7', '\x10AB', '\x5', '\x462', '\x232', '\x2', '\x10A8', 
		'\x10A9', '\a', '\xD6', '\x2', '\x2', '\x10A9', '\x10AB', '\x5', '\x462', 
		'\x232', '\x2', '\x10AA', '\x10A2', '\x3', '\x2', '\x2', '\x2', '\x10AA', 
		'\x10A4', '\x3', '\x2', '\x2', '\x2', '\x10AA', '\x10A6', '\x3', '\x2', 
		'\x2', '\x2', '\x10AA', '\x10A8', '\x3', '\x2', '\x2', '\x2', '\x10AB', 
		'\x10AC', '\x3', '\x2', '\x2', '\x2', '\x10AC', '\x10AA', '\x3', '\x2', 
		'\x2', '\x2', '\x10AC', '\x10AD', '\x3', '\x2', '\x2', '\x2', '\x10AD', 
		'\x1FB', '\x3', '\x2', '\x2', '\x2', '\x10AE', '\x10AF', '\a', '\x3', 
		'\x2', '\x2', '\x10AF', '\x10D0', '\t', '\x33', '\x2', '\x2', '\x10B0', 
		'\x10CD', '\a', '\xFD', '\x2', '\x2', '\x10B1', '\x10B8', '\a', '\x1F4', 
		'\x2', '\x2', '\x10B2', '\x10B3', '\a', '\x210', '\x2', '\x2', '\x10B3', 
		'\x10B4', '\x5', '\x464', '\x233', '\x2', '\x10B4', '\x10B5', '\a', 's', 
		'\x2', '\x2', '\x10B5', '\x10B9', '\x3', '\x2', '\x2', '\x2', '\x10B6', 
		'\x10B9', '\a', '\xEC', '\x2', '\x2', '\x10B7', '\x10B9', '\a', '\x1E0', 
		'\x2', '\x2', '\x10B8', '\x10B2', '\x3', '\x2', '\x2', '\x2', '\x10B8', 
		'\x10B6', '\x3', '\x2', '\x2', '\x2', '\x10B8', '\x10B7', '\x3', '\x2', 
		'\x2', '\x2', '\x10B8', '\x10B9', '\x3', '\x2', '\x2', '\x2', '\x10B9', 
		'\x10CE', '\x3', '\x2', '\x2', '\x2', '\x10BA', '\x10BD', '\a', '\x2E2', 
		'\x2', '\x2', '\x10BB', '\x10BE', '\x5', '\x464', '\x233', '\x2', '\x10BC', 
		'\x10BE', '\a', '\x1E0', '\x2', '\x2', '\x10BD', '\x10BB', '\x3', '\x2', 
		'\x2', '\x2', '\x10BD', '\x10BC', '\x3', '\x2', '\x2', '\x2', '\x10BE', 
		'\x10CE', '\x3', '\x2', '\x2', '\x2', '\x10BF', '\x10C0', '\a', '\x2E3', 
		'\x2', '\x2', '\x10C0', '\x10C5', '\a', '\x210', '\x2', '\x2', '\x10C1', 
		'\x10C2', '\x5', '\x464', '\x233', '\x2', '\x10C2', '\x10C3', '\a', 's', 
		'\x2', '\x2', '\x10C3', '\x10C6', '\x3', '\x2', '\x2', '\x2', '\x10C4', 
		'\x10C6', '\a', '\x1E0', '\x2', '\x2', '\x10C5', '\x10C1', '\x3', '\x2', 
		'\x2', '\x2', '\x10C5', '\x10C4', '\x3', '\x2', '\x2', '\x2', '\x10C6', 
		'\x10CE', '\x3', '\x2', '\x2', '\x2', '\x10C7', '\x10C8', '\x6', '\xFF', 
		']', '\x2', '\x10C8', '\x10C9', '\a', '\x260', '\x2', '\x2', '\x10C9', 
		'\x10CB', '\a', 'm', '\x2', '\x2', '\x10CA', '\x10CC', '\t', '\x34', '\x2', 
		'\x2', '\x10CB', '\x10CA', '\x3', '\x2', '\x2', '\x2', '\x10CB', '\x10CC', 
		'\x3', '\x2', '\x2', '\x2', '\x10CC', '\x10CE', '\x3', '\x2', '\x2', '\x2', 
		'\x10CD', '\x10B1', '\x3', '\x2', '\x2', '\x2', '\x10CD', '\x10BA', '\x3', 
		'\x2', '\x2', '\x2', '\x10CD', '\x10BF', '\x3', '\x2', '\x2', '\x2', '\x10CD', 
		'\x10C7', '\x3', '\x2', '\x2', '\x2', '\x10CE', '\x10D0', '\x3', '\x2', 
		'\x2', '\x2', '\x10CF', '\x10AE', '\x3', '\x2', '\x2', '\x2', '\x10CF', 
		'\x10B0', '\x3', '\x2', '\x2', '\x2', '\x10D0', '\x1FD', '\x3', '\x2', 
		'\x2', '\x2', '\x10D1', '\x10D2', '\a', '\x1E9', '\x2', '\x2', '\x10D2', 
		'\x10D5', '\a', '\x16E', '\x2', '\x2', '\x10D3', '\x10D4', '\x6', '\x100', 
		'^', '\x2', '\x10D4', '\x10D6', '\x5', '\x3C2', '\x1E2', '\x2', '\x10D5', 
		'\x10D3', '\x3', '\x2', '\x2', '\x2', '\x10D5', '\x10D6', '\x3', '\x2', 
		'\x2', '\x2', '\x10D6', '\x10D7', '\x3', '\x2', '\x2', '\x2', '\x10D7', 
		'\x10D8', '\x5', '\x3E0', '\x1F1', '\x2', '\x10D8', '\x1FF', '\x3', '\x2', 
		'\x2', '\x2', '\x10D9', '\x1104', '\a', '\x200', '\x2', '\x2', '\x10DA', 
		'\x10DB', '\x6', '\x101', '_', '\x2', '\x10DB', '\x10DC', '\x5', '\x218', 
		'\x10D', '\x2', '\x10DC', '\x10DD', '\a', '\x28E', '\x2', '\x2', '\x10DD', 
		'\x10E1', '\x5', '\x3E0', '\x1F1', '\x2', '\x10DE', '\x10DF', '\a', '\x2AB', 
		'\x2', '\x2', '\x10DF', '\x10E0', '\a', '\x2B5', '\x2', '\x2', '\x10E0', 
		'\x10E2', '\a', '\x249', '\x2', '\x2', '\x10E1', '\x10DE', '\x3', '\x2', 
		'\x2', '\x2', '\x10E1', '\x10E2', '\x3', '\x2', '\x2', '\x2', '\x10E2', 
		'\x1105', '\x3', '\x2', '\x2', '\x2', '\x10E3', '\x10E9', '\x5', '\x218', 
		'\x10D', '\x2', '\x10E4', '\x10E6', '\a', '\x1AD', '\x2', '\x2', '\x10E5', 
		'\x10E7', '\a', '\x106', '\x2', '\x2', '\x10E6', '\x10E5', '\x3', '\x2', 
		'\x2', '\x2', '\x10E6', '\x10E7', '\x3', '\x2', '\x2', '\x2', '\x10E7', 
		'\x10E9', '\x3', '\x2', '\x2', '\x2', '\x10E8', '\x10E3', '\x3', '\x2', 
		'\x2', '\x2', '\x10E8', '\x10E4', '\x3', '\x2', '\x2', '\x2', '\x10E9', 
		'\x10EA', '\x3', '\x2', '\x2', '\x2', '\x10EA', '\x10EC', '\a', '\x244', 
		'\x2', '\x2', '\x10EB', '\x10ED', '\x5', '\x214', '\x10B', '\x2', '\x10EC', 
		'\x10EB', '\x3', '\x2', '\x2', '\x2', '\x10EC', '\x10ED', '\x3', '\x2', 
		'\x2', '\x2', '\x10ED', '\x10EE', '\x3', '\x2', '\x2', '\x2', '\x10EE', 
		'\x10EF', '\x5', '\x21C', '\x10F', '\x2', '\x10EF', '\x10F0', '\a', '\x28E', 
		'\x2', '\x2', '\x10F0', '\x10F2', '\x5', '\x202', '\x102', '\x2', '\x10F1', 
		'\x10F3', '\x5', '\x20C', '\x107', '\x2', '\x10F2', '\x10F1', '\x3', '\x2', 
		'\x2', '\x2', '\x10F2', '\x10F3', '\x3', '\x2', '\x2', '\x2', '\x10F3', 
		'\x10F5', '\x3', '\x2', '\x2', '\x2', '\x10F4', '\x10F6', '\x5', '\x204', 
		'\x103', '\x2', '\x10F5', '\x10F4', '\x3', '\x2', '\x2', '\x2', '\x10F5', 
		'\x10F6', '\x3', '\x2', '\x2', '\x2', '\x10F6', '\x10F8', '\x3', '\x2', 
		'\x2', '\x2', '\x10F7', '\x10F9', '\x5', '\x20A', '\x106', '\x2', '\x10F8', 
		'\x10F7', '\x3', '\x2', '\x2', '\x2', '\x10F8', '\x10F9', '\x3', '\x2', 
		'\x2', '\x2', '\x10F9', '\x1105', '\x3', '\x2', '\x2', '\x2', '\x10FA', 
		'\x10FB', '\a', '\x10B', '\x2', '\x2', '\x10FB', '\x10FC', '\a', '\x244', 
		'\x2', '\x2', '\x10FC', '\x10FD', '\x5', '\x3F0', '\x1F9', '\x2', '\x10FD', 
		'\x10FE', '\a', '\x28E', '\x2', '\x2', '\x10FE', '\x1102', '\x5', '\x202', 
		'\x102', '\x2', '\x10FF', '\x1100', '\a', '\x2AB', '\x2', '\x2', '\x1100', 
		'\x1101', '\a', '\x200', '\x2', '\x2', '\x1101', '\x1103', '\a', '\x249', 
		'\x2', '\x2', '\x1102', '\x10FF', '\x3', '\x2', '\x2', '\x2', '\x1102', 
		'\x1103', '\x3', '\x2', '\x2', '\x2', '\x1103', '\x1105', '\x3', '\x2', 
		'\x2', '\x2', '\x1104', '\x10DA', '\x3', '\x2', '\x2', '\x2', '\x1104', 
		'\x10E8', '\x3', '\x2', '\x2', '\x2', '\x1104', '\x10FA', '\x3', '\x2', 
		'\x2', '\x2', '\x1105', '\x201', '\x3', '\x2', '\x2', '\x2', '\x1106', 
		'\x1107', '\x6', '\x102', '`', '\x2', '\x1107', '\x110B', '\x5', '\x3E2', 
		'\x1F2', '\x2', '\x1108', '\x1109', '\x6', '\x102', '\x61', '\x2', '\x1109', 
		'\x110B', '\x5', '\x3E0', '\x1F1', '\x2', '\x110A', '\x1106', '\x3', '\x2', 
		'\x2', '\x2', '\x110A', '\x1108', '\x3', '\x2', '\x2', '\x2', '\x110B', 
		'\x203', '\x3', '\x2', '\x2', '\x2', '\x110C', '\x110D', '\x6', '\x103', 
		'\x62', '\x2', '\x110D', '\x110F', '\a', '\x2AB', '\x2', '\x2', '\x110E', 
		'\x1110', '\x5', '\x222', '\x112', '\x2', '\x110F', '\x110E', '\x3', '\x2', 
		'\x2', '\x2', '\x1110', '\x1111', '\x3', '\x2', '\x2', '\x2', '\x1111', 
		'\x110F', '\x3', '\x2', '\x2', '\x2', '\x1111', '\x1112', '\x3', '\x2', 
		'\x2', '\x2', '\x1112', '\x1118', '\x3', '\x2', '\x2', '\x2', '\x1113', 
		'\x1114', '\x6', '\x103', '\x63', '\x2', '\x1114', '\x1115', '\a', '\x2AB', 
		'\x2', '\x2', '\x1115', '\x1116', '\a', '\x200', '\x2', '\x2', '\x1116', 
		'\x1118', '\a', '\x249', '\x2', '\x2', '\x1117', '\x110C', '\x3', '\x2', 
		'\x2', '\x2', '\x1117', '\x1113', '\x3', '\x2', '\x2', '\x2', '\x1118', 
		'\x205', '\x3', '\x2', '\x2', '\x2', '\x1119', '\x111A', '\a', '\x2B8', 
		'\x2', '\x2', '\x111A', '\x111B', '\x5', '\x226', '\x114', '\x2', '\x111B', 
		'\x207', '\x3', '\x2', '\x2', '\x2', '\x111C', '\x111D', '\a', '\x2AB', 
		'\x2', '\x2', '\x111D', '\x1125', '\a', '\x2B4', '\x2', '\x2', '\x111E', 
		'\x1126', '\x5', '\x226', '\x114', '\x2', '\x111F', '\x1121', '\a', '\x1AD', 
		'\x2', '\x2', '\x1120', '\x1122', '\x5', '\x206', '\x104', '\x2', '\x1121', 
		'\x1120', '\x3', '\x2', '\x2', '\x2', '\x1121', '\x1122', '\x3', '\x2', 
		'\x2', '\x2', '\x1122', '\x1126', '\x3', '\x2', '\x2', '\x2', '\x1123', 
		'\x1126', '\a', '\xF1', '\x2', '\x2', '\x1124', '\x1126', '\a', '\x1E0', 
		'\x2', '\x2', '\x1125', '\x111E', '\x3', '\x2', '\x2', '\x2', '\x1125', 
		'\x111F', '\x3', '\x2', '\x2', '\x2', '\x1125', '\x1123', '\x3', '\x2', 
		'\x2', '\x2', '\x1125', '\x1124', '\x3', '\x2', '\x2', '\x2', '\x1126', 
		'\x209', '\x3', '\x2', '\x2', '\x2', '\x1127', '\x1128', '\a', '\x1B1', 
		'\x2', '\x2', '\x1128', '\x112A', '\a', '\x16E', '\x2', '\x2', '\x1129', 
		'\x112B', '\x5', '\x208', '\x105', '\x2', '\x112A', '\x1129', '\x3', '\x2', 
		'\x2', '\x2', '\x112A', '\x112B', '\x3', '\x2', '\x2', '\x2', '\x112B', 
		'\x20B', '\x3', '\x2', '\x2', '\x2', '\x112C', '\x112D', '\x6', '\x107', 
		'\x64', '\x2', '\x112D', '\x112E', '\x5', '\x1F8', '\xFD', '\x2', '\x112E', 
		'\x20D', '\x3', '\x2', '\x2', '\x2', '\x112F', '\x1130', '\a', '\x25D', 
		'\x2', '\x2', '\x1130', '\x1131', '\a', '\x16E', '\x2', '\x2', '\x1131', 
		'\x1132', '\x5', '\x3F0', '\x1F9', '\x2', '\x1132', '\x1133', '\a', '\x28E', 
		'\x2', '\x2', '\x1133', '\x113B', '\x5', '\x3F0', '\x1F9', '\x2', '\x1134', 
		'\x1135', '\a', '\x198', '\x2', '\x2', '\x1135', '\x1136', '\x5', '\x3F0', 
		'\x1F9', '\x2', '\x1136', '\x1137', '\a', '\x28E', '\x2', '\x2', '\x1137', 
		'\x1138', '\x5', '\x3F0', '\x1F9', '\x2', '\x1138', '\x113A', '\x3', '\x2', 
		'\x2', '\x2', '\x1139', '\x1134', '\x3', '\x2', '\x2', '\x2', '\x113A', 
		'\x113D', '\x3', '\x2', '\x2', '\x2', '\x113B', '\x1139', '\x3', '\x2', 
		'\x2', '\x2', '\x113B', '\x113C', '\x3', '\x2', '\x2', '\x2', '\x113C', 
		'\x20F', '\x3', '\x2', '\x2', '\x2', '\x113D', '\x113B', '\x3', '\x2', 
		'\x2', '\x2', '\x113E', '\x1160', '\a', '\x264', '\x2', '\x2', '\x113F', 
		'\x1140', '\x6', '\x109', '\x65', '\x2', '\x1140', '\x1141', '\x5', '\x218', 
		'\x10D', '\x2', '\x1141', '\x1142', '\a', '\x1FC', '\x2', '\x2', '\x1142', 
		'\x1143', '\x5', '\x3E0', '\x1F1', '\x2', '\x1143', '\x1161', '\x3', '\x2', 
		'\x2', '\x2', '\x1144', '\x1145', '\x5', '\x218', '\x10D', '\x2', '\x1145', 
		'\x1146', '\x5', '\x212', '\x10A', '\x2', '\x1146', '\x1147', '\a', '\x1FC', 
		'\x2', '\x2', '\x1147', '\x1148', '\x5', '\x3E0', '\x1F1', '\x2', '\x1148', 
		'\x1161', '\x3', '\x2', '\x2', '\x2', '\x1149', '\x114B', '\a', '\x1AD', 
		'\x2', '\x2', '\x114A', '\x114C', '\a', '\x106', '\x2', '\x2', '\x114B', 
		'\x114A', '\x3', '\x2', '\x2', '\x2', '\x114B', '\x114C', '\x3', '\x2', 
		'\x2', '\x2', '\x114C', '\x1158', '\x3', '\x2', '\x2', '\x2', '\x114D', 
		'\x114E', '\x6', '\x109', '\x66', '\x2', '\x114E', '\x1150', '\a', '\x244', 
		'\x2', '\x2', '\x114F', '\x1151', '\x5', '\x214', '\x10B', '\x2', '\x1150', 
		'\x114F', '\x3', '\x2', '\x2', '\x2', '\x1150', '\x1151', '\x3', '\x2', 
		'\x2', '\x2', '\x1151', '\x1152', '\x3', '\x2', '\x2', '\x2', '\x1152', 
		'\x1159', '\x5', '\x21C', '\x10F', '\x2', '\x1153', '\x1154', '\a', '\x198', 
		'\x2', '\x2', '\x1154', '\x1155', '\a', '\x200', '\x2', '\x2', '\x1155', 
		'\x1156', '\a', '\x249', '\x2', '\x2', '\x1156', '\x1157', '\a', '\x1FC', 
		'\x2', '\x2', '\x1157', '\x1159', '\x5', '\x3E0', '\x1F1', '\x2', '\x1158', 
		'\x114D', '\x3', '\x2', '\x2', '\x2', '\x1158', '\x1153', '\x3', '\x2', 
		'\x2', '\x2', '\x1159', '\x1161', '\x3', '\x2', '\x2', '\x2', '\x115A', 
		'\x115B', '\a', '\x10B', '\x2', '\x2', '\x115B', '\x115C', '\a', '\x244', 
		'\x2', '\x2', '\x115C', '\x115D', '\x5', '\x3F0', '\x1F9', '\x2', '\x115D', 
		'\x115E', '\a', '\x1FC', '\x2', '\x2', '\x115E', '\x115F', '\x5', '\x3E0', 
		'\x1F1', '\x2', '\x115F', '\x1161', '\x3', '\x2', '\x2', '\x2', '\x1160', 
		'\x113F', '\x3', '\x2', '\x2', '\x2', '\x1160', '\x1144', '\x3', '\x2', 
		'\x2', '\x2', '\x1160', '\x1149', '\x3', '\x2', '\x2', '\x2', '\x1160', 
		'\x115A', '\x3', '\x2', '\x2', '\x2', '\x1161', '\x211', '\x3', '\x2', 
		'\x2', '\x2', '\x1162', '\x1163', '\x6', '\x10A', 'g', '\x2', '\x1163', 
		'\x1165', '\a', '\x244', '\x2', '\x2', '\x1164', '\x1166', '\x5', '\x214', 
		'\x10B', '\x2', '\x1165', '\x1164', '\x3', '\x2', '\x2', '\x2', '\x1165', 
		'\x1166', '\x3', '\x2', '\x2', '\x2', '\x1166', '\x1167', '\x3', '\x2', 
		'\x2', '\x2', '\x1167', '\x1171', '\x5', '\x21C', '\x10F', '\x2', '\x1168', 
		'\x116E', '\x6', '\x10A', 'h', '\x2', '\x1169', '\x116B', '\a', '\x244', 
		'\x2', '\x2', '\x116A', '\x116C', '\x5', '\x214', '\x10B', '\x2', '\x116B', 
		'\x116A', '\x3', '\x2', '\x2', '\x2', '\x116B', '\x116C', '\x3', '\x2', 
		'\x2', '\x2', '\x116C', '\x116D', '\x3', '\x2', '\x2', '\x2', '\x116D', 
		'\x116F', '\x5', '\x21C', '\x10F', '\x2', '\x116E', '\x1169', '\x3', '\x2', 
		'\x2', '\x2', '\x116E', '\x116F', '\x3', '\x2', '\x2', '\x2', '\x116F', 
		'\x1171', '\x3', '\x2', '\x2', '\x2', '\x1170', '\x1162', '\x3', '\x2', 
		'\x2', '\x2', '\x1170', '\x1168', '\x3', '\x2', '\x2', '\x2', '\x1171', 
		'\x213', '\x3', '\x2', '\x2', '\x2', '\x1172', '\x1173', '\t', '\x35', 
		'\x2', '\x2', '\x1173', '\x215', '\x3', '\x2', '\x2', '\x2', '\x1174', 
		'\x1175', '\a', '\x26C', '\x2', '\x2', '\x1175', '\x1178', '\a', '\xFD', 
		'\x2', '\x2', '\x1176', '\x1177', '\a', '\x1FB', '\x2', '\x2', '\x1177', 
		'\x1179', '\x5', '\x3F0', '\x1F9', '\x2', '\x1178', '\x1176', '\x3', '\x2', 
		'\x2', '\x2', '\x1178', '\x1179', '\x3', '\x2', '\x2', '\x2', '\x1179', 
		'\x117A', '\x3', '\x2', '\x2', '\x2', '\x117A', '\x1187', '\x5', '\x494', 
		'\x24B', '\x2', '\x117B', '\x117C', '\a', '\xFD', '\x2', '\x2', '\x117C', 
		'\x117D', '\a', '\x19B', '\x2', '\x2', '\x117D', '\x117E', '\x5', '\x472', 
		'\x23A', '\x2', '\x117E', '\x117F', '\a', '\x19C', '\x2', '\x2', '\x117F', 
		'\x1188', '\x3', '\x2', '\x2', '\x2', '\x1180', '\x1181', '\x6', '\x10C', 
		'i', '\x2', '\x1181', '\x1182', '\a', '\xF5', '\x2', '\x2', '\x1182', 
		'\x1183', '\a', '\x19B', '\x2', '\x2', '\x1183', '\x1184', '\x5', '\x472', 
		'\x23A', '\x2', '\x1184', '\x1185', '\a', '\x19C', '\x2', '\x2', '\x1185', 
		'\x1188', '\x3', '\x2', '\x2', '\x2', '\x1186', '\x1188', '\x5', '\x472', 
		'\x23A', '\x2', '\x1187', '\x117B', '\x3', '\x2', '\x2', '\x2', '\x1187', 
		'\x1180', '\x3', '\x2', '\x2', '\x2', '\x1187', '\x1186', '\x3', '\x2', 
		'\x2', '\x2', '\x1188', '\x118B', '\x3', '\x2', '\x2', '\x2', '\x1189', 
		'\x118A', '\x6', '\x10C', 'j', '\x2', '\x118A', '\x118C', '\x5', '\x3EE', 
		'\x1F8', '\x2', '\x118B', '\x1189', '\x3', '\x2', '\x2', '\x2', '\x118B', 
		'\x118C', '\x3', '\x2', '\x2', '\x2', '\x118C', '\x118F', '\x3', '\x2', 
		'\x2', '\x2', '\x118D', '\x118E', '\x6', '\x10C', 'k', '\x2', '\x118E', 
		'\x1190', '\x5', '\x3EA', '\x1F6', '\x2', '\x118F', '\x118D', '\x3', '\x2', 
		'\x2', '\x2', '\x118F', '\x1190', '\x3', '\x2', '\x2', '\x2', '\x1190', 
		'\x217', '\x3', '\x2', '\x2', '\x2', '\x1191', '\x1196', '\x5', '\x21A', 
		'\x10E', '\x2', '\x1192', '\x1193', '\a', '\x198', '\x2', '\x2', '\x1193', 
		'\x1195', '\x5', '\x21A', '\x10E', '\x2', '\x1194', '\x1192', '\x3', '\x2', 
		'\x2', '\x2', '\x1195', '\x1198', '\x3', '\x2', '\x2', '\x2', '\x1196', 
		'\x1194', '\x3', '\x2', '\x2', '\x2', '\x1196', '\x1197', '\x3', '\x2', 
		'\x2', '\x2', '\x1197', '\x219', '\x3', '\x2', '\x2', '\x2', '\x1198', 
		'\x1196', '\x3', '\x2', '\x2', '\x2', '\x1199', '\x11A4', '\x6', '\x10E', 
		'l', '\x2', '\x119A', '\x119C', '\x5', '\x48E', '\x248', '\x2', '\x119B', 
		'\x119D', '\x5', '\x402', '\x202', '\x2', '\x119C', '\x119B', '\x3', '\x2', 
		'\x2', '\x2', '\x119C', '\x119D', '\x3', '\x2', '\x2', '\x2', '\x119D', 
		'\x11A5', '\x3', '\x2', '\x2', '\x2', '\x119E', '\x11A2', '\x5', '\x48E', 
		'\x248', '\x2', '\x119F', '\x11A3', '\a', '\x1A3', '\x2', '\x2', '\x11A0', 
		'\x11A1', '\a', '\x1A2', '\x2', '\x2', '\x11A1', '\x11A3', '\x5', '\x48A', 
		'\x246', '\x2', '\x11A2', '\x119F', '\x3', '\x2', '\x2', '\x2', '\x11A2', 
		'\x11A0', '\x3', '\x2', '\x2', '\x2', '\x11A3', '\x11A5', '\x3', '\x2', 
		'\x2', '\x2', '\x11A4', '\x119A', '\x3', '\x2', '\x2', '\x2', '\x11A4', 
		'\x119E', '\x3', '\x2', '\x2', '\x2', '\x11A5', '\x11C3', '\x3', '\x2', 
		'\x2', '\x2', '\x11A6', '\x11A8', '\t', '\x36', '\x2', '\x2', '\x11A7', 
		'\x11A9', '\x5', '\x402', '\x202', '\x2', '\x11A8', '\x11A7', '\x3', '\x2', 
		'\x2', '\x2', '\x11A8', '\x11A9', '\x3', '\x2', '\x2', '\x2', '\x11A9', 
		'\x11C3', '\x3', '\x2', '\x2', '\x2', '\x11AA', '\x11C3', '\t', '\x37', 
		'\x2', '\x2', '\x11AB', '\x11AC', '\a', '\x200', '\x2', '\x2', '\x11AC', 
		'\x11C3', '\a', '\x249', '\x2', '\x2', '\x11AD', '\x11AE', '\a', '\x26E', 
		'\x2', '\x2', '\x11AE', '\x11C3', '\a', '\x1D6', '\x2', '\x2', '\x11AF', 
		'\x11B3', '\a', '\x1CD', '\x2', '\x2', '\x11B0', '\x11B1', '\a', '\x159', 
		'\x2', '\x2', '\x11B1', '\x11B4', '\a', '\x156', '\x2', '\x2', '\x11B2', 
		'\x11B4', '\t', '\x38', '\x2', '\x2', '\x11B3', '\x11B0', '\x3', '\x2', 
		'\x2', '\x2', '\x11B3', '\x11B2', '\x3', '\x2', '\x2', '\x2', '\x11B3', 
		'\x11B4', '\x3', '\x2', '\x2', '\x2', '\x11B4', '\x11C3', '\x3', '\x2', 
		'\x2', '\x2', '\x11B5', '\x11B6', '\a', '\x225', '\x2', '\x2', '\x11B6', 
		'\x11C3', '\a', '\x156', '\x2', '\x2', '\x11B7', '\x11B8', '\a', '\x11D', 
		'\x2', '\x2', '\x11B8', '\x11C3', '\t', '\x39', '\x2', '\x2', '\x11B9', 
		'\x11BA', '\a', '\x26E', '\x2', '\x2', '\x11BA', '\x11C3', '\a', '\x171', 
		'\x2', '\x2', '\x11BB', '\x11BD', '\a', '\x1AE', '\x2', '\x2', '\x11BC', 
		'\x11BE', '\a', '\x12B', '\x2', '\x2', '\x11BD', '\x11BC', '\x3', '\x2', 
		'\x2', '\x2', '\x11BD', '\x11BE', '\x3', '\x2', '\x2', '\x2', '\x11BE', 
		'\x11C3', '\x3', '\x2', '\x2', '\x2', '\x11BF', '\x11C0', '\x6', '\x10E', 
		'm', '\x2', '\x11C0', '\x11C1', '\t', ':', '\x2', '\x2', '\x11C1', '\x11C3', 
		'\a', '\x2B4', '\x2', '\x2', '\x11C2', '\x1199', '\x3', '\x2', '\x2', 
		'\x2', '\x11C2', '\x11A6', '\x3', '\x2', '\x2', '\x2', '\x11C2', '\x11AA', 
		'\x3', '\x2', '\x2', '\x2', '\x11C2', '\x11AB', '\x3', '\x2', '\x2', '\x2', 
		'\x11C2', '\x11AD', '\x3', '\x2', '\x2', '\x2', '\x11C2', '\x11AF', '\x3', 
		'\x2', '\x2', '\x2', '\x11C2', '\x11B5', '\x3', '\x2', '\x2', '\x2', '\x11C2', 
		'\x11B7', '\x3', '\x2', '\x2', '\x2', '\x11C2', '\x11B9', '\x3', '\x2', 
		'\x2', '\x2', '\x11C2', '\x11BB', '\x3', '\x2', '\x2', '\x2', '\x11C2', 
		'\x11BF', '\x3', '\x2', '\x2', '\x2', '\x11C3', '\x21B', '\x3', '\x2', 
		'\x2', '\x2', '\x11C4', '\x11C7', '\a', '\x18B', '\x2', '\x2', '\x11C5', 
		'\x11C6', '\a', '\x197', '\x2', '\x2', '\x11C6', '\x11C8', '\a', '\x18B', 
		'\x2', '\x2', '\x11C7', '\x11C5', '\x3', '\x2', '\x2', '\x2', '\x11C7', 
		'\x11C8', '\x3', '\x2', '\x2', '\x2', '\x11C8', '\x11D5', '\x3', '\x2', 
		'\x2', '\x2', '\x11C9', '\x11CC', '\x5', '\x410', '\x209', '\x2', '\x11CA', 
		'\x11CB', '\a', '\x197', '\x2', '\x2', '\x11CB', '\x11CD', '\a', '\x18B', 
		'\x2', '\x2', '\x11CC', '\x11CA', '\x3', '\x2', '\x2', '\x2', '\x11CC', 
		'\x11CD', '\x3', '\x2', '\x2', '\x2', '\x11CD', '\x11D5', '\x3', '\x2', 
		'\x2', '\x2', '\x11CE', '\x11D5', '\x5', '\x43C', '\x21F', '\x2', '\x11CF', 
		'\x11D0', '\x6', '\x10F', 'n', '\x2', '\x11D0', '\x11D1', '\x5', '\x410', 
		'\x209', '\x2', '\x11D1', '\x11D2', '\a', '\x197', '\x2', '\x2', '\x11D2', 
		'\x11D3', '\x5', '\x43C', '\x21F', '\x2', '\x11D3', '\x11D5', '\x3', '\x2', 
		'\x2', '\x2', '\x11D4', '\x11C4', '\x3', '\x2', '\x2', '\x2', '\x11D4', 
		'\x11C9', '\x3', '\x2', '\x2', '\x2', '\x11D4', '\x11CE', '\x3', '\x2', 
		'\x2', '\x2', '\x11D4', '\x11CF', '\x3', '\x2', '\x2', '\x2', '\x11D5', 
		'\x21D', '\x3', '\x2', '\x2', '\x2', '\x11D6', '\x11DD', '\x5', '\x220', 
		'\x111', '\x2', '\x11D7', '\x11D9', '\a', '\x1B0', '\x2', '\x2', '\x11D8', 
		'\x11D7', '\x3', '\x2', '\x2', '\x2', '\x11D8', '\x11D9', '\x3', '\x2', 
		'\x2', '\x2', '\x11D9', '\x11DA', '\x3', '\x2', '\x2', '\x2', '\x11DA', 
		'\x11DC', '\x5', '\x220', '\x111', '\x2', '\x11DB', '\x11D8', '\x3', '\x2', 
		'\x2', '\x2', '\x11DC', '\x11DF', '\x3', '\x2', '\x2', '\x2', '\x11DD', 
		'\x11DB', '\x3', '\x2', '\x2', '\x2', '\x11DD', '\x11DE', '\x3', '\x2', 
		'\x2', '\x2', '\x11DE', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x11DF', 
		'\x11DD', '\x3', '\x2', '\x2', '\x2', '\x11E0', '\x11E1', '\a', 'T', '\x2', 
		'\x2', '\x11E1', '\x11E7', '\x5', '\x472', '\x23A', '\x2', '\x11E2', '\x11E3', 
		'\a', '\xAC', '\x2', '\x2', '\x11E3', '\x11E7', '\x5', '\x472', '\x23A', 
		'\x2', '\x11E4', '\x11E5', '\a', '\x14E', '\x2', '\x2', '\x11E5', '\x11E7', 
		'\x5', '\x472', '\x23A', '\x2', '\x11E6', '\x11E0', '\x3', '\x2', '\x2', 
		'\x2', '\x11E6', '\x11E2', '\x3', '\x2', '\x2', '\x2', '\x11E6', '\x11E4', 
		'\x3', '\x2', '\x2', '\x2', '\x11E7', '\x221', '\x3', '\x2', '\x2', '\x2', 
		'\x11E8', '\x11E9', '\a', '\x200', '\x2', '\x2', '\x11E9', '\x11F3', '\a', 
		'\x249', '\x2', '\x2', '\x11EA', '\x11EB', '\a', '\xD2', '\x2', '\x2', 
		'\x11EB', '\x11F3', '\x5', '\x462', '\x232', '\x2', '\x11EC', '\x11ED', 
		'\a', '\xD5', '\x2', '\x2', '\x11ED', '\x11F3', '\x5', '\x462', '\x232', 
		'\x2', '\x11EE', '\x11EF', '\a', '\xD1', '\x2', '\x2', '\x11EF', '\x11F3', 
		'\x5', '\x462', '\x232', '\x2', '\x11F0', '\x11F1', '\a', '\xD6', '\x2', 
		'\x2', '\x11F1', '\x11F3', '\x5', '\x462', '\x232', '\x2', '\x11F2', '\x11E8', 
		'\x3', '\x2', '\x2', '\x2', '\x11F2', '\x11EA', '\x3', '\x2', '\x2', '\x2', 
		'\x11F2', '\x11EC', '\x3', '\x2', '\x2', '\x2', '\x11F2', '\x11EE', '\x3', 
		'\x2', '\x2', '\x2', '\x11F2', '\x11F0', '\x3', '\x2', '\x2', '\x2', '\x11F3', 
		'\x223', '\x3', '\x2', '\x2', '\x2', '\x11F4', '\x11F5', '\a', '\x26C', 
		'\x2', '\x2', '\x11F5', '\x11F6', '\a', '\x2B4', '\x2', '\x2', '\x11F6', 
		'\x120C', '\x5', '\x226', '\x114', '\x2', '\x11F7', '\x11F8', '\a', '\x26C', 
		'\x2', '\x2', '\x11F8', '\x11F9', '\a', '\x2B4', '\x2', '\x2', '\x11F9', 
		'\x120C', '\t', ';', '\x2', '\x2', '\x11FA', '\x11FB', '\a', '\x26C', 
		'\x2', '\x2', '\x11FB', '\x11FC', '\a', '\x1E0', '\x2', '\x2', '\x11FC', 
		'\x1200', '\a', '\x2B4', '\x2', '\x2', '\x11FD', '\x1201', '\x5', '\x226', 
		'\x114', '\x2', '\x11FE', '\x1201', '\a', '\xF1', '\x2', '\x2', '\x11FF', 
		'\x1201', '\a', '\x1AD', '\x2', '\x2', '\x1200', '\x11FD', '\x3', '\x2', 
		'\x2', '\x2', '\x1200', '\x11FE', '\x3', '\x2', '\x2', '\x2', '\x1200', 
		'\x11FF', '\x3', '\x2', '\x2', '\x2', '\x1201', '\x1202', '\x3', '\x2', 
		'\x2', '\x2', '\x1202', '\x1203', '\a', '\x28E', '\x2', '\x2', '\x1203', 
		'\x120C', '\x5', '\x226', '\x114', '\x2', '\x1204', '\x1205', '\a', '\x26C', 
		'\x2', '\x2', '\x1205', '\x1206', '\a', '\x2B4', '\x2', '\x2', '\x1206', 
		'\x1209', '\a', '\x1AD', '\x2', '\x2', '\x1207', '\x1208', '\a', '\x2B8', 
		'\x2', '\x2', '\x1208', '\x120A', '\x5', '\x226', '\x114', '\x2', '\x1209', 
		'\x1207', '\x3', '\x2', '\x2', '\x2', '\x1209', '\x120A', '\x3', '\x2', 
		'\x2', '\x2', '\x120A', '\x120C', '\x3', '\x2', '\x2', '\x2', '\x120B', 
		'\x11F4', '\x3', '\x2', '\x2', '\x2', '\x120B', '\x11F7', '\x3', '\x2', 
		'\x2', '\x2', '\x120B', '\x11FA', '\x3', '\x2', '\x2', '\x2', '\x120B', 
		'\x1204', '\x3', '\x2', '\x2', '\x2', '\x120C', '\x225', '\x3', '\x2', 
		'\x2', '\x2', '\x120D', '\x1212', '\x5', '\x228', '\x115', '\x2', '\x120E', 
		'\x120F', '\a', '\x198', '\x2', '\x2', '\x120F', '\x1211', '\x5', '\x228', 
		'\x115', '\x2', '\x1210', '\x120E', '\x3', '\x2', '\x2', '\x2', '\x1211', 
		'\x1214', '\x3', '\x2', '\x2', '\x2', '\x1212', '\x1210', '\x3', '\x2', 
		'\x2', '\x2', '\x1212', '\x1213', '\x3', '\x2', '\x2', '\x2', '\x1213', 
		'\x227', '\x3', '\x2', '\x2', '\x2', '\x1214', '\x1212', '\x3', '\x2', 
		'\x2', '\x2', '\x1215', '\x1218', '\x5', '\x48E', '\x248', '\x2', '\x1216', 
		'\x1217', '\a', '\x1A2', '\x2', '\x2', '\x1217', '\x1219', '\x5', '\x48A', 
		'\x246', '\x2', '\x1218', '\x1216', '\x3', '\x2', '\x2', '\x2', '\x1218', 
		'\x1219', '\x3', '\x2', '\x2', '\x2', '\x1219', '\x229', '\x3', '\x2', 
		'\x2', '\x2', '\x121A', '\x121C', '\a', '\x41', '\x2', '\x2', '\x121B', 
		'\x121D', '\x5', '\x3F8', '\x1FD', '\x2', '\x121C', '\x121B', '\x3', '\x2', 
		'\x2', '\x2', '\x121C', '\x121D', '\x3', '\x2', '\x2', '\x2', '\x121D', 
		'\x121E', '\x3', '\x2', '\x2', '\x2', '\x121E', '\x121F', '\a', '\x288', 
		'\x2', '\x2', '\x121F', '\x1246', '\x5', '\x43E', '\x220', '\x2', '\x1220', 
		'\x1221', '\a', '\x1C5', '\x2', '\x2', '\x1221', '\x1222', '\a', '\x288', 
		'\x2', '\x2', '\x1222', '\x1226', '\x5', '\x43E', '\x220', '\x2', '\x1223', 
		'\x1225', '\x5', '\x22E', '\x118', '\x2', '\x1224', '\x1223', '\x3', '\x2', 
		'\x2', '\x2', '\x1225', '\x1228', '\x3', '\x2', '\x2', '\x2', '\x1226', 
		'\x1224', '\x3', '\x2', '\x2', '\x2', '\x1226', '\x1227', '\x3', '\x2', 
		'\x2', '\x2', '\x1227', '\x1246', '\x3', '\x2', '\x2', '\x2', '\x1228', 
		'\x1226', '\x3', '\x2', '\x2', '\x2', '\x1229', '\x122A', '\a', '\v', 
		'\x2', '\x2', '\x122A', '\x122B', '\a', '\x288', '\x2', '\x2', '\x122B', 
		'\x122D', '\x5', '\x43E', '\x220', '\x2', '\x122C', '\x122E', '\t', '<', 
		'\x2', '\x2', '\x122D', '\x122C', '\x3', '\x2', '\x2', '\x2', '\x122D', 
		'\x122E', '\x3', '\x2', '\x2', '\x2', '\x122E', '\x1246', '\x3', '\x2', 
		'\x2', '\x2', '\x122F', '\x1231', '\a', '\x247', '\x2', '\x2', '\x1230', 
		'\x1232', '\x5', '\x3F8', '\x1FD', '\x2', '\x1231', '\x1230', '\x3', '\x2', 
		'\x2', '\x2', '\x1231', '\x1232', '\x3', '\x2', '\x2', '\x2', '\x1232', 
		'\x1233', '\x3', '\x2', '\x2', '\x2', '\x1233', '\x1234', '\a', '\x288', 
		'\x2', '\x2', '\x1234', '\x1237', '\x5', '\x43E', '\x220', '\x2', '\x1235', 
		'\x1236', '\x6', '\x116', 'o', '\x2', '\x1236', '\x1238', '\x5', '\x22C', 
		'\x117', '\x2', '\x1237', '\x1235', '\x3', '\x2', '\x2', '\x2', '\x1237', 
		'\x1238', '\x3', '\x2', '\x2', '\x2', '\x1238', '\x1246', '\x3', '\x2', 
		'\x2', '\x2', '\x1239', '\x123B', '\a', '\'', '\x2', '\x2', '\x123A', 
		'\x123C', '\x5', '\x3F8', '\x1FD', '\x2', '\x123B', '\x123A', '\x3', '\x2', 
		'\x2', '\x2', '\x123B', '\x123C', '\x3', '\x2', '\x2', '\x2', '\x123C', 
		'\x123D', '\x3', '\x2', '\x2', '\x2', '\x123D', '\x123E', '\a', '\x288', 
		'\x2', '\x2', '\x123E', '\x1242', '\x5', '\x43E', '\x220', '\x2', '\x123F', 
		'\x1241', '\x5', '\x230', '\x119', '\x2', '\x1240', '\x123F', '\x3', '\x2', 
		'\x2', '\x2', '\x1241', '\x1244', '\x3', '\x2', '\x2', '\x2', '\x1242', 
		'\x1240', '\x3', '\x2', '\x2', '\x2', '\x1242', '\x1243', '\x3', '\x2', 
		'\x2', '\x2', '\x1243', '\x1246', '\x3', '\x2', '\x2', '\x2', '\x1244', 
		'\x1242', '\x3', '\x2', '\x2', '\x2', '\x1245', '\x121A', '\x3', '\x2', 
		'\x2', '\x2', '\x1245', '\x1220', '\x3', '\x2', '\x2', '\x2', '\x1245', 
		'\x1229', '\x3', '\x2', '\x2', '\x2', '\x1245', '\x122F', '\x3', '\x2', 
		'\x2', '\x2', '\x1245', '\x1239', '\x3', '\x2', '\x2', '\x2', '\x1246', 
		'\x22B', '\x3', '\x2', '\x2', '\x2', '\x1247', '\x1248', '\a', '\x298', 
		'\x2', '\x2', '\x1248', '\x1249', '\a', '\x2C3', '\x2', '\x2', '\x1249', 
		'\x124A', '\a', '\x244', '\x2', '\x2', '\x124A', '\x124E', '\x5', '\x458', 
		'\x22D', '\x2', '\x124B', '\x124C', '\a', '\x2AB', '\x2', '\x2', '\x124C', 
		'\x124D', '\a', '\x17E', '\x2', '\x2', '\x124D', '\x124F', '\a', '\x2C4', 
		'\x2', '\x2', '\x124E', '\x124B', '\x3', '\x2', '\x2', '\x2', '\x124E', 
		'\x124F', '\x3', '\x2', '\x2', '\x2', '\x124F', '\x1255', '\x3', '\x2', 
		'\x2', '\x2', '\x1250', '\x1251', '\a', '\x1E9', '\x2', '\x2', '\x1251', 
		'\x1252', '\a', '\x2C3', '\x2', '\x2', '\x1252', '\x1253', '\a', '\x244', 
		'\x2', '\x2', '\x1253', '\x1255', '\x5', '\x458', '\x22D', '\x2', '\x1254', 
		'\x1247', '\x3', '\x2', '\x2', '\x2', '\x1254', '\x1250', '\x3', '\x2', 
		'\x2', '\x2', '\x1255', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x1256', 
		'\x1257', '\a', '\x1FB', '\x2', '\x2', '\x1257', '\x125A', '\a', '\x37', 
		'\x2', '\x2', '\x1258', '\x125A', '\t', '=', '\x2', '\x2', '\x1259', '\x1256', 
		'\x3', '\x2', '\x2', '\x2', '\x1259', '\x1258', '\x3', '\x2', '\x2', '\x2', 
		'\x125A', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x125B', '\x125C', '\t', 
		'>', '\x2', '\x2', '\x125C', '\x231', '\x3', '\x2', '\x2', '\x2', '\x125D', 
		'\x125E', '\a', '\x1B', '\x2', '\x2', '\x125E', '\x125F', '\a', '\x100', 
		'\x2', '\x2', '\x125F', '\x1260', '\x5', '\x456', '\x22C', '\x2', '\x1260', 
		'\x1261', '\a', '\x31', '\x2', '\x2', '\x1261', '\x1262', '\x5', '\x470', 
		'\x239', '\x2', '\x1262', '\x1274', '\x3', '\x2', '\x2', '\x2', '\x1263', 
		'\x1264', '\a', '\x1B', '\x2', '\x2', '\x1264', '\x1265', '\a', '\x2B9', 
		'\x2', '\x2', '\x1265', '\x1274', '\x5', '\x47A', '\x23E', '\x2', '\x1266', 
		'\x1267', '\a', '\x36', '\x2', '\x2', '\x1267', '\x1268', '\a', '\x100', 
		'\x2', '\x2', '\x1268', '\x1274', '\x5', '\x44C', '\x227', '\x2', '\x1269', 
		'\x126A', '\a', '\x36', '\x2', '\x2', '\x126A', '\x126B', '\a', '\x2B9', 
		'\x2', '\x2', '\x126B', '\x1270', '\x5', '\x44E', '\x228', '\x2', '\x126C', 
		'\x126D', '\a', '\x198', '\x2', '\x2', '\x126D', '\x126F', '\x5', '\x44E', 
		'\x228', '\x2', '\x126E', '\x126C', '\x3', '\x2', '\x2', '\x2', '\x126F', 
		'\x1272', '\x3', '\x2', '\x2', '\x2', '\x1270', '\x126E', '\x3', '\x2', 
		'\x2', '\x2', '\x1270', '\x1271', '\x3', '\x2', '\x2', '\x2', '\x1271', 
		'\x1274', '\x3', '\x2', '\x2', '\x2', '\x1272', '\x1270', '\x3', '\x2', 
		'\x2', '\x2', '\x1273', '\x125D', '\x3', '\x2', '\x2', '\x2', '\x1273', 
		'\x1263', '\x3', '\x2', '\x2', '\x2', '\x1273', '\x1266', '\x3', '\x2', 
		'\x2', '\x2', '\x1273', '\x1269', '\x3', '\x2', '\x2', '\x2', '\x1274', 
		'\x233', '\x3', '\x2', '\x2', '\x2', '\x1275', '\x128A', '\a', '\x26C', 
		'\x2', '\x2', '\x1276', '\x1278', '\x5', '\x496', '\x24C', '\x2', '\x1277', 
		'\x1276', '\x3', '\x2', '\x2', '\x2', '\x1277', '\x1278', '\x3', '\x2', 
		'\x2', '\x2', '\x1278', '\x1280', '\x3', '\x2', '\x2', '\x2', '\x1279', 
		'\x127A', '\a', '\x15D', '\x2', '\x2', '\x127A', '\x1281', '\x5', '\x1A2', 
		'\xD2', '\x2', '\x127B', '\x127E', '\x5', '\x23A', '\x11E', '\x2', '\x127C', 
		'\x127D', '\a', '\x198', '\x2', '\x2', '\x127D', '\x127F', '\x5', '\x23E', 
		'\x120', '\x2', '\x127E', '\x127C', '\x3', '\x2', '\x2', '\x2', '\x127E', 
		'\x127F', '\x3', '\x2', '\x2', '\x2', '\x127F', '\x1281', '\x3', '\x2', 
		'\x2', '\x2', '\x1280', '\x1279', '\x3', '\x2', '\x2', '\x2', '\x1280', 
		'\x127B', '\x3', '\x2', '\x2', '\x2', '\x1281', '\x128B', '\x3', '\x2', 
		'\x2', '\x2', '\x1282', '\x1284', '\a', '\xF6', '\x2', '\x2', '\x1283', 
		'\x1282', '\x3', '\x2', '\x2', '\x2', '\x1283', '\x1284', '\x3', '\x2', 
		'\x2', '\x2', '\x1284', '\x1285', '\x3', '\x2', '\x2', '\x2', '\x1285', 
		'\x1288', '\x5', '\x236', '\x11C', '\x2', '\x1286', '\x1287', '\a', '\x198', 
		'\x2', '\x2', '\x1287', '\x1289', '\x5', '\x23E', '\x120', '\x2', '\x1288', 
		'\x1286', '\x3', '\x2', '\x2', '\x2', '\x1288', '\x1289', '\x3', '\x2', 
		'\x2', '\x2', '\x1289', '\x128B', '\x3', '\x2', '\x2', '\x2', '\x128A', 
		'\x1277', '\x3', '\x2', '\x2', '\x2', '\x128A', '\x1283', '\x3', '\x2', 
		'\x2', '\x2', '\x128B', '\x235', '\x3', '\x2', '\x2', '\x2', '\x128C', 
		'\x128D', '\x5', '\x2D6', '\x16C', '\x2', '\x128D', '\x128E', '\x5', '\x494', 
		'\x24B', '\x2', '\x128E', '\x128F', '\x5', '\x23C', '\x11F', '\x2', '\x128F', 
		'\x12A6', '\x3', '\x2', '\x2', '\x2', '\x1290', '\x12A6', '\x5', '\x3D6', 
		'\x1EC', '\x2', '\x1291', '\x1292', '\x5', '\x2D2', '\x16A', '\x2', '\x1292', 
		'\x1293', '\x5', '\x494', '\x24B', '\x2', '\x1293', '\x1294', '\x5', '\x290', 
		'\x149', '\x2', '\x1294', '\x12A6', '\x3', '\x2', '\x2', '\x2', '\x1295', 
		'\x1296', '\x5', '\x238', '\x11D', '\x2', '\x1296', '\x1297', '\x5', '\x494', 
		'\x24B', '\x2', '\x1297', '\x1298', '\x5', '\x23C', '\x11F', '\x2', '\x1298', 
		'\x12A6', '\x3', '\x2', '\x2', '\x2', '\x1299', '\x12A3', '\a', '\xE8', 
		'\x2', '\x2', '\x129A', '\x129B', '\x5', '\x494', '\x24B', '\x2', '\x129B', 
		'\x129C', '\x5', '\x290', '\x149', '\x2', '\x129C', '\x12A4', '\x3', '\x2', 
		'\x2', '\x2', '\x129D', '\x129F', '\x5', '\x398', '\x1CD', '\x2', '\x129E', 
		'\x12A0', '\x5', '\x3CA', '\x1E6', '\x2', '\x129F', '\x129E', '\x3', '\x2', 
		'\x2', '\x2', '\x129F', '\x12A0', '\x3', '\x2', '\x2', '\x2', '\x12A0', 
		'\x12A4', '\x3', '\x2', '\x2', '\x2', '\x12A1', '\x12A2', '\x6', '\x11C', 
		'p', '\x2', '\x12A2', '\x12A4', '\a', '\x1E0', '\x2', '\x2', '\x12A3', 
		'\x129A', '\x3', '\x2', '\x2', '\x2', '\x12A3', '\x129D', '\x3', '\x2', 
		'\x2', '\x2', '\x12A3', '\x12A1', '\x3', '\x2', '\x2', '\x2', '\x12A4', 
		'\x12A6', '\x3', '\x2', '\x2', '\x2', '\x12A5', '\x128C', '\x3', '\x2', 
		'\x2', '\x2', '\x12A5', '\x1290', '\x3', '\x2', '\x2', '\x2', '\x12A5', 
		'\x1291', '\x3', '\x2', '\x2', '\x2', '\x12A5', '\x1295', '\x3', '\x2', 
		'\x2', '\x2', '\x12A5', '\x1299', '\x3', '\x2', '\x2', '\x2', '\x12A6', 
		'\x237', '\x3', '\x2', '\x2', '\x2', '\x12A7', '\x12A9', '\a', '\x1A4', 
		'\x2', '\x2', '\x12A8', '\x12AA', '\x5', '\x49A', '\x24E', '\x2', '\x12A9', 
		'\x12A8', '\x3', '\x2', '\x2', '\x2', '\x12A9', '\x12AA', '\x3', '\x2', 
		'\x2', '\x2', '\x12AA', '\x12AB', '\x3', '\x2', '\x2', '\x2', '\x12AB', 
		'\x12AC', '\x5', '\x2D6', '\x16C', '\x2', '\x12AC', '\x239', '\x3', '\x2', 
		'\x2', '\x2', '\x12AD', '\x12AE', '\x5', '\x2D6', '\x16C', '\x2', '\x12AE', 
		'\x12AF', '\x5', '\x494', '\x24B', '\x2', '\x12AF', '\x12B0', '\x5', '\x23C', 
		'\x11F', '\x2', '\x12B0', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x12B1', 
		'\x12B6', '\x5', '\x290', '\x149', '\x2', '\x12B2', '\x12B6', '\t', '?', 
		'\x2', '\x2', '\x12B3', '\x12B4', '\x6', '\x11F', 'q', '\x2', '\x12B4', 
		'\x12B6', '\t', '@', '\x2', '\x2', '\x12B5', '\x12B1', '\x3', '\x2', '\x2', 
		'\x2', '\x12B5', '\x12B2', '\x3', '\x2', '\x2', '\x2', '\x12B5', '\x12B3', 
		'\x3', '\x2', '\x2', '\x2', '\x12B6', '\x23D', '\x3', '\x2', '\x2', '\x2', 
		'\x12B7', '\x12BC', '\x5', '\x240', '\x121', '\x2', '\x12B8', '\x12B9', 
		'\a', '\x198', '\x2', '\x2', '\x12B9', '\x12BB', '\x5', '\x240', '\x121', 
		'\x2', '\x12BA', '\x12B8', '\x3', '\x2', '\x2', '\x2', '\x12BB', '\x12BE', 
		'\x3', '\x2', '\x2', '\x2', '\x12BC', '\x12BA', '\x3', '\x2', '\x2', '\x2', 
		'\x12BC', '\x12BD', '\x3', '\x2', '\x2', '\x2', '\x12BD', '\x23F', '\x3', 
		'\x2', '\x2', '\x2', '\x12BE', '\x12BC', '\x3', '\x2', '\x2', '\x2', '\x12BF', 
		'\x12C0', '\x5', '\x496', '\x24C', '\x2', '\x12C0', '\x12C1', '\x5', '\x2D6', 
		'\x16C', '\x2', '\x12C1', '\x12C2', '\x5', '\x494', '\x24B', '\x2', '\x12C2', 
		'\x12C3', '\x5', '\x23C', '\x11F', '\x2', '\x12C3', '\x12C6', '\x3', '\x2', 
		'\x2', '\x2', '\x12C4', '\x12C6', '\x5', '\x236', '\x11C', '\x2', '\x12C5', 
		'\x12BF', '\x3', '\x2', '\x2', '\x2', '\x12C5', '\x12C4', '\x3', '\x2', 
		'\x2', '\x2', '\x12C6', '\x241', '\x3', '\x2', '\x2', '\x2', '\x12C7', 
		'\x13A3', '\a', '\x26E', '\x2', '\x2', '\x12C8', '\x12C9', '\x6', '\x122', 
		'r', '\x2', '\x12C9', '\x13A4', '\a', '\x44', '\x2', '\x2', '\x12CA', 
		'\x12CC', '\a', '\x1D6', '\x2', '\x2', '\x12CB', '\x12CD', '\x5', '\x3F4', 
		'\x1FB', '\x2', '\x12CC', '\x12CB', '\x3', '\x2', '\x2', '\x2', '\x12CC', 
		'\x12CD', '\x3', '\x2', '\x2', '\x2', '\x12CD', '\x13A4', '\x3', '\x2', 
		'\x2', '\x2', '\x12CE', '\x12D0', '\x5', '\x244', '\x123', '\x2', '\x12CF', 
		'\x12CE', '\x3', '\x2', '\x2', '\x2', '\x12CF', '\x12D0', '\x3', '\x2', 
		'\x2', '\x2', '\x12D0', '\x12D1', '\x3', '\x2', '\x2', '\x2', '\x12D1', 
		'\x12D3', '\a', '\x156', '\x2', '\x2', '\x12D2', '\x12D4', '\x5', '\x24A', 
		'\x126', '\x2', '\x12D3', '\x12D2', '\x3', '\x2', '\x2', '\x2', '\x12D3', 
		'\x12D4', '\x3', '\x2', '\x2', '\x2', '\x12D4', '\x12D6', '\x3', '\x2', 
		'\x2', '\x2', '\x12D5', '\x12D7', '\x5', '\x3F4', '\x1FB', '\x2', '\x12D6', 
		'\x12D5', '\x3', '\x2', '\x2', '\x2', '\x12D6', '\x12D7', '\x3', '\x2', 
		'\x2', '\x2', '\x12D7', '\x13A4', '\x3', '\x2', '\x2', '\x2', '\x12D8', 
		'\x12DA', '\a', '\x92', '\x2', '\x2', '\x12D9', '\x12D8', '\x3', '\x2', 
		'\x2', '\x2', '\x12D9', '\x12DA', '\x3', '\x2', '\x2', '\x2', '\x12DA', 
		'\x12DB', '\x3', '\x2', '\x2', '\x2', '\x12DB', '\x12DD', '\a', '\x15E', 
		'\x2', '\x2', '\x12DC', '\x12DE', '\x5', '\x24A', '\x126', '\x2', '\x12DD', 
		'\x12DC', '\x3', '\x2', '\x2', '\x2', '\x12DD', '\x12DE', '\x3', '\x2', 
		'\x2', '\x2', '\x12DE', '\x12E0', '\x3', '\x2', '\x2', '\x2', '\x12DF', 
		'\x12E1', '\x5', '\x3F4', '\x1FB', '\x2', '\x12E0', '\x12DF', '\x3', '\x2', 
		'\x2', '\x2', '\x12E0', '\x12E1', '\x3', '\x2', '\x2', '\x2', '\x12E1', 
		'\x13A4', '\x3', '\x2', '\x2', '\x2', '\x12E2', '\x12E4', '\a', '\x88', 
		'\x2', '\x2', '\x12E3', '\x12E5', '\x5', '\x24A', '\x126', '\x2', '\x12E4', 
		'\x12E3', '\x3', '\x2', '\x2', '\x2', '\x12E4', '\x12E5', '\x3', '\x2', 
		'\x2', '\x2', '\x12E5', '\x12E7', '\x3', '\x2', '\x2', '\x2', '\x12E6', 
		'\x12E8', '\x5', '\x3F4', '\x1FB', '\x2', '\x12E7', '\x12E6', '\x3', '\x2', 
		'\x2', '\x2', '\x12E7', '\x12E8', '\x3', '\x2', '\x2', '\x2', '\x12E8', 
		'\x13A4', '\x3', '\x2', '\x2', '\x2', '\x12E9', '\x12EA', '\a', '\x288', 
		'\x2', '\x2', '\x12EA', '\x12EC', '\a', '\x149', '\x2', '\x2', '\x12EB', 
		'\x12ED', '\x5', '\x24A', '\x126', '\x2', '\x12EC', '\x12EB', '\x3', '\x2', 
		'\x2', '\x2', '\x12EC', '\x12ED', '\x3', '\x2', '\x2', '\x2', '\x12ED', 
		'\x12EF', '\x3', '\x2', '\x2', '\x2', '\x12EE', '\x12F0', '\x5', '\x3F4', 
		'\x1FB', '\x2', '\x12EF', '\x12EE', '\x3', '\x2', '\x2', '\x2', '\x12EF', 
		'\x12F0', '\x3', '\x2', '\x2', '\x2', '\x12F0', '\x13A4', '\x3', '\x2', 
		'\x2', '\x2', '\x12F1', '\x12F2', '\a', '\x1E', '\x2', '\x2', '\x12F2', 
		'\x12F4', '\a', '\x156', '\x2', '\x2', '\x12F3', '\x12F5', '\x5', '\x24A', 
		'\x126', '\x2', '\x12F4', '\x12F3', '\x3', '\x2', '\x2', '\x2', '\x12F4', 
		'\x12F5', '\x3', '\x2', '\x2', '\x2', '\x12F5', '\x12F7', '\x3', '\x2', 
		'\x2', '\x2', '\x12F6', '\x12F8', '\x5', '\x3F4', '\x1FB', '\x2', '\x12F7', 
		'\x12F6', '\x3', '\x2', '\x2', '\x2', '\x12F7', '\x12F8', '\x3', '\x2', 
		'\x2', '\x2', '\x12F8', '\x13A4', '\x3', '\x2', '\x2', '\x2', '\x12F9', 
		'\x13A4', '\a', '\x101', '\x2', '\x2', '\x12FA', '\x12FD', '\a', '\x82', 
		'\x2', '\x2', '\x12FB', '\x12FE', '\x5', '\x434', '\x21B', '\x2', '\x12FC', 
		'\x12FE', '\a', '\x1AD', '\x2', '\x2', '\x12FD', '\x12FB', '\x3', '\x2', 
		'\x2', '\x2', '\x12FD', '\x12FC', '\x3', '\x2', '\x2', '\x2', '\x12FE', 
		'\x12FF', '\x3', '\x2', '\x2', '\x2', '\x12FF', '\x13A4', '\t', '\x41', 
		'\x2', '\x2', '\x1300', '\x1302', '\x5', '\x244', '\x123', '\x2', '\x1301', 
		'\x1300', '\x3', '\x2', '\x2', '\x2', '\x1301', '\x1302', '\x3', '\x2', 
		'\x2', '\x2', '\x1302', '\x1303', '\x3', '\x2', '\x2', '\x2', '\x1303', 
		'\x1304', '\a', '\\', '\x2', '\x2', '\x1304', '\x1305', '\t', '\x42', 
		'\x2', '\x2', '\x1305', '\x1307', '\x5', '\x43C', '\x21F', '\x2', '\x1306', 
		'\x1308', '\x5', '\x24A', '\x126', '\x2', '\x1307', '\x1306', '\x3', '\x2', 
		'\x2', '\x2', '\x1307', '\x1308', '\x3', '\x2', '\x2', '\x2', '\x1308', 
		'\x130A', '\x3', '\x2', '\x2', '\x2', '\x1309', '\x130B', '\x5', '\x3F4', 
		'\x1FB', '\x2', '\x130A', '\x1309', '\x3', '\x2', '\x2', '\x2', '\x130A', 
		'\x130B', '\x3', '\x2', '\x2', '\x2', '\x130B', '\x13A4', '\x3', '\x2', 
		'\x2', '\x2', '\x130C', '\x130D', '\t', '-', '\x2', '\x2', '\x130D', '\x13A4', 
		'\a', '\xB9', '\x2', '\x2', '\x130E', '\x1315', '\a', '/', '\x2', '\x2', 
		'\x130F', '\x1316', '\a', '\x9F', '\x2', '\x2', '\x1310', '\x1311', '\a', 
		'\x149', '\x2', '\x2', '\x1311', '\x1313', '\x5', '\x246', '\x124', '\x2', 
		'\x1312', '\x1314', '\x5', '\x2FA', '\x17E', '\x2', '\x1313', '\x1312', 
		'\x3', '\x2', '\x2', '\x2', '\x1313', '\x1314', '\x3', '\x2', '\x2', '\x2', 
		'\x1314', '\x1316', '\x3', '\x2', '\x2', '\x2', '\x1315', '\x130F', '\x3', 
		'\x2', '\x2', '\x2', '\x1315', '\x1310', '\x3', '\x2', '\x2', '\x2', '\x1316', 
		'\x13A4', '\x3', '\x2', '\x2', '\x2', '\x1317', '\x1318', '\t', '\x43', 
		'\x2', '\x2', '\x1318', '\x131B', '\a', '\x88', '\x2', '\x2', '\x1319', 
		'\x131A', '\a', '\x213', '\x2', '\x2', '\x131A', '\x131C', '\x5', '\x472', 
		'\x23A', '\x2', '\x131B', '\x1319', '\x3', '\x2', '\x2', '\x2', '\x131B', 
		'\x131C', '\x3', '\x2', '\x2', '\x2', '\x131C', '\x131F', '\x3', '\x2', 
		'\x2', '\x2', '\x131D', '\x131E', '\a', '\x1FC', '\x2', '\x2', '\x131E', 
		'\x1320', '\x5', '\x466', '\x234', '\x2', '\x131F', '\x131D', '\x3', '\x2', 
		'\x2', '\x2', '\x131F', '\x1320', '\x3', '\x2', '\x2', '\x2', '\x1320', 
		'\x1322', '\x3', '\x2', '\x2', '\x2', '\x1321', '\x1323', '\x5', '\x11C', 
		'\x8F', '\x2', '\x1322', '\x1321', '\x3', '\x2', '\x2', '\x2', '\x1322', 
		'\x1323', '\x3', '\x2', '\x2', '\x2', '\x1323', '\x1325', '\x3', '\x2', 
		'\x2', '\x2', '\x1324', '\x1326', '\x5', '\x2FA', '\x17E', '\x2', '\x1325', 
		'\x1324', '\x3', '\x2', '\x2', '\x2', '\x1325', '\x1326', '\x3', '\x2', 
		'\x2', '\x2', '\x1326', '\x13A4', '\x3', '\x2', '\x2', '\x2', '\x1327', 
		'\x1328', '\x6', '\x122', 's', '\x2', '\x1328', '\x132A', '\a', '\x8C', 
		'\x2', '\x2', '\x1329', '\x1327', '\x3', '\x2', '\x2', '\x2', '\x1329', 
		'\x132A', '\x3', '\x2', '\x2', '\x2', '\x132A', '\x132B', '\x3', '\x2', 
		'\x2', '\x2', '\x132B', '\x132C', '\t', '\x44', '\x2', '\x2', '\x132C', 
		'\x132D', '\x5', '\x248', '\x125', '\x2', '\x132D', '\x132F', '\x5', '\x43C', 
		'\x21F', '\x2', '\x132E', '\x1330', '\x5', '\x24A', '\x126', '\x2', '\x132F', 
		'\x132E', '\x3', '\x2', '\x2', '\x2', '\x132F', '\x1330', '\x3', '\x2', 
		'\x2', '\x2', '\x1330', '\x1332', '\x3', '\x2', '\x2', '\x2', '\x1331', 
		'\x1333', '\x5', '\x15E', '\xB0', '\x2', '\x1332', '\x1331', '\x3', '\x2', 
		'\x2', '\x2', '\x1332', '\x1333', '\x3', '\x2', '\x2', '\x2', '\x1333', 
		'\x13A4', '\x3', '\x2', '\x2', '\x2', '\x1334', '\x1336', '\a', '\x14A', 
		'\x2', '\x2', '\x1335', '\x1334', '\x3', '\x2', '\x2', '\x2', '\x1335', 
		'\x1336', '\x3', '\x2', '\x2', '\x2', '\x1336', '\x1337', '\x3', '\x2', 
		'\x2', '\x2', '\x1337', '\x13A4', '\a', '\x83', '\x2', '\x2', '\x1338', 
		'\x1339', '\a', '\x1CC', '\x2', '\x2', '\x1339', '\x133A', '\a', '\x19B', 
		'\x2', '\x2', '\x133A', '\x133B', '\a', '\x18B', '\x2', '\x2', '\x133B', 
		'\x133C', '\a', '\x19C', '\x2', '\x2', '\x133C', '\x13A4', '\t', '\x45', 
		'\x2', '\x2', '\x133D', '\x133F', '\a', '\x173', '\x2', '\x2', '\x133E', 
		'\x1340', '\x5', '\x11C', '\x8F', '\x2', '\x133F', '\x133E', '\x3', '\x2', 
		'\x2', '\x2', '\x133F', '\x1340', '\x3', '\x2', '\x2', '\x2', '\x1340', 
		'\x13A4', '\x3', '\x2', '\x2', '\x2', '\x1341', '\x1343', '\a', '\x85', 
		'\x2', '\x2', '\x1342', '\x1344', '\x5', '\x11C', '\x8F', '\x2', '\x1343', 
		'\x1342', '\x3', '\x2', '\x2', '\x2', '\x1343', '\x1344', '\x3', '\x2', 
		'\x2', '\x2', '\x1344', '\x13A4', '\x3', '\x2', '\x2', '\x2', '\x1345', 
		'\x13A4', '\a', '\x10A', '\x2', '\x2', '\x1346', '\x134F', '\a', '\x109', 
		'\x2', '\x2', '\x1347', '\x134C', '\x5', '\x24C', '\x127', '\x2', '\x1348', 
		'\x1349', '\a', '\x198', '\x2', '\x2', '\x1349', '\x134B', '\x5', '\x24C', 
		'\x127', '\x2', '\x134A', '\x1348', '\x3', '\x2', '\x2', '\x2', '\x134B', 
		'\x134E', '\x3', '\x2', '\x2', '\x2', '\x134C', '\x134A', '\x3', '\x2', 
		'\x2', '\x2', '\x134C', '\x134D', '\x3', '\x2', '\x2', '\x2', '\x134D', 
		'\x1350', '\x3', '\x2', '\x2', '\x2', '\x134E', '\x134C', '\x3', '\x2', 
		'\x2', '\x2', '\x134F', '\x1347', '\x3', '\x2', '\x2', '\x2', '\x134F', 
		'\x1350', '\x3', '\x2', '\x2', '\x2', '\x1350', '\x1354', '\x3', '\x2', 
		'\x2', '\x2', '\x1351', '\x1352', '\a', '\x1FB', '\x2', '\x2', '\x1352', 
		'\x1353', '\a', '\x10D', '\x2', '\x2', '\x1353', '\x1355', '\a', '\x17E', 
		'\x2', '\x2', '\x1354', '\x1351', '\x3', '\x2', '\x2', '\x2', '\x1354', 
		'\x1355', '\x3', '\x2', '\x2', '\x2', '\x1355', '\x1357', '\x3', '\x2', 
		'\x2', '\x2', '\x1356', '\x1358', '\x5', '\x11C', '\x8F', '\x2', '\x1357', 
		'\x1356', '\x3', '\x2', '\x2', '\x2', '\x1357', '\x1358', '\x3', '\x2', 
		'\x2', '\x2', '\x1358', '\x13A4', '\x3', '\x2', '\x2', '\x2', '\x1359', 
		'\x135B', '\x5', '\x496', '\x24C', '\x2', '\x135A', '\x1359', '\x3', '\x2', 
		'\x2', '\x2', '\x135A', '\x135B', '\x3', '\x2', '\x2', '\x2', '\x135B', 
		'\x135C', '\x3', '\x2', '\x2', '\x2', '\x135C', '\x135E', '\t', '\x46', 
		'\x2', '\x2', '\x135D', '\x135F', '\x5', '\x3F4', '\x1FB', '\x2', '\x135E', 
		'\x135D', '\x3', '\x2', '\x2', '\x2', '\x135E', '\x135F', '\x3', '\x2', 
		'\x2', '\x2', '\x135F', '\x13A4', '\x3', '\x2', '\x2', '\x2', '\x1360', 
		'\x1362', '\a', '\x92', '\x2', '\x2', '\x1361', '\x1360', '\x3', '\x2', 
		'\x2', '\x2', '\x1361', '\x1362', '\x3', '\x2', '\x2', '\x2', '\x1362', 
		'\x1363', '\x3', '\x2', '\x2', '\x2', '\x1363', '\x13A4', '\a', '\x108', 
		'\x2', '\x2', '\x1364', '\x1366', '\x5', '\x2E2', '\x172', '\x2', '\x1365', 
		'\x1367', '\x5', '\x3F4', '\x1FB', '\x2', '\x1366', '\x1365', '\x3', '\x2', 
		'\x2', '\x2', '\x1366', '\x1367', '\x3', '\x2', '\x2', '\x2', '\x1367', 
		'\x13A4', '\x3', '\x2', '\x2', '\x2', '\x1368', '\x136A', '\a', 'Y', '\x2', 
		'\x2', '\x1369', '\x136B', '\x5', '\x3F4', '\x1FB', '\x2', '\x136A', '\x1369', 
		'\x3', '\x2', '\x2', '\x2', '\x136A', '\x136B', '\x3', '\x2', '\x2', '\x2', 
		'\x136B', '\x13A4', '\x3', '\x2', '\x2', '\x2', '\x136C', '\x136D', '\x6', 
		'\x122', 't', '\x2', '\x136D', '\x13A4', '\a', 'j', '\x2', '\x2', '\x136E', 
		'\x13A4', '\a', '\x106', '\x2', '\x2', '\x136F', '\x1372', '\a', '\x9C', 
		'\x2', '\x2', '\x1370', '\x1371', '\a', '\x1FB', '\x2', '\x2', '\x1371', 
		'\x1373', '\x5', '\x3F0', '\x1F9', '\x2', '\x1372', '\x1370', '\x3', '\x2', 
		'\x2', '\x2', '\x1372', '\x1373', '\x3', '\x2', '\x2', '\x2', '\x1373', 
		'\x13A4', '\x3', '\x2', '\x2', '\x2', '\x1374', '\x1375', '\a', '\x9C', 
		'\x2', '\x2', '\x1375', '\x1376', '\a', '\x1FB', '\x2', '\x2', '\x1376', 
		'\x1377', '\x5', '\x3F0', '\x1F9', '\x2', '\x1377', '\x1378', '\a', '\x29B', 
		'\x2', '\x2', '\x1378', '\x1379', '\x5', '\x3E0', '\x1F1', '\x2', '\x1379', 
		'\x13A4', '\x3', '\x2', '\x2', '\x2', '\x137A', '\x137B', '\a', '\xBB', 
		'\x2', '\x2', '\x137B', '\x13A4', '\a', '\x149', '\x2', '\x2', '\x137C', 
		'\x1391', '\a', '\x1CD', '\x2', '\x2', '\x137D', '\x137F', '\a', '\x1D5', 
		'\x2', '\x2', '\x137E', '\x1380', '\x5', '\x3C4', '\x1E3', '\x2', '\x137F', 
		'\x137E', '\x3', '\x2', '\x2', '\x2', '\x137F', '\x1380', '\x3', '\x2', 
		'\x2', '\x2', '\x1380', '\x1381', '\x3', '\x2', '\x2', '\x2', '\x1381', 
		'\x1392', '\x5', '\x410', '\x209', '\x2', '\x1382', '\x1383', '\a', '\x87', 
		'\x2', '\x2', '\x1383', '\x1392', '\x5', '\x42C', '\x217', '\x2', '\x1384', 
		'\x1385', '\a', '\x166', '\x2', '\x2', '\x1385', '\x1392', '\x5', '\x418', 
		'\x20D', '\x2', '\x1386', '\x1387', '\a', '\x253', '\x2', '\x2', '\x1387', 
		'\x1392', '\x5', '\x414', '\x20B', '\x2', '\x1388', '\x1389', '\a', '\x288', 
		'\x2', '\x2', '\x1389', '\x1392', '\x5', '\x43C', '\x21F', '\x2', '\x138A', 
		'\x138B', '\a', '\x290', '\x2', '\x2', '\x138B', '\x1392', '\x5', '\x41C', 
		'\x20F', '\x2', '\x138C', '\x138D', '\a', '\x171', '\x2', '\x2', '\x138D', 
		'\x1392', '\x5', '\x420', '\x211', '\x2', '\x138E', '\x138F', '\x6', '\x122', 
		'u', '\x2', '\x138F', '\x1390', '\a', '\x16E', '\x2', '\x2', '\x1390', 
		'\x1392', '\x5', '\x3F0', '\x1F9', '\x2', '\x1391', '\x137D', '\x3', '\x2', 
		'\x2', '\x2', '\x1391', '\x1382', '\x3', '\x2', '\x2', '\x2', '\x1391', 
		'\x1384', '\x3', '\x2', '\x2', '\x2', '\x1391', '\x1386', '\x3', '\x2', 
		'\x2', '\x2', '\x1391', '\x1388', '\x3', '\x2', '\x2', '\x2', '\x1391', 
		'\x138A', '\x3', '\x2', '\x2', '\x2', '\x1391', '\x138C', '\x3', '\x2', 
		'\x2', '\x2', '\x1391', '\x138E', '\x3', '\x2', '\x2', '\x2', '\x1392', 
		'\x13A4', '\x3', '\x2', '\x2', '\x2', '\x1393', '\x1394', '\a', '\x253', 
		'\x2', '\x2', '\x1394', '\x1396', '\a', '\x149', '\x2', '\x2', '\x1395', 
		'\x1397', '\x5', '\x3F4', '\x1FB', '\x2', '\x1396', '\x1395', '\x3', '\x2', 
		'\x2', '\x2', '\x1396', '\x1397', '\x3', '\x2', '\x2', '\x2', '\x1397', 
		'\x13A4', '\x3', '\x2', '\x2', '\x2', '\x1398', '\x1399', '\a', '\x166', 
		'\x2', '\x2', '\x1399', '\x139B', '\a', '\x149', '\x2', '\x2', '\x139A', 
		'\x139C', '\x5', '\x3F4', '\x1FB', '\x2', '\x139B', '\x139A', '\x3', '\x2', 
		'\x2', '\x2', '\x139B', '\x139C', '\x3', '\x2', '\x2', '\x2', '\x139C', 
		'\x13A4', '\x3', '\x2', '\x2', '\x2', '\x139D', '\x139E', '\a', '\x253', 
		'\x2', '\x2', '\x139E', '\x139F', '\a', 'X', '\x2', '\x2', '\x139F', '\x13A4', 
		'\x5', '\x414', '\x20B', '\x2', '\x13A0', '\x13A1', '\a', '\x166', '\x2', 
		'\x2', '\x13A1', '\x13A2', '\a', 'X', '\x2', '\x2', '\x13A2', '\x13A4', 
		'\x5', '\x418', '\x20D', '\x2', '\x13A3', '\x12C8', '\x3', '\x2', '\x2', 
		'\x2', '\x13A3', '\x12CA', '\x3', '\x2', '\x2', '\x2', '\x13A3', '\x12CF', 
		'\x3', '\x2', '\x2', '\x2', '\x13A3', '\x12D9', '\x3', '\x2', '\x2', '\x2', 
		'\x13A3', '\x12E2', '\x3', '\x2', '\x2', '\x2', '\x13A3', '\x12E9', '\x3', 
		'\x2', '\x2', '\x2', '\x13A3', '\x12F1', '\x3', '\x2', '\x2', '\x2', '\x13A3', 
		'\x12F9', '\x3', '\x2', '\x2', '\x2', '\x13A3', '\x12FA', '\x3', '\x2', 
		'\x2', '\x2', '\x13A3', '\x1301', '\x3', '\x2', '\x2', '\x2', '\x13A3', 
		'\x130C', '\x3', '\x2', '\x2', '\x2', '\x13A3', '\x130E', '\x3', '\x2', 
		'\x2', '\x2', '\x13A3', '\x1317', '\x3', '\x2', '\x2', '\x2', '\x13A3', 
		'\x1329', '\x3', '\x2', '\x2', '\x2', '\x13A3', '\x1335', '\x3', '\x2', 
		'\x2', '\x2', '\x13A3', '\x1338', '\x3', '\x2', '\x2', '\x2', '\x13A3', 
		'\x133D', '\x3', '\x2', '\x2', '\x2', '\x13A3', '\x1341', '\x3', '\x2', 
		'\x2', '\x2', '\x13A3', '\x1345', '\x3', '\x2', '\x2', '\x2', '\x13A3', 
		'\x1346', '\x3', '\x2', '\x2', '\x2', '\x13A3', '\x135A', '\x3', '\x2', 
		'\x2', '\x2', '\x13A3', '\x1361', '\x3', '\x2', '\x2', '\x2', '\x13A3', 
		'\x1364', '\x3', '\x2', '\x2', '\x2', '\x13A3', '\x1368', '\x3', '\x2', 
		'\x2', '\x2', '\x13A3', '\x136C', '\x3', '\x2', '\x2', '\x2', '\x13A3', 
		'\x136E', '\x3', '\x2', '\x2', '\x2', '\x13A3', '\x136F', '\x3', '\x2', 
		'\x2', '\x2', '\x13A3', '\x1374', '\x3', '\x2', '\x2', '\x2', '\x13A3', 
		'\x137A', '\x3', '\x2', '\x2', '\x2', '\x13A3', '\x137C', '\x3', '\x2', 
		'\x2', '\x2', '\x13A3', '\x1393', '\x3', '\x2', '\x2', '\x2', '\x13A3', 
		'\x1398', '\x3', '\x2', '\x2', '\x2', '\x13A3', '\x139D', '\x3', '\x2', 
		'\x2', '\x2', '\x13A3', '\x13A0', '\x3', '\x2', '\x2', '\x2', '\x13A4', 
		'\x243', '\x3', '\x2', '\x2', '\x2', '\x13A5', '\x13AC', '\a', '\x92', 
		'\x2', '\x2', '\x13A6', '\x13A7', '\x6', '\x123', 'v', '\x2', '\x13A7', 
		'\x13A9', '\a', '\x8C', '\x2', '\x2', '\x13A8', '\x13AA', '\a', '\x92', 
		'\x2', '\x2', '\x13A9', '\x13A8', '\x3', '\x2', '\x2', '\x2', '\x13A9', 
		'\x13AA', '\x3', '\x2', '\x2', '\x2', '\x13AA', '\x13AC', '\x3', '\x2', 
		'\x2', '\x2', '\x13AB', '\x13A5', '\x3', '\x2', '\x2', '\x2', '\x13AB', 
		'\x13A6', '\x3', '\x2', '\x2', '\x2', '\x13AC', '\x245', '\x3', '\x2', 
		'\x2', '\x2', '\x13AD', '\x13AF', '\x6', '\x124', 'w', '\x2', '\x13AE', 
		'\x13B0', '\a', '\x23D', '\x2', '\x2', '\x13AF', '\x13AE', '\x3', '\x2', 
		'\x2', '\x2', '\x13AF', '\x13B0', '\x3', '\x2', '\x2', '\x2', '\x13B0', 
		'\x13B3', '\x3', '\x2', '\x2', '\x2', '\x13B1', '\x13B3', '\x3', '\x2', 
		'\x2', '\x2', '\x13B2', '\x13AD', '\x3', '\x2', '\x2', '\x2', '\x13B2', 
		'\x13B1', '\x3', '\x2', '\x2', '\x2', '\x13B3', '\x247', '\x3', '\x2', 
		'\x2', '\x2', '\x13B4', '\x13B5', '\t', '\x42', '\x2', '\x2', '\x13B5', 
		'\x249', '\x3', '\x2', '\x2', '\x2', '\x13B6', '\x13B7', '\x5', '\x248', 
		'\x125', '\x2', '\x13B7', '\x13B8', '\x5', '\x456', '\x22C', '\x2', '\x13B8', 
		'\x24B', '\x3', '\x2', '\x2', '\x2', '\x13B9', '\x13BA', '\a', 'K', '\x2', 
		'\x2', '\x13BA', '\x13C1', '\a', '\xA9', '\x2', '\x2', '\x13BB', '\x13BC', 
		'\a', 'i', '\x2', '\x2', '\x13BC', '\x13C1', '\a', '\x154', '\x2', '\x2', 
		'\x13BD', '\x13BE', '\a', '\xF9', '\x2', '\x2', '\x13BE', '\x13C1', '\a', 
		'\x8E', '\x2', '\x2', '\x13BF', '\x13C1', '\t', 'G', '\x2', '\x2', '\x13C0', 
		'\x13B9', '\x3', '\x2', '\x2', '\x2', '\x13C0', '\x13BB', '\x3', '\x2', 
		'\x2', '\x2', '\x13C0', '\x13BD', '\x3', '\x2', '\x2', '\x2', '\x13C0', 
		'\x13BF', '\x3', '\x2', '\x2', '\x2', '\x13C1', '\x24D', '\x3', '\x2', 
		'\x2', '\x2', '\x13C2', '\x13C3', '\a', 'I', '\x2', '\x2', '\x13C3', '\x13E8', 
		'\x5', '\x476', '\x23C', '\x2', '\x13C4', '\x13C5', '\a', '\t', '\x2', 
		'\x2', '\x13C5', '\x13C6', '\a', '\x20A', '\x2', '\x2', '\x13C6', '\x13C7', 
		'\x5', '\x250', '\x129', '\x2', '\x13C7', '\x13CA', '\a', '\x213', '\x2', 
		'\x2', '\x13C8', '\x13CB', '\x5', '\x456', '\x22C', '\x2', '\x13C9', '\x13CB', 
		'\a', '\x1E0', '\x2', '\x2', '\x13CA', '\x13C8', '\x3', '\x2', '\x2', 
		'\x2', '\x13CA', '\x13C9', '\x3', '\x2', '\x2', '\x2', '\x13CB', '\x13E8', 
		'\x3', '\x2', '\x2', '\x2', '\x13CC', '\x13CE', '\a', '\x14', '\x2', '\x2', 
		'\x13CD', '\x13CF', '\x5', '\x3F8', '\x1FD', '\x2', '\x13CE', '\x13CD', 
		'\x3', '\x2', '\x2', '\x2', '\x13CE', '\x13CF', '\x3', '\x2', '\x2', '\x2', 
		'\x13CF', '\x13D9', '\x3', '\x2', '\x2', '\x2', '\x13D0', '\x13DA', '\x5', 
		'\x262', '\x132', '\x2', '\x13D1', '\x13D6', '\x5', '\x25E', '\x130', 
		'\x2', '\x13D2', '\x13D3', '\a', '\x198', '\x2', '\x2', '\x13D3', '\x13D5', 
		'\x5', '\x25E', '\x130', '\x2', '\x13D4', '\x13D2', '\x3', '\x2', '\x2', 
		'\x2', '\x13D5', '\x13D8', '\x3', '\x2', '\x2', '\x2', '\x13D6', '\x13D4', 
		'\x3', '\x2', '\x2', '\x2', '\x13D6', '\x13D7', '\x3', '\x2', '\x2', '\x2', 
		'\x13D7', '\x13DA', '\x3', '\x2', '\x2', '\x2', '\x13D8', '\x13D6', '\x3', 
		'\x2', '\x2', '\x2', '\x13D9', '\x13D0', '\x3', '\x2', '\x2', '\x2', '\x13D9', 
		'\x13D1', '\x3', '\x2', '\x2', '\x2', '\x13DA', '\x13E8', '\x3', '\x2', 
		'\x2', '\x2', '\x13DB', '\x13DD', '\a', '\x21B', '\x2', '\x2', '\x13DC', 
		'\x13DE', '\t', 'H', '\x2', '\x2', '\x13DD', '\x13DC', '\x3', '\x2', '\x2', 
		'\x2', '\x13DD', '\x13DE', '\x3', '\x2', '\x2', '\x2', '\x13DE', '\x13DF', 
		'\x3', '\x2', '\x2', '\x2', '\x13DF', '\x13E8', '\x5', '\x290', '\x149', 
		'\x2', '\x13E0', '\x13E1', '\a', '\x223', '\x2', '\x2', '\x13E1', '\x13E2', 
		'\a', '\x20A', '\x2', '\x2', '\x13E2', '\x13E3', '\a', '\x211', '\x2', 
		'\x2', '\x13E3', '\x13E4', '\a', '\t', '\x2', '\x2', '\x13E4', '\x13E8', 
		'\x5', '\x266', '\x134', '\x2', '\x13E5', '\x13E6', '\x6', '\x128', 'x', 
		'\x2', '\x13E6', '\x13E8', '\a', ':', '\x2', '\x2', '\x13E7', '\x13C2', 
		'\x3', '\x2', '\x2', '\x2', '\x13E7', '\x13C4', '\x3', '\x2', '\x2', '\x2', 
		'\x13E7', '\x13CC', '\x3', '\x2', '\x2', '\x2', '\x13E7', '\x13DB', '\x3', 
		'\x2', '\x2', '\x2', '\x13E7', '\x13E0', '\x3', '\x2', '\x2', '\x2', '\x13E7', 
		'\x13E5', '\x3', '\x2', '\x2', '\x2', '\x13E8', '\x24F', '\x3', '\x2', 
		'\x2', '\x2', '\x13E9', '\x13EC', '\x5', '\x252', '\x12A', '\x2', '\x13EA', 
		'\x13EC', '\x5', '\x256', '\x12C', '\x2', '\x13EB', '\x13E9', '\x3', '\x2', 
		'\x2', '\x2', '\x13EB', '\x13EA', '\x3', '\x2', '\x2', '\x2', '\x13EC', 
		'\x251', '\x3', '\x2', '\x2', '\x2', '\x13ED', '\x13F2', '\x5', '\x254', 
		'\x12B', '\x2', '\x13EE', '\x13EF', '\a', '\x198', '\x2', '\x2', '\x13EF', 
		'\x13F1', '\x5', '\x254', '\x12B', '\x2', '\x13F0', '\x13EE', '\x3', '\x2', 
		'\x2', '\x2', '\x13F1', '\x13F4', '\x3', '\x2', '\x2', '\x2', '\x13F2', 
		'\x13F0', '\x3', '\x2', '\x2', '\x2', '\x13F2', '\x13F3', '\x3', '\x2', 
		'\x2', '\x2', '\x13F3', '\x253', '\x3', '\x2', '\x2', '\x2', '\x13F4', 
		'\x13F2', '\x3', '\x2', '\x2', '\x2', '\x13F5', '\x13F7', '\x5', '\x43C', 
		'\x21F', '\x2', '\x13F6', '\x13F8', '\x5', '\x258', '\x12D', '\x2', '\x13F7', 
		'\x13F6', '\x3', '\x2', '\x2', '\x2', '\x13F7', '\x13F8', '\x3', '\x2', 
		'\x2', '\x2', '\x13F8', '\x255', '\x3', '\x2', '\x2', '\x2', '\x13F9', 
		'\x13FA', '\x5', '\x43C', '\x21F', '\x2', '\x13FA', '\x13FB', '\a', '\"', 
		'\x2', '\x2', '\x13FB', '\x13FC', '\a', '\x19B', '\x2', '\x2', '\x13FC', 
		'\x13FD', '\x5', '\x36', '\x1C', '\x2', '\x13FD', '\x13FF', '\a', '\x19C', 
		'\x2', '\x2', '\x13FE', '\x1400', '\x5', '\x258', '\x12D', '\x2', '\x13FF', 
		'\x13FE', '\x3', '\x2', '\x2', '\x2', '\x13FF', '\x1400', '\x3', '\x2', 
		'\x2', '\x2', '\x1400', '\x257', '\x3', '\x2', '\x2', '\x2', '\x1401', 
		'\x1402', '\x5', '\x18E', '\xC8', '\x2', '\x1402', '\x1404', '\a', '\x19B', 
		'\x2', '\x2', '\x1403', '\x1405', '\x5', '\x25C', '\x12F', '\x2', '\x1404', 
		'\x1403', '\x3', '\x2', '\x2', '\x2', '\x1404', '\x1405', '\x3', '\x2', 
		'\x2', '\x2', '\x1405', '\x1406', '\x3', '\x2', '\x2', '\x2', '\x1406', 
		'\x1407', '\a', '\x19C', '\x2', '\x2', '\x1407', '\x259', '\x3', '\x2', 
		'\x2', '\x2', '\x1408', '\x140B', '\x5', '\x456', '\x22C', '\x2', '\x1409', 
		'\x140B', '\a', '\x252', '\x2', '\x2', '\x140A', '\x1408', '\x3', '\x2', 
		'\x2', '\x2', '\x140A', '\x1409', '\x3', '\x2', '\x2', '\x2', '\x140B', 
		'\x25B', '\x3', '\x2', '\x2', '\x2', '\x140C', '\x1411', '\x5', '\x25A', 
		'\x12E', '\x2', '\x140D', '\x140E', '\a', '\x198', '\x2', '\x2', '\x140E', 
		'\x1410', '\x5', '\x25A', '\x12E', '\x2', '\x140F', '\x140D', '\x3', '\x2', 
		'\x2', '\x2', '\x1410', '\x1413', '\x3', '\x2', '\x2', '\x2', '\x1411', 
		'\x140F', '\x3', '\x2', '\x2', '\x2', '\x1411', '\x1412', '\x3', '\x2', 
		'\x2', '\x2', '\x1412', '\x25D', '\x3', '\x2', '\x2', '\x2', '\x1413', 
		'\x1411', '\x3', '\x2', '\x2', '\x2', '\x1414', '\x1424', '\t', 'I', '\x2', 
		'\x2', '\x1415', '\x1417', '\x5', '\x260', '\x131', '\x2', '\x1416', '\x1415', 
		'\x3', '\x2', '\x2', '\x2', '\x1416', '\x1417', '\x3', '\x2', '\x2', '\x2', 
		'\x1417', '\x1418', '\x3', '\x2', '\x2', '\x2', '\x1418', '\x1424', '\a', 
		'\xB9', '\x2', '\x2', '\x1419', '\x141A', '\a', '\x115', '\x2', '\x2', 
		'\x141A', '\x141C', '\a', '\xB9', '\x2', '\x2', '\x141B', '\x141D', '\x5', 
		'\x2FA', '\x17E', '\x2', '\x141C', '\x141B', '\x3', '\x2', '\x2', '\x2', 
		'\x141C', '\x141D', '\x3', '\x2', '\x2', '\x2', '\x141D', '\x1424', '\x3', 
		'\x2', '\x2', '\x2', '\x141E', '\x141F', '\x6', '\x130', 'y', '\x2', '\x141F', 
		'\x1420', '\a', '\x10D', '\x2', '\x2', '\x1420', '\x1424', '\a', '\t', 
		'\x2', '\x2', '\x1421', '\x1422', '\x6', '\x130', 'z', '\x2', '\x1422', 
		'\x1424', '\a', '\x248', '\x2', '\x2', '\x1423', '\x1414', '\x3', '\x2', 
		'\x2', '\x2', '\x1423', '\x1416', '\x3', '\x2', '\x2', '\x2', '\x1423', 
		'\x1419', '\x3', '\x2', '\x2', '\x2', '\x1423', '\x141E', '\x3', '\x2', 
		'\x2', '\x2', '\x1423', '\x1421', '\x3', '\x2', '\x2', '\x2', '\x1424', 
		'\x25F', '\x3', '\x2', '\x2', '\x2', '\x1425', '\x1426', '\t', 'J', '\x2', 
		'\x2', '\x1426', '\x261', '\x3', '\x2', '\x2', '\x2', '\x1427', '\x142F', 
		'\t', '\x14', '\x2', '\x2', '\x1428', '\x1429', '\a', '\x2AB', '\x2', 
		'\x2', '\x1429', '\x142A', '\a', '\x257', '\x2', '\x2', '\x142A', '\x1430', 
		'\a', '\x225', '\x2', '\x2', '\x142B', '\x142D', '\x5', '\x458', '\x22D', 
		'\x2', '\x142C', '\x142E', '\x5', '\x264', '\x133', '\x2', '\x142D', '\x142C', 
		'\x3', '\x2', '\x2', '\x2', '\x142D', '\x142E', '\x3', '\x2', '\x2', '\x2', 
		'\x142E', '\x1430', '\x3', '\x2', '\x2', '\x2', '\x142F', '\x1428', '\x3', 
		'\x2', '\x2', '\x2', '\x142F', '\x142B', '\x3', '\x2', '\x2', '\x2', '\x142F', 
		'\x1430', '\x3', '\x2', '\x2', '\x2', '\x1430', '\x263', '\x3', '\x2', 
		'\x2', '\x2', '\x1431', '\x1432', '\x6', '\x133', '{', '\x2', '\x1432', 
		'\x1433', '\a', '\x1FB', '\x2', '\x2', '\x1433', '\x1438', '\a', '\x8B', 
		'\x2', '\x2', '\x1434', '\x1435', '\a', '\x2AB', '\x2', '\x2', '\x1435', 
		'\x1436', '\a', '\x257', '\x2', '\x2', '\x1436', '\x1438', '\a', '\x225', 
		'\x2', '\x2', '\x1437', '\x1431', '\x3', '\x2', '\x2', '\x2', '\x1437', 
		'\x1434', '\x3', '\x2', '\x2', '\x2', '\x1438', '\x265', '\x3', '\x2', 
		'\x2', '\x2', '\x1439', '\x143A', '\x5', '\x43C', '\x21F', '\x2', '\x143A', 
		'\x143C', '\x5', '\x26C', '\x137', '\x2', '\x143B', '\x143D', '\x5', '\x258', 
		'\x12D', '\x2', '\x143C', '\x143B', '\x3', '\x2', '\x2', '\x2', '\x143C', 
		'\x143D', '\x3', '\x2', '\x2', '\x2', '\x143D', '\x1440', '\x3', '\x2', 
		'\x2', '\x2', '\x143E', '\x143F', '\a', '\x209', '\x2', '\x2', '\x143F', 
		'\x1441', '\a', '\xB1', '\x2', '\x2', '\x1440', '\x143E', '\x3', '\x2', 
		'\x2', '\x2', '\x1440', '\x1441', '\x3', '\x2', '\x2', '\x2', '\x1441', 
		'\x1444', '\x3', '\x2', '\x2', '\x2', '\x1442', '\x1444', '\x5', '\x268', 
		'\x135', '\x2', '\x1443', '\x1439', '\x3', '\x2', '\x2', '\x2', '\x1443', 
		'\x1442', '\x3', '\x2', '\x2', '\x2', '\x1444', '\x267', '\x3', '\x2', 
		'\x2', '\x2', '\x1445', '\x144A', '\x5', '\x26A', '\x136', '\x2', '\x1446', 
		'\x1447', '\a', '\x198', '\x2', '\x2', '\x1447', '\x1449', '\x5', '\x26A', 
		'\x136', '\x2', '\x1448', '\x1446', '\x3', '\x2', '\x2', '\x2', '\x1449', 
		'\x144C', '\x3', '\x2', '\x2', '\x2', '\x144A', '\x1448', '\x3', '\x2', 
		'\x2', '\x2', '\x144A', '\x144B', '\x3', '\x2', '\x2', '\x2', '\x144B', 
		'\x269', '\x3', '\x2', '\x2', '\x2', '\x144C', '\x144A', '\x3', '\x2', 
		'\x2', '\x2', '\x144D', '\x144F', '\x5', '\x43C', '\x21F', '\x2', '\x144E', 
		'\x1450', '\x5', '\x258', '\x12D', '\x2', '\x144F', '\x144E', '\x3', '\x2', 
		'\x2', '\x2', '\x144F', '\x1450', '\x3', '\x2', '\x2', '\x2', '\x1450', 
		'\x1453', '\x3', '\x2', '\x2', '\x2', '\x1451', '\x1452', '\a', '\x209', 
		'\x2', '\x2', '\x1452', '\x1454', '\a', '\xB1', '\x2', '\x2', '\x1453', 
		'\x1451', '\x3', '\x2', '\x2', '\x2', '\x1453', '\x1454', '\x3', '\x2', 
		'\x2', '\x2', '\x1454', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x1455', 
		'\x1456', '\a', '\"', '\x2', '\x2', '\x1456', '\x1457', '\a', '\x19B', 
		'\x2', '\x2', '\x1457', '\x1458', '\x5', '\x36', '\x1C', '\x2', '\x1458', 
		'\x1459', '\a', '\x19C', '\x2', '\x2', '\x1459', '\x26D', '\x3', '\x2', 
		'\x2', '\x2', '\x145A', '\x145F', '\x5', '\x270', '\x139', '\x2', '\x145B', 
		'\x145F', '\x5', '\x27A', '\x13E', '\x2', '\x145C', '\x145F', '\x5', '\x27C', 
		'\x13F', '\x2', '\x145D', '\x145F', '\x5', '\x280', '\x141', '\x2', '\x145E', 
		'\x145A', '\x3', '\x2', '\x2', '\x2', '\x145E', '\x145B', '\x3', '\x2', 
		'\x2', '\x2', '\x145E', '\x145C', '\x3', '\x2', '\x2', '\x2', '\x145E', 
		'\x145D', '\x3', '\x2', '\x2', '\x2', '\x145F', '\x26F', '\x3', '\x2', 
		'\x2', '\x2', '\x1460', '\x1461', '\a', '\x1CD', '\x2', '\x2', '\x1461', 
		'\x1462', '\a', '\x2E6', '\x2', '\x2', '\x1462', '\x1463', '\a', '\x201', 
		'\x2', '\x2', '\x1463', '\x1464', '\x5', '\x456', '\x22C', '\x2', '\x1464', 
		'\x1466', '\a', '\x164', '\x2', '\x2', '\x1465', '\x1467', '\x5', '\x494', 
		'\x24B', '\x2', '\x1466', '\x1465', '\x3', '\x2', '\x2', '\x2', '\x1466', 
		'\x1467', '\x3', '\x2', '\x2', '\x2', '\x1467', '\x1468', '\x3', '\x2', 
		'\x2', '\x2', '\x1468', '\x146A', '\t', 'K', '\x2', '\x2', '\x1469', '\x146B', 
		'\x5', '\x272', '\x13A', '\x2', '\x146A', '\x1469', '\x3', '\x2', '\x2', 
		'\x2', '\x146A', '\x146B', '\x3', '\x2', '\x2', '\x2', '\x146B', '\x146D', 
		'\x3', '\x2', '\x2', '\x2', '\x146C', '\x146E', '\x5', '\x276', '\x13C', 
		'\x2', '\x146D', '\x146C', '\x3', '\x2', '\x2', '\x2', '\x146D', '\x146E', 
		'\x3', '\x2', '\x2', '\x2', '\x146E', '\x1470', '\x3', '\x2', '\x2', '\x2', 
		'\x146F', '\x1471', '\x5', '\x278', '\x13D', '\x2', '\x1470', '\x146F', 
		'\x3', '\x2', '\x2', '\x2', '\x1470', '\x1471', '\x3', '\x2', '\x2', '\x2', 
		'\x1471', '\x271', '\x3', '\x2', '\x2', '\x2', '\x1472', '\x1474', '\a', 
		'\x2E8', '\x2', '\x2', '\x1473', '\x1475', '\x5', '\x494', '\x24B', '\x2', 
		'\x1474', '\x1473', '\x3', '\x2', '\x2', '\x2', '\x1474', '\x1475', '\x3', 
		'\x2', '\x2', '\x2', '\x1475', '\x1476', '\x3', '\x2', '\x2', '\x2', '\x1476', 
		'\x147D', '\x5', '\x274', '\x13B', '\x2', '\x1477', '\x1479', '\a', '\x198', 
		'\x2', '\x2', '\x1478', '\x1477', '\x3', '\x2', '\x2', '\x2', '\x1478', 
		'\x1479', '\x3', '\x2', '\x2', '\x2', '\x1479', '\x147A', '\x3', '\x2', 
		'\x2', '\x2', '\x147A', '\x147C', '\x5', '\x274', '\x13B', '\x2', '\x147B', 
		'\x1478', '\x3', '\x2', '\x2', '\x2', '\x147C', '\x147F', '\x3', '\x2', 
		'\x2', '\x2', '\x147D', '\x147B', '\x3', '\x2', '\x2', '\x2', '\x147D', 
		'\x147E', '\x3', '\x2', '\x2', '\x2', '\x147E', '\x273', '\x3', '\x2', 
		'\x2', '\x2', '\x147F', '\x147D', '\x3', '\x2', '\x2', '\x2', '\x1480', 
		'\x1483', '\a', '\x17E', '\x2', '\x2', '\x1481', '\x1482', '\a', '\x18A', 
		'\x2', '\x2', '\x1482', '\x1484', '\a', '\x17E', '\x2', '\x2', '\x1483', 
		'\x1481', '\x3', '\x2', '\x2', '\x2', '\x1483', '\x1484', '\x3', '\x2', 
		'\x2', '\x2', '\x1484', '\x275', '\x3', '\x2', '\x2', '\x2', '\x1485', 
		'\x1487', '\a', '\x2E5', '\x2', '\x2', '\x1486', '\x1488', '\x5', '\x494', 
		'\x24B', '\x2', '\x1487', '\x1486', '\x3', '\x2', '\x2', '\x2', '\x1487', 
		'\x1488', '\x3', '\x2', '\x2', '\x2', '\x1488', '\x1489', '\x3', '\x2', 
		'\x2', '\x2', '\x1489', '\x148A', '\a', '\x17E', '\x2', '\x2', '\x148A', 
		'\x277', '\x3', '\x2', '\x2', '\x2', '\x148B', '\x148C', '\t', 'L', '\x2', 
		'\x2', '\x148C', '\x279', '\x3', '\x2', '\x2', '\x2', '\x148D', '\x148E', 
		'\a', '\x1AE', '\x2', '\x2', '\x148E', '\x148F', '\a', '\x2E6', '\x2', 
		'\x2', '\x148F', '\x1490', '\a', '\x201', '\x2', '\x2', '\x1490', '\x1492', 
		'\x5', '\x450', '\x229', '\x2', '\x1491', '\x1493', '\x5', '\x272', '\x13A', 
		'\x2', '\x1492', '\x1491', '\x3', '\x2', '\x2', '\x2', '\x1492', '\x1493', 
		'\x3', '\x2', '\x2', '\x2', '\x1493', '\x1495', '\x3', '\x2', '\x2', '\x2', 
		'\x1494', '\x1496', '\x5', '\x276', '\x13C', '\x2', '\x1495', '\x1494', 
		'\x3', '\x2', '\x2', '\x2', '\x1495', '\x1496', '\x3', '\x2', '\x2', '\x2', 
		'\x1496', '\x1498', '\x3', '\x2', '\x2', '\x2', '\x1497', '\x1499', '\x5', 
		'\x278', '\x13D', '\x2', '\x1498', '\x1497', '\x3', '\x2', '\x2', '\x2', 
		'\x1498', '\x1499', '\x3', '\x2', '\x2', '\x2', '\x1499', '\x149B', '\x3', 
		'\x2', '\x2', '\x2', '\x149A', '\x149C', '\a', '\x1F9', '\x2', '\x2', 
		'\x149B', '\x149A', '\x3', '\x2', '\x2', '\x2', '\x149B', '\x149C', '\x3', 
		'\x2', '\x2', '\x2', '\x149C', '\x27B', '\x3', '\x2', '\x2', '\x2', '\x149D', 
		'\x149E', '\a', '\x26C', '\x2', '\x2', '\x149E', '\x149F', '\a', '\x2E6', 
		'\x2', '\x2', '\x149F', '\x14A0', '\a', '\x201', '\x2', '\x2', '\x14A0', 
		'\x14A3', '\x5', '\x456', '\x22C', '\x2', '\x14A1', '\x14A2', '\a', '\x1FB', 
		'\x2', '\x2', '\x14A2', '\x14A4', '\x5', '\x27E', '\x140', '\x2', '\x14A3', 
		'\x14A1', '\x3', '\x2', '\x2', '\x2', '\x14A3', '\x14A4', '\x3', '\x2', 
		'\x2', '\x2', '\x14A4', '\x27D', '\x3', '\x2', '\x2', '\x2', '\x14A5', 
		'\x14AC', '\x5', '\x464', '\x233', '\x2', '\x14A6', '\x14A8', '\a', '\x198', 
		'\x2', '\x2', '\x14A7', '\x14A6', '\x3', '\x2', '\x2', '\x2', '\x14A7', 
		'\x14A8', '\x3', '\x2', '\x2', '\x2', '\x14A8', '\x14A9', '\x3', '\x2', 
		'\x2', '\x2', '\x14A9', '\x14AB', '\x5', '\x464', '\x233', '\x2', '\x14AA', 
		'\x14A7', '\x3', '\x2', '\x2', '\x2', '\x14AB', '\x14AE', '\x3', '\x2', 
		'\x2', '\x2', '\x14AC', '\x14AA', '\x3', '\x2', '\x2', '\x2', '\x14AC', 
		'\x14AD', '\x3', '\x2', '\x2', '\x2', '\x14AD', '\x27F', '\x3', '\x2', 
		'\x2', '\x2', '\x14AE', '\x14AC', '\x3', '\x2', '\x2', '\x2', '\x14AF', 
		'\x14B0', '\a', '\x1E9', '\x2', '\x2', '\x14B0', '\x14B1', '\a', '\x2E6', 
		'\x2', '\x2', '\x14B1', '\x14B2', '\a', '\x201', '\x2', '\x2', '\x14B2', 
		'\x14B4', '\x5', '\x450', '\x229', '\x2', '\x14B3', '\x14B5', '\a', '\x1F9', 
		'\x2', '\x2', '\x14B4', '\x14B3', '\x3', '\x2', '\x2', '\x2', '\x14B4', 
		'\x14B5', '\x3', '\x2', '\x2', '\x2', '\x14B5', '\x281', '\x3', '\x2', 
		'\x2', '\x2', '\x14B6', '\x14BD', '\x5', '\x284', '\x143', '\x2', '\x14B7', 
		'\x14BD', '\x5', '\x286', '\x144', '\x2', '\x14B8', '\x14BD', '\x5', '\x28A', 
		'\x146', '\x2', '\x14B9', '\x14BD', '\x5', '\x28C', '\x147', '\x2', '\x14BA', 
		'\x14BB', '\x6', '\x142', '|', '\x2', '\x14BB', '\x14BD', '\x5', '\x28E', 
		'\x148', '\x2', '\x14BC', '\x14B6', '\x3', '\x2', '\x2', '\x2', '\x14BC', 
		'\x14B7', '\x3', '\x2', '\x2', '\x2', '\x14BC', '\x14B8', '\x3', '\x2', 
		'\x2', '\x2', '\x14BC', '\x14B9', '\x3', '\x2', '\x2', '\x2', '\x14BC', 
		'\x14BA', '\x3', '\x2', '\x2', '\x2', '\x14BD', '\x283', '\x3', '\x2', 
		'\x2', '\x2', '\x14BE', '\x14BF', '\t', 'M', '\x2', '\x2', '\x14BF', '\x14C2', 
		'\x5', '\x43C', '\x21F', '\x2', '\x14C0', '\x14C3', '\x5', '\x472', '\x23A', 
		'\x2', '\x14C1', '\x14C3', '\x5', '\x404', '\x203', '\x2', '\x14C2', '\x14C0', 
		'\x3', '\x2', '\x2', '\x2', '\x14C2', '\x14C1', '\x3', '\x2', '\x2', '\x2', 
		'\x14C2', '\x14C3', '\x3', '\x2', '\x2', '\x2', '\x14C3', '\x285', '\x3', 
		'\x2', '\x2', '\x2', '\x14C4', '\x14CD', '\t', 'M', '\x2', '\x2', '\x14C5', 
		'\x14C6', '\x6', '\x144', '}', '\x2', '\x14C6', '\x14CE', '\a', '\x8C', 
		'\x2', '\x2', '\x14C7', '\x14C8', '\x6', '\x144', '~', '\x2', '\x14C8', 
		'\x14CE', '\a', '\xFC', '\x2', '\x2', '\x14C9', '\x14CA', '\x6', '\x144', 
		'\x7F', '\x2', '\x14CA', '\x14CB', '\a', '\x16', '\x2', '\x2', '\x14CB', 
		'\x14CC', '\a', '\x181', '\x2', '\x2', '\x14CC', '\x14CE', '\x5', '\x48A', 
		'\x246', '\x2', '\x14CD', '\x14C5', '\x3', '\x2', '\x2', '\x2', '\x14CD', 
		'\x14C7', '\x3', '\x2', '\x2', '\x2', '\x14CD', '\x14C9', '\x3', '\x2', 
		'\x2', '\x2', '\x14CD', '\x14CE', '\x3', '\x2', '\x2', '\x2', '\x14CE', 
		'\x14CF', '\x3', '\x2', '\x2', '\x2', '\x14CF', '\x14D0', '\x5', '\x288', 
		'\x145', '\x2', '\x14D0', '\x287', '\x3', '\x2', '\x2', '\x2', '\x14D1', 
		'\x14DE', '\x5', '\x10C', '\x87', '\x2', '\x14D2', '\x14D7', '\x6', '\x145', 
		'\x80', '\x2', '\x14D3', '\x14D8', '\x5', '\xE0', 'q', '\x2', '\x14D4', 
		'\x14D8', '\x5', '\xEC', 'w', '\x2', '\x14D5', '\x14D8', '\x5', '\x10A', 
		'\x86', '\x2', '\x14D6', '\x14D8', '\x5', '\x198', '\xCD', '\x2', '\x14D7', 
		'\x14D3', '\x3', '\x2', '\x2', '\x2', '\x14D7', '\x14D4', '\x3', '\x2', 
		'\x2', '\x2', '\x14D7', '\x14D5', '\x3', '\x2', '\x2', '\x2', '\x14D7', 
		'\x14D6', '\x3', '\x2', '\x2', '\x2', '\x14D8', '\x14DE', '\x3', '\x2', 
		'\x2', '\x2', '\x14D9', '\x14DA', '\x6', '\x145', '\x81', '\x2', '\x14DA', 
		'\x14DB', '\a', '\x1FB', '\x2', '\x2', '\x14DB', '\x14DC', '\a', '\x64', 
		'\x2', '\x2', '\x14DC', '\x14DE', '\x5', '\x464', '\x233', '\x2', '\x14DD', 
		'\x14D1', '\x3', '\x2', '\x2', '\x2', '\x14DD', '\x14D2', '\x3', '\x2', 
		'\x2', '\x2', '\x14DD', '\x14D9', '\x3', '\x2', '\x2', '\x2', '\x14DE', 
		'\x289', '\x3', '\x2', '\x2', '\x2', '\x14DF', '\x14E0', '\a', '\x19', 
		'\x2', '\x2', '\x14E0', '\x14E1', '\x5', '\x48A', '\x246', '\x2', '\x14E1', 
		'\x28B', '\x3', '\x2', '\x2', '\x2', '\x14E2', '\x14E3', '\a', '\x29A', 
		'\x2', '\x2', '\x14E3', '\x14E4', '\x5', '\x456', '\x22C', '\x2', '\x14E4', 
		'\x28D', '\x3', '\x2', '\x2', '\x2', '\x14E5', '\x14E6', '\a', '\x2EB', 
		'\x2', '\x2', '\x14E6', '\x28F', '\x3', '\x2', '\x2', '\x2', '\x14E7', 
		'\x14E8', '\b', '\x149', '\x1', '\x2', '\x14E8', '\x14EE', '\x5', '\x292', 
		'\x14A', '\x2', '\x14E9', '\x14EB', '\a', '\x216', '\x2', '\x2', '\x14EA', 
		'\x14EC', '\x5', '\x2E4', '\x173', '\x2', '\x14EB', '\x14EA', '\x3', '\x2', 
		'\x2', '\x2', '\x14EB', '\x14EC', '\x3', '\x2', '\x2', '\x2', '\x14EC', 
		'\x14ED', '\x3', '\x2', '\x2', '\x2', '\x14ED', '\x14EF', '\t', 'N', '\x2', 
		'\x2', '\x14EE', '\x14E9', '\x3', '\x2', '\x2', '\x2', '\x14EE', '\x14EF', 
		'\x3', '\x2', '\x2', '\x2', '\x14EF', '\x14F3', '\x3', '\x2', '\x2', '\x2', 
		'\x14F0', '\x14F1', '\a', '\x23E', '\x2', '\x2', '\x14F1', '\x14F3', '\x5', 
		'\x290', '\x149', '\x6', '\x14F2', '\x14E7', '\x3', '\x2', '\x2', '\x2', 
		'\x14F2', '\x14F0', '\x3', '\x2', '\x2', '\x2', '\x14F3', '\x14FF', '\x3', 
		'\x2', '\x2', '\x2', '\x14F4', '\x14F5', '\f', '\x5', '\x2', '\x2', '\x14F5', 
		'\x14F6', '\t', 'O', '\x2', '\x2', '\x14F6', '\x14FE', '\x5', '\x290', 
		'\x149', '\x6', '\x14F7', '\x14F8', '\f', '\x4', '\x2', '\x2', '\x14F8', 
		'\x14F9', '\a', '\x2B0', '\x2', '\x2', '\x14F9', '\x14FE', '\x5', '\x290', 
		'\x149', '\x5', '\x14FA', '\x14FB', '\f', '\x3', '\x2', '\x2', '\x14FB', 
		'\x14FC', '\t', 'P', '\x2', '\x2', '\x14FC', '\x14FE', '\x5', '\x290', 
		'\x149', '\x4', '\x14FD', '\x14F4', '\x3', '\x2', '\x2', '\x2', '\x14FD', 
		'\x14F7', '\x3', '\x2', '\x2', '\x2', '\x14FD', '\x14FA', '\x3', '\x2', 
		'\x2', '\x2', '\x14FE', '\x1501', '\x3', '\x2', '\x2', '\x2', '\x14FF', 
		'\x14FD', '\x3', '\x2', '\x2', '\x2', '\x14FF', '\x1500', '\x3', '\x2', 
		'\x2', '\x2', '\x1500', '\x291', '\x3', '\x2', '\x2', '\x2', '\x1501', 
		'\x14FF', '\x3', '\x2', '\x2', '\x2', '\x1502', '\x1503', '\b', '\x14A', 
		'\x1', '\x2', '\x1503', '\x1504', '\x5', '\x296', '\x14C', '\x2', '\x1504', 
		'\x1516', '\x3', '\x2', '\x2', '\x2', '\x1505', '\x1506', '\f', '\x5', 
		'\x2', '\x2', '\x1506', '\x1508', '\a', '\x216', '\x2', '\x2', '\x1507', 
		'\x1509', '\x5', '\x2E4', '\x173', '\x2', '\x1508', '\x1507', '\x3', '\x2', 
		'\x2', '\x2', '\x1508', '\x1509', '\x3', '\x2', '\x2', '\x2', '\x1509', 
		'\x150A', '\x3', '\x2', '\x2', '\x2', '\x150A', '\x1515', '\a', '\x241', 
		'\x2', '\x2', '\x150B', '\x150C', '\f', '\x4', '\x2', '\x2', '\x150C', 
		'\x150D', '\x5', '\x294', '\x14B', '\x2', '\x150D', '\x150E', '\x5', '\x296', 
		'\x14C', '\x2', '\x150E', '\x1515', '\x3', '\x2', '\x2', '\x2', '\x150F', 
		'\x1510', '\f', '\x3', '\x2', '\x2', '\x1510', '\x1511', '\x5', '\x294', 
		'\x14B', '\x2', '\x1511', '\x1512', '\t', 'Q', '\x2', '\x2', '\x1512', 
		'\x1513', '\x5', '\x118', '\x8D', '\x2', '\x1513', '\x1515', '\x3', '\x2', 
		'\x2', '\x2', '\x1514', '\x1505', '\x3', '\x2', '\x2', '\x2', '\x1514', 
		'\x150B', '\x3', '\x2', '\x2', '\x2', '\x1514', '\x150F', '\x3', '\x2', 
		'\x2', '\x2', '\x1515', '\x1518', '\x3', '\x2', '\x2', '\x2', '\x1516', 
		'\x1514', '\x3', '\x2', '\x2', '\x2', '\x1516', '\x1517', '\x3', '\x2', 
		'\x2', '\x2', '\x1517', '\x293', '\x3', '\x2', '\x2', '\x2', '\x1518', 
		'\x1516', '\x3', '\x2', '\x2', '\x2', '\x1519', '\x151A', '\t', 'R', '\x2', 
		'\x2', '\x151A', '\x295', '\x3', '\x2', '\x2', '\x2', '\x151B', '\x1529', 
		'\x5', '\x29A', '\x14E', '\x2', '\x151C', '\x151E', '\x5', '\x2E4', '\x173', 
		'\x2', '\x151D', '\x151C', '\x3', '\x2', '\x2', '\x2', '\x151D', '\x151E', 
		'\x3', '\x2', '\x2', '\x2', '\x151E', '\x151F', '\x3', '\x2', '\x2', '\x2', 
		'\x151F', '\x152A', '\x5', '\x298', '\x14D', '\x2', '\x1520', '\x1521', 
		'\x6', '\x14C', '\x88', '\x2', '\x1521', '\x1523', '\a', '\x2FE', '\x2', 
		'\x2', '\x1522', '\x1524', '\a', '\x2BD', '\x2', '\x2', '\x1523', '\x1522', 
		'\x3', '\x2', '\x2', '\x2', '\x1523', '\x1524', '\x3', '\x2', '\x2', '\x2', 
		'\x1524', '\x1525', '\x3', '\x2', '\x2', '\x2', '\x1525', '\x152A', '\x5', 
		'\x2F0', '\x179', '\x2', '\x1526', '\x1527', '\a', '\x13B', '\x2', '\x2', 
		'\x1527', '\x1528', '\a', '\x21F', '\x2', '\x2', '\x1528', '\x152A', '\x5', 
		'\x29A', '\x14E', '\x2', '\x1529', '\x151D', '\x3', '\x2', '\x2', '\x2', 
		'\x1529', '\x1520', '\x3', '\x2', '\x2', '\x2', '\x1529', '\x1526', '\x3', 
		'\x2', '\x2', '\x2', '\x1529', '\x152A', '\x3', '\x2', '\x2', '\x2', '\x152A', 
		'\x297', '\x3', '\x2', '\x2', '\x2', '\x152B', '\x1531', '\a', '\x213', 
		'\x2', '\x2', '\x152C', '\x1532', '\x5', '\x118', '\x8D', '\x2', '\x152D', 
		'\x152E', '\a', '\x19B', '\x2', '\x2', '\x152E', '\x152F', '\x5', '\x2E0', 
		'\x171', '\x2', '\x152F', '\x1530', '\a', '\x19C', '\x2', '\x2', '\x1530', 
		'\x1532', '\x3', '\x2', '\x2', '\x2', '\x1531', '\x152C', '\x3', '\x2', 
		'\x2', '\x2', '\x1531', '\x152D', '\x3', '\x2', '\x2', '\x2', '\x1532', 
		'\x1541', '\x3', '\x2', '\x2', '\x2', '\x1533', '\x1534', '\a', '\x1B5', 
		'\x2', '\x2', '\x1534', '\x1535', '\x5', '\x29A', '\x14E', '\x2', '\x1535', 
		'\x1536', '\a', '\x1B0', '\x2', '\x2', '\x1536', '\x1537', '\x5', '\x296', 
		'\x14C', '\x2', '\x1537', '\x1541', '\x3', '\x2', '\x2', '\x2', '\x1538', 
		'\x1539', '\a', '\x21F', '\x2', '\x2', '\x1539', '\x153C', '\x5', '\x29C', 
		'\x14F', '\x2', '\x153A', '\x153B', '\a', '\x86', '\x2', '\x2', '\x153B', 
		'\x153D', '\x5', '\x29C', '\x14F', '\x2', '\x153C', '\x153A', '\x3', '\x2', 
		'\x2', '\x2', '\x153C', '\x153D', '\x3', '\x2', '\x2', '\x2', '\x153D', 
		'\x1541', '\x3', '\x2', '\x2', '\x2', '\x153E', '\x153F', '\a', '\x25B', 
		'\x2', '\x2', '\x153F', '\x1541', '\x5', '\x29A', '\x14E', '\x2', '\x1540', 
		'\x152B', '\x3', '\x2', '\x2', '\x2', '\x1540', '\x1533', '\x3', '\x2', 
		'\x2', '\x2', '\x1540', '\x1538', '\x3', '\x2', '\x2', '\x2', '\x1540', 
		'\x153E', '\x3', '\x2', '\x2', '\x2', '\x1541', '\x299', '\x3', '\x2', 
		'\x2', '\x2', '\x1542', '\x1543', '\b', '\x14E', '\x1', '\x2', '\x1543', 
		'\x1544', '\x5', '\x29C', '\x14F', '\x2', '\x1544', '\x155F', '\x3', '\x2', 
		'\x2', '\x2', '\x1545', '\x1546', '\f', '\t', '\x2', '\x2', '\x1546', 
		'\x1547', '\a', '\x194', '\x2', '\x2', '\x1547', '\x155E', '\x5', '\x29A', 
		'\x14E', '\n', '\x1548', '\x1549', '\f', '\b', '\x2', '\x2', '\x1549', 
		'\x154A', '\t', 'S', '\x2', '\x2', '\x154A', '\x155E', '\x5', '\x29A', 
		'\x14E', '\t', '\x154B', '\x154C', '\f', '\a', '\x2', '\x2', '\x154C', 
		'\x154D', '\t', 'T', '\x2', '\x2', '\x154D', '\x155E', '\x5', '\x29A', 
		'\x14E', '\b', '\x154E', '\x154F', '\f', '\x5', '\x2', '\x2', '\x154F', 
		'\x1550', '\t', 'U', '\x2', '\x2', '\x1550', '\x155E', '\x5', '\x29A', 
		'\x14E', '\x6', '\x1551', '\x1552', '\f', '\x4', '\x2', '\x2', '\x1552', 
		'\x1553', '\a', '\x193', '\x2', '\x2', '\x1553', '\x155E', '\x5', '\x29A', 
		'\x14E', '\x5', '\x1554', '\x1555', '\f', '\x3', '\x2', '\x2', '\x1555', 
		'\x1556', '\a', '\x196', '\x2', '\x2', '\x1556', '\x155E', '\x5', '\x29A', 
		'\x14E', '\x4', '\x1557', '\x1558', '\f', '\x6', '\x2', '\x2', '\x1558', 
		'\x1559', '\t', 'T', '\x2', '\x2', '\x1559', '\x155A', '\a', '\x210', 
		'\x2', '\x2', '\x155A', '\x155B', '\x5', '\x290', '\x149', '\x2', '\x155B', 
		'\x155C', '\x5', '\x2E8', '\x175', '\x2', '\x155C', '\x155E', '\x3', '\x2', 
		'\x2', '\x2', '\x155D', '\x1545', '\x3', '\x2', '\x2', '\x2', '\x155D', 
		'\x1548', '\x3', '\x2', '\x2', '\x2', '\x155D', '\x154B', '\x3', '\x2', 
		'\x2', '\x2', '\x155D', '\x154E', '\x3', '\x2', '\x2', '\x2', '\x155D', 
		'\x1551', '\x3', '\x2', '\x2', '\x2', '\x155D', '\x1554', '\x3', '\x2', 
		'\x2', '\x2', '\x155D', '\x1557', '\x3', '\x2', '\x2', '\x2', '\x155E', 
		'\x1561', '\x3', '\x2', '\x2', '\x2', '\x155F', '\x155D', '\x3', '\x2', 
		'\x2', '\x2', '\x155F', '\x1560', '\x3', '\x2', '\x2', '\x2', '\x1560', 
		'\x29B', '\x3', '\x2', '\x2', '\x2', '\x1561', '\x155F', '\x3', '\x2', 
		'\x2', '\x2', '\x1562', '\x1563', '\b', '\x14F', '\x1', '\x2', '\x1563', 
		'\x15CB', '\x5', '\x2D0', '\x169', '\x2', '\x1564', '\x1566', '\x5', '\x404', 
		'\x203', '\x2', '\x1565', '\x1567', '\x5', '\x2A0', '\x151', '\x2', '\x1566', 
		'\x1565', '\x3', '\x2', '\x2', '\x2', '\x1566', '\x1567', '\x3', '\x2', 
		'\x2', '\x2', '\x1567', '\x15CB', '\x3', '\x2', '\x2', '\x2', '\x1568', 
		'\x15CB', '\x5', '\x2B8', '\x15D', '\x2', '\x1569', '\x15CB', '\x5', '\x2CA', 
		'\x166', '\x2', '\x156A', '\x15CB', '\x5', '\x46A', '\x236', '\x2', '\x156B', 
		'\x15CB', '\a', '\x1A6', '\x2', '\x2', '\x156C', '\x15CB', '\x5', '\x2A2', 
		'\x152', '\x2', '\x156D', '\x156E', '\x6', '\x14F', '\x90', '\x2', '\x156E', 
		'\x15CB', '\x5', '\x2A4', '\x153', '\x2', '\x156F', '\x1570', '\x6', '\x14F', 
		'\x91', '\x2', '\x1570', '\x15CB', '\x5', '\x2A6', '\x154', '\x2', '\x1571', 
		'\x1572', '\t', 'V', '\x2', '\x2', '\x1572', '\x15CB', '\x5', '\x29C', 
		'\x14F', '\x10', '\x1573', '\x1574', '\x5', '\x2E6', '\x174', '\x2', '\x1574', 
		'\x1575', '\x5', '\x29C', '\x14F', '\xF', '\x1575', '\x15CB', '\x3', '\x2', 
		'\x2', '\x2', '\x1576', '\x1578', '\a', '\x12F', '\x2', '\x2', '\x1577', 
		'\x1576', '\x3', '\x2', '\x2', '\x2', '\x1577', '\x1578', '\x3', '\x2', 
		'\x2', '\x2', '\x1578', '\x1579', '\x3', '\x2', '\x2', '\x2', '\x1579', 
		'\x157A', '\a', '\x19B', '\x2', '\x2', '\x157A', '\x157B', '\x5', '\x2E0', 
		'\x171', '\x2', '\x157B', '\x157C', '\a', '\x19C', '\x2', '\x2', '\x157C', 
		'\x15CB', '\x3', '\x2', '\x2', '\x2', '\x157D', '\x157F', '\a', '\x1F2', 
		'\x2', '\x2', '\x157E', '\x157D', '\x3', '\x2', '\x2', '\x2', '\x157E', 
		'\x157F', '\x3', '\x2', '\x2', '\x2', '\x157F', '\x1580', '\x3', '\x2', 
		'\x2', '\x2', '\x1580', '\x15CB', '\x5', '\x118', '\x8D', '\x2', '\x1581', 
		'\x1582', '\a', '\x19D', '\x2', '\x2', '\x1582', '\x1583', '\x5', '\x456', 
		'\x22C', '\x2', '\x1583', '\x1584', '\x5', '\x290', '\x149', '\x2', '\x1584', 
		'\x1585', '\a', '\x19E', '\x2', '\x2', '\x1585', '\x15CB', '\x3', '\x2', 
		'\x2', '\x2', '\x1586', '\x1587', '\a', '\x22E', '\x2', '\x2', '\x1587', 
		'\x1588', '\x5', '\x2B2', '\x15A', '\x2', '\x1588', '\x1589', '\a', '>', 
		'\x2', '\x2', '\x1589', '\x158A', '\a', '\x19B', '\x2', '\x2', '\x158A', 
		'\x158C', '\x5', '\x29A', '\x14E', '\x2', '\x158B', '\x158D', '\x5', '\x2B6', 
		'\x15C', '\x2', '\x158C', '\x158B', '\x3', '\x2', '\x2', '\x2', '\x158C', 
		'\x158D', '\x3', '\x2', '\x2', '\x2', '\x158D', '\x158E', '\x3', '\x2', 
		'\x2', '\x2', '\x158E', '\x158F', '\a', '\x19C', '\x2', '\x2', '\x158F', 
		'\x15CB', '\x3', '\x2', '\x2', '\x2', '\x1590', '\x1591', '\a', '\x1B7', 
		'\x2', '\x2', '\x1591', '\x15CB', '\x5', '\x29C', '\x14F', '\n', '\x1592', 
		'\x1593', '\a', '\x1C2', '\x2', '\x2', '\x1593', '\x1594', '\a', '\x19B', 
		'\x2', '\x2', '\x1594', '\x1595', '\x5', '\x290', '\x149', '\x2', '\x1595', 
		'\x1596', '\a', '\x1B1', '\x2', '\x2', '\x1596', '\x1598', '\x5', '\x2DE', 
		'\x170', '\x2', '\x1597', '\x1599', '\x5', '\x29E', '\x150', '\x2', '\x1598', 
		'\x1597', '\x3', '\x2', '\x2', '\x2', '\x1598', '\x1599', '\x3', '\x2', 
		'\x2', '\x2', '\x1599', '\x159A', '\x3', '\x2', '\x2', '\x2', '\x159A', 
		'\x159B', '\a', '\x19C', '\x2', '\x2', '\x159B', '\x15CB', '\x3', '\x2', 
		'\x2', '\x2', '\x159C', '\x159E', '\a', '\x1C1', '\x2', '\x2', '\x159D', 
		'\x159F', '\x5', '\x290', '\x149', '\x2', '\x159E', '\x159D', '\x3', '\x2', 
		'\x2', '\x2', '\x159E', '\x159F', '\x3', '\x2', '\x2', '\x2', '\x159F', 
		'\x15A3', '\x3', '\x2', '\x2', '\x2', '\x15A0', '\x15A1', '\x5', '\x2D8', 
		'\x16D', '\x2', '\x15A1', '\x15A2', '\x5', '\x2DA', '\x16E', '\x2', '\x15A2', 
		'\x15A4', '\x3', '\x2', '\x2', '\x2', '\x15A3', '\x15A0', '\x3', '\x2', 
		'\x2', '\x2', '\x15A4', '\x15A5', '\x3', '\x2', '\x2', '\x2', '\x15A5', 
		'\x15A3', '\x3', '\x2', '\x2', '\x2', '\x15A5', '\x15A6', '\x3', '\x2', 
		'\x2', '\x2', '\x15A6', '\x15A8', '\x3', '\x2', '\x2', '\x2', '\x15A7', 
		'\x15A9', '\x5', '\x2DC', '\x16F', '\x2', '\x15A8', '\x15A7', '\x3', '\x2', 
		'\x2', '\x2', '\x15A8', '\x15A9', '\x3', '\x2', '\x2', '\x2', '\x15A9', 
		'\x15AA', '\x3', '\x2', '\x2', '\x2', '\x15AA', '\x15AB', '\a', '\x12', 
		'\x2', '\x2', '\x15AB', '\x15CB', '\x3', '\x2', '\x2', '\x2', '\x15AC', 
		'\x15AD', '\a', '\x1CB', '\x2', '\x2', '\x15AD', '\x15AE', '\a', '\x19B', 
		'\x2', '\x2', '\x15AE', '\x15AF', '\x5', '\x290', '\x149', '\x2', '\x15AF', 
		'\x15B0', '\a', '\x198', '\x2', '\x2', '\x15B0', '\x15B1', '\x5', '\x2DE', 
		'\x170', '\x2', '\x15B1', '\x15B2', '\a', '\x19C', '\x2', '\x2', '\x15B2', 
		'\x15CB', '\x3', '\x2', '\x2', '\x2', '\x15B3', '\x15B4', '\a', '\x1CB', 
		'\x2', '\x2', '\x15B4', '\x15B5', '\a', '\x19B', '\x2', '\x2', '\x15B5', 
		'\x15B6', '\x5', '\x290', '\x149', '\x2', '\x15B6', '\x15B7', '\a', '\x29B', 
		'\x2', '\x2', '\x15B7', '\x15B8', '\x5', '\x398', '\x1CD', '\x2', '\x15B8', 
		'\x15B9', '\a', '\x19C', '\x2', '\x2', '\x15B9', '\x15CB', '\x3', '\x2', 
		'\x2', '\x2', '\x15BA', '\x15BB', '\a', '\x1E0', '\x2', '\x2', '\x15BB', 
		'\x15BC', '\a', '\x19B', '\x2', '\x2', '\x15BC', '\x15BD', '\x5', '\x45E', 
		'\x230', '\x2', '\x15BD', '\x15BE', '\a', '\x19C', '\x2', '\x2', '\x15BE', 
		'\x15CB', '\x3', '\x2', '\x2', '\x2', '\x15BF', '\x15C0', '\a', '\x2A0', 
		'\x2', '\x2', '\x15C0', '\x15C1', '\a', '\x19B', '\x2', '\x2', '\x15C1', 
		'\x15C2', '\x5', '\x45E', '\x230', '\x2', '\x15C2', '\x15C3', '\a', '\x19C', 
		'\x2', '\x2', '\x15C3', '\x15CB', '\x3', '\x2', '\x2', '\x2', '\x15C4', 
		'\x15C5', '\a', '\x210', '\x2', '\x2', '\x15C5', '\x15C6', '\x5', '\x290', 
		'\x149', '\x2', '\x15C6', '\x15C7', '\x5', '\x2E8', '\x175', '\x2', '\x15C7', 
		'\x15C8', '\a', '\x189', '\x2', '\x2', '\x15C8', '\x15C9', '\x5', '\x290', 
		'\x149', '\x2', '\x15C9', '\x15CB', '\x3', '\x2', '\x2', '\x2', '\x15CA', 
		'\x1562', '\x3', '\x2', '\x2', '\x2', '\x15CA', '\x1564', '\x3', '\x2', 
		'\x2', '\x2', '\x15CA', '\x1568', '\x3', '\x2', '\x2', '\x2', '\x15CA', 
		'\x1569', '\x3', '\x2', '\x2', '\x2', '\x15CA', '\x156A', '\x3', '\x2', 
		'\x2', '\x2', '\x15CA', '\x156B', '\x3', '\x2', '\x2', '\x2', '\x15CA', 
		'\x156C', '\x3', '\x2', '\x2', '\x2', '\x15CA', '\x156D', '\x3', '\x2', 
		'\x2', '\x2', '\x15CA', '\x156F', '\x3', '\x2', '\x2', '\x2', '\x15CA', 
		'\x1571', '\x3', '\x2', '\x2', '\x2', '\x15CA', '\x1573', '\x3', '\x2', 
		'\x2', '\x2', '\x15CA', '\x1577', '\x3', '\x2', '\x2', '\x2', '\x15CA', 
		'\x157E', '\x3', '\x2', '\x2', '\x2', '\x15CA', '\x1581', '\x3', '\x2', 
		'\x2', '\x2', '\x15CA', '\x1586', '\x3', '\x2', '\x2', '\x2', '\x15CA', 
		'\x1590', '\x3', '\x2', '\x2', '\x2', '\x15CA', '\x1592', '\x3', '\x2', 
		'\x2', '\x2', '\x15CA', '\x159C', '\x3', '\x2', '\x2', '\x2', '\x15CA', 
		'\x15AC', '\x3', '\x2', '\x2', '\x2', '\x15CA', '\x15B3', '\x3', '\x2', 
		'\x2', '\x2', '\x15CA', '\x15BA', '\x3', '\x2', '\x2', '\x2', '\x15CA', 
		'\x15BF', '\x3', '\x2', '\x2', '\x2', '\x15CA', '\x15C4', '\x3', '\x2', 
		'\x2', '\x2', '\x15CB', '\x15D4', '\x3', '\x2', '\x2', '\x2', '\x15CC', 
		'\x15CD', '\f', '\x11', '\x2', '\x2', '\x15CD', '\x15CE', '\a', '\x17D', 
		'\x2', '\x2', '\x15CE', '\x15D3', '\x5', '\x29C', '\x14F', '\x12', '\x15CF', 
		'\x15D0', '\f', '\x17', '\x2', '\x2', '\x15D0', '\x15D1', '\a', '\x1C6', 
		'\x2', '\x2', '\x15D1', '\x15D3', '\x5', '\x48A', '\x246', '\x2', '\x15D2', 
		'\x15CC', '\x3', '\x2', '\x2', '\x2', '\x15D2', '\x15CF', '\x3', '\x2', 
		'\x2', '\x2', '\x15D3', '\x15D6', '\x3', '\x2', '\x2', '\x2', '\x15D4', 
		'\x15D2', '\x3', '\x2', '\x2', '\x2', '\x15D4', '\x15D5', '\x3', '\x2', 
		'\x2', '\x2', '\x15D5', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x15D6', 
		'\x15D4', '\x3', '\x2', '\x2', '\x2', '\x15D7', '\x15D8', '\x6', '\x150', 
		'\x94', '\x2', '\x15D8', '\x15D9', '\a', '\x2FC', '\x2', '\x2', '\x15D9', 
		'\x29F', '\x3', '\x2', '\x2', '\x2', '\x15DA', '\x15DB', '\x6', '\x151', 
		'\x95', '\x2', '\x15DB', '\x15DC', '\a', '\x1A0', '\x2', '\x2', '\x15DC', 
		'\x15E1', '\x5', '\x470', '\x239', '\x2', '\x15DD', '\x15DE', '\x6', '\x151', 
		'\x96', '\x2', '\x15DE', '\x15DF', '\a', '\x1A1', '\x2', '\x2', '\x15DF', 
		'\x15E1', '\x5', '\x470', '\x239', '\x2', '\x15E0', '\x15DA', '\x3', '\x2', 
		'\x2', '\x2', '\x15E0', '\x15DD', '\x3', '\x2', '\x2', '\x2', '\x15E1', 
		'\x2A1', '\x3', '\x2', '\x2', '\x2', '\x15E2', '\x15E3', '\a', 'H', '\x2', 
		'\x2', '\x15E3', '\x15E5', '\a', '\x19B', '\x2', '\x2', '\x15E4', '\x15E6', 
		'\a', '\x1E6', '\x2', '\x2', '\x15E5', '\x15E4', '\x3', '\x2', '\x2', 
		'\x2', '\x15E5', '\x15E6', '\x3', '\x2', '\x2', '\x2', '\x15E6', '\x15E7', 
		'\x3', '\x2', '\x2', '\x2', '\x15E7', '\x15E8', '\x5', '\x2B0', '\x159', 
		'\x2', '\x15E8', '\x15EB', '\a', '\x19C', '\x2', '\x2', '\x15E9', '\x15EA', 
		'\x6', '\x152', '\x97', '\x2', '\x15EA', '\x15EC', '\x5', '\x2A8', '\x155', 
		'\x2', '\x15EB', '\x15E9', '\x3', '\x2', '\x2', '\x2', '\x15EB', '\x15EC', 
		'\x3', '\x2', '\x2', '\x2', '\x15EC', '\x1666', '\x3', '\x2', '\x2', '\x2', 
		'\x15ED', '\x15EE', '\t', 'W', '\x2', '\x2', '\x15EE', '\x15EF', '\a', 
		'\x19B', '\x2', '\x2', '\x15EF', '\x15F0', '\x5', '\x2B0', '\x159', '\x2', 
		'\x15F0', '\x15F3', '\a', '\x19C', '\x2', '\x2', '\x15F1', '\x15F2', '\x6', 
		'\x152', '\x98', '\x2', '\x15F2', '\x15F4', '\x5', '\x2A8', '\x155', '\x2', 
		'\x15F3', '\x15F1', '\x3', '\x2', '\x2', '\x2', '\x15F3', '\x15F4', '\x3', 
		'\x2', '\x2', '\x2', '\x15F4', '\x1666', '\x3', '\x2', '\x2', '\x2', '\x15F5', 
		'\x15F6', '\x6', '\x152', '\x99', '\x2', '\x15F6', '\x1666', '\x5', '\x2AE', 
		'\x158', '\x2', '\x15F7', '\x15F8', '\a', '\x1CC', '\x2', '\x2', '\x15F8', 
		'\x15FA', '\a', '\x19B', '\x2', '\x2', '\x15F9', '\x15FB', '\a', '\x1AD', 
		'\x2', '\x2', '\x15FA', '\x15F9', '\x3', '\x2', '\x2', '\x2', '\x15FA', 
		'\x15FB', '\x3', '\x2', '\x2', '\x2', '\x15FB', '\x15FC', '\x3', '\x2', 
		'\x2', '\x2', '\x15FC', '\x15FD', '\a', '\x18B', '\x2', '\x2', '\x15FD', 
		'\x1600', '\a', '\x19C', '\x2', '\x2', '\x15FE', '\x15FF', '\x6', '\x152', 
		'\x9A', '\x2', '\x15FF', '\x1601', '\x5', '\x2A8', '\x155', '\x2', '\x1600', 
		'\x15FE', '\x3', '\x2', '\x2', '\x2', '\x1600', '\x1601', '\x3', '\x2', 
		'\x2', '\x2', '\x1601', '\x1666', '\x3', '\x2', '\x2', '\x2', '\x1602', 
		'\x1603', '\a', '\x1CC', '\x2', '\x2', '\x1603', '\x160B', '\a', '\x19B', 
		'\x2', '\x2', '\x1604', '\x1606', '\a', '\x1AD', '\x2', '\x2', '\x1605', 
		'\x1604', '\x3', '\x2', '\x2', '\x2', '\x1605', '\x1606', '\x3', '\x2', 
		'\x2', '\x2', '\x1606', '\x1607', '\x3', '\x2', '\x2', '\x2', '\x1607', 
		'\x160C', '\a', '\x18B', '\x2', '\x2', '\x1608', '\x160C', '\x5', '\x2B0', 
		'\x159', '\x2', '\x1609', '\x160A', '\a', '\x1E6', '\x2', '\x2', '\x160A', 
		'\x160C', '\x5', '\x2E0', '\x171', '\x2', '\x160B', '\x1605', '\x3', '\x2', 
		'\x2', '\x2', '\x160B', '\x1608', '\x3', '\x2', '\x2', '\x2', '\x160B', 
		'\x1609', '\x3', '\x2', '\x2', '\x2', '\x160C', '\x160D', '\x3', '\x2', 
		'\x2', '\x2', '\x160D', '\x1610', '\a', '\x19C', '\x2', '\x2', '\x160E', 
		'\x160F', '\x6', '\x152', '\x9B', '\x2', '\x160F', '\x1611', '\x5', '\x2A8', 
		'\x155', '\x2', '\x1610', '\x160E', '\x3', '\x2', '\x2', '\x2', '\x1610', 
		'\x1611', '\x3', '\x2', '\x2', '\x2', '\x1611', '\x1666', '\x3', '\x2', 
		'\x2', '\x2', '\x1612', '\x1613', '\a', '\x237', '\x2', '\x2', '\x1613', 
		'\x1615', '\a', '\x19B', '\x2', '\x2', '\x1614', '\x1616', '\a', '\x1E6', 
		'\x2', '\x2', '\x1615', '\x1614', '\x3', '\x2', '\x2', '\x2', '\x1615', 
		'\x1616', '\x3', '\x2', '\x2', '\x2', '\x1616', '\x1617', '\x3', '\x2', 
		'\x2', '\x2', '\x1617', '\x1618', '\x5', '\x2B0', '\x159', '\x2', '\x1618', 
		'\x161B', '\a', '\x19C', '\x2', '\x2', '\x1619', '\x161A', '\x6', '\x152', 
		'\x9C', '\x2', '\x161A', '\x161C', '\x5', '\x2A8', '\x155', '\x2', '\x161B', 
		'\x1619', '\x3', '\x2', '\x2', '\x2', '\x161B', '\x161C', '\x3', '\x2', 
		'\x2', '\x2', '\x161C', '\x1666', '\x3', '\x2', '\x2', '\x2', '\x161D', 
		'\x161E', '\a', '\x22F', '\x2', '\x2', '\x161E', '\x1620', '\a', '\x19B', 
		'\x2', '\x2', '\x161F', '\x1621', '\a', '\x1E6', '\x2', '\x2', '\x1620', 
		'\x161F', '\x3', '\x2', '\x2', '\x2', '\x1620', '\x1621', '\x3', '\x2', 
		'\x2', '\x2', '\x1621', '\x1622', '\x3', '\x2', '\x2', '\x2', '\x1622', 
		'\x1623', '\x5', '\x2B0', '\x159', '\x2', '\x1623', '\x1626', '\a', '\x19C', 
		'\x2', '\x2', '\x1624', '\x1625', '\x6', '\x152', '\x9D', '\x2', '\x1625', 
		'\x1627', '\x5', '\x2A8', '\x155', '\x2', '\x1626', '\x1624', '\x3', '\x2', 
		'\x2', '\x2', '\x1626', '\x1627', '\x3', '\x2', '\x2', '\x2', '\x1627', 
		'\x1666', '\x3', '\x2', '\x2', '\x2', '\x1628', '\x1629', '\a', '\x27F', 
		'\x2', '\x2', '\x1629', '\x162A', '\a', '\x19B', '\x2', '\x2', '\x162A', 
		'\x162B', '\x5', '\x2B0', '\x159', '\x2', '\x162B', '\x162E', '\a', '\x19C', 
		'\x2', '\x2', '\x162C', '\x162D', '\x6', '\x152', '\x9E', '\x2', '\x162D', 
		'\x162F', '\x5', '\x2A8', '\x155', '\x2', '\x162E', '\x162C', '\x3', '\x2', 
		'\x2', '\x2', '\x162E', '\x162F', '\x3', '\x2', '\x2', '\x2', '\x162F', 
		'\x1666', '\x3', '\x2', '\x2', '\x2', '\x1630', '\x1631', '\a', '\x2A3', 
		'\x2', '\x2', '\x1631', '\x1632', '\a', '\x19B', '\x2', '\x2', '\x1632', 
		'\x1633', '\x5', '\x2B0', '\x159', '\x2', '\x1633', '\x1636', '\a', '\x19C', 
		'\x2', '\x2', '\x1634', '\x1635', '\x6', '\x152', '\x9F', '\x2', '\x1635', 
		'\x1637', '\x5', '\x2A8', '\x155', '\x2', '\x1636', '\x1634', '\x3', '\x2', 
		'\x2', '\x2', '\x1636', '\x1637', '\x3', '\x2', '\x2', '\x2', '\x1637', 
		'\x1666', '\x3', '\x2', '\x2', '\x2', '\x1638', '\x1639', '\a', '\x27C', 
		'\x2', '\x2', '\x1639', '\x163A', '\a', '\x19B', '\x2', '\x2', '\x163A', 
		'\x163B', '\x5', '\x2B0', '\x159', '\x2', '\x163B', '\x163E', '\a', '\x19C', 
		'\x2', '\x2', '\x163C', '\x163D', '\x6', '\x152', '\xA0', '\x2', '\x163D', 
		'\x163F', '\x5', '\x2A8', '\x155', '\x2', '\x163E', '\x163C', '\x3', '\x2', 
		'\x2', '\x2', '\x163E', '\x163F', '\x3', '\x2', '\x2', '\x2', '\x163F', 
		'\x1666', '\x3', '\x2', '\x2', '\x2', '\x1640', '\x1641', '\a', '\x2A6', 
		'\x2', '\x2', '\x1641', '\x1642', '\a', '\x19B', '\x2', '\x2', '\x1642', 
		'\x1643', '\x5', '\x2B0', '\x159', '\x2', '\x1643', '\x1646', '\a', '\x19C', 
		'\x2', '\x2', '\x1644', '\x1645', '\x6', '\x152', '\xA1', '\x2', '\x1645', 
		'\x1647', '\x5', '\x2A8', '\x155', '\x2', '\x1646', '\x1644', '\x3', '\x2', 
		'\x2', '\x2', '\x1646', '\x1647', '\x3', '\x2', '\x2', '\x2', '\x1647', 
		'\x1666', '\x3', '\x2', '\x2', '\x2', '\x1648', '\x1649', '\a', '\x284', 
		'\x2', '\x2', '\x1649', '\x164B', '\a', '\x19B', '\x2', '\x2', '\x164A', 
		'\x164C', '\a', '\x1E6', '\x2', '\x2', '\x164B', '\x164A', '\x3', '\x2', 
		'\x2', '\x2', '\x164B', '\x164C', '\x3', '\x2', '\x2', '\x2', '\x164C', 
		'\x164D', '\x3', '\x2', '\x2', '\x2', '\x164D', '\x164E', '\x5', '\x2B0', 
		'\x159', '\x2', '\x164E', '\x1651', '\a', '\x19C', '\x2', '\x2', '\x164F', 
		'\x1650', '\x6', '\x152', '\xA2', '\x2', '\x1650', '\x1652', '\x5', '\x2A8', 
		'\x155', '\x2', '\x1651', '\x164F', '\x3', '\x2', '\x2', '\x2', '\x1651', 
		'\x1652', '\x3', '\x2', '\x2', '\x2', '\x1652', '\x1666', '\x3', '\x2', 
		'\x2', '\x2', '\x1653', '\x1654', '\a', '\x202', '\x2', '\x2', '\x1654', 
		'\x1656', '\a', '\x19B', '\x2', '\x2', '\x1655', '\x1657', '\a', '\x1E6', 
		'\x2', '\x2', '\x1656', '\x1655', '\x3', '\x2', '\x2', '\x2', '\x1656', 
		'\x1657', '\x3', '\x2', '\x2', '\x2', '\x1657', '\x1658', '\x3', '\x2', 
		'\x2', '\x2', '\x1658', '\x165A', '\x5', '\x2E0', '\x171', '\x2', '\x1659', 
		'\x165B', '\x5', '\x148', '\xA5', '\x2', '\x165A', '\x1659', '\x3', '\x2', 
		'\x2', '\x2', '\x165A', '\x165B', '\x3', '\x2', '\x2', '\x2', '\x165B', 
		'\x165E', '\x3', '\x2', '\x2', '\x2', '\x165C', '\x165D', '\a', '\x269', 
		'\x2', '\x2', '\x165D', '\x165F', '\x5', '\x472', '\x23A', '\x2', '\x165E', 
		'\x165C', '\x3', '\x2', '\x2', '\x2', '\x165E', '\x165F', '\x3', '\x2', 
		'\x2', '\x2', '\x165F', '\x1660', '\x3', '\x2', '\x2', '\x2', '\x1660', 
		'\x1663', '\a', '\x19C', '\x2', '\x2', '\x1661', '\x1662', '\x6', '\x152', 
		'\xA3', '\x2', '\x1662', '\x1664', '\x5', '\x2A8', '\x155', '\x2', '\x1663', 
		'\x1661', '\x3', '\x2', '\x2', '\x2', '\x1663', '\x1664', '\x3', '\x2', 
		'\x2', '\x2', '\x1664', '\x1666', '\x3', '\x2', '\x2', '\x2', '\x1665', 
		'\x15E2', '\x3', '\x2', '\x2', '\x2', '\x1665', '\x15ED', '\x3', '\x2', 
		'\x2', '\x2', '\x1665', '\x15F5', '\x3', '\x2', '\x2', '\x2', '\x1665', 
		'\x15F7', '\x3', '\x2', '\x2', '\x2', '\x1665', '\x1602', '\x3', '\x2', 
		'\x2', '\x2', '\x1665', '\x1612', '\x3', '\x2', '\x2', '\x2', '\x1665', 
		'\x161D', '\x3', '\x2', '\x2', '\x2', '\x1665', '\x1628', '\x3', '\x2', 
		'\x2', '\x2', '\x1665', '\x1630', '\x3', '\x2', '\x2', '\x2', '\x1665', 
		'\x1638', '\x3', '\x2', '\x2', '\x2', '\x1665', '\x1640', '\x3', '\x2', 
		'\x2', '\x2', '\x1665', '\x1648', '\x3', '\x2', '\x2', '\x2', '\x1665', 
		'\x1653', '\x3', '\x2', '\x2', '\x2', '\x1666', '\x2A3', '\x3', '\x2', 
		'\x2', '\x2', '\x1667', '\x1668', '\a', '\x2C1', '\x2', '\x2', '\x1668', 
		'\x1669', '\a', '\x19B', '\x2', '\x2', '\x1669', '\x166A', '\x5', '\x2E0', 
		'\x171', '\x2', '\x166A', '\x166B', '\a', '\x19C', '\x2', '\x2', '\x166B', 
		'\x2A5', '\x3', '\x2', '\x2', '\x2', '\x166C', '\x166D', '\t', 'X', '\x2', 
		'\x2', '\x166D', '\x166E', '\x5', '\x492', '\x24A', '\x2', '\x166E', '\x166F', 
		'\x5', '\x2A8', '\x155', '\x2', '\x166F', '\x1697', '\x3', '\x2', '\x2', 
		'\x2', '\x1670', '\x1671', '\a', '\x2D1', '\x2', '\x2', '\x1671', '\x1672', 
		'\x5', '\x2F0', '\x179', '\x2', '\x1672', '\x1673', '\x5', '\x2A8', '\x155', 
		'\x2', '\x1673', '\x1697', '\x3', '\x2', '\x2', '\x2', '\x1674', '\x1675', 
		'\t', 'Y', '\x2', '\x2', '\x1675', '\x1676', '\a', '\x19B', '\x2', '\x2', 
		'\x1676', '\x1678', '\x5', '\x290', '\x149', '\x2', '\x1677', '\x1679', 
		'\x5', '\x2AA', '\x156', '\x2', '\x1678', '\x1677', '\x3', '\x2', '\x2', 
		'\x2', '\x1678', '\x1679', '\x3', '\x2', '\x2', '\x2', '\x1679', '\x167A', 
		'\x3', '\x2', '\x2', '\x2', '\x167A', '\x167C', '\a', '\x19C', '\x2', 
		'\x2', '\x167B', '\x167D', '\x5', '\x2AC', '\x157', '\x2', '\x167C', '\x167B', 
		'\x3', '\x2', '\x2', '\x2', '\x167C', '\x167D', '\x3', '\x2', '\x2', '\x2', 
		'\x167D', '\x167E', '\x3', '\x2', '\x2', '\x2', '\x167E', '\x167F', '\x5', 
		'\x2A8', '\x155', '\x2', '\x167F', '\x1697', '\x3', '\x2', '\x2', '\x2', 
		'\x1680', '\x1681', '\t', 'Z', '\x2', '\x2', '\x1681', '\x1683', '\x5', 
		'\x2EE', '\x178', '\x2', '\x1682', '\x1684', '\x5', '\x2AC', '\x157', 
		'\x2', '\x1683', '\x1682', '\x3', '\x2', '\x2', '\x2', '\x1683', '\x1684', 
		'\x3', '\x2', '\x2', '\x2', '\x1684', '\x1685', '\x3', '\x2', '\x2', '\x2', 
		'\x1685', '\x1686', '\x5', '\x2A8', '\x155', '\x2', '\x1686', '\x1697', 
		'\x3', '\x2', '\x2', '\x2', '\x1687', '\x1688', '\a', '\x2D0', '\x2', 
		'\x2', '\x1688', '\x1689', '\a', '\x19B', '\x2', '\x2', '\x1689', '\x168A', 
		'\x5', '\x290', '\x149', '\x2', '\x168A', '\x168B', '\a', '\x198', '\x2', 
		'\x2', '\x168B', '\x168C', '\x5', '\x29C', '\x14F', '\x2', '\x168C', '\x168F', 
		'\a', '\x19C', '\x2', '\x2', '\x168D', '\x168E', '\a', '\x1FC', '\x2', 
		'\x2', '\x168E', '\x1690', '\t', '[', '\x2', '\x2', '\x168F', '\x168D', 
		'\x3', '\x2', '\x2', '\x2', '\x168F', '\x1690', '\x3', '\x2', '\x2', '\x2', 
		'\x1690', '\x1692', '\x3', '\x2', '\x2', '\x2', '\x1691', '\x1693', '\x5', 
		'\x2AC', '\x157', '\x2', '\x1692', '\x1691', '\x3', '\x2', '\x2', '\x2', 
		'\x1692', '\x1693', '\x3', '\x2', '\x2', '\x2', '\x1693', '\x1694', '\x3', 
		'\x2', '\x2', '\x2', '\x1694', '\x1695', '\x5', '\x2A8', '\x155', '\x2', 
		'\x1695', '\x1697', '\x3', '\x2', '\x2', '\x2', '\x1696', '\x166C', '\x3', 
		'\x2', '\x2', '\x2', '\x1696', '\x1670', '\x3', '\x2', '\x2', '\x2', '\x1696', 
		'\x1674', '\x3', '\x2', '\x2', '\x2', '\x1696', '\x1680', '\x3', '\x2', 
		'\x2', '\x2', '\x1696', '\x1687', '\x3', '\x2', '\x2', '\x2', '\x1697', 
		'\x2A7', '\x3', '\x2', '\x2', '\x2', '\x1698', '\x169B', '\a', '\x2D4', 
		'\x2', '\x2', '\x1699', '\x169C', '\x5', '\x452', '\x22A', '\x2', '\x169A', 
		'\x169C', '\x5', '\x12E', '\x98', '\x2', '\x169B', '\x1699', '\x3', '\x2', 
		'\x2', '\x2', '\x169B', '\x169A', '\x3', '\x2', '\x2', '\x2', '\x169C', 
		'\x2A9', '\x3', '\x2', '\x2', '\x2', '\x169D', '\x16A0', '\a', '\x198', 
		'\x2', '\x2', '\x169E', '\x16A1', '\x5', '\x466', '\x234', '\x2', '\x169F', 
		'\x16A1', '\a', '\x1A6', '\x2', '\x2', '\x16A0', '\x169E', '\x3', '\x2', 
		'\x2', '\x2', '\x16A0', '\x169F', '\x3', '\x2', '\x2', '\x2', '\x16A1', 
		'\x16A4', '\x3', '\x2', '\x2', '\x2', '\x16A2', '\x16A3', '\a', '\x198', 
		'\x2', '\x2', '\x16A3', '\x16A5', '\x5', '\x290', '\x149', '\x2', '\x16A4', 
		'\x16A2', '\x3', '\x2', '\x2', '\x2', '\x16A4', '\x16A5', '\x3', '\x2', 
		'\x2', '\x2', '\x16A5', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\x16A6', 
		'\x16A7', '\t', '\\', '\x2', '\x2', '\x16A7', '\x16A8', '\a', '\x2D2', 
		'\x2', '\x2', '\x16A8', '\x2AD', '\x3', '\x2', '\x2', '\x2', '\x16A9', 
		'\x16AA', '\a', '\x2BC', '\x2', '\x2', '\x16AA', '\x16AB', '\a', '\x19B', 
		'\x2', '\x2', '\x16AB', '\x16AC', '\x5', '\x2B0', '\x159', '\x2', '\x16AC', 
		'\x16AE', '\a', '\x19C', '\x2', '\x2', '\x16AD', '\x16AF', '\x5', '\x2A8', 
		'\x155', '\x2', '\x16AE', '\x16AD', '\x3', '\x2', '\x2', '\x2', '\x16AE', 
		'\x16AF', '\x3', '\x2', '\x2', '\x2', '\x16AF', '\x16BA', '\x3', '\x2', 
		'\x2', '\x2', '\x16B0', '\x16B1', '\a', '\x2BB', '\x2', '\x2', '\x16B1', 
		'\x16B2', '\a', '\x19B', '\x2', '\x2', '\x16B2', '\x16B3', '\x5', '\x2B0', 
		'\x159', '\x2', '\x16B3', '\x16B4', '\a', '\x198', '\x2', '\x2', '\x16B4', 
		'\x16B5', '\x5', '\x2B0', '\x159', '\x2', '\x16B5', '\x16B7', '\a', '\x19C', 
		'\x2', '\x2', '\x16B6', '\x16B8', '\x5', '\x2A8', '\x155', '\x2', '\x16B7', 
		'\x16B6', '\x3', '\x2', '\x2', '\x2', '\x16B7', '\x16B8', '\x3', '\x2', 
		'\x2', '\x2', '\x16B8', '\x16BA', '\x3', '\x2', '\x2', '\x2', '\x16B9', 
		'\x16A9', '\x3', '\x2', '\x2', '\x2', '\x16B9', '\x16B0', '\x3', '\x2', 
		'\x2', '\x2', '\x16BA', '\x2AF', '\x3', '\x2', '\x2', '\x2', '\x16BB', 
		'\x16BD', '\a', '\x1AD', '\x2', '\x2', '\x16BC', '\x16BB', '\x3', '\x2', 
		'\x2', '\x2', '\x16BC', '\x16BD', '\x3', '\x2', '\x2', '\x2', '\x16BD', 
		'\x16BE', '\x3', '\x2', '\x2', '\x2', '\x16BE', '\x16BF', '\x5', '\x290', 
		'\x149', '\x2', '\x16BF', '\x2B1', '\x3', '\x2', '\x2', '\x2', '\x16C0', 
		'\x16C6', '\x5', '\x2B4', '\x15B', '\x2', '\x16C1', '\x16C2', '\a', '\x19B', 
		'\x2', '\x2', '\x16C2', '\x16C3', '\x5', '\x2B4', '\x15B', '\x2', '\x16C3', 
		'\x16C4', '\a', '\x19C', '\x2', '\x2', '\x16C4', '\x16C6', '\x3', '\x2', 
		'\x2', '\x2', '\x16C5', '\x16C0', '\x3', '\x2', '\x2', '\x2', '\x16C5', 
		'\x16C1', '\x3', '\x2', '\x2', '\x2', '\x16C6', '\x2B3', '\x3', '\x2', 
		'\x2', '\x2', '\x16C7', '\x16CC', '\x5', '\x45E', '\x230', '\x2', '\x16C8', 
		'\x16C9', '\a', '\x198', '\x2', '\x2', '\x16C9', '\x16CB', '\x5', '\x45E', 
		'\x230', '\x2', '\x16CA', '\x16C8', '\x3', '\x2', '\x2', '\x2', '\x16CB', 
		'\x16CE', '\x3', '\x2', '\x2', '\x2', '\x16CC', '\x16CA', '\x3', '\x2', 
		'\x2', '\x2', '\x16CC', '\x16CD', '\x3', '\x2', '\x2', '\x2', '\x16CD', 
		'\x2B5', '\x3', '\x2', '\x2', '\x2', '\x16CE', '\x16CC', '\x3', '\x2', 
		'\x2', '\x2', '\x16CF', '\x16D0', '\a', '\x213', '\x2', '\x2', '\x16D0', 
		'\x16D1', '\a', 'M', '\x2', '\x2', '\x16D1', '\x16DF', '\a', '\xE0', '\x2', 
		'\x2', '\x16D2', '\x16D3', '\a', '\x213', '\x2', '\x2', '\x16D3', '\x16D4', 
		'\a', '\x23A', '\x2', '\x2', '\x16D4', '\x16D5', '\a', '\x1C', '\x2', 
		'\x2', '\x16D5', '\x16D9', '\a', '\xE0', '\x2', '\x2', '\x16D6', '\x16D7', 
		'\a', '\x2AB', '\x2', '\x2', '\x16D7', '\x16D8', '\a', '\x10D', '\x2', 
		'\x2', '\x16D8', '\x16DA', '\a', '\x8A', '\x2', '\x2', '\x16D9', '\x16D6', 
		'\x3', '\x2', '\x2', '\x2', '\x16D9', '\x16DA', '\x3', '\x2', '\x2', '\x2', 
		'\x16DA', '\x16DF', '\x3', '\x2', '\x2', '\x2', '\x16DB', '\x16DC', '\a', 
		'\x2AB', '\x2', '\x2', '\x16DC', '\x16DD', '\a', '\x10D', '\x2', '\x2', 
		'\x16DD', '\x16DF', '\a', '\x8A', '\x2', '\x2', '\x16DE', '\x16CF', '\x3', 
		'\x2', '\x2', '\x2', '\x16DE', '\x16D2', '\x3', '\x2', '\x2', '\x2', '\x16DE', 
		'\x16DB', '\x3', '\x2', '\x2', '\x2', '\x16DF', '\x2B7', '\x3', '\x2', 
		'\x2', '\x2', '\x16E0', '\x16E1', '\a', '\x1C4', '\x2', '\x2', '\x16E1', 
		'\x16E2', '\a', '\x19B', '\x2', '\x2', '\x16E2', '\x16E5', '\x5', '\x2E0', 
		'\x171', '\x2', '\x16E3', '\x16E4', '\a', '\x29B', '\x2', '\x2', '\x16E4', 
		'\x16E6', '\x5', '\x398', '\x1CD', '\x2', '\x16E5', '\x16E3', '\x3', '\x2', 
		'\x2', '\x2', '\x16E5', '\x16E6', '\x3', '\x2', '\x2', '\x2', '\x16E6', 
		'\x16E7', '\x3', '\x2', '\x2', '\x2', '\x16E7', '\x16E8', '\a', '\x19C', 
		'\x2', '\x2', '\x16E8', '\x17F3', '\x3', '\x2', '\x2', '\x2', '\x16E9', 
		'\x16EB', '\a', '\x1D2', '\x2', '\x2', '\x16EA', '\x16EC', '\x5', '\x492', 
		'\x24A', '\x2', '\x16EB', '\x16EA', '\x3', '\x2', '\x2', '\x2', '\x16EB', 
		'\x16EC', '\x3', '\x2', '\x2', '\x2', '\x16EC', '\x17F3', '\x3', '\x2', 
		'\x2', '\x2', '\x16ED', '\x16EE', '\a', 'r', '\x2', '\x2', '\x16EE', '\x17F3', 
		'\x5', '\x2EE', '\x178', '\x2', '\x16EF', '\x16F0', '\a', 's', '\x2', 
		'\x2', '\x16F0', '\x17F3', '\x5', '\x2EE', '\x178', '\x2', '\x16F1', '\x16F2', 
		'\a', '\xA0', '\x2', '\x2', '\x16F2', '\x17F3', '\x5', '\x2EE', '\x178', 
		'\x2', '\x16F3', '\x16F4', '\a', '\x20F', '\x2', '\x2', '\x16F4', '\x16F5', 
		'\a', '\x19B', '\x2', '\x2', '\x16F5', '\x16F6', '\x5', '\x290', '\x149', 
		'\x2', '\x16F6', '\x16F7', '\a', '\x198', '\x2', '\x2', '\x16F7', '\x16F8', 
		'\x5', '\x290', '\x149', '\x2', '\x16F8', '\x16F9', '\a', '\x198', '\x2', 
		'\x2', '\x16F9', '\x16FA', '\x5', '\x290', '\x149', '\x2', '\x16FA', '\x16FB', 
		'\a', '\x198', '\x2', '\x2', '\x16FB', '\x16FC', '\x5', '\x290', '\x149', 
		'\x2', '\x16FC', '\x16FD', '\a', '\x19C', '\x2', '\x2', '\x16FD', '\x17F3', 
		'\x3', '\x2', '\x2', '\x2', '\x16FE', '\x16FF', '\a', '\x210', '\x2', 
		'\x2', '\x16FF', '\x1700', '\a', '\x19B', '\x2', '\x2', '\x1700', '\x1703', 
		'\x5', '\x290', '\x149', '\x2', '\x1701', '\x1702', '\a', '\x198', '\x2', 
		'\x2', '\x1702', '\x1704', '\x5', '\x290', '\x149', '\x2', '\x1703', '\x1701', 
		'\x3', '\x2', '\x2', '\x2', '\x1704', '\x1705', '\x3', '\x2', '\x2', '\x2', 
		'\x1705', '\x1703', '\x3', '\x2', '\x2', '\x2', '\x1705', '\x1706', '\x3', 
		'\x2', '\x2', '\x2', '\x1706', '\x1707', '\x3', '\x2', '\x2', '\x2', '\x1707', 
		'\x1708', '\a', '\x19C', '\x2', '\x2', '\x1708', '\x17F3', '\x3', '\x2', 
		'\x2', '\x2', '\x1709', '\x170A', '\a', '\x21E', '\x2', '\x2', '\x170A', 
		'\x170B', '\a', '\x19B', '\x2', '\x2', '\x170B', '\x170C', '\x5', '\x290', 
		'\x149', '\x2', '\x170C', '\x170D', '\a', '\x198', '\x2', '\x2', '\x170D', 
		'\x170E', '\x5', '\x290', '\x149', '\x2', '\x170E', '\x170F', '\a', '\x19C', 
		'\x2', '\x2', '\x170F', '\x17F3', '\x3', '\x2', '\x2', '\x2', '\x1710', 
		'\x1711', '\a', '\xDD', '\x2', '\x2', '\x1711', '\x17F3', '\x5', '\x2EE', 
		'\x178', '\x2', '\x1712', '\x1713', '\a', '\xE1', '\x2', '\x2', '\x1713', 
		'\x17F3', '\x5', '\x2EE', '\x178', '\x2', '\x1714', '\x1715', '\a', '\x265', 
		'\x2', '\x2', '\x1715', '\x1716', '\a', '\x19B', '\x2', '\x2', '\x1716', 
		'\x1717', '\x5', '\x290', '\x149', '\x2', '\x1717', '\x1718', '\a', '\x198', 
		'\x2', '\x2', '\x1718', '\x1719', '\x5', '\x290', '\x149', '\x2', '\x1719', 
		'\x171A', '\a', '\x19C', '\x2', '\x2', '\x171A', '\x17F3', '\x3', '\x2', 
		'\x2', '\x2', '\x171B', '\x171C', '\a', '\x133', '\x2', '\x2', '\x171C', 
		'\x17F3', '\x5', '\x2EE', '\x178', '\x2', '\x171D', '\x171E', '\a', '\x162', 
		'\x2', '\x2', '\x171E', '\x17F3', '\x5', '\x2EE', '\x178', '\x2', '\x171F', 
		'\x1720', '\a', '\x15F', '\x2', '\x2', '\x1720', '\x1721', '\a', '\x19B', 
		'\x2', '\x2', '\x1721', '\x1724', '\x5', '\x290', '\x149', '\x2', '\x1722', 
		'\x1723', '\a', '\x198', '\x2', '\x2', '\x1723', '\x1725', '\x5', '\x290', 
		'\x149', '\x2', '\x1724', '\x1722', '\x3', '\x2', '\x2', '\x2', '\x1724', 
		'\x1725', '\x3', '\x2', '\x2', '\x2', '\x1725', '\x1726', '\x3', '\x2', 
		'\x2', '\x2', '\x1726', '\x1727', '\a', '\x19C', '\x2', '\x2', '\x1727', 
		'\x17F3', '\x3', '\x2', '\x2', '\x2', '\x1728', '\x17F3', '\x5', '\x2C6', 
		'\x164', '\x2', '\x1729', '\x172A', '\a', '\x16E', '\x2', '\x2', '\x172A', 
		'\x17F3', '\x5', '\x492', '\x24A', '\x2', '\x172B', '\x172C', '\a', '\x2A0', 
		'\x2', '\x2', '\x172C', '\x17F3', '\x5', '\x2EE', '\x178', '\x2', '\x172D', 
		'\x172E', '\a', '\x17B', '\x2', '\x2', '\x172E', '\x17F3', '\x5', '\x2EE', 
		'\x178', '\x2', '\x172F', '\x1730', '\t', ']', '\x2', '\x2', '\x1730', 
		'\x1731', '\a', '\x19B', '\x2', '\x2', '\x1731', '\x1732', '\x5', '\x290', 
		'\x149', '\x2', '\x1732', '\x1738', '\a', '\x198', '\x2', '\x2', '\x1733', 
		'\x1739', '\x5', '\x290', '\x149', '\x2', '\x1734', '\x1735', '\a', '\x210', 
		'\x2', '\x2', '\x1735', '\x1736', '\x5', '\x290', '\x149', '\x2', '\x1736', 
		'\x1737', '\x5', '\x2E8', '\x175', '\x2', '\x1737', '\x1739', '\x3', '\x2', 
		'\x2', '\x2', '\x1738', '\x1733', '\x3', '\x2', '\x2', '\x2', '\x1738', 
		'\x1734', '\x3', '\x2', '\x2', '\x2', '\x1739', '\x173A', '\x3', '\x2', 
		'\x2', '\x2', '\x173A', '\x173B', '\a', '\x19C', '\x2', '\x2', '\x173B', 
		'\x17F3', '\x3', '\x2', '\x2', '\x2', '\x173C', '\x173E', '\a', '\x1CF', 
		'\x2', '\x2', '\x173D', '\x173F', '\x5', '\x492', '\x24A', '\x2', '\x173E', 
		'\x173D', '\x3', '\x2', '\x2', '\x2', '\x173E', '\x173F', '\x3', '\x2', 
		'\x2', '\x2', '\x173F', '\x17F3', '\x3', '\x2', '\x2', '\x2', '\x1740', 
		'\x1742', '\a', '\x1D4', '\x2', '\x2', '\x1741', '\x1743', '\x5', '\x2BC', 
		'\x15F', '\x2', '\x1742', '\x1741', '\x3', '\x2', '\x2', '\x2', '\x1742', 
		'\x1743', '\x3', '\x2', '\x2', '\x2', '\x1743', '\x17F3', '\x3', '\x2', 
		'\x2', '\x2', '\x1744', '\x1745', '\t', '^', '\x2', '\x2', '\x1745', '\x1746', 
		'\a', '\x19B', '\x2', '\x2', '\x1746', '\x1747', '\x5', '\x290', '\x149', 
		'\x2', '\x1747', '\x1748', '\a', '\x198', '\x2', '\x2', '\x1748', '\x1749', 
		'\a', '\x210', '\x2', '\x2', '\x1749', '\x174A', '\x5', '\x290', '\x149', 
		'\x2', '\x174A', '\x174B', '\x5', '\x2E8', '\x175', '\x2', '\x174B', '\x174C', 
		'\a', '\x19C', '\x2', '\x2', '\x174C', '\x17F3', '\x3', '\x2', '\x2', 
		'\x2', '\x174D', '\x174E', '\a', '\x1F5', '\x2', '\x2', '\x174E', '\x174F', 
		'\a', '\x19B', '\x2', '\x2', '\x174F', '\x1750', '\x5', '\x2E8', '\x175', 
		'\x2', '\x1750', '\x1751', '\a', '\x1FC', '\x2', '\x2', '\x1751', '\x1752', 
		'\x5', '\x290', '\x149', '\x2', '\x1752', '\x1753', '\a', '\x19C', '\x2', 
		'\x2', '\x1753', '\x17F3', '\x3', '\x2', '\x2', '\x2', '\x1754', '\x1755', 
		'\a', '\x9B', '\x2', '\x2', '\x1755', '\x1756', '\a', '\x19B', '\x2', 
		'\x2', '\x1756', '\x1757', '\x5', '\x2C4', '\x163', '\x2', '\x1757', '\x1758', 
		'\a', '\x198', '\x2', '\x2', '\x1758', '\x1759', '\x5', '\x290', '\x149', 
		'\x2', '\x1759', '\x175A', '\a', '\x19C', '\x2', '\x2', '\x175A', '\x17F3', 
		'\x3', '\x2', '\x2', '\x2', '\x175B', '\x175D', '\a', '\x23F', '\x2', 
		'\x2', '\x175C', '\x175E', '\x5', '\x2BC', '\x15F', '\x2', '\x175D', '\x175C', 
		'\x3', '\x2', '\x2', '\x2', '\x175D', '\x175E', '\x3', '\x2', '\x2', '\x2', 
		'\x175E', '\x17F3', '\x3', '\x2', '\x2', '\x2', '\x175F', '\x1760', '\a', 
		'\x250', '\x2', '\x2', '\x1760', '\x1761', '\a', '\x19B', '\x2', '\x2', 
		'\x1761', '\x1762', '\x5', '\x29A', '\x14E', '\x2', '\x1762', '\x1763', 
		'\a', '\x213', '\x2', '\x2', '\x1763', '\x1764', '\x5', '\x290', '\x149', 
		'\x2', '\x1764', '\x1765', '\a', '\x19C', '\x2', '\x2', '\x1765', '\x17F3', 
		'\x3', '\x2', '\x2', '\x2', '\x1766', '\x17F3', '\x5', '\x2C8', '\x165', 
		'\x2', '\x1767', '\x1769', '\a', '\x285', '\x2', '\x2', '\x1768', '\x176A', 
		'\x5', '\x2BC', '\x15F', '\x2', '\x1769', '\x1768', '\x3', '\x2', '\x2', 
		'\x2', '\x1769', '\x176A', '\x3', '\x2', '\x2', '\x2', '\x176A', '\x17F3', 
		'\x3', '\x2', '\x2', '\x2', '\x176B', '\x176C', '\t', '_', '\x2', '\x2', 
		'\x176C', '\x176D', '\a', '\x19B', '\x2', '\x2', '\x176D', '\x176E', '\x5', 
		'\x2EA', '\x176', '\x2', '\x176E', '\x176F', '\a', '\x198', '\x2', '\x2', 
		'\x176F', '\x1770', '\x5', '\x290', '\x149', '\x2', '\x1770', '\x1771', 
		'\a', '\x198', '\x2', '\x2', '\x1771', '\x1772', '\x5', '\x290', '\x149', 
		'\x2', '\x1772', '\x1773', '\a', '\x19C', '\x2', '\x2', '\x1773', '\x17F3', 
		'\x3', '\x2', '\x2', '\x2', '\x1774', '\x1776', '\a', '\x29C', '\x2', 
		'\x2', '\x1775', '\x1777', '\x5', '\x492', '\x24A', '\x2', '\x1776', '\x1775', 
		'\x3', '\x2', '\x2', '\x2', '\x1776', '\x1777', '\x3', '\x2', '\x2', '\x2', 
		'\x1777', '\x17F3', '\x3', '\x2', '\x2', '\x2', '\x1778', '\x177A', '\a', 
		'\x29E', '\x2', '\x2', '\x1779', '\x177B', '\x5', '\x2BC', '\x15F', '\x2', 
		'\x177A', '\x1779', '\x3', '\x2', '\x2', '\x2', '\x177A', '\x177B', '\x3', 
		'\x2', '\x2', '\x2', '\x177B', '\x17F3', '\x3', '\x2', '\x2', '\x2', '\x177C', 
		'\x177E', '\a', '\x29D', '\x2', '\x2', '\x177D', '\x177F', '\x5', '\x2BC', 
		'\x15F', '\x2', '\x177E', '\x177D', '\x3', '\x2', '\x2', '\x2', '\x177E', 
		'\x177F', '\x3', '\x2', '\x2', '\x2', '\x177F', '\x17F3', '\x3', '\x2', 
		'\x2', '\x2', '\x1780', '\x1781', '\a', '\x4', '\x2', '\x2', '\x1781', 
		'\x17F3', '\x5', '\x2EE', '\x178', '\x2', '\x1782', '\x1783', '\a', '\n', 
		'\x2', '\x2', '\x1783', '\x17F3', '\x5', '\x2EE', '\x178', '\x2', '\x1784', 
		'\x1785', '\a', 'W', '\x2', '\x2', '\x1785', '\x17F3', '\x5', '\x2EC', 
		'\x177', '\x2', '\x1786', '\x1787', '\a', 'Y', '\x2', '\x2', '\x1787', 
		'\x17F3', '\x5', '\x2EE', '\x178', '\x2', '\x1788', '\x1789', '\a', '\x1D5', 
		'\x2', '\x2', '\x1789', '\x17F3', '\x5', '\x492', '\x24A', '\x2', '\x178A', 
		'\x178B', '\a', '\x208', '\x2', '\x2', '\x178B', '\x178C', '\a', '\x19B', 
		'\x2', '\x2', '\x178C', '\x178D', '\x5', '\x290', '\x149', '\x2', '\x178D', 
		'\x178E', '\a', '\x198', '\x2', '\x2', '\x178E', '\x178F', '\x5', '\x290', 
		'\x149', '\x2', '\x178F', '\x1790', '\a', '\x198', '\x2', '\x2', '\x1790', 
		'\x1791', '\x5', '\x290', '\x149', '\x2', '\x1791', '\x1792', '\a', '\x19C', 
		'\x2', '\x2', '\x1792', '\x17F3', '\x3', '\x2', '\x2', '\x2', '\x1793', 
		'\x1794', '\a', '\x16', '\x2', '\x2', '\x1794', '\x1795', '\a', '\x19B', 
		'\x2', '\x2', '\x1795', '\x1796', '\x5', '\x290', '\x149', '\x2', '\x1796', 
		'\x1797', '\a', '\x198', '\x2', '\x2', '\x1797', '\x179A', '\x5', '\x290', 
		'\x149', '\x2', '\x1798', '\x1799', '\a', '\x198', '\x2', '\x2', '\x1799', 
		'\x179B', '\x5', '\x290', '\x149', '\x2', '\x179A', '\x1798', '\x3', '\x2', 
		'\x2', '\x2', '\x179A', '\x179B', '\x3', '\x2', '\x2', '\x2', '\x179B', 
		'\x179C', '\x3', '\x2', '\x2', '\x2', '\x179C', '\x179D', '\a', '\x19C', 
		'\x2', '\x2', '\x179D', '\x17F3', '\x3', '\x2', '\x2', '\x2', '\x179E', 
		'\x179F', '\a', '\xDB', '\x2', '\x2', '\x179F', '\x17F3', '\x5', '\x2EE', 
		'\x178', '\x2', '\x17A0', '\x17A1', '\a', '\x239', '\x2', '\x2', '\x17A1', 
		'\x17A2', '\a', '\x19B', '\x2', '\x2', '\x17A2', '\x17A3', '\x5', '\x290', 
		'\x149', '\x2', '\x17A3', '\x17A4', '\a', '\x198', '\x2', '\x2', '\x17A4', 
		'\x17A5', '\x5', '\x290', '\x149', '\x2', '\x17A5', '\x17A6', '\a', '\x19C', 
		'\x2', '\x2', '\x17A6', '\x17F3', '\x3', '\x2', '\x2', '\x2', '\x17A7', 
		'\x17A8', '\x6', '\x15D', '\xA4', '\x2', '\x17A8', '\x17A9', '\a', '\xF5', 
		'\x2', '\x2', '\x17A9', '\x17AA', '\a', '\x19B', '\x2', '\x2', '\x17AA', 
		'\x17AB', '\x5', '\x476', '\x23C', '\x2', '\x17AB', '\x17AC', '\a', '\x19C', 
		'\x2', '\x2', '\x17AC', '\x17F3', '\x3', '\x2', '\x2', '\x2', '\x17AD', 
		'\x17AE', '\x6', '\x15D', '\xA5', '\x2', '\x17AE', '\x17AF', '\a', '\xFD', 
		'\x2', '\x2', '\x17AF', '\x17F3', '\x5', '\x2EE', '\x178', '\x2', '\x17B0', 
		'\x17B1', '\a', '\x10C', '\x2', '\x2', '\x17B1', '\x17F3', '\x5', '\x2EE', 
		'\x178', '\x2', '\x17B2', '\x17B3', '\a', '\x25E', '\x2', '\x2', '\x17B3', 
		'\x17B4', '\a', '\x19B', '\x2', '\x2', '\x17B4', '\x17B5', '\x5', '\x290', 
		'\x149', '\x2', '\x17B5', '\x17B6', '\a', '\x198', '\x2', '\x2', '\x17B6', 
		'\x17B7', '\x5', '\x290', '\x149', '\x2', '\x17B7', '\x17B8', '\a', '\x19C', 
		'\x2', '\x2', '\x17B8', '\x17F3', '\x3', '\x2', '\x2', '\x2', '\x17B9', 
		'\x17BA', '\a', '\x25F', '\x2', '\x2', '\x17BA', '\x17BB', '\a', '\x19B', 
		'\x2', '\x2', '\x17BB', '\x17BC', '\x5', '\x290', '\x149', '\x2', '\x17BC', 
		'\x17BD', '\a', '\x198', '\x2', '\x2', '\x17BD', '\x17BE', '\x5', '\x290', 
		'\x149', '\x2', '\x17BE', '\x17BF', '\a', '\x198', '\x2', '\x2', '\x17BF', 
		'\x17C0', '\x5', '\x290', '\x149', '\x2', '\x17C0', '\x17C1', '\a', '\x19C', 
		'\x2', '\x2', '\x17C1', '\x17F3', '\x3', '\x2', '\x2', '\x2', '\x17C2', 
		'\x17C3', '\a', '\x128', '\x2', '\x2', '\x17C3', '\x17F3', '\x5', '\x2EE', 
		'\x178', '\x2', '\x17C4', '\x17C5', '\a', '\x12D', '\x2', '\x2', '\x17C5', 
		'\x17F3', '\x5', '\x492', '\x24A', '\x2', '\x17C6', '\x17C7', '\a', '\x34', 
		'\x2', '\x2', '\x17C7', '\x17C8', '\a', '\x19B', '\x2', '\x2', '\x17C8', 
		'\x17C9', '\x5', '\x290', '\x149', '\x2', '\x17C9', '\x17CA', '\a', '\x198', 
		'\x2', '\x2', '\x17CA', '\x17CB', '\x5', '\x290', '\x149', '\x2', '\x17CB', 
		'\x17CC', '\a', '\x19C', '\x2', '\x2', '\x17CC', '\x17F3', '\x3', '\x2', 
		'\x2', '\x2', '\x17CD', '\x17CE', '\a', '\x175', '\x2', '\x2', '\x17CE', 
		'\x17CF', '\a', '\x19B', '\x2', '\x2', '\x17CF', '\x17D2', '\x5', '\x290', 
		'\x149', '\x2', '\x17D0', '\x17D1', '\a', '\x198', '\x2', '\x2', '\x17D1', 
		'\x17D3', '\x5', '\x290', '\x149', '\x2', '\x17D2', '\x17D0', '\x3', '\x2', 
		'\x2', '\x2', '\x17D2', '\x17D3', '\x3', '\x2', '\x2', '\x2', '\x17D3', 
		'\x17D4', '\x3', '\x2', '\x2', '\x2', '\x17D4', '\x17D5', '\a', '\x19C', 
		'\x2', '\x2', '\x17D5', '\x17F3', '\x3', '\x2', '\x2', '\x2', '\x17D6', 
		'\x17D7', '\x6', '\x15D', '\xA6', '\x2', '\x17D7', '\x17D8', '\a', '\x177', 
		'\x2', '\x2', '\x17D8', '\x17D9', '\a', '\x19B', '\x2', '\x2', '\x17D9', 
		'\x17ED', '\x5', '\x290', '\x149', '\x2', '\x17DA', '\x17DB', '\a', '\x1B1', 
		'\x2', '\x2', '\x17DB', '\x17DC', '\a', '\x1C4', '\x2', '\x2', '\x17DC', 
		'\x17DE', '\x5', '\x394', '\x1CB', '\x2', '\x17DD', '\x17DA', '\x3', '\x2', 
		'\x2', '\x2', '\x17DD', '\x17DE', '\x3', '\x2', '\x2', '\x2', '\x17DE', 
		'\x17E1', '\x3', '\x2', '\x2', '\x2', '\x17DF', '\x17E0', '\x6', '\x15D', 
		'\xA7', '\x2', '\x17E0', '\x17E2', '\x5', '\x2C0', '\x161', '\x2', '\x17E1', 
		'\x17DF', '\x3', '\x2', '\x2', '\x2', '\x17E1', '\x17E2', '\x3', '\x2', 
		'\x2', '\x2', '\x17E2', '\x17EE', '\x3', '\x2', '\x2', '\x2', '\x17E3', 
		'\x17E4', '\a', '\x1B1', '\x2', '\x2', '\x17E4', '\x17E5', '\a', '\x1B7', 
		'\x2', '\x2', '\x17E5', '\x17EE', '\x5', '\x394', '\x1CB', '\x2', '\x17E6', 
		'\x17E7', '\a', '\x198', '\x2', '\x2', '\x17E7', '\x17E8', '\x5', '\x462', 
		'\x232', '\x2', '\x17E8', '\x17E9', '\a', '\x198', '\x2', '\x2', '\x17E9', 
		'\x17EA', '\x5', '\x462', '\x232', '\x2', '\x17EA', '\x17EB', '\a', '\x198', 
		'\x2', '\x2', '\x17EB', '\x17EC', '\x5', '\x462', '\x232', '\x2', '\x17EC', 
		'\x17EE', '\x3', '\x2', '\x2', '\x2', '\x17ED', '\x17DD', '\x3', '\x2', 
		'\x2', '\x2', '\x17ED', '\x17E3', '\x3', '\x2', '\x2', '\x2', '\x17ED', 
		'\x17E6', '\x3', '\x2', '\x2', '\x2', '\x17EE', '\x17EF', '\x3', '\x2', 
		'\x2', '\x2', '\x17EF', '\x17F0', '\a', '\x19C', '\x2', '\x2', '\x17F0', 
		'\x17F3', '\x3', '\x2', '\x2', '\x2', '\x17F1', '\x17F3', '\x5', '\x2BA', 
		'\x15E', '\x2', '\x17F2', '\x16E0', '\x3', '\x2', '\x2', '\x2', '\x17F2', 
		'\x16E9', '\x3', '\x2', '\x2', '\x2', '\x17F2', '\x16ED', '\x3', '\x2', 
		'\x2', '\x2', '\x17F2', '\x16EF', '\x3', '\x2', '\x2', '\x2', '\x17F2', 
		'\x16F1', '\x3', '\x2', '\x2', '\x2', '\x17F2', '\x16F3', '\x3', '\x2', 
		'\x2', '\x2', '\x17F2', '\x16FE', '\x3', '\x2', '\x2', '\x2', '\x17F2', 
		'\x1709', '\x3', '\x2', '\x2', '\x2', '\x17F2', '\x1710', '\x3', '\x2', 
		'\x2', '\x2', '\x17F2', '\x1712', '\x3', '\x2', '\x2', '\x2', '\x17F2', 
		'\x1714', '\x3', '\x2', '\x2', '\x2', '\x17F2', '\x171B', '\x3', '\x2', 
		'\x2', '\x2', '\x17F2', '\x171D', '\x3', '\x2', '\x2', '\x2', '\x17F2', 
		'\x171F', '\x3', '\x2', '\x2', '\x2', '\x17F2', '\x1728', '\x3', '\x2', 
		'\x2', '\x2', '\x17F2', '\x1729', '\x3', '\x2', '\x2', '\x2', '\x17F2', 
		'\x172B', '\x3', '\x2', '\x2', '\x2', '\x17F2', '\x172D', '\x3', '\x2', 
		'\x2', '\x2', '\x17F2', '\x172F', '\x3', '\x2', '\x2', '\x2', '\x17F2', 
		'\x173C', '\x3', '\x2', '\x2', '\x2', '\x17F2', '\x1740', '\x3', '\x2', 
		'\x2', '\x2', '\x17F2', '\x1744', '\x3', '\x2', '\x2', '\x2', '\x17F2', 
		'\x174D', '\x3', '\x2', '\x2', '\x2', '\x17F2', '\x1754', '\x3', '\x2', 
		'\x2', '\x2', '\x17F2', '\x175B', '\x3', '\x2', '\x2', '\x2', '\x17F2', 
		'\x175F', '\x3', '\x2', '\x2', '\x2', '\x17F2', '\x1766', '\x3', '\x2', 
		'\x2', '\x2', '\x17F2', '\x1767', '\x3', '\x2', '\x2', '\x2', '\x17F2', 
		'\x176B', '\x3', '\x2', '\x2', '\x2', '\x17F2', '\x1774', '\x3', '\x2', 
		'\x2', '\x2', '\x17F2', '\x1778', '\x3', '\x2', '\x2', '\x2', '\x17F2', 
		'\x177C', '\x3', '\x2', '\x2', '\x2', '\x17F2', '\x1780', '\x3', '\x2', 
		'\x2', '\x2', '\x17F2', '\x1782', '\x3', '\x2', '\x2', '\x2', '\x17F2', 
		'\x1784', '\x3', '\x2', '\x2', '\x2', '\x17F2', '\x1786', '\x3', '\x2', 
		'\x2', '\x2', '\x17F2', '\x1788', '\x3', '\x2', '\x2', '\x2', '\x17F2', 
		'\x178A', '\x3', '\x2', '\x2', '\x2', '\x17F2', '\x1793', '\x3', '\x2', 
		'\x2', '\x2', '\x17F2', '\x179E', '\x3', '\x2', '\x2', '\x2', '\x17F2', 
		'\x17A0', '\x3', '\x2', '\x2', '\x2', '\x17F2', '\x17A7', '\x3', '\x2', 
		'\x2', '\x2', '\x17F2', '\x17AD', '\x3', '\x2', '\x2', '\x2', '\x17F2', 
		'\x17B0', '\x3', '\x2', '\x2', '\x2', '\x17F2', '\x17B2', '\x3', '\x2', 
		'\x2', '\x2', '\x17F2', '\x17B9', '\x3', '\x2', '\x2', '\x2', '\x17F2', 
		'\x17C2', '\x3', '\x2', '\x2', '\x2', '\x17F2', '\x17C4', '\x3', '\x2', 
		'\x2', '\x2', '\x17F2', '\x17C6', '\x3', '\x2', '\x2', '\x2', '\x17F2', 
		'\x17CD', '\x3', '\x2', '\x2', '\x2', '\x17F2', '\x17D6', '\x3', '\x2', 
		'\x2', '\x2', '\x17F2', '\x17F1', '\x3', '\x2', '\x2', '\x2', '\x17F3', 
		'\x2B9', '\x3', '\x2', '\x2', '\x2', '\x17F4', '\x17F5', '\x6', '\x15E', 
		'\xA8', '\x2', '\x17F5', '\x17F6', '\a', '\xF', '\x2', '\x2', '\x17F6', 
		'\x17F7', '\a', '\x19B', '\x2', '\x2', '\x17F7', '\x17F8', '\x5', '\x290', 
		'\x149', '\x2', '\x17F8', '\x17F9', '\a', '\x198', '\x2', '\x2', '\x17F9', 
		'\x17FA', '\x5', '\x290', '\x149', '\x2', '\x17FA', '\x17FB', '\a', '\x19C', 
		'\x2', '\x2', '\x17FB', '\x1814', '\x3', '\x2', '\x2', '\x2', '\x17FC', 
		'\x17FD', '\a', '\x9A', '\x2', '\x2', '\x17FD', '\x17FF', '\a', '\x19B', 
		'\x2', '\x2', '\x17FE', '\x1800', '\x5', '\x2E0', '\x171', '\x2', '\x17FF', 
		'\x17FE', '\x3', '\x2', '\x2', '\x2', '\x17FF', '\x1800', '\x3', '\x2', 
		'\x2', '\x2', '\x1800', '\x1801', '\x3', '\x2', '\x2', '\x2', '\x1801', 
		'\x1814', '\a', '\x19C', '\x2', '\x2', '\x1802', '\x1803', '\a', '\xB4', 
		'\x2', '\x2', '\x1803', '\x1814', '\x5', '\x2EC', '\x177', '\x2', '\x1804', 
		'\x1805', '\a', '\xE2', '\x2', '\x2', '\x1805', '\x1814', '\x5', '\x2EC', 
		'\x177', '\x2', '\x1806', '\x1807', '\a', '\xE3', '\x2', '\x2', '\x1807', 
		'\x1814', '\x5', '\x2EC', '\x177', '\x2', '\x1808', '\x1809', '\a', '\xE4', 
		'\x2', '\x2', '\x1809', '\x1814', '\x5', '\x2EC', '\x177', '\x2', '\x180A', 
		'\x180B', '\a', '\x102', '\x2', '\x2', '\x180B', '\x180C', '\a', '\x19B', 
		'\x2', '\x2', '\x180C', '\x180D', '\x5', '\x290', '\x149', '\x2', '\x180D', 
		'\x180E', '\a', '\x198', '\x2', '\x2', '\x180E', '\x180F', '\x5', '\x290', 
		'\x149', '\x2', '\x180F', '\x1810', '\a', '\x19C', '\x2', '\x2', '\x1810', 
		'\x1814', '\x3', '\x2', '\x2', '\x2', '\x1811', '\x1812', '\a', '\x103', 
		'\x2', '\x2', '\x1812', '\x1814', '\x5', '\x2EC', '\x177', '\x2', '\x1813', 
		'\x17F4', '\x3', '\x2', '\x2', '\x2', '\x1813', '\x17FC', '\x3', '\x2', 
		'\x2', '\x2', '\x1813', '\x1802', '\x3', '\x2', '\x2', '\x2', '\x1813', 
		'\x1804', '\x3', '\x2', '\x2', '\x2', '\x1813', '\x1806', '\x3', '\x2', 
		'\x2', '\x2', '\x1813', '\x1808', '\x3', '\x2', '\x2', '\x2', '\x1813', 
		'\x180A', '\x3', '\x2', '\x2', '\x2', '\x1813', '\x1811', '\x3', '\x2', 
		'\x2', '\x2', '\x1814', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x1815', 
		'\x1817', '\a', '\x19B', '\x2', '\x2', '\x1816', '\x1818', '\x5', '\x2BE', 
		'\x160', '\x2', '\x1817', '\x1816', '\x3', '\x2', '\x2', '\x2', '\x1817', 
		'\x1818', '\x3', '\x2', '\x2', '\x2', '\x1818', '\x1819', '\x3', '\x2', 
		'\x2', '\x2', '\x1819', '\x181A', '\a', '\x19C', '\x2', '\x2', '\x181A', 
		'\x2BD', '\x3', '\x2', '\x2', '\x2', '\x181B', '\x181C', '\x6', '\x160', 
		'\xA9', '\x2', '\x181C', '\x181D', '\a', '\x17E', '\x2', '\x2', '\x181D', 
		'\x2BF', '\x3', '\x2', '\x2', '\x2', '\x181E', '\x182B', '\a', '\xB3', 
		'\x2', '\x2', '\x181F', '\x1820', '\x5', '\x464', '\x233', '\x2', '\x1820', 
		'\x1821', '\a', '\x18A', '\x2', '\x2', '\x1821', '\x1822', '\x5', '\x464', 
		'\x233', '\x2', '\x1822', '\x182C', '\x3', '\x2', '\x2', '\x2', '\x1823', 
		'\x1828', '\x5', '\x2C2', '\x162', '\x2', '\x1824', '\x1825', '\a', '\x198', 
		'\x2', '\x2', '\x1825', '\x1827', '\x5', '\x2C2', '\x162', '\x2', '\x1826', 
		'\x1824', '\x3', '\x2', '\x2', '\x2', '\x1827', '\x182A', '\x3', '\x2', 
		'\x2', '\x2', '\x1828', '\x1826', '\x3', '\x2', '\x2', '\x2', '\x1828', 
		'\x1829', '\x3', '\x2', '\x2', '\x2', '\x1829', '\x182C', '\x3', '\x2', 
		'\x2', '\x2', '\x182A', '\x1828', '\x3', '\x2', '\x2', '\x2', '\x182B', 
		'\x181F', '\x3', '\x2', '\x2', '\x2', '\x182B', '\x1823', '\x3', '\x2', 
		'\x2', '\x2', '\x182C', '\x2C1', '\x3', '\x2', '\x2', '\x2', '\x182D', 
		'\x1833', '\x5', '\x464', '\x233', '\x2', '\x182E', '\x1830', '\t', '#', 
		'\x2', '\x2', '\x182F', '\x1831', '\a', '\x128', '\x2', '\x2', '\x1830', 
		'\x182F', '\x3', '\x2', '\x2', '\x2', '\x1830', '\x1831', '\x3', '\x2', 
		'\x2', '\x2', '\x1831', '\x1834', '\x3', '\x2', '\x2', '\x2', '\x1832', 
		'\x1834', '\a', '\x128', '\x2', '\x2', '\x1833', '\x182E', '\x3', '\x2', 
		'\x2', '\x2', '\x1833', '\x1832', '\x3', '\x2', '\x2', '\x2', '\x1833', 
		'\x1834', '\x3', '\x2', '\x2', '\x2', '\x1834', '\x2C3', '\x3', '\x2', 
		'\x2', '\x2', '\x1835', '\x1836', '\t', '`', '\x2', '\x2', '\x1836', '\x2C5', 
		'\x3', '\x2', '\x2', '\x2', '\x1837', '\x1838', '\a', '\x291', '\x2', 
		'\x2', '\x1838', '\x1850', '\a', '\x19B', '\x2', '\x2', '\x1839', '\x183C', 
		'\x5', '\x290', '\x149', '\x2', '\x183A', '\x183B', '\a', '\x1FC', '\x2', 
		'\x2', '\x183B', '\x183D', '\x5', '\x290', '\x149', '\x2', '\x183C', '\x183A', 
		'\x3', '\x2', '\x2', '\x2', '\x183C', '\x183D', '\x3', '\x2', '\x2', '\x2', 
		'\x183D', '\x1851', '\x3', '\x2', '\x2', '\x2', '\x183E', '\x1840', '\a', 
		'\x21C', '\x2', '\x2', '\x183F', '\x1841', '\x5', '\x290', '\x149', '\x2', 
		'\x1840', '\x183F', '\x3', '\x2', '\x2', '\x2', '\x1840', '\x1841', '\x3', 
		'\x2', '\x2', '\x2', '\x1841', '\x1842', '\x3', '\x2', '\x2', '\x2', '\x1842', 
		'\x1843', '\a', '\x1FC', '\x2', '\x2', '\x1843', '\x1851', '\x5', '\x290', 
		'\x149', '\x2', '\x1844', '\x1846', '\a', '\x28F', '\x2', '\x2', '\x1845', 
		'\x1847', '\x5', '\x290', '\x149', '\x2', '\x1846', '\x1845', '\x3', '\x2', 
		'\x2', '\x2', '\x1846', '\x1847', '\x3', '\x2', '\x2', '\x2', '\x1847', 
		'\x1848', '\x3', '\x2', '\x2', '\x2', '\x1848', '\x1849', '\a', '\x1FC', 
		'\x2', '\x2', '\x1849', '\x1851', '\x5', '\x290', '\x149', '\x2', '\x184A', 
		'\x184C', '\a', '\x1BD', '\x2', '\x2', '\x184B', '\x184D', '\x5', '\x290', 
		'\x149', '\x2', '\x184C', '\x184B', '\x3', '\x2', '\x2', '\x2', '\x184C', 
		'\x184D', '\x3', '\x2', '\x2', '\x2', '\x184D', '\x184E', '\x3', '\x2', 
		'\x2', '\x2', '\x184E', '\x184F', '\a', '\x1FC', '\x2', '\x2', '\x184F', 
		'\x1851', '\x5', '\x290', '\x149', '\x2', '\x1850', '\x1839', '\x3', '\x2', 
		'\x2', '\x2', '\x1850', '\x183E', '\x3', '\x2', '\x2', '\x2', '\x1850', 
		'\x1844', '\x3', '\x2', '\x2', '\x2', '\x1850', '\x184A', '\x3', '\x2', 
		'\x2', '\x2', '\x1851', '\x1852', '\x3', '\x2', '\x2', '\x2', '\x1852', 
		'\x1853', '\a', '\x19C', '\x2', '\x2', '\x1853', '\x2C7', '\x3', '\x2', 
		'\x2', '\x2', '\x1854', '\x1855', '\a', '\x283', '\x2', '\x2', '\x1855', 
		'\x1856', '\a', '\x19B', '\x2', '\x2', '\x1856', '\x1863', '\x5', '\x290', 
		'\x149', '\x2', '\x1857', '\x1858', '\a', '\x198', '\x2', '\x2', '\x1858', 
		'\x185B', '\x5', '\x290', '\x149', '\x2', '\x1859', '\x185A', '\a', '\x198', 
		'\x2', '\x2', '\x185A', '\x185C', '\x5', '\x290', '\x149', '\x2', '\x185B', 
		'\x1859', '\x3', '\x2', '\x2', '\x2', '\x185B', '\x185C', '\x3', '\x2', 
		'\x2', '\x2', '\x185C', '\x1864', '\x3', '\x2', '\x2', '\x2', '\x185D', 
		'\x185E', '\a', '\x1FC', '\x2', '\x2', '\x185E', '\x1861', '\x5', '\x290', 
		'\x149', '\x2', '\x185F', '\x1860', '\a', '\x1FB', '\x2', '\x2', '\x1860', 
		'\x1862', '\x5', '\x290', '\x149', '\x2', '\x1861', '\x185F', '\x3', '\x2', 
		'\x2', '\x2', '\x1861', '\x1862', '\x3', '\x2', '\x2', '\x2', '\x1862', 
		'\x1864', '\x3', '\x2', '\x2', '\x2', '\x1863', '\x1857', '\x3', '\x2', 
		'\x2', '\x2', '\x1863', '\x185D', '\x3', '\x2', '\x2', '\x2', '\x1864', 
		'\x1865', '\x3', '\x2', '\x2', '\x2', '\x1865', '\x1866', '\a', '\x19C', 
		'\x2', '\x2', '\x1866', '\x2C9', '\x3', '\x2', '\x2', '\x2', '\x1867', 
		'\x1868', '\x5', '\x454', '\x22B', '\x2', '\x1868', '\x186A', '\a', '\x19B', 
		'\x2', '\x2', '\x1869', '\x186B', '\x5', '\x2CC', '\x167', '\x2', '\x186A', 
		'\x1869', '\x3', '\x2', '\x2', '\x2', '\x186A', '\x186B', '\x3', '\x2', 
		'\x2', '\x2', '\x186B', '\x186C', '\x3', '\x2', '\x2', '\x2', '\x186C', 
		'\x186D', '\a', '\x19C', '\x2', '\x2', '\x186D', '\x1876', '\x3', '\x2', 
		'\x2', '\x2', '\x186E', '\x186F', '\x5', '\x45C', '\x22F', '\x2', '\x186F', 
		'\x1871', '\a', '\x19B', '\x2', '\x2', '\x1870', '\x1872', '\x5', '\x2E0', 
		'\x171', '\x2', '\x1871', '\x1870', '\x3', '\x2', '\x2', '\x2', '\x1871', 
		'\x1872', '\x3', '\x2', '\x2', '\x2', '\x1872', '\x1873', '\x3', '\x2', 
		'\x2', '\x2', '\x1873', '\x1874', '\a', '\x19C', '\x2', '\x2', '\x1874', 
		'\x1876', '\x3', '\x2', '\x2', '\x2', '\x1875', '\x1867', '\x3', '\x2', 
		'\x2', '\x2', '\x1875', '\x186E', '\x3', '\x2', '\x2', '\x2', '\x1876', 
		'\x2CB', '\x3', '\x2', '\x2', '\x2', '\x1877', '\x187C', '\x5', '\x2CE', 
		'\x168', '\x2', '\x1878', '\x1879', '\a', '\x198', '\x2', '\x2', '\x1879', 
		'\x187B', '\x5', '\x2CE', '\x168', '\x2', '\x187A', '\x1878', '\x3', '\x2', 
		'\x2', '\x2', '\x187B', '\x187E', '\x3', '\x2', '\x2', '\x2', '\x187C', 
		'\x187A', '\x3', '\x2', '\x2', '\x2', '\x187C', '\x187D', '\x3', '\x2', 
		'\x2', '\x2', '\x187D', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x187E', 
		'\x187C', '\x3', '\x2', '\x2', '\x2', '\x187F', '\x1881', '\x5', '\x290', 
		'\x149', '\x2', '\x1880', '\x1882', '\x5', '\x15C', '\xAF', '\x2', '\x1881', 
		'\x1880', '\x3', '\x2', '\x2', '\x2', '\x1881', '\x1882', '\x3', '\x2', 
		'\x2', '\x2', '\x1882', '\x2CF', '\x3', '\x2', '\x2', '\x2', '\x1883', 
		'\x1886', '\x5', '\x2D2', '\x16A', '\x2', '\x1884', '\x1885', '\a', '\x182', 
		'\x2', '\x2', '\x1885', '\x1887', '\x5', '\x290', '\x149', '\x2', '\x1886', 
		'\x1884', '\x3', '\x2', '\x2', '\x2', '\x1886', '\x1887', '\x3', '\x2', 
		'\x2', '\x2', '\x1887', '\x188A', '\x3', '\x2', '\x2', '\x2', '\x1888', 
		'\x188A', '\x5', '\x2D4', '\x16B', '\x2', '\x1889', '\x1883', '\x3', '\x2', 
		'\x2', '\x2', '\x1889', '\x1888', '\x3', '\x2', '\x2', '\x2', '\x188A', 
		'\x2D1', '\x3', '\x2', '\x2', '\x2', '\x188B', '\x188C', '\a', '\x1A2', 
		'\x2', '\x2', '\x188C', '\x188F', '\x5', '\x48A', '\x246', '\x2', '\x188D', 
		'\x188F', '\a', '\x1A3', '\x2', '\x2', '\x188E', '\x188B', '\x3', '\x2', 
		'\x2', '\x2', '\x188E', '\x188D', '\x3', '\x2', '\x2', '\x2', '\x188F', 
		'\x2D3', '\x3', '\x2', '\x2', '\x2', '\x1890', '\x1892', '\a', '\x1A4', 
		'\x2', '\x2', '\x1891', '\x1893', '\x5', '\x498', '\x24D', '\x2', '\x1892', 
		'\x1891', '\x3', '\x2', '\x2', '\x2', '\x1892', '\x1893', '\x3', '\x2', 
		'\x2', '\x2', '\x1893', '\x1894', '\x3', '\x2', '\x2', '\x2', '\x1894', 
		'\x1896', '\x5', '\x48A', '\x246', '\x2', '\x1895', '\x1897', '\x5', '\x460', 
		'\x231', '\x2', '\x1896', '\x1895', '\x3', '\x2', '\x2', '\x2', '\x1896', 
		'\x1897', '\x3', '\x2', '\x2', '\x2', '\x1897', '\x2D5', '\x3', '\x2', 
		'\x2', '\x2', '\x1898', '\x1899', '\x6', '\x16C', '\xAA', '\x2', '\x1899', 
		'\x189B', '\x5', '\x456', '\x22C', '\x2', '\x189A', '\x189C', '\x5', '\x460', 
		'\x231', '\x2', '\x189B', '\x189A', '\x3', '\x2', '\x2', '\x2', '\x189B', 
		'\x189C', '\x3', '\x2', '\x2', '\x2', '\x189C', '\x18A3', '\x3', '\x2', 
		'\x2', '\x2', '\x189D', '\x189E', '\x6', '\x16C', '\xAB', '\x2', '\x189E', 
		'\x18A0', '\x5', '\x48C', '\x247', '\x2', '\x189F', '\x18A1', '\x5', '\x460', 
		'\x231', '\x2', '\x18A0', '\x189F', '\x3', '\x2', '\x2', '\x2', '\x18A0', 
		'\x18A1', '\x3', '\x2', '\x2', '\x2', '\x18A1', '\x18A3', '\x3', '\x2', 
		'\x2', '\x2', '\x18A2', '\x1898', '\x3', '\x2', '\x2', '\x2', '\x18A2', 
		'\x189D', '\x3', '\x2', '\x2', '\x2', '\x18A3', '\x18A7', '\x3', '\x2', 
		'\x2', '\x2', '\x18A4', '\x18A5', '\a', '\x1E0', '\x2', '\x2', '\x18A5', 
		'\x18A7', '\x5', '\x460', '\x231', '\x2', '\x18A6', '\x18A2', '\x3', '\x2', 
		'\x2', '\x2', '\x18A6', '\x18A4', '\x3', '\x2', '\x2', '\x2', '\x18A7', 
		'\x2D7', '\x3', '\x2', '\x2', '\x2', '\x18A8', '\x18A9', '\a', '\x2A8', 
		'\x2', '\x2', '\x18A9', '\x18AA', '\x5', '\x290', '\x149', '\x2', '\x18AA', 
		'\x2D9', '\x3', '\x2', '\x2', '\x2', '\x18AB', '\x18AC', '\a', '\x28A', 
		'\x2', '\x2', '\x18AC', '\x18AD', '\x5', '\x290', '\x149', '\x2', '\x18AD', 
		'\x2DB', '\x3', '\x2', '\x2', '\x2', '\x18AE', '\x18AF', '\a', '\x1EC', 
		'\x2', '\x2', '\x18AF', '\x18B0', '\x5', '\x290', '\x149', '\x2', '\x18B0', 
		'\x2DD', '\x3', '\x2', '\x2', '\x2', '\x18B1', '\x18B3', '\a', '\x1B7', 
		'\x2', '\x2', '\x18B2', '\x18B4', '\x5', '\x38A', '\x1C6', '\x2', '\x18B3', 
		'\x18B2', '\x3', '\x2', '\x2', '\x2', '\x18B3', '\x18B4', '\x3', '\x2', 
		'\x2', '\x2', '\x18B4', '\x18DF', '\x3', '\x2', '\x2', '\x2', '\x18B5', 
		'\x18B7', '\a', '\x1C4', '\x2', '\x2', '\x18B6', '\x18B8', '\x5', '\x38A', 
		'\x1C6', '\x2', '\x18B7', '\x18B6', '\x3', '\x2', '\x2', '\x2', '\x18B7', 
		'\x18B8', '\x3', '\x2', '\x2', '\x2', '\x18B8', '\x18BA', '\x3', '\x2', 
		'\x2', '\x2', '\x18B9', '\x18BB', '\x5', '\x38E', '\x1C8', '\x2', '\x18BA', 
		'\x18B9', '\x3', '\x2', '\x2', '\x2', '\x18BA', '\x18BB', '\x3', '\x2', 
		'\x2', '\x2', '\x18BB', '\x18DF', '\x3', '\x2', '\x2', '\x2', '\x18BC', 
		'\x18BE', '\x5', '\x382', '\x1C2', '\x2', '\x18BD', '\x18BF', '\x5', '\x38A', 
		'\x1C6', '\x2', '\x18BE', '\x18BD', '\x3', '\x2', '\x2', '\x2', '\x18BE', 
		'\x18BF', '\x3', '\x2', '\x2', '\x2', '\x18BF', '\x18DF', '\x3', '\x2', 
		'\x2', '\x2', '\x18C0', '\x18C2', '\a', '.', '\x2', '\x2', '\x18C1', '\x18C3', 
		'\a', '\x212', '\x2', '\x2', '\x18C2', '\x18C1', '\x3', '\x2', '\x2', 
		'\x2', '\x18C2', '\x18C3', '\x3', '\x2', '\x2', '\x2', '\x18C3', '\x18DF', 
		'\x3', '\x2', '\x2', '\x2', '\x18C4', '\x18C6', '\a', '\x297', '\x2', 
		'\x2', '\x18C5', '\x18C7', '\a', '\x212', '\x2', '\x2', '\x18C6', '\x18C5', 
		'\x3', '\x2', '\x2', '\x2', '\x18C6', '\x18C7', '\x3', '\x2', '\x2', '\x2', 
		'\x18C7', '\x18DF', '\x3', '\x2', '\x2', '\x2', '\x18C8', '\x18DF', '\a', 
		'r', '\x2', '\x2', '\x18C9', '\x18CB', '\a', '\x162', '\x2', '\x2', '\x18CA', 
		'\x18CC', '\x5', '\x396', '\x1CC', '\x2', '\x18CB', '\x18CA', '\x3', '\x2', 
		'\x2', '\x2', '\x18CB', '\x18CC', '\x3', '\x2', '\x2', '\x2', '\x18CC', 
		'\x18DF', '\x3', '\x2', '\x2', '\x2', '\x18CD', '\x18CF', '\a', 'q', '\x2', 
		'\x2', '\x18CE', '\x18D0', '\x5', '\x396', '\x1CC', '\x2', '\x18CF', '\x18CE', 
		'\x3', '\x2', '\x2', '\x2', '\x18CF', '\x18D0', '\x3', '\x2', '\x2', '\x2', 
		'\x18D0', '\x18DF', '\x3', '\x2', '\x2', '\x2', '\x18D1', '\x18D3', '\a', 
		'\x1DE', '\x2', '\x2', '\x18D2', '\x18D4', '\x5', '\x484', '\x243', '\x2', 
		'\x18D3', '\x18D2', '\x3', '\x2', '\x2', '\x2', '\x18D3', '\x18D4', '\x3', 
		'\x2', '\x2', '\x2', '\x18D4', '\x18DF', '\x3', '\x2', '\x2', '\x2', '\x18D5', 
		'\x18D6', '\x6', '\x170', '\xAC', '\x2', '\x18D6', '\x18DF', '\a', '\xAE', 
		'\x2', '\x2', '\x18D7', '\x18D8', '\x6', '\x170', '\xAD', '\x2', '\x18D8', 
		'\x18DF', '\x5', '\x388', '\x1C5', '\x2', '\x18D9', '\x18DA', '\x6', '\x170', 
		'\xAE', '\x2', '\x18DA', '\x18DC', '\a', '\x1F8', '\x2', '\x2', '\x18DB', 
		'\x18DD', '\x5', '\x486', '\x244', '\x2', '\x18DC', '\x18DB', '\x3', '\x2', 
		'\x2', '\x2', '\x18DC', '\x18DD', '\x3', '\x2', '\x2', '\x2', '\x18DD', 
		'\x18DF', '\x3', '\x2', '\x2', '\x2', '\x18DE', '\x18B1', '\x3', '\x2', 
		'\x2', '\x2', '\x18DE', '\x18B5', '\x3', '\x2', '\x2', '\x2', '\x18DE', 
		'\x18BC', '\x3', '\x2', '\x2', '\x2', '\x18DE', '\x18C0', '\x3', '\x2', 
		'\x2', '\x2', '\x18DE', '\x18C4', '\x3', '\x2', '\x2', '\x2', '\x18DE', 
		'\x18C8', '\x3', '\x2', '\x2', '\x2', '\x18DE', '\x18C9', '\x3', '\x2', 
		'\x2', '\x2', '\x18DE', '\x18CD', '\x3', '\x2', '\x2', '\x2', '\x18DE', 
		'\x18D1', '\x3', '\x2', '\x2', '\x2', '\x18DE', '\x18D5', '\x3', '\x2', 
		'\x2', '\x2', '\x18DE', '\x18D7', '\x3', '\x2', '\x2', '\x2', '\x18DE', 
		'\x18D9', '\x3', '\x2', '\x2', '\x2', '\x18DF', '\x2DF', '\x3', '\x2', 
		'\x2', '\x2', '\x18E0', '\x18E5', '\x5', '\x290', '\x149', '\x2', '\x18E1', 
		'\x18E2', '\a', '\x198', '\x2', '\x2', '\x18E2', '\x18E4', '\x5', '\x290', 
		'\x149', '\x2', '\x18E3', '\x18E1', '\x3', '\x2', '\x2', '\x2', '\x18E4', 
		'\x18E7', '\x3', '\x2', '\x2', '\x2', '\x18E5', '\x18E3', '\x3', '\x2', 
		'\x2', '\x2', '\x18E5', '\x18E6', '\x3', '\x2', '\x2', '\x2', '\x18E6', 
		'\x2E1', '\x3', '\x2', '\x2', '\x2', '\x18E7', '\x18E5', '\x3', '\x2', 
		'\x2', '\x2', '\x18E8', '\x18E9', '\a', '\x1C4', '\x2', '\x2', '\x18E9', 
		'\x18EC', '\a', '\x26C', '\x2', '\x2', '\x18EA', '\x18EC', '\a', '\n', 
		'\x2', '\x2', '\x18EB', '\x18E8', '\x3', '\x2', '\x2', '\x2', '\x18EB', 
		'\x18EA', '\x3', '\x2', '\x2', '\x2', '\x18EC', '\x2E3', '\x3', '\x2', 
		'\x2', '\x2', '\x18ED', '\x18EE', '\t', '\x61', '\x2', '\x2', '\x18EE', 
		'\x2E5', '\x3', '\x2', '\x2', '\x2', '\x18EF', '\x18F0', '\t', '\x62', 
		'\x2', '\x2', '\x18F0', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x18F1', 
		'\x18F4', '\x5', '\x2EA', '\x176', '\x2', '\x18F2', '\x18F4', '\t', '\x63', 
		'\x2', '\x2', '\x18F3', '\x18F1', '\x3', '\x2', '\x2', '\x2', '\x18F3', 
		'\x18F2', '\x3', '\x2', '\x2', '\x2', '\x18F4', '\x2E9', '\x3', '\x2', 
		'\x2', '\x2', '\x18F5', '\x18F6', '\t', '\x64', '\x2', '\x2', '\x18F6', 
		'\x2EB', '\x3', '\x2', '\x2', '\x2', '\x18F7', '\x18F8', '\a', '\x19B', 
		'\x2', '\x2', '\x18F8', '\x18F9', '\x5', '\x2E0', '\x171', '\x2', '\x18F9', 
		'\x18FA', '\a', '\x19C', '\x2', '\x2', '\x18FA', '\x2ED', '\x3', '\x2', 
		'\x2', '\x2', '\x18FB', '\x18FC', '\a', '\x19B', '\x2', '\x2', '\x18FC', 
		'\x18FD', '\x5', '\x290', '\x149', '\x2', '\x18FD', '\x18FE', '\a', '\x19C', 
		'\x2', '\x2', '\x18FE', '\x2EF', '\x3', '\x2', '\x2', '\x2', '\x18FF', 
		'\x1900', '\a', '\x19B', '\x2', '\x2', '\x1900', '\x1901', '\x5', '\x29C', 
		'\x14F', '\x2', '\x1901', '\x1902', '\a', '\x19C', '\x2', '\x2', '\x1902', 
		'\x2F1', '\x3', '\x2', '\x2', '\x2', '\x1903', '\x1908', '\x5', '\x2F4', 
		'\x17B', '\x2', '\x1904', '\x1905', '\a', '\x198', '\x2', '\x2', '\x1905', 
		'\x1907', '\x5', '\x2F4', '\x17B', '\x2', '\x1906', '\x1904', '\x3', '\x2', 
		'\x2', '\x2', '\x1907', '\x190A', '\x3', '\x2', '\x2', '\x2', '\x1908', 
		'\x1906', '\x3', '\x2', '\x2', '\x2', '\x1908', '\x1909', '\x3', '\x2', 
		'\x2', '\x2', '\x1909', '\x2F3', '\x3', '\x2', '\x2', '\x2', '\x190A', 
		'\x1908', '\x3', '\x2', '\x2', '\x2', '\x190B', '\x190D', '\x5', '\x290', 
		'\x149', '\x2', '\x190C', '\x190E', '\x5', '\x14A', '\xA6', '\x2', '\x190D', 
		'\x190C', '\x3', '\x2', '\x2', '\x2', '\x190D', '\x190E', '\x3', '\x2', 
		'\x2', '\x2', '\x190E', '\x2F5', '\x3', '\x2', '\x2', '\x2', '\x190F', 
		'\x1914', '\x5', '\x2F8', '\x17D', '\x2', '\x1910', '\x1911', '\a', '\x198', 
		'\x2', '\x2', '\x1911', '\x1913', '\x5', '\x2F8', '\x17D', '\x2', '\x1912', 
		'\x1910', '\x3', '\x2', '\x2', '\x2', '\x1913', '\x1916', '\x3', '\x2', 
		'\x2', '\x2', '\x1914', '\x1912', '\x3', '\x2', '\x2', '\x2', '\x1914', 
		'\x1915', '\x3', '\x2', '\x2', '\x2', '\x1915', '\x2F7', '\x3', '\x2', 
		'\x2', '\x2', '\x1916', '\x1914', '\x3', '\x2', '\x2', '\x2', '\x1917', 
		'\x1918', '\x5', '\x290', '\x149', '\x2', '\x1918', '\x2F9', '\x3', '\x2', 
		'\x2', '\x2', '\x1919', '\x191A', '\x6', '\x17E', '\xAF', '\x2', '\x191A', 
		'\x191B', '\a', '\x1FB', '\x2', '\x2', '\x191B', '\x191C', '\a', 'S', 
		'\x2', '\x2', '\x191C', '\x191D', '\x5', '\x478', '\x23D', '\x2', '\x191D', 
		'\x2FB', '\x3', '\x2', '\x2', '\x2', '\x191E', '\x192C', '\x5', '\x4', 
		'\x3', '\x2', '\x191F', '\x192C', '\x5', '\x2FE', '\x180', '\x2', '\x1920', 
		'\x192C', '\x5', '\x300', '\x181', '\x2', '\x1921', '\x192C', '\x5', '\x308', 
		'\x185', '\x2', '\x1922', '\x192C', '\x5', '\x30C', '\x187', '\x2', '\x1923', 
		'\x192C', '\x5', '\x30E', '\x188', '\x2', '\x1924', '\x192C', '\x5', '\x314', 
		'\x18B', '\x2', '\x1925', '\x192C', '\x5', '\x316', '\x18C', '\x2', '\x1926', 
		'\x192C', '\x5', '\x332', '\x19A', '\x2', '\x1927', '\x192C', '\x5', '\x330', 
		'\x199', '\x2', '\x1928', '\x192C', '\x5', '\x344', '\x1A3', '\x2', '\x1929', 
		'\x192C', '\x5', '\x348', '\x1A5', '\x2', '\x192A', '\x192C', '\x5', '\x346', 
		'\x1A4', '\x2', '\x192B', '\x191E', '\x3', '\x2', '\x2', '\x2', '\x192B', 
		'\x191F', '\x3', '\x2', '\x2', '\x2', '\x192B', '\x1920', '\x3', '\x2', 
		'\x2', '\x2', '\x192B', '\x1921', '\x3', '\x2', '\x2', '\x2', '\x192B', 
		'\x1922', '\x3', '\x2', '\x2', '\x2', '\x192B', '\x1923', '\x3', '\x2', 
		'\x2', '\x2', '\x192B', '\x1924', '\x3', '\x2', '\x2', '\x2', '\x192B', 
		'\x1925', '\x3', '\x2', '\x2', '\x2', '\x192B', '\x1926', '\x3', '\x2', 
		'\x2', '\x2', '\x192B', '\x1927', '\x3', '\x2', '\x2', '\x2', '\x192B', 
		'\x1928', '\x3', '\x2', '\x2', '\x2', '\x192B', '\x1929', '\x3', '\x2', 
		'\x2', '\x2', '\x192B', '\x192A', '\x3', '\x2', '\x2', '\x2', '\x192C', 
		'\x2FD', '\x3', '\x2', '\x2', '\x2', '\x192D', '\x192E', '\a', '\x263', 
		'\x2', '\x2', '\x192E', '\x192F', '\x5', '\x290', '\x149', '\x2', '\x192F', 
		'\x2FF', '\x3', '\x2', '\x2', '\x2', '\x1930', '\x1931', '\a', '\x208', 
		'\x2', '\x2', '\x1931', '\x1932', '\x5', '\x302', '\x182', '\x2', '\x1932', 
		'\x1933', '\a', '\x12', '\x2', '\x2', '\x1933', '\x1934', '\a', '\x208', 
		'\x2', '\x2', '\x1934', '\x301', '\x3', '\x2', '\x2', '\x2', '\x1935', 
		'\x1936', '\x5', '\x290', '\x149', '\x2', '\x1936', '\x193B', '\x5', '\x304', 
		'\x183', '\x2', '\x1937', '\x1938', '\a', '\x1ED', '\x2', '\x2', '\x1938', 
		'\x193C', '\x5', '\x302', '\x182', '\x2', '\x1939', '\x193A', '\a', '\x1EC', 
		'\x2', '\x2', '\x193A', '\x193C', '\x5', '\x306', '\x184', '\x2', '\x193B', 
		'\x1937', '\x3', '\x2', '\x2', '\x2', '\x193B', '\x1939', '\x3', '\x2', 
		'\x2', '\x2', '\x193B', '\x193C', '\x3', '\x2', '\x2', '\x2', '\x193C', 
		'\x303', '\x3', '\x2', '\x2', '\x2', '\x193D', '\x193E', '\a', '\x28A', 
		'\x2', '\x2', '\x193E', '\x193F', '\x5', '\x306', '\x184', '\x2', '\x193F', 
		'\x305', '\x3', '\x2', '\x2', '\x2', '\x1940', '\x1941', '\x5', '\x2FC', 
		'\x17F', '\x2', '\x1941', '\x1942', '\a', '\x199', '\x2', '\x2', '\x1942', 
		'\x1944', '\x3', '\x2', '\x2', '\x2', '\x1943', '\x1940', '\x3', '\x2', 
		'\x2', '\x2', '\x1944', '\x1945', '\x3', '\x2', '\x2', '\x2', '\x1945', 
		'\x1943', '\x3', '\x2', '\x2', '\x2', '\x1945', '\x1946', '\x3', '\x2', 
		'\x2', '\x2', '\x1946', '\x307', '\x3', '\x2', '\x2', '\x2', '\x1947', 
		'\x1949', '\a', '\x1C1', '\x2', '\x2', '\x1948', '\x194A', '\x5', '\x290', 
		'\x149', '\x2', '\x1949', '\x1948', '\x3', '\x2', '\x2', '\x2', '\x1949', 
		'\x194A', '\x3', '\x2', '\x2', '\x2', '\x194A', '\x194E', '\x3', '\x2', 
		'\x2', '\x2', '\x194B', '\x194C', '\x5', '\x2D8', '\x16D', '\x2', '\x194C', 
		'\x194D', '\x5', '\x304', '\x183', '\x2', '\x194D', '\x194F', '\x3', '\x2', 
		'\x2', '\x2', '\x194E', '\x194B', '\x3', '\x2', '\x2', '\x2', '\x194F', 
		'\x1950', '\x3', '\x2', '\x2', '\x2', '\x1950', '\x194E', '\x3', '\x2', 
		'\x2', '\x2', '\x1950', '\x1951', '\x3', '\x2', '\x2', '\x2', '\x1951', 
		'\x1953', '\x3', '\x2', '\x2', '\x2', '\x1952', '\x1954', '\x5', '\x30A', 
		'\x186', '\x2', '\x1953', '\x1952', '\x3', '\x2', '\x2', '\x2', '\x1953', 
		'\x1954', '\x3', '\x2', '\x2', '\x2', '\x1954', '\x1955', '\x3', '\x2', 
		'\x2', '\x2', '\x1955', '\x1956', '\a', '\x12', '\x2', '\x2', '\x1956', 
		'\x1957', '\a', '\x1C1', '\x2', '\x2', '\x1957', '\x309', '\x3', '\x2', 
		'\x2', '\x2', '\x1958', '\x1959', '\a', '\x1EC', '\x2', '\x2', '\x1959', 
		'\x195A', '\x5', '\x306', '\x184', '\x2', '\x195A', '\x30B', '\x3', '\x2', 
		'\x2', '\x2', '\x195B', '\x195C', '\x5', '\x310', '\x189', '\x2', '\x195C', 
		'\x195E', '\x5', '\x312', '\x18A', '\x2', '\x195D', '\x195F', '\x5', '\x446', 
		'\x224', '\x2', '\x195E', '\x195D', '\x3', '\x2', '\x2', '\x2', '\x195E', 
		'\x195F', '\x3', '\x2', '\x2', '\x2', '\x195F', '\x30D', '\x3', '\x2', 
		'\x2', '\x2', '\x1960', '\x1961', '\x5', '\x312', '\x18A', '\x2', '\x1961', 
		'\x30F', '\x3', '\x2', '\x2', '\x2', '\x1962', '\x1963', '\x5', '\x444', 
		'\x223', '\x2', '\x1963', '\x1964', '\a', '\x19A', '\x2', '\x2', '\x1964', 
		'\x311', '\x3', '\x2', '\x2', '\x2', '\x1965', '\x1967', '\a', '\a', '\x2', 
		'\x2', '\x1966', '\x1968', '\x5', '\x31E', '\x190', '\x2', '\x1967', '\x1966', 
		'\x3', '\x2', '\x2', '\x2', '\x1967', '\x1968', '\x3', '\x2', '\x2', '\x2', 
		'\x1968', '\x196A', '\x3', '\x2', '\x2', '\x2', '\x1969', '\x196B', '\x5', 
		'\x306', '\x184', '\x2', '\x196A', '\x1969', '\x3', '\x2', '\x2', '\x2', 
		'\x196A', '\x196B', '\x3', '\x2', '\x2', '\x2', '\x196B', '\x196C', '\x3', 
		'\x2', '\x2', '\x2', '\x196C', '\x196D', '\a', '\x12', '\x2', '\x2', '\x196D', 
		'\x313', '\x3', '\x2', '\x2', '\x2', '\x196E', '\x196F', '\x5', '\x310', 
		'\x189', '\x2', '\x196F', '\x1971', '\x5', '\x316', '\x18C', '\x2', '\x1970', 
		'\x1972', '\x5', '\x446', '\x224', '\x2', '\x1971', '\x1970', '\x3', '\x2', 
		'\x2', '\x2', '\x1971', '\x1972', '\x3', '\x2', '\x2', '\x2', '\x1972', 
		'\x315', '\x3', '\x2', '\x2', '\x2', '\x1973', '\x1977', '\x5', '\x318', 
		'\x18D', '\x2', '\x1974', '\x1977', '\x5', '\x31A', '\x18E', '\x2', '\x1975', 
		'\x1977', '\x5', '\x31C', '\x18F', '\x2', '\x1976', '\x1973', '\x3', '\x2', 
		'\x2', '\x2', '\x1976', '\x1974', '\x3', '\x2', '\x2', '\x2', '\x1976', 
		'\x1975', '\x3', '\x2', '\x2', '\x2', '\x1977', '\x317', '\x3', '\x2', 
		'\x2', '\x2', '\x1978', '\x1979', '\a', '\x22A', '\x2', '\x2', '\x1979', 
		'\x197A', '\x5', '\x306', '\x184', '\x2', '\x197A', '\x197B', '\a', '\x12', 
		'\x2', '\x2', '\x197B', '\x197C', '\a', '\x22A', '\x2', '\x2', '\x197C', 
		'\x319', '\x3', '\x2', '\x2', '\x2', '\x197D', '\x197E', '\a', '\x2AA', 
		'\x2', '\x2', '\x197E', '\x197F', '\x5', '\x290', '\x149', '\x2', '\x197F', 
		'\x1980', '\a', '\x11', '\x2', '\x2', '\x1980', '\x1981', '\x5', '\x306', 
		'\x184', '\x2', '\x1981', '\x1982', '\a', '\x12', '\x2', '\x2', '\x1982', 
		'\x1983', '\a', '\x2AA', '\x2', '\x2', '\x1983', '\x31B', '\x3', '\x2', 
		'\x2', '\x2', '\x1984', '\x1985', '\a', '\x25E', '\x2', '\x2', '\x1985', 
		'\x1986', '\x5', '\x306', '\x184', '\x2', '\x1986', '\x1987', '\a', '\x16C', 
		'\x2', '\x2', '\x1987', '\x1988', '\x5', '\x290', '\x149', '\x2', '\x1988', 
		'\x1989', '\a', '\x12', '\x2', '\x2', '\x1989', '\x198A', '\a', '\x25E', 
		'\x2', '\x2', '\x198A', '\x31D', '\x3', '\x2', '\x2', '\x2', '\x198B', 
		'\x198C', '\x5', '\x320', '\x191', '\x2', '\x198C', '\x198D', '\a', '\x199', 
		'\x2', '\x2', '\x198D', '\x198F', '\x3', '\x2', '\x2', '\x2', '\x198E', 
		'\x198B', '\x3', '\x2', '\x2', '\x2', '\x198F', '\x1990', '\x3', '\x2', 
		'\x2', '\x2', '\x1990', '\x198E', '\x3', '\x2', '\x2', '\x2', '\x1990', 
		'\x1991', '\x3', '\x2', '\x2', '\x2', '\x1991', '\x31F', '\x3', '\x2', 
		'\x2', '\x2', '\x1992', '\x1997', '\x5', '\x322', '\x192', '\x2', '\x1993', 
		'\x1997', '\x5', '\x324', '\x193', '\x2', '\x1994', '\x1997', '\x5', '\x32A', 
		'\x196', '\x2', '\x1995', '\x1997', '\x5', '\x32E', '\x198', '\x2', '\x1996', 
		'\x1992', '\x3', '\x2', '\x2', '\x2', '\x1996', '\x1993', '\x3', '\x2', 
		'\x2', '\x2', '\x1996', '\x1994', '\x3', '\x2', '\x2', '\x2', '\x1996', 
		'\x1995', '\x3', '\x2', '\x2', '\x2', '\x1997', '\x321', '\x3', '\x2', 
		'\x2', '\x2', '\x1998', '\x1999', '\a', '\x1DF', '\x2', '\x2', '\x1999', 
		'\x199A', '\x5', '\x458', '\x22D', '\x2', '\x199A', '\x199C', '\x5', '\x380', 
		'\x1C1', '\x2', '\x199B', '\x199D', '\x5', '\x3CA', '\x1E6', '\x2', '\x199C', 
		'\x199B', '\x3', '\x2', '\x2', '\x2', '\x199C', '\x199D', '\x3', '\x2', 
		'\x2', '\x2', '\x199D', '\x19A0', '\x3', '\x2', '\x2', '\x2', '\x199E', 
		'\x199F', '\a', '\x1E0', '\x2', '\x2', '\x199F', '\x19A1', '\x5', '\x290', 
		'\x149', '\x2', '\x19A0', '\x199E', '\x3', '\x2', '\x2', '\x2', '\x19A0', 
		'\x19A1', '\x3', '\x2', '\x2', '\x2', '\x19A1', '\x323', '\x3', '\x2', 
		'\x2', '\x2', '\x19A2', '\x19A3', '\a', '\x1DF', '\x2', '\x2', '\x19A3', 
		'\x19A4', '\x5', '\x456', '\x22C', '\x2', '\x19A4', '\x19A5', '\a', '\x1C8', 
		'\x2', '\x2', '\x19A5', '\x19A6', '\a', '\x1FB', '\x2', '\x2', '\x19A6', 
		'\x19A7', '\x5', '\x326', '\x194', '\x2', '\x19A7', '\x325', '\x3', '\x2', 
		'\x2', '\x2', '\x19A8', '\x19AB', '\x5', '\x462', '\x232', '\x2', '\x19A9', 
		'\x19AB', '\x5', '\x328', '\x195', '\x2', '\x19AA', '\x19A8', '\x3', '\x2', 
		'\x2', '\x2', '\x19AA', '\x19A9', '\x3', '\x2', '\x2', '\x2', '\x19AB', 
		'\x327', '\x3', '\x2', '\x2', '\x2', '\x19AC', '\x19AE', '\a', '\x274', 
		'\x2', '\x2', '\x19AD', '\x19AF', '\a', '\x172', '\x2', '\x2', '\x19AE', 
		'\x19AD', '\x3', '\x2', '\x2', '\x2', '\x19AE', '\x19AF', '\x3', '\x2', 
		'\x2', '\x2', '\x19AF', '\x19B0', '\x3', '\x2', '\x2', '\x2', '\x19B0', 
		'\x19B1', '\x5', '\x476', '\x23C', '\x2', '\x19B1', '\x329', '\x3', '\x2', 
		'\x2', '\x2', '\x19B2', '\x19B3', '\a', '\x1DF', '\x2', '\x2', '\x19B3', 
		'\x19B4', '\t', '\x65', '\x2', '\x2', '\x19B4', '\x19B5', '\a', '\x18', 
		'\x2', '\x2', '\x19B5', '\x19B6', '\a', '\x1FB', '\x2', '\x2', '\x19B6', 
		'\x19BB', '\x5', '\x32C', '\x197', '\x2', '\x19B7', '\x19B8', '\a', '\x198', 
		'\x2', '\x2', '\x19B8', '\x19BA', '\x5', '\x32C', '\x197', '\x2', '\x19B9', 
		'\x19B7', '\x3', '\x2', '\x2', '\x2', '\x19BA', '\x19BD', '\x3', '\x2', 
		'\x2', '\x2', '\x19BB', '\x19B9', '\x3', '\x2', '\x2', '\x2', '\x19BB', 
		'\x19BC', '\x3', '\x2', '\x2', '\x2', '\x19BC', '\x19BE', '\x3', '\x2', 
		'\x2', '\x2', '\x19BD', '\x19BB', '\x3', '\x2', '\x2', '\x2', '\x19BE', 
		'\x19BF', '\x5', '\x2FC', '\x17F', '\x2', '\x19BF', '\x32B', '\x3', '\x2', 
		'\x2', '\x2', '\x19C0', '\x19C8', '\x5', '\x326', '\x194', '\x2', '\x19C1', 
		'\x19C8', '\x5', '\x456', '\x22C', '\x2', '\x19C2', '\x19C8', '\a', '\x275', 
		'\x2', '\x2', '\x19C3', '\x19C4', '\x5', '\x2E4', '\x173', '\x2', '\x19C4', 
		'\x19C5', '\a', '\x90', '\x2', '\x2', '\x19C5', '\x19C8', '\x3', '\x2', 
		'\x2', '\x2', '\x19C6', '\x19C8', '\a', '\x273', '\x2', '\x2', '\x19C7', 
		'\x19C0', '\x3', '\x2', '\x2', '\x2', '\x19C7', '\x19C1', '\x3', '\x2', 
		'\x2', '\x2', '\x19C7', '\x19C2', '\x3', '\x2', '\x2', '\x2', '\x19C7', 
		'\x19C3', '\x3', '\x2', '\x2', '\x2', '\x19C7', '\x19C6', '\x3', '\x2', 
		'\x2', '\x2', '\x19C8', '\x32D', '\x3', '\x2', '\x2', '\x2', '\x19C9', 
		'\x19CA', '\a', '\x1DF', '\x2', '\x2', '\x19CA', '\x19CB', '\x5', '\x456', 
		'\x22C', '\x2', '\x19CB', '\x19CC', '\a', '\x1D3', '\x2', '\x2', '\x19CC', 
		'\x19CD', '\a', '\x1FB', '\x2', '\x2', '\x19CD', '\x19CE', '\x5', '\x10C', 
		'\x87', '\x2', '\x19CE', '\x32F', '\x3', '\x2', '\x2', '\x2', '\x19CF', 
		'\x19D0', '\a', '\x217', '\x2', '\x2', '\x19D0', '\x19D1', '\x5', '\x446', 
		'\x224', '\x2', '\x19D1', '\x331', '\x3', '\x2', '\x2', '\x2', '\x19D2', 
		'\x19D3', '\a', '\x21D', '\x2', '\x2', '\x19D3', '\x19D4', '\x5', '\x446', 
		'\x224', '\x2', '\x19D4', '\x333', '\x3', '\x2', '\x2', '\x2', '\x19D5', 
		'\x19D9', '\a', '\x1FE', '\x2', '\x2', '\x19D6', '\x19DA', '\a', 'm', 
		'\x2', '\x2', '\x19D7', '\x19D8', '\x6', '\x19B', '\xB0', '\x2', '\x19D8', 
		'\x19DA', '\a', '\x144', '\x2', '\x2', '\x19D9', '\x19D6', '\x3', '\x2', 
		'\x2', '\x2', '\x19D9', '\x19D7', '\x3', '\x2', '\x2', '\x2', '\x19D9', 
		'\x19DA', '\x3', '\x2', '\x2', '\x2', '\x19DA', '\x19DB', '\x3', '\x2', 
		'\x2', '\x2', '\x19DB', '\x19EE', '\a', 'x', '\x2', '\x2', '\x19DC', '\x19E1', 
		'\x5', '\x338', '\x19D', '\x2', '\x19DD', '\x19DE', '\a', '\x198', '\x2', 
		'\x2', '\x19DE', '\x19E0', '\x5', '\x338', '\x19D', '\x2', '\x19DF', '\x19DD', 
		'\x3', '\x2', '\x2', '\x2', '\x19E0', '\x19E3', '\x3', '\x2', '\x2', '\x2', 
		'\x19E1', '\x19DF', '\x3', '\x2', '\x2', '\x2', '\x19E1', '\x19E2', '\x3', 
		'\x2', '\x2', '\x2', '\x19E2', '\x19EF', '\x3', '\x2', '\x2', '\x2', '\x19E3', 
		'\x19E1', '\x3', '\x2', '\x2', '\x2', '\x19E4', '\x19E5', '\a', '\x1C8', 
		'\x2', '\x2', '\x19E5', '\x19E6', '\x5', '\x336', '\x19C', '\x2', '\x19E6', 
		'\x19EB', '\x5', '\x33A', '\x19E', '\x2', '\x19E7', '\x19E8', '\a', '\x198', 
		'\x2', '\x2', '\x19E8', '\x19EA', '\x5', '\x33A', '\x19E', '\x2', '\x19E9', 
		'\x19E7', '\x3', '\x2', '\x2', '\x2', '\x19EA', '\x19ED', '\x3', '\x2', 
		'\x2', '\x2', '\x19EB', '\x19E9', '\x3', '\x2', '\x2', '\x2', '\x19EB', 
		'\x19EC', '\x3', '\x2', '\x2', '\x2', '\x19EC', '\x19EF', '\x3', '\x2', 
		'\x2', '\x2', '\x19ED', '\x19EB', '\x3', '\x2', '\x2', '\x2', '\x19EE', 
		'\x19DC', '\x3', '\x2', '\x2', '\x2', '\x19EE', '\x19E4', '\x3', '\x2', 
		'\x2', '\x2', '\x19EF', '\x335', '\x3', '\x2', '\x2', '\x2', '\x19F0', 
		'\x19F4', '\x5', '\x46A', '\x236', '\x2', '\x19F1', '\x19F4', '\x5', '\x2D0', 
		'\x169', '\x2', '\x19F2', '\x19F4', '\x5', '\x45C', '\x22F', '\x2', '\x19F3', 
		'\x19F0', '\x3', '\x2', '\x2', '\x2', '\x19F3', '\x19F1', '\x3', '\x2', 
		'\x2', '\x2', '\x19F3', '\x19F2', '\x3', '\x2', '\x2', '\x2', '\x19F4', 
		'\x337', '\x3', '\x2', '\x2', '\x2', '\x19F5', '\x19F8', '\x5', '\x2D0', 
		'\x169', '\x2', '\x19F6', '\x19F8', '\x5', '\x456', '\x22C', '\x2', '\x19F7', 
		'\x19F5', '\x3', '\x2', '\x2', '\x2', '\x19F7', '\x19F6', '\x3', '\x2', 
		'\x2', '\x2', '\x19F8', '\x19F9', '\x3', '\x2', '\x2', '\x2', '\x19F9', 
		'\x19FA', '\a', '\x181', '\x2', '\x2', '\x19FA', '\x19FB', '\t', '\x66', 
		'\x2', '\x2', '\x19FB', '\x339', '\x3', '\x2', '\x2', '\x2', '\x19FC', 
		'\x19FF', '\x5', '\x2D0', '\x169', '\x2', '\x19FD', '\x19FF', '\x5', '\x456', 
		'\x22C', '\x2', '\x19FE', '\x19FC', '\x3', '\x2', '\x2', '\x2', '\x19FE', 
		'\x19FD', '\x3', '\x2', '\x2', '\x2', '\x19FF', '\x1A00', '\x3', '\x2', 
		'\x2', '\x2', '\x1A00', '\x1A03', '\a', '\x181', '\x2', '\x2', '\x1A01', 
		'\x1A04', '\x5', '\x33C', '\x19F', '\x2', '\x1A02', '\x1A04', '\a', '\x126', 
		'\x2', '\x2', '\x1A03', '\x1A01', '\x3', '\x2', '\x2', '\x2', '\x1A03', 
		'\x1A02', '\x3', '\x2', '\x2', '\x2', '\x1A04', '\x33B', '\x3', '\x2', 
		'\x2', '\x2', '\x1A05', '\x1A06', '\t', 'g', '\x2', '\x2', '\x1A06', '\x33D', 
		'\x3', '\x2', '\x2', '\x2', '\x1A07', '\x1A0A', '\a', '\x26F', '\x2', 
		'\x2', '\x1A08', '\x1A0B', '\x5', '\x456', '\x22C', '\x2', '\x1A09', '\x1A0B', 
		'\x5', '\x328', '\x195', '\x2', '\x1A0A', '\x1A08', '\x3', '\x2', '\x2', 
		'\x2', '\x1A0A', '\x1A09', '\x3', '\x2', '\x2', '\x2', '\x1A0B', '\x1A15', 
		'\x3', '\x2', '\x2', '\x2', '\x1A0C', '\x1A0D', '\a', '\x26C', '\x2', 
		'\x2', '\x1A0D', '\x1A12', '\x5', '\x342', '\x1A2', '\x2', '\x1A0E', '\x1A0F', 
		'\a', '\x198', '\x2', '\x2', '\x1A0F', '\x1A11', '\x5', '\x342', '\x1A2', 
		'\x2', '\x1A10', '\x1A0E', '\x3', '\x2', '\x2', '\x2', '\x1A11', '\x1A14', 
		'\x3', '\x2', '\x2', '\x2', '\x1A12', '\x1A10', '\x3', '\x2', '\x2', '\x2', 
		'\x1A12', '\x1A13', '\x3', '\x2', '\x2', '\x2', '\x1A13', '\x1A16', '\x3', 
		'\x2', '\x2', '\x2', '\x1A14', '\x1A12', '\x3', '\x2', '\x2', '\x2', '\x1A15', 
		'\x1A0C', '\x3', '\x2', '\x2', '\x2', '\x1A15', '\x1A16', '\x3', '\x2', 
		'\x2', '\x2', '\x1A16', '\x33F', '\x3', '\x2', '\x2', '\x2', '\x1A17', 
		'\x1A1D', '\a', '\x261', '\x2', '\x2', '\x1A18', '\x1A1A', '\a', '\x274', 
		'\x2', '\x2', '\x1A19', '\x1A1B', '\a', '\x172', '\x2', '\x2', '\x1A1A', 
		'\x1A19', '\x3', '\x2', '\x2', '\x2', '\x1A1A', '\x1A1B', '\x3', '\x2', 
		'\x2', '\x2', '\x1A1B', '\x1A1C', '\x3', '\x2', '\x2', '\x2', '\x1A1C', 
		'\x1A1E', '\x5', '\x48A', '\x246', '\x2', '\x1A1D', '\x1A18', '\x3', '\x2', 
		'\x2', '\x2', '\x1A1D', '\x1A1E', '\x3', '\x2', '\x2', '\x2', '\x1A1E', 
		'\x1A28', '\x3', '\x2', '\x2', '\x2', '\x1A1F', '\x1A20', '\a', '\x26C', 
		'\x2', '\x2', '\x1A20', '\x1A25', '\x5', '\x342', '\x1A2', '\x2', '\x1A21', 
		'\x1A22', '\a', '\x198', '\x2', '\x2', '\x1A22', '\x1A24', '\x5', '\x342', 
		'\x1A2', '\x2', '\x1A23', '\x1A21', '\x3', '\x2', '\x2', '\x2', '\x1A24', 
		'\x1A27', '\x3', '\x2', '\x2', '\x2', '\x1A25', '\x1A23', '\x3', '\x2', 
		'\x2', '\x2', '\x1A25', '\x1A26', '\x3', '\x2', '\x2', '\x2', '\x1A26', 
		'\x1A29', '\x3', '\x2', '\x2', '\x2', '\x1A27', '\x1A25', '\x3', '\x2', 
		'\x2', '\x2', '\x1A28', '\x1A1F', '\x3', '\x2', '\x2', '\x2', '\x1A28', 
		'\x1A29', '\x3', '\x2', '\x2', '\x2', '\x1A29', '\x341', '\x3', '\x2', 
		'\x2', '\x2', '\x1A2A', '\x1A2B', '\x5', '\x33C', '\x19F', '\x2', '\x1A2B', 
		'\x1A2C', '\a', '\x181', '\x2', '\x2', '\x1A2C', '\x1A2D', '\x5', '\x336', 
		'\x19C', '\x2', '\x1A2D', '\x343', '\x3', '\x2', '\x2', '\x2', '\x1A2E', 
		'\x1A2F', '\a', '\x1E', '\x2', '\x2', '\x1A2F', '\x1A30', '\x5', '\x456', 
		'\x22C', '\x2', '\x1A30', '\x345', '\x3', '\x2', '\x2', '\x2', '\x1A31', 
		'\x1A32', '\a', '\f', '\x2', '\x2', '\x1A32', '\x1A33', '\x5', '\x456', 
		'\x22C', '\x2', '\x1A33', '\x347', '\x3', '\x2', '\x2', '\x2', '\x1A34', 
		'\x1A39', '\a', '\x1F7', '\x2', '\x2', '\x1A35', '\x1A37', '\a', '\xED', 
		'\x2', '\x2', '\x1A36', '\x1A35', '\x3', '\x2', '\x2', '\x2', '\x1A36', 
		'\x1A37', '\x3', '\x2', '\x2', '\x2', '\x1A37', '\x1A38', '\x3', '\x2', 
		'\x2', '\x2', '\x1A38', '\x1A3A', '\a', '\x1FC', '\x2', '\x2', '\x1A39', 
		'\x1A36', '\x3', '\x2', '\x2', '\x2', '\x1A39', '\x1A3A', '\x3', '\x2', 
		'\x2', '\x2', '\x1A3A', '\x1A3B', '\x3', '\x2', '\x2', '\x2', '\x1A3B', 
		'\x1A3C', '\x5', '\x456', '\x22C', '\x2', '\x1A3C', '\x1A3D', '\a', '\x211', 
		'\x2', '\x2', '\x1A3D', '\x1A3E', '\x5', '\x458', '\x22D', '\x2', '\x1A3E', 
		'\x349', '\x3', '\x2', '\x2', '\x2', '\x1A3F', '\x1A40', '\a', '\x43', 
		'\x2', '\x2', '\x1A40', '\x1A4D', '\x5', '\x290', '\x149', '\x2', '\x1A41', 
		'\x1A42', '\a', '\x89', '\x2', '\x2', '\x1A42', '\x1A43', '\x5', '\x290', 
		'\x149', '\x2', '\x1A43', '\x1A46', '\x5', '\x2E8', '\x175', '\x2', '\x1A44', 
		'\x1A45', '\a', '\x145', '\x2', '\x2', '\x1A45', '\x1A47', '\x5', '\x290', 
		'\x149', '\x2', '\x1A46', '\x1A44', '\x3', '\x2', '\x2', '\x2', '\x1A46', 
		'\x1A47', '\x3', '\x2', '\x2', '\x2', '\x1A47', '\x1A4A', '\x3', '\x2', 
		'\x2', '\x2', '\x1A48', '\x1A49', '\a', '\x80', '\x2', '\x2', '\x1A49', 
		'\x1A4B', '\x5', '\x290', '\x149', '\x2', '\x1A4A', '\x1A48', '\x3', '\x2', 
		'\x2', '\x2', '\x1A4A', '\x1A4B', '\x3', '\x2', '\x2', '\x2', '\x1A4B', 
		'\x1A4D', '\x3', '\x2', '\x2', '\x2', '\x1A4C', '\x1A3F', '\x3', '\x2', 
		'\x2', '\x2', '\x1A4C', '\x1A41', '\x3', '\x2', '\x2', '\x2', '\x1A4D', 
		'\x34B', '\x3', '\x2', '\x2', '\x2', '\x1A4E', '\x1A4F', '\x5', '\x3FE', 
		'\x200', '\x2', '\x1A4F', '\x1A51', '\x5', '\x358', '\x1AD', '\x2', '\x1A50', 
		'\x1A52', '\x5', '\x34E', '\x1A8', '\x2', '\x1A51', '\x1A50', '\x3', '\x2', 
		'\x2', '\x2', '\x1A51', '\x1A52', '\x3', '\x2', '\x2', '\x2', '\x1A52', 
		'\x34D', '\x3', '\x2', '\x2', '\x2', '\x1A53', '\x1A54', '\x6', '\x1A8', 
		'\xB1', '\x2', '\x1A54', '\x1A57', '\x5', '\x350', '\x1A9', '\x2', '\x1A55', 
		'\x1A57', '\x5', '\x362', '\x1B2', '\x2', '\x1A56', '\x1A53', '\x3', '\x2', 
		'\x2', '\x2', '\x1A56', '\x1A55', '\x3', '\x2', '\x2', '\x2', '\x1A57', 
		'\x34F', '\x3', '\x2', '\x2', '\x2', '\x1A58', '\x1A59', '\a', '\x1C5', 
		'\x2', '\x2', '\x1A59', '\x1A5A', '\x5', '\x2EE', '\x178', '\x2', '\x1A5A', 
		'\x351', '\x3', '\x2', '\x2', '\x2', '\x1A5B', '\x1A5D', '\a', '\x23E', 
		'\x2', '\x2', '\x1A5C', '\x1A5B', '\x3', '\x2', '\x2', '\x2', '\x1A5C', 
		'\x1A5D', '\x3', '\x2', '\x2', '\x2', '\x1A5D', '\x1A5E', '\x3', '\x2', 
		'\x2', '\x2', '\x1A5E', '\x1A5F', '\a', '\x2FB', '\x2', '\x2', '\x1A5F', 
		'\x353', '\x3', '\x2', '\x2', '\x2', '\x1A60', '\x1A62', '\t', '(', '\x2', 
		'\x2', '\x1A61', '\x1A63', '\x5', 'p', '\x39', '\x2', '\x1A62', '\x1A61', 
		'\x3', '\x2', '\x2', '\x2', '\x1A62', '\x1A63', '\x3', '\x2', '\x2', '\x2', 
		'\x1A63', '\x1A64', '\x3', '\x2', '\x2', '\x2', '\x1A64', '\x1A68', '\x5', 
		'\x36E', '\x1B8', '\x2', '\x1A65', '\x1A67', '\x5', '\x372', '\x1BA', 
		'\x2', '\x1A66', '\x1A65', '\x3', '\x2', '\x2', '\x2', '\x1A67', '\x1A6A', 
		'\x3', '\x2', '\x2', '\x2', '\x1A68', '\x1A66', '\x3', '\x2', '\x2', '\x2', 
		'\x1A68', '\x1A69', '\x3', '\x2', '\x2', '\x2', '\x1A69', '\x1AAC', '\x3', 
		'\x2', '\x2', '\x2', '\x1A6A', '\x1A68', '\x3', '\x2', '\x2', '\x2', '\x1A6B', 
		'\x1A6D', '\a', '\x1FD', '\x2', '\x2', '\x1A6C', '\x1A6E', '\x5', '\x18E', 
		'\xC8', '\x2', '\x1A6D', '\x1A6C', '\x3', '\x2', '\x2', '\x2', '\x1A6D', 
		'\x1A6E', '\x3', '\x2', '\x2', '\x2', '\x1A6E', '\x1A70', '\x3', '\x2', 
		'\x2', '\x2', '\x1A6F', '\x1A71', '\x5', '\x408', '\x205', '\x2', '\x1A70', 
		'\x1A6F', '\x3', '\x2', '\x2', '\x2', '\x1A70', '\x1A71', '\x3', '\x2', 
		'\x2', '\x2', '\x1A71', '\x1A72', '\x3', '\x2', '\x2', '\x2', '\x1A72', 
		'\x1A76', '\x5', '\x36E', '\x1B8', '\x2', '\x1A73', '\x1A75', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x1A74', '\x1A73', '\x3', '\x2', '\x2', '\x2', '\x1A75', 
		'\x1A78', '\x3', '\x2', '\x2', '\x2', '\x1A76', '\x1A74', '\x3', '\x2', 
		'\x2', '\x2', '\x1A76', '\x1A77', '\x3', '\x2', '\x2', '\x2', '\x1A77', 
		'\x1AAC', '\x3', '\x2', '\x2', '\x2', '\x1A78', '\x1A76', '\x3', '\x2', 
		'\x2', '\x2', '\x1A79', '\x1A7B', '\a', '\x271', '\x2', '\x2', '\x1A7A', 
		'\x1A7C', '\x5', '\x18E', '\xC8', '\x2', '\x1A7B', '\x1A7A', '\x3', '\x2', 
		'\x2', '\x2', '\x1A7B', '\x1A7C', '\x3', '\x2', '\x2', '\x2', '\x1A7C', 
		'\x1A7E', '\x3', '\x2', '\x2', '\x2', '\x1A7D', '\x1A7F', '\x5', '\x408', 
		'\x205', '\x2', '\x1A7E', '\x1A7D', '\x3', '\x2', '\x2', '\x2', '\x1A7E', 
		'\x1A7F', '\x3', '\x2', '\x2', '\x2', '\x1A7F', '\x1A80', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x1A84', '\x5', '\x36E', '\x1B8', '\x2', '\x1A81', 
		'\x1A83', '\x5', '\x37C', '\x1BF', '\x2', '\x1A82', '\x1A81', '\x3', '\x2', 
		'\x2', '\x2', '\x1A83', '\x1A86', '\x3', '\x2', '\x2', '\x2', '\x1A84', 
		'\x1A82', '\x3', '\x2', '\x2', '\x2', '\x1A84', '\x1A85', '\x3', '\x2', 
		'\x2', '\x2', '\x1A85', '\x1AAC', '\x3', '\x2', '\x2', '\x2', '\x1A86', 
		'\x1A84', '\x3', '\x2', '\x2', '\x2', '\x1A87', '\x1A89', '\x5', '\x356', 
		'\x1AC', '\x2', '\x1A88', '\x1A87', '\x3', '\x2', '\x2', '\x2', '\x1A88', 
		'\x1A89', '\x3', '\x2', '\x2', '\x2', '\x1A89', '\x1AA9', '\x3', '\x2', 
		'\x2', '\x2', '\x1A8A', '\x1A8B', '\a', '\x252', '\x2', '\x2', '\x1A8B', 
		'\x1A91', '\a', '\x21A', '\x2', '\x2', '\x1A8C', '\x1A8E', '\a', '\x295', 
		'\x2', '\x2', '\x1A8D', '\x1A8F', '\x5', '\x18E', '\xC8', '\x2', '\x1A8E', 
		'\x1A8D', '\x3', '\x2', '\x2', '\x2', '\x1A8E', '\x1A8F', '\x3', '\x2', 
		'\x2', '\x2', '\x1A8F', '\x1A91', '\x3', '\x2', '\x2', '\x2', '\x1A90', 
		'\x1A8A', '\x3', '\x2', '\x2', '\x2', '\x1A90', '\x1A8C', '\x3', '\x2', 
		'\x2', '\x2', '\x1A91', '\x1A93', '\x3', '\x2', '\x2', '\x2', '\x1A92', 
		'\x1A94', '\x5', 'p', '\x39', '\x2', '\x1A93', '\x1A92', '\x3', '\x2', 
		'\x2', '\x2', '\x1A93', '\x1A94', '\x3', '\x2', '\x2', '\x2', '\x1A94', 
		'\x1A95', '\x3', '\x2', '\x2', '\x2', '\x1A95', '\x1A99', '\x5', '\x36E', 
		'\x1B8', '\x2', '\x1A96', '\x1A98', '\x5', '\x372', '\x1BA', '\x2', '\x1A97', 
		'\x1A96', '\x3', '\x2', '\x2', '\x2', '\x1A98', '\x1A9B', '\x3', '\x2', 
		'\x2', '\x2', '\x1A99', '\x1A97', '\x3', '\x2', '\x2', '\x2', '\x1A99', 
		'\x1A9A', '\x3', '\x2', '\x2', '\x2', '\x1A9A', '\x1AAA', '\x3', '\x2', 
		'\x2', '\x2', '\x1A9B', '\x1A99', '\x3', '\x2', '\x2', '\x2', '\x1A9C', 
		'\x1A9D', '\a', '\x1FA', '\x2', '\x2', '\x1A9D', '\x1A9F', '\a', '\x21A', 
		'\x2', '\x2', '\x1A9E', '\x1AA0', '\x5', '\x408', '\x205', '\x2', '\x1A9F', 
		'\x1A9E', '\x3', '\x2', '\x2', '\x2', '\x1A9F', '\x1AA0', '\x3', '\x2', 
		'\x2', '\x2', '\x1AA0', '\x1AA1', '\x3', '\x2', '\x2', '\x2', '\x1AA1', 
		'\x1AA2', '\x5', '\x366', '\x1B4', '\x2', '\x1AA2', '\x1AA3', '\x5', '\x362', 
		'\x1B2', '\x2', '\x1AA3', '\x1AAA', '\x3', '\x2', '\x2', '\x2', '\x1AA4', 
		'\x1AA7', '\x5', '\x350', '\x1A9', '\x2', '\x1AA5', '\x1AA6', '\x6', '\x1AB', 
		'\xB2', '\x2', '\x1AA6', '\x1AA8', '\x5', '\x352', '\x1AA', '\x2', '\x1AA7', 
		'\x1AA5', '\x3', '\x2', '\x2', '\x2', '\x1AA7', '\x1AA8', '\x3', '\x2', 
		'\x2', '\x2', '\x1AA8', '\x1AAA', '\x3', '\x2', '\x2', '\x2', '\x1AA9', 
		'\x1A90', '\x3', '\x2', '\x2', '\x2', '\x1AA9', '\x1A9C', '\x3', '\x2', 
		'\x2', '\x2', '\x1AA9', '\x1AA4', '\x3', '\x2', '\x2', '\x2', '\x1AAA', 
		'\x1AAC', '\x3', '\x2', '\x2', '\x2', '\x1AAB', '\x1A60', '\x3', '\x2', 
		'\x2', '\x2', '\x1AAB', '\x1A6B', '\x3', '\x2', '\x2', '\x2', '\x1AAB', 
		'\x1A79', '\x3', '\x2', '\x2', '\x2', '\x1AAB', '\x1A88', '\x3', '\x2', 
		'\x2', '\x2', '\x1AAC', '\x355', '\x3', '\x2', '\x2', '\x2', '\x1AAD', 
		'\x1AAF', '\a', '\x1C9', '\x2', '\x2', '\x1AAE', '\x1AB0', '\x5', '\x456', 
		'\x22C', '\x2', '\x1AAF', '\x1AAE', '\x3', '\x2', '\x2', '\x2', '\x1AAF', 
		'\x1AB0', '\x3', '\x2', '\x2', '\x2', '\x1AB0', '\x357', '\x3', '\x2', 
		'\x2', '\x2', '\x1AB1', '\x1AD5', '\x5', '\x380', '\x1C1', '\x2', '\x1AB2', 
		'\x1AB4', '\x5', '\x35A', '\x1AE', '\x2', '\x1AB3', '\x1AB2', '\x3', '\x2', 
		'\x2', '\x2', '\x1AB4', '\x1AB7', '\x3', '\x2', '\x2', '\x2', '\x1AB5', 
		'\x1AB3', '\x3', '\x2', '\x2', '\x2', '\x1AB5', '\x1AB6', '\x3', '\x2', 
		'\x2', '\x2', '\x1AB6', '\x1AD6', '\x3', '\x2', '\x2', '\x2', '\x1AB7', 
		'\x1AB5', '\x3', '\x2', '\x2', '\x2', '\x1AB8', '\x1ABA', '\x6', '\x1AD', 
		'\xB3', '\x2', '\x1AB9', '\x1ABB', '\x5', '\x3CA', '\x1E6', '\x2', '\x1ABA', 
		'\x1AB9', '\x3', '\x2', '\x2', '\x2', '\x1ABA', '\x1ABB', '\x3', '\x2', 
		'\x2', '\x2', '\x1ABB', '\x1ABE', '\x3', '\x2', '\x2', '\x2', '\x1ABC', 
		'\x1ABD', '\a', '\x1FF', '\x2', '\x2', '\x1ABD', '\x1ABF', '\a', '\x5', 
		'\x2', '\x2', '\x1ABE', '\x1ABC', '\x3', '\x2', '\x2', '\x2', '\x1ABE', 
		'\x1ABF', '\x3', '\x2', '\x2', '\x2', '\x1ABF', '\x1AC0', '\x3', '\x2', 
		'\x2', '\x2', '\x1AC0', '\x1AC1', '\a', '\x1B1', '\x2', '\x2', '\x1AC1', 
		'\x1AC3', '\x5', '\x2EE', '\x178', '\x2', '\x1AC2', '\x1AC4', '\t', 'h', 
		'\x2', '\x2', '\x1AC3', '\x1AC2', '\x3', '\x2', '\x2', '\x2', '\x1AC3', 
		'\x1AC4', '\x3', '\x2', '\x2', '\x2', '\x1AC4', '\x1AD3', '\x3', '\x2', 
		'\x2', '\x2', '\x1AC5', '\x1AC9', '\x6', '\x1AD', '\xB4', '\x2', '\x1AC6', 
		'\x1AC8', '\x5', '\x360', '\x1B1', '\x2', '\x1AC7', '\x1AC6', '\x3', '\x2', 
		'\x2', '\x2', '\x1AC8', '\x1ACB', '\x3', '\x2', '\x2', '\x2', '\x1AC9', 
		'\x1AC7', '\x3', '\x2', '\x2', '\x2', '\x1AC9', '\x1ACA', '\x3', '\x2', 
		'\x2', '\x2', '\x1ACA', '\x1AD4', '\x3', '\x2', '\x2', '\x2', '\x1ACB', 
		'\x1AC9', '\x3', '\x2', '\x2', '\x2', '\x1ACC', '\x1AD0', '\x6', '\x1AD', 
		'\xB5', '\x2', '\x1ACD', '\x1ACF', '\x5', '\x35A', '\x1AE', '\x2', '\x1ACE', 
		'\x1ACD', '\x3', '\x2', '\x2', '\x2', '\x1ACF', '\x1AD2', '\x3', '\x2', 
		'\x2', '\x2', '\x1AD0', '\x1ACE', '\x3', '\x2', '\x2', '\x2', '\x1AD0', 
		'\x1AD1', '\x3', '\x2', '\x2', '\x2', '\x1AD1', '\x1AD4', '\x3', '\x2', 
		'\x2', '\x2', '\x1AD2', '\x1AD0', '\x3', '\x2', '\x2', '\x2', '\x1AD3', 
		'\x1AC5', '\x3', '\x2', '\x2', '\x2', '\x1AD3', '\x1ACC', '\x3', '\x2', 
		'\x2', '\x2', '\x1AD4', '\x1AD6', '\x3', '\x2', '\x2', '\x2', '\x1AD5', 
		'\x1AB5', '\x3', '\x2', '\x2', '\x2', '\x1AD5', '\x1AB8', '\x3', '\x2', 
		'\x2', '\x2', '\x1AD6', '\x359', '\x3', '\x2', '\x2', '\x2', '\x1AD7', 
		'\x1AD9', '\a', '\x23E', '\x2', '\x2', '\x1AD8', '\x1AD7', '\x3', '\x2', 
		'\x2', '\x2', '\x1AD8', '\x1AD9', '\x3', '\x2', '\x2', '\x2', '\x1AD9', 
		'\x1ADA', '\x3', '\x2', '\x2', '\x2', '\x1ADA', '\x1B0C', '\x5', '\x480', 
		'\x241', '\x2', '\x1ADB', '\x1ADC', '\x6', '\x1AE', '\xB6', '\x2', '\x1ADC', 
		'\x1ADD', '\a', '\x23E', '\x2', '\x2', '\x1ADD', '\x1B0C', '\a', '\x2F1', 
		'\x2', '\x2', '\x1ADE', '\x1AE6', '\a', '\x1E0', '\x2', '\x2', '\x1ADF', 
		'\x1AE7', '\x5', '\x46C', '\x237', '\x2', '\x1AE0', '\x1AE2', '\a', '\x23F', 
		'\x2', '\x2', '\x1AE1', '\x1AE3', '\x5', '\x2BC', '\x15F', '\x2', '\x1AE2', 
		'\x1AE1', '\x3', '\x2', '\x2', '\x2', '\x1AE2', '\x1AE3', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE3', '\x1AE7', '\x3', '\x2', '\x2', '\x2', '\x1AE4', 
		'\x1AE5', '\x6', '\x1AE', '\xB7', '\x2', '\x1AE5', '\x1AE7', '\x5', '\x2EE', 
		'\x178', '\x2', '\x1AE6', '\x1ADF', '\x3', '\x2', '\x2', '\x2', '\x1AE6', 
		'\x1AE0', '\x3', '\x2', '\x2', '\x2', '\x1AE6', '\x1AE4', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE7', '\x1B0C', '\x3', '\x2', '\x2', '\x2', '\x1AE8', 
		'\x1AE9', '\a', '\x244', '\x2', '\x2', '\x1AE9', '\x1AEA', '\a', '\x298', 
		'\x2', '\x2', '\x1AEA', '\x1AEC', '\a', '\x23F', '\x2', '\x2', '\x1AEB', 
		'\x1AED', '\x5', '\x2BC', '\x15F', '\x2', '\x1AEC', '\x1AEB', '\x3', '\x2', 
		'\x2', '\x2', '\x1AEC', '\x1AED', '\x3', '\x2', '\x2', '\x2', '\x1AED', 
		'\x1B0C', '\x3', '\x2', '\x2', '\x2', '\x1AEE', '\x1B0C', '\a', '\x45', 
		'\x2', '\x2', '\x1AEF', '\x1AF0', '\a', '\x134', '\x2', '\x2', '\x1AF0', 
		'\x1AF1', '\a', '\x1E0', '\x2', '\x2', '\x1AF1', '\x1B0C', '\a', '\x172', 
		'\x2', '\x2', '\x1AF2', '\x1AF4', '\a', '\x252', '\x2', '\x2', '\x1AF3', 
		'\x1AF2', '\x3', '\x2', '\x2', '\x2', '\x1AF3', '\x1AF4', '\x3', '\x2', 
		'\x2', '\x2', '\x1AF4', '\x1AF5', '\x3', '\x2', '\x2', '\x2', '\x1AF5', 
		'\x1B0C', '\a', '\x21A', '\x2', '\x2', '\x1AF6', '\x1AF8', '\a', '\x295', 
		'\x2', '\x2', '\x1AF7', '\x1AF9', '\a', '\x21A', '\x2', '\x2', '\x1AF8', 
		'\x1AF7', '\x3', '\x2', '\x2', '\x2', '\x1AF8', '\x1AF9', '\x3', '\x2', 
		'\x2', '\x2', '\x1AF9', '\x1B0C', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x1AFB', '\a', '\r', '\x2', '\x2', '\x1AFB', '\x1B0C', '\x5', '\x476', 
		'\x23C', '\x2', '\x1AFC', '\x1B0C', '\x5', '\x3CA', '\x1E6', '\x2', '\x1AFD', 
		'\x1AFE', '\a', '[', '\x2', '\x2', '\x1AFE', '\x1B0C', '\x5', '\x35C', 
		'\x1AF', '\x2', '\x1AFF', '\x1B00', '\a', '\x14A', '\x2', '\x2', '\x1B00', 
		'\x1B0C', '\x5', '\x35E', '\x1B0', '\x2', '\x1B01', '\x1B02', '\x6', '\x1AE', 
		'\xB8', '\x2', '\x1B02', '\x1B03', '\a', '\x2E4', '\x2', '\x2', '\x1B03', 
		'\x1B0C', '\x5', '\x468', '\x235', '\x2', '\x1B04', '\x1B06', '\x6', '\x1AE', 
		'\xB9', '\x2', '\x1B05', '\x1B07', '\x5', '\x356', '\x1AC', '\x2', '\x1B06', 
		'\x1B05', '\x3', '\x2', '\x2', '\x2', '\x1B06', '\x1B07', '\x3', '\x2', 
		'\x2', '\x2', '\x1B07', '\x1B08', '\x3', '\x2', '\x2', '\x2', '\x1B08', 
		'\x1B0C', '\x5', '\x350', '\x1A9', '\x2', '\x1B09', '\x1B0A', '\x6', '\x1AE', 
		'\xBA', '\x2', '\x1B0A', '\x1B0C', '\x5', '\x352', '\x1AA', '\x2', '\x1B0B', 
		'\x1AD8', '\x3', '\x2', '\x2', '\x2', '\x1B0B', '\x1ADB', '\x3', '\x2', 
		'\x2', '\x2', '\x1B0B', '\x1ADE', '\x3', '\x2', '\x2', '\x2', '\x1B0B', 
		'\x1AE8', '\x3', '\x2', '\x2', '\x2', '\x1B0B', '\x1AEE', '\x3', '\x2', 
		'\x2', '\x2', '\x1B0B', '\x1AEF', '\x3', '\x2', '\x2', '\x2', '\x1B0B', 
		'\x1AF3', '\x3', '\x2', '\x2', '\x2', '\x1B0B', '\x1AF6', '\x3', '\x2', 
		'\x2', '\x2', '\x1B0B', '\x1AFA', '\x3', '\x2', '\x2', '\x2', '\x1B0B', 
		'\x1AFC', '\x3', '\x2', '\x2', '\x2', '\x1B0B', '\x1AFD', '\x3', '\x2', 
		'\x2', '\x2', '\x1B0B', '\x1AFF', '\x3', '\x2', '\x2', '\x2', '\x1B0B', 
		'\x1B01', '\x3', '\x2', '\x2', '\x2', '\x1B0B', '\x1B04', '\x3', '\x2', 
		'\x2', '\x2', '\x1B0B', '\x1B09', '\x3', '\x2', '\x2', '\x2', '\x1B0C', 
		'\x35B', '\x3', '\x2', '\x2', '\x2', '\x1B0D', '\x1B0E', '\t', 'i', '\x2', 
		'\x2', '\x1B0E', '\x35D', '\x3', '\x2', '\x2', '\x2', '\x1B0F', '\x1B10', 
		'\t', 'j', '\x2', '\x2', '\x1B10', '\x35F', '\x3', '\x2', '\x2', '\x2', 
		'\x1B11', '\x1B13', '\a', '\x295', '\x2', '\x2', '\x1B12', '\x1B14', '\a', 
		'\x21A', '\x2', '\x2', '\x1B13', '\x1B12', '\x3', '\x2', '\x2', '\x2', 
		'\x1B13', '\x1B14', '\x3', '\x2', '\x2', '\x2', '\x1B14', '\x1B20', '\x3', 
		'\x2', '\x2', '\x2', '\x1B15', '\x1B16', '\a', '\r', '\x2', '\x2', '\x1B16', 
		'\x1B20', '\x5', '\x472', '\x23A', '\x2', '\x1B17', '\x1B19', '\x5', '\x2E4', 
		'\x173', '\x2', '\x1B18', '\x1B17', '\x3', '\x2', '\x2', '\x2', '\x1B18', 
		'\x1B19', '\x3', '\x2', '\x2', '\x2', '\x1B19', '\x1B1A', '\x3', '\x2', 
		'\x2', '\x2', '\x1B1A', '\x1B20', '\a', '\x241', '\x2', '\x2', '\x1B1B', 
		'\x1B1D', '\a', '\x252', '\x2', '\x2', '\x1B1C', '\x1B1B', '\x3', '\x2', 
		'\x2', '\x2', '\x1B1C', '\x1B1D', '\x3', '\x2', '\x2', '\x2', '\x1B1D', 
		'\x1B1E', '\x3', '\x2', '\x2', '\x2', '\x1B1E', '\x1B20', '\a', '\x21A', 
		'\x2', '\x2', '\x1B1F', '\x1B11', '\x3', '\x2', '\x2', '\x2', '\x1B1F', 
		'\x1B15', '\x3', '\x2', '\x2', '\x2', '\x1B1F', '\x1B18', '\x3', '\x2', 
		'\x2', '\x2', '\x1B1F', '\x1B1C', '\x3', '\x2', '\x2', '\x2', '\x1B20', 
		'\x361', '\x3', '\x2', '\x2', '\x2', '\x1B21', '\x1B22', '\a', '\x25A', 
		'\x2', '\x2', '\x1B22', '\x1B24', '\x5', '\x43C', '\x21F', '\x2', '\x1B23', 
		'\x1B25', '\x5', '\x45A', '\x22E', '\x2', '\x1B24', '\x1B23', '\x3', '\x2', 
		'\x2', '\x2', '\x1B24', '\x1B25', '\x3', '\x2', '\x2', '\x2', '\x1B25', 
		'\x1B28', '\x3', '\x2', '\x2', '\x2', '\x1B26', '\x1B27', '\a', '\x22E', 
		'\x2', '\x2', '\x1B27', '\x1B29', '\t', 'k', '\x2', '\x2', '\x1B28', '\x1B26', 
		'\x3', '\x2', '\x2', '\x2', '\x1B28', '\x1B29', '\x3', '\x2', '\x2', '\x2', 
		'\x1B29', '\x1B3A', '\x3', '\x2', '\x2', '\x2', '\x1B2A', '\x1B2B', '\a', 
		'\x244', '\x2', '\x2', '\x1B2B', '\x1B2C', '\a', '\x298', '\x2', '\x2', 
		'\x1B2C', '\x1B30', '\x5', '\x364', '\x1B3', '\x2', '\x1B2D', '\x1B2E', 
		'\a', '\x244', '\x2', '\x2', '\x1B2E', '\x1B2F', '\a', '\x1E2', '\x2', 
		'\x2', '\x1B2F', '\x1B31', '\x5', '\x364', '\x1B3', '\x2', '\x1B30', '\x1B2D', 
		'\x3', '\x2', '\x2', '\x2', '\x1B30', '\x1B31', '\x3', '\x2', '\x2', '\x2', 
		'\x1B31', '\x1B3B', '\x3', '\x2', '\x2', '\x2', '\x1B32', '\x1B33', '\a', 
		'\x244', '\x2', '\x2', '\x1B33', '\x1B34', '\a', '\x1E2', '\x2', '\x2', 
		'\x1B34', '\x1B38', '\x5', '\x364', '\x1B3', '\x2', '\x1B35', '\x1B36', 
		'\a', '\x244', '\x2', '\x2', '\x1B36', '\x1B37', '\a', '\x298', '\x2', 
		'\x2', '\x1B37', '\x1B39', '\x5', '\x364', '\x1B3', '\x2', '\x1B38', '\x1B35', 
		'\x3', '\x2', '\x2', '\x2', '\x1B38', '\x1B39', '\x3', '\x2', '\x2', '\x2', 
		'\x1B39', '\x1B3B', '\x3', '\x2', '\x2', '\x2', '\x1B3A', '\x1B2A', '\x3', 
		'\x2', '\x2', '\x2', '\x1B3A', '\x1B32', '\x3', '\x2', '\x2', '\x2', '\x1B3A', 
		'\x1B3B', '\x3', '\x2', '\x2', '\x2', '\x1B3B', '\x363', '\x3', '\x2', 
		'\x2', '\x2', '\x1B3C', '\x1B42', '\t', '\x4', '\x2', '\x2', '\x1B3D', 
		'\x1B3E', '\a', '\x26C', '\x2', '\x2', '\x1B3E', '\x1B42', '\x5', '\x480', 
		'\x241', '\x2', '\x1B3F', '\x1B40', '\a', '\x1D', '\x2', '\x2', '\x1B40', 
		'\x1B42', '\a', ';', '\x2', '\x2', '\x1B41', '\x1B3C', '\x3', '\x2', '\x2', 
		'\x2', '\x1B41', '\x1B3D', '\x3', '\x2', '\x2', '\x2', '\x1B41', '\x1B3F', 
		'\x3', '\x2', '\x2', '\x2', '\x1B42', '\x365', '\x3', '\x2', '\x2', '\x2', 
		'\x1B43', '\x1B44', '\a', '\x19B', '\x2', '\x2', '\x1B44', '\x1B49', '\x5', 
		'\x368', '\x1B5', '\x2', '\x1B45', '\x1B46', '\a', '\x198', '\x2', '\x2', 
		'\x1B46', '\x1B48', '\x5', '\x368', '\x1B5', '\x2', '\x1B47', '\x1B45', 
		'\x3', '\x2', '\x2', '\x2', '\x1B48', '\x1B4B', '\x3', '\x2', '\x2', '\x2', 
		'\x1B49', '\x1B47', '\x3', '\x2', '\x2', '\x2', '\x1B49', '\x1B4A', '\x3', 
		'\x2', '\x2', '\x2', '\x1B4A', '\x1B4C', '\x3', '\x2', '\x2', '\x2', '\x1B4B', 
		'\x1B49', '\x3', '\x2', '\x2', '\x2', '\x1B4C', '\x1B4D', '\a', '\x19C', 
		'\x2', '\x2', '\x1B4D', '\x367', '\x3', '\x2', '\x2', '\x2', '\x1B4E', 
		'\x1B50', '\x5', '\x456', '\x22C', '\x2', '\x1B4F', '\x1B51', '\x5', '\x38A', 
		'\x1C6', '\x2', '\x1B50', '\x1B4F', '\x3', '\x2', '\x2', '\x2', '\x1B50', 
		'\x1B51', '\x3', '\x2', '\x2', '\x2', '\x1B51', '\x1B53', '\x3', '\x2', 
		'\x2', '\x2', '\x1B52', '\x1B54', '\x5', '\x14A', '\xA6', '\x2', '\x1B53', 
		'\x1B52', '\x3', '\x2', '\x2', '\x2', '\x1B53', '\x1B54', '\x3', '\x2', 
		'\x2', '\x2', '\x1B54', '\x369', '\x3', '\x2', '\x2', '\x2', '\x1B55', 
		'\x1B56', '\a', '\x19B', '\x2', '\x2', '\x1B56', '\x1B5B', '\x5', '\x36C', 
		'\x1B7', '\x2', '\x1B57', '\x1B58', '\a', '\x198', '\x2', '\x2', '\x1B58', 
		'\x1B5A', '\x5', '\x36C', '\x1B7', '\x2', '\x1B59', '\x1B57', '\x3', '\x2', 
		'\x2', '\x2', '\x1B5A', '\x1B5D', '\x3', '\x2', '\x2', '\x2', '\x1B5B', 
		'\x1B59', '\x3', '\x2', '\x2', '\x2', '\x1B5B', '\x1B5C', '\x3', '\x2', 
		'\x2', '\x2', '\x1B5C', '\x1B5E', '\x3', '\x2', '\x2', '\x2', '\x1B5D', 
		'\x1B5B', '\x3', '\x2', '\x2', '\x2', '\x1B5E', '\x1B5F', '\a', '\x19C', 
		'\x2', '\x2', '\x1B5F', '\x36B', '\x3', '\x2', '\x2', '\x2', '\x1B60', 
		'\x1B66', '\x5', '\x368', '\x1B5', '\x2', '\x1B61', '\x1B63', '\x5', '\x2EE', 
		'\x178', '\x2', '\x1B62', '\x1B64', '\x5', '\x14A', '\xA6', '\x2', '\x1B63', 
		'\x1B62', '\x3', '\x2', '\x2', '\x2', '\x1B63', '\x1B64', '\x3', '\x2', 
		'\x2', '\x2', '\x1B64', '\x1B66', '\x3', '\x2', '\x2', '\x2', '\x1B65', 
		'\x1B60', '\x3', '\x2', '\x2', '\x2', '\x1B65', '\x1B61', '\x3', '\x2', 
		'\x2', '\x2', '\x1B66', '\x36D', '\x3', '\x2', '\x2', '\x2', '\x1B67', 
		'\x1B68', '\x6', '\x1B8', '\xBB', '\x2', '\x1B68', '\x1B6C', '\x5', '\x36A', 
		'\x1B6', '\x2', '\x1B69', '\x1B6A', '\x6', '\x1B8', '\xBC', '\x2', '\x1B6A', 
		'\x1B6C', '\x5', '\x366', '\x1B4', '\x2', '\x1B6B', '\x1B67', '\x3', '\x2', 
		'\x2', '\x2', '\x1B6B', '\x1B69', '\x3', '\x2', '\x2', '\x2', '\x1B6C', 
		'\x36F', '\x3', '\x2', '\x2', '\x2', '\x1B6D', '\x1B6E', '\t', 'l', '\x2', 
		'\x2', '\x1B6E', '\x371', '\x3', '\x2', '\x2', '\x2', '\x1B6F', '\x1B72', 
		'\x5', '\x374', '\x1BB', '\x2', '\x1B70', '\x1B72', '\x5', '\x378', '\x1BD', 
		'\x2', '\x1B71', '\x1B6F', '\x3', '\x2', '\x2', '\x2', '\x1B71', '\x1B70', 
		'\x3', '\x2', '\x2', '\x2', '\x1B72', '\x373', '\x3', '\x2', '\x2', '\x2', 
		'\x1B73', '\x1B75', '\a', '\xAF', '\x2', '\x2', '\x1B74', '\x1B76', '\a', 
		'\x181', '\x2', '\x2', '\x1B75', '\x1B74', '\x3', '\x2', '\x2', '\x2', 
		'\x1B75', '\x1B76', '\x3', '\x2', '\x2', '\x2', '\x1B76', '\x1B77', '\x3', 
		'\x2', '\x2', '\x2', '\x1B77', '\x1B7E', '\x5', '\x462', '\x232', '\x2', 
		'\x1B78', '\x1B79', '\x6', '\x1BB', '\xBD', '\x2', '\x1B79', '\x1B7A', 
		'\a', '\r', '\x2', '\x2', '\x1B7A', '\x1B7E', '\x5', '\x476', '\x23C', 
		'\x2', '\x1B7B', '\x1B7C', '\x6', '\x1BB', '\xBE', '\x2', '\x1B7C', '\x1B7E', 
		'\x5', '\x376', '\x1BC', '\x2', '\x1B7D', '\x1B73', '\x3', '\x2', '\x2', 
		'\x2', '\x1B7D', '\x1B78', '\x3', '\x2', '\x2', '\x2', '\x1B7D', '\x1B7B', 
		'\x3', '\x2', '\x2', '\x2', '\x1B7E', '\x375', '\x3', '\x2', '\x2', '\x2', 
		'\x1B7F', '\x1B80', '\t', 'm', '\x2', '\x2', '\x1B80', '\x377', '\x3', 
		'\x2', '\x2', '\x2', '\x1B81', '\x1B82', '\t', 'n', '\x2', '\x2', '\x1B82', 
		'\x1B83', '\x5', '\x370', '\x1B9', '\x2', '\x1B83', '\x379', '\x3', '\x2', 
		'\x2', '\x2', '\x1B84', '\x1B89', '\x5', '\x374', '\x1BB', '\x2', '\x1B85', 
		'\x1B86', '\a', '\x2AB', '\x2', '\x2', '\x1B86', '\x1B87', '\a', '!', 
		'\x2', '\x2', '\x1B87', '\x1B89', '\x5', '\x456', '\x22C', '\x2', '\x1B88', 
		'\x1B84', '\x3', '\x2', '\x2', '\x2', '\x1B88', '\x1B85', '\x3', '\x2', 
		'\x2', '\x2', '\x1B89', '\x37B', '\x3', '\x2', '\x2', '\x2', '\x1B8A', 
		'\x1B8B', '\x5', '\x374', '\x1BB', '\x2', '\x1B8B', '\x37D', '\x3', '\x2', 
		'\x2', '\x2', '\x1B8C', '\x1B8D', '\x5', '\x380', '\x1C1', '\x2', '\x1B8D', 
		'\x1B8E', '\a', '\x2', '\x2', '\x3', '\x1B8E', '\x37F', '\x3', '\x2', 
		'\x2', '\x2', '\x1B8F', '\x1B91', '\t', 'o', '\x2', '\x2', '\x1B90', '\x1B92', 
		'\x5', '\x38A', '\x1C6', '\x2', '\x1B91', '\x1B90', '\x3', '\x2', '\x2', 
		'\x2', '\x1B91', '\x1B92', '\x3', '\x2', '\x2', '\x2', '\x1B92', '\x1B94', 
		'\x3', '\x2', '\x2', '\x2', '\x1B93', '\x1B95', '\x5', '\x38C', '\x1C7', 
		'\x2', '\x1B94', '\x1B93', '\x3', '\x2', '\x2', '\x2', '\x1B94', '\x1B95', 
		'\x3', '\x2', '\x2', '\x2', '\x1B95', '\x1C23', '\x3', '\x2', '\x2', '\x2', 
		'\x1B96', '\x1B9C', '\a', '\x259', '\x2', '\x2', '\x1B97', '\x1B99', '\a', 
		'\x1E8', '\x2', '\x2', '\x1B98', '\x1B9A', '\a', '\x251', '\x2', '\x2', 
		'\x1B99', '\x1B98', '\x3', '\x2', '\x2', '\x2', '\x1B99', '\x1B9A', '\x3', 
		'\x2', '\x2', '\x2', '\x1B9A', '\x1B9C', '\x3', '\x2', '\x2', '\x2', '\x1B9B', 
		'\x1B96', '\x3', '\x2', '\x2', '\x2', '\x1B9B', '\x1B97', '\x3', '\x2', 
		'\x2', '\x2', '\x1B9C', '\x1B9E', '\x3', '\x2', '\x2', '\x2', '\x1B9D', 
		'\x1B9F', '\x5', '\x488', '\x245', '\x2', '\x1B9E', '\x1B9D', '\x3', '\x2', 
		'\x2', '\x2', '\x1B9E', '\x1B9F', '\x3', '\x2', '\x2', '\x2', '\x1B9F', 
		'\x1BA1', '\x3', '\x2', '\x2', '\x2', '\x1BA0', '\x1BA2', '\x5', '\x38C', 
		'\x1C7', '\x2', '\x1BA1', '\x1BA0', '\x3', '\x2', '\x2', '\x2', '\x1BA1', 
		'\x1BA2', '\x3', '\x2', '\x2', '\x2', '\x1BA2', '\x1C23', '\x3', '\x2', 
		'\x2', '\x2', '\x1BA3', '\x1BA5', '\t', 'p', '\x2', '\x2', '\x1BA4', '\x1BA6', 
		'\x5', '\x484', '\x243', '\x2', '\x1BA5', '\x1BA4', '\x3', '\x2', '\x2', 
		'\x2', '\x1BA5', '\x1BA6', '\x3', '\x2', '\x2', '\x2', '\x1BA6', '\x1BA8', 
		'\x3', '\x2', '\x2', '\x2', '\x1BA7', '\x1BA9', '\x5', '\x38C', '\x1C7', 
		'\x2', '\x1BA8', '\x1BA7', '\x3', '\x2', '\x2', '\x2', '\x1BA8', '\x1BA9', 
		'\x3', '\x2', '\x2', '\x2', '\x1BA9', '\x1C23', '\x3', '\x2', '\x2', '\x2', 
		'\x1BAA', '\x1BAC', '\a', 'J', '\x2', '\x2', '\x1BAB', '\x1BAD', '\x5', 
		'\x38A', '\x1C6', '\x2', '\x1BAC', '\x1BAB', '\x3', '\x2', '\x2', '\x2', 
		'\x1BAC', '\x1BAD', '\x3', '\x2', '\x2', '\x2', '\x1BAD', '\x1C23', '\x3', 
		'\x2', '\x2', '\x2', '\x1BAE', '\x1C23', '\t', 'q', '\x2', '\x2', '\x1BAF', 
		'\x1BB1', '\a', '\x1C4', '\x2', '\x2', '\x1BB0', '\x1BB2', '\x5', '\x38A', 
		'\x1C6', '\x2', '\x1BB1', '\x1BB0', '\x3', '\x2', '\x2', '\x2', '\x1BB1', 
		'\x1BB2', '\x3', '\x2', '\x2', '\x2', '\x1BB2', '\x1BB4', '\x3', '\x2', 
		'\x2', '\x2', '\x1BB3', '\x1BB5', '\x5', '\x38E', '\x1C8', '\x2', '\x1BB4', 
		'\x1BB3', '\x3', '\x2', '\x2', '\x2', '\x1BB4', '\x1BB5', '\x3', '\x2', 
		'\x2', '\x2', '\x1BB5', '\x1C23', '\x3', '\x2', '\x2', '\x2', '\x1BB6', 
		'\x1BB8', '\x5', '\x382', '\x1C2', '\x2', '\x1BB7', '\x1BB9', '\x5', '\x38A', 
		'\x1C6', '\x2', '\x1BB8', '\x1BB7', '\x3', '\x2', '\x2', '\x2', '\x1BB8', 
		'\x1BB9', '\x3', '\x2', '\x2', '\x2', '\x1BB9', '\x1BBB', '\x3', '\x2', 
		'\x2', '\x2', '\x1BBA', '\x1BBC', '\a', '\x1B7', '\x2', '\x2', '\x1BBB', 
		'\x1BBA', '\x3', '\x2', '\x2', '\x2', '\x1BBB', '\x1BBC', '\x3', '\x2', 
		'\x2', '\x2', '\x1BBC', '\x1C23', '\x3', '\x2', '\x2', '\x2', '\x1BBD', 
		'\x1BBF', '\a', '\x1B7', '\x2', '\x2', '\x1BBE', '\x1BC0', '\x5', '\x38A', 
		'\x1C6', '\x2', '\x1BBF', '\x1BBE', '\x3', '\x2', '\x2', '\x2', '\x1BBF', 
		'\x1BC0', '\x3', '\x2', '\x2', '\x2', '\x1BC0', '\x1C23', '\x3', '\x2', 
		'\x2', '\x2', '\x1BC1', '\x1BC2', '\a', '\x1C4', '\x2', '\x2', '\x1BC2', 
		'\x1BC5', '\a', '\x2A4', '\x2', '\x2', '\x1BC3', '\x1BC5', '\a', '\x2A2', 
		'\x2', '\x2', '\x1BC4', '\x1BC1', '\x3', '\x2', '\x2', '\x2', '\x1BC4', 
		'\x1BC3', '\x3', '\x2', '\x2', '\x2', '\x1BC5', '\x1BC6', '\x3', '\x2', 
		'\x2', '\x2', '\x1BC6', '\x1BC8', '\x5', '\x38A', '\x1C6', '\x2', '\x1BC7', 
		'\x1BC9', '\x5', '\x38E', '\x1C8', '\x2', '\x1BC8', '\x1BC7', '\x3', '\x2', 
		'\x2', '\x2', '\x1BC8', '\x1BC9', '\x3', '\x2', '\x2', '\x2', '\x1BC9', 
		'\x1C23', '\x3', '\x2', '\x2', '\x2', '\x1BCA', '\x1BCB', '\a', '\xE9', 
		'\x2', '\x2', '\x1BCB', '\x1BD5', '\a', '\x2A2', '\x2', '\x2', '\x1BCC', 
		'\x1BD5', '\a', '\xF3', '\x2', '\x2', '\x1BCD', '\x1BCE', '\a', '\xEA', 
		'\x2', '\x2', '\x1BCE', '\x1BD5', '\a', '\x2A2', '\x2', '\x2', '\x1BCF', 
		'\x1BD0', '\a', '\xE9', '\x2', '\x2', '\x1BD0', '\x1BD1', '\a', '\x1C4', 
		'\x2', '\x2', '\x1BD1', '\x1BD5', '\a', '\x2A4', '\x2', '\x2', '\x1BD2', 
		'\x1BD3', '\a', '\xEA', '\x2', '\x2', '\x1BD3', '\x1BD5', '\a', '\x2A4', 
		'\x2', '\x2', '\x1BD4', '\x1BCA', '\x3', '\x2', '\x2', '\x2', '\x1BD4', 
		'\x1BCC', '\x3', '\x2', '\x2', '\x2', '\x1BD4', '\x1BCD', '\x3', '\x2', 
		'\x2', '\x2', '\x1BD4', '\x1BCF', '\x3', '\x2', '\x2', '\x2', '\x1BD4', 
		'\x1BD2', '\x3', '\x2', '\x2', '\x2', '\x1BD5', '\x1BD6', '\x3', '\x2', 
		'\x2', '\x2', '\x1BD6', '\x1BD8', '\x5', '\x38A', '\x1C6', '\x2', '\x1BD7', 
		'\x1BD9', '\a', '\x1B7', '\x2', '\x2', '\x1BD8', '\x1BD7', '\x3', '\x2', 
		'\x2', '\x2', '\x1BD8', '\x1BD9', '\x3', '\x2', '\x2', '\x2', '\x1BD9', 
		'\x1C23', '\x3', '\x2', '\x2', '\x2', '\x1BDA', '\x1BDB', '\a', '\x2A1', 
		'\x2', '\x2', '\x1BDB', '\x1C23', '\x5', '\x38A', '\x1C6', '\x2', '\x1BDC', 
		'\x1BDE', '\a', '\x17B', '\x2', '\x2', '\x1BDD', '\x1BDF', '\x5', '\x38A', 
		'\x1C6', '\x2', '\x1BDE', '\x1BDD', '\x3', '\x2', '\x2', '\x2', '\x1BDE', 
		'\x1BDF', '\x3', '\x2', '\x2', '\x2', '\x1BDF', '\x1BE1', '\x3', '\x2', 
		'\x2', '\x2', '\x1BE0', '\x1BE2', '\x5', '\x38C', '\x1C7', '\x2', '\x1BE1', 
		'\x1BE0', '\x3', '\x2', '\x2', '\x2', '\x1BE1', '\x1BE2', '\x3', '\x2', 
		'\x2', '\x2', '\x1BE2', '\x1C23', '\x3', '\x2', '\x2', '\x2', '\x1BE3', 
		'\x1C23', '\a', 'r', '\x2', '\x2', '\x1BE4', '\x1BE6', '\a', '\x162', 
		'\x2', '\x2', '\x1BE5', '\x1BE7', '\x5', '\x396', '\x1CC', '\x2', '\x1BE6', 
		'\x1BE5', '\x3', '\x2', '\x2', '\x2', '\x1BE6', '\x1BE7', '\x3', '\x2', 
		'\x2', '\x2', '\x1BE7', '\x1C23', '\x3', '\x2', '\x2', '\x2', '\x1BE8', 
		'\x1BEA', '\a', '\x15F', '\x2', '\x2', '\x1BE9', '\x1BEB', '\x5', '\x396', 
		'\x1CC', '\x2', '\x1BEA', '\x1BE9', '\x3', '\x2', '\x2', '\x2', '\x1BEA', 
		'\x1BEB', '\x3', '\x2', '\x2', '\x2', '\x1BEB', '\x1C23', '\x3', '\x2', 
		'\x2', '\x2', '\x1BEC', '\x1BEE', '\a', 'q', '\x2', '\x2', '\x1BED', '\x1BEF', 
		'\x5', '\x396', '\x1CC', '\x2', '\x1BEE', '\x1BED', '\x3', '\x2', '\x2', 
		'\x2', '\x1BEE', '\x1BEF', '\x3', '\x2', '\x2', '\x2', '\x1BEF', '\x1C23', 
		'\x3', '\x2', '\x2', '\x2', '\x1BF0', '\x1C23', '\a', '\x28B', '\x2', 
		'\x2', '\x1BF1', '\x1BF3', '\a', '\x1BC', '\x2', '\x2', '\x1BF2', '\x1BF4', 
		'\x5', '\x38A', '\x1C6', '\x2', '\x1BF3', '\x1BF2', '\x3', '\x2', '\x2', 
		'\x2', '\x1BF3', '\x1BF4', '\x3', '\x2', '\x2', '\x2', '\x1BF4', '\x1C23', 
		'\x3', '\x2', '\x2', '\x2', '\x1BF5', '\x1C23', '\t', 'r', '\x2', '\x2', 
		'\x1BF6', '\x1BF7', '\a', '\x229', '\x2', '\x2', '\x1BF7', '\x1C23', '\a', 
		'\x2A1', '\x2', '\x2', '\x1BF8', '\x1BFC', '\a', '\x229', '\x2', '\x2', 
		'\x1BF9', '\x1BFA', '\a', '\x1C4', '\x2', '\x2', '\x1BFA', '\x1BFD', '\a', 
		'\x2A4', '\x2', '\x2', '\x1BFB', '\x1BFD', '\a', '\x2A2', '\x2', '\x2', 
		'\x1BFC', '\x1BF9', '\x3', '\x2', '\x2', '\x2', '\x1BFC', '\x1BFB', '\x3', 
		'\x2', '\x2', '\x2', '\x1BFC', '\x1BFD', '\x3', '\x2', '\x2', '\x2', '\x1BFD', 
		'\x1BFF', '\x3', '\x2', '\x2', '\x2', '\x1BFE', '\x1C00', '\x5', '\x38E', 
		'\x1C8', '\x2', '\x1BFF', '\x1BFE', '\x3', '\x2', '\x2', '\x2', '\x1BFF', 
		'\x1C00', '\x3', '\x2', '\x2', '\x2', '\x1C00', '\x1C23', '\x3', '\x2', 
		'\x2', '\x2', '\x1C01', '\x1C03', '\a', '\x28D', '\x2', '\x2', '\x1C02', 
		'\x1C04', '\x5', '\x38E', '\x1C8', '\x2', '\x1C03', '\x1C02', '\x3', '\x2', 
		'\x2', '\x2', '\x1C03', '\x1C04', '\x3', '\x2', '\x2', '\x2', '\x1C04', 
		'\x1C23', '\x3', '\x2', '\x2', '\x2', '\x1C05', '\x1C07', '\a', '\x15B', 
		'\x2', '\x2', '\x1C06', '\x1C08', '\x5', '\x38A', '\x1C6', '\x2', '\x1C07', 
		'\x1C06', '\x3', '\x2', '\x2', '\x2', '\x1C07', '\x1C08', '\x3', '\x2', 
		'\x2', '\x2', '\x1C08', '\x1C0A', '\x3', '\x2', '\x2', '\x2', '\x1C09', 
		'\x1C0B', '\x5', '\x38E', '\x1C8', '\x2', '\x1C0A', '\x1C09', '\x3', '\x2', 
		'\x2', '\x2', '\x1C0A', '\x1C0B', '\x3', '\x2', '\x2', '\x2', '\x1C0B', 
		'\x1C23', '\x3', '\x2', '\x2', '\x2', '\x1C0C', '\x1C0E', '\a', '\x233', 
		'\x2', '\x2', '\x1C0D', '\x1C0F', '\x5', '\x38E', '\x1C8', '\x2', '\x1C0E', 
		'\x1C0D', '\x3', '\x2', '\x2', '\x2', '\x1C0E', '\x1C0F', '\x3', '\x2', 
		'\x2', '\x2', '\x1C0F', '\x1C23', '\x3', '\x2', '\x2', '\x2', '\x1C10', 
		'\x1C12', '\a', '\x227', '\x2', '\x2', '\x1C11', '\x1C13', '\x5', '\x38E', 
		'\x1C8', '\x2', '\x1C12', '\x1C11', '\x3', '\x2', '\x2', '\x2', '\x1C12', 
		'\x1C13', '\x3', '\x2', '\x2', '\x2', '\x1C13', '\x1C23', '\x3', '\x2', 
		'\x2', '\x2', '\x1C14', '\x1C15', '\a', '\x81', '\x2', '\x2', '\x1C15', 
		'\x1C17', '\x5', '\x46E', '\x238', '\x2', '\x1C16', '\x1C18', '\x5', '\x38E', 
		'\x1C8', '\x2', '\x1C17', '\x1C16', '\x3', '\x2', '\x2', '\x2', '\x1C17', 
		'\x1C18', '\x3', '\x2', '\x2', '\x2', '\x1C18', '\x1C23', '\x3', '\x2', 
		'\x2', '\x2', '\x1C19', '\x1C1A', '\a', '\x26C', '\x2', '\x2', '\x1C1A', 
		'\x1C1C', '\x5', '\x46E', '\x238', '\x2', '\x1C1B', '\x1C1D', '\x5', '\x38E', 
		'\x1C8', '\x2', '\x1C1C', '\x1C1B', '\x3', '\x2', '\x2', '\x2', '\x1C1C', 
		'\x1C1D', '\x3', '\x2', '\x2', '\x2', '\x1C1D', '\x1C23', '\x3', '\x2', 
		'\x2', '\x2', '\x1C1E', '\x1C23', '\a', '\x134', '\x2', '\x2', '\x1C1F', 
		'\x1C20', '\x6', '\x1C1', '\xBF', '\x2', '\x1C20', '\x1C23', '\a', '\xAE', 
		'\x2', '\x2', '\x1C21', '\x1C23', '\t', 's', '\x2', '\x2', '\x1C22', '\x1B8F', 
		'\x3', '\x2', '\x2', '\x2', '\x1C22', '\x1B9B', '\x3', '\x2', '\x2', '\x2', 
		'\x1C22', '\x1BA3', '\x3', '\x2', '\x2', '\x2', '\x1C22', '\x1BAA', '\x3', 
		'\x2', '\x2', '\x2', '\x1C22', '\x1BAE', '\x3', '\x2', '\x2', '\x2', '\x1C22', 
		'\x1BAF', '\x3', '\x2', '\x2', '\x2', '\x1C22', '\x1BB6', '\x3', '\x2', 
		'\x2', '\x2', '\x1C22', '\x1BBD', '\x3', '\x2', '\x2', '\x2', '\x1C22', 
		'\x1BC4', '\x3', '\x2', '\x2', '\x2', '\x1C22', '\x1BD4', '\x3', '\x2', 
		'\x2', '\x2', '\x1C22', '\x1BDA', '\x3', '\x2', '\x2', '\x2', '\x1C22', 
		'\x1BDC', '\x3', '\x2', '\x2', '\x2', '\x1C22', '\x1BE3', '\x3', '\x2', 
		'\x2', '\x2', '\x1C22', '\x1BE4', '\x3', '\x2', '\x2', '\x2', '\x1C22', 
		'\x1BE8', '\x3', '\x2', '\x2', '\x2', '\x1C22', '\x1BEC', '\x3', '\x2', 
		'\x2', '\x2', '\x1C22', '\x1BF0', '\x3', '\x2', '\x2', '\x2', '\x1C22', 
		'\x1BF1', '\x3', '\x2', '\x2', '\x2', '\x1C22', '\x1BF5', '\x3', '\x2', 
		'\x2', '\x2', '\x1C22', '\x1BF6', '\x3', '\x2', '\x2', '\x2', '\x1C22', 
		'\x1BF8', '\x3', '\x2', '\x2', '\x2', '\x1C22', '\x1C01', '\x3', '\x2', 
		'\x2', '\x2', '\x1C22', '\x1C05', '\x3', '\x2', '\x2', '\x2', '\x1C22', 
		'\x1C0C', '\x3', '\x2', '\x2', '\x2', '\x1C22', '\x1C10', '\x3', '\x2', 
		'\x2', '\x2', '\x1C22', '\x1C14', '\x3', '\x2', '\x2', '\x2', '\x1C22', 
		'\x1C19', '\x3', '\x2', '\x2', '\x2', '\x1C22', '\x1C1E', '\x3', '\x2', 
		'\x2', '\x2', '\x1C22', '\x1C1F', '\x3', '\x2', '\x2', '\x2', '\x1C22', 
		'\x1C21', '\x3', '\x2', '\x2', '\x2', '\x1C23', '\x381', '\x3', '\x2', 
		'\x2', '\x2', '\x1C24', '\x1C28', '\a', '\xEA', '\x2', '\x2', '\x1C25', 
		'\x1C26', '\a', '\xE9', '\x2', '\x2', '\x1C26', '\x1C28', '\a', '\x1C4', 
		'\x2', '\x2', '\x1C27', '\x1C24', '\x3', '\x2', '\x2', '\x2', '\x1C27', 
		'\x1C25', '\x3', '\x2', '\x2', '\x2', '\x1C28', '\x383', '\x3', '\x2', 
		'\x2', '\x2', '\x1C29', '\x1C2A', '\a', '\x1C4', '\x2', '\x2', '\x1C2A', 
		'\x1C2D', '\a', '\x2A4', '\x2', '\x2', '\x1C2B', '\x1C2D', '\a', '\x2A2', 
		'\x2', '\x2', '\x1C2C', '\x1C29', '\x3', '\x2', '\x2', '\x2', '\x1C2C', 
		'\x1C2B', '\x3', '\x2', '\x2', '\x2', '\x1C2D', '\x385', '\x3', '\x2', 
		'\x2', '\x2', '\x1C2E', '\x1C2F', '\a', '\xE9', '\x2', '\x2', '\x1C2F', 
		'\x1C39', '\a', '\x2A2', '\x2', '\x2', '\x1C30', '\x1C39', '\a', '\xF3', 
		'\x2', '\x2', '\x1C31', '\x1C32', '\a', '\xEA', '\x2', '\x2', '\x1C32', 
		'\x1C39', '\a', '\x2A2', '\x2', '\x2', '\x1C33', '\x1C34', '\a', '\xE9', 
		'\x2', '\x2', '\x1C34', '\x1C35', '\a', '\x1C4', '\x2', '\x2', '\x1C35', 
		'\x1C39', '\a', '\x2A4', '\x2', '\x2', '\x1C36', '\x1C37', '\a', '\xEA', 
		'\x2', '\x2', '\x1C37', '\x1C39', '\a', '\x2A4', '\x2', '\x2', '\x1C38', 
		'\x1C2E', '\x3', '\x2', '\x2', '\x2', '\x1C38', '\x1C30', '\x3', '\x2', 
		'\x2', '\x2', '\x1C38', '\x1C31', '\x3', '\x2', '\x2', '\x2', '\x1C38', 
		'\x1C33', '\x3', '\x2', '\x2', '\x2', '\x1C38', '\x1C36', '\x3', '\x2', 
		'\x2', '\x2', '\x1C39', '\x387', '\x3', '\x2', '\x2', '\x2', '\x1C3A', 
		'\x1C40', '\a', '\x259', '\x2', '\x2', '\x1C3B', '\x1C3D', '\a', '\x1E8', 
		'\x2', '\x2', '\x1C3C', '\x1C3E', '\a', '\x251', '\x2', '\x2', '\x1C3D', 
		'\x1C3C', '\x3', '\x2', '\x2', '\x2', '\x1C3D', '\x1C3E', '\x3', '\x2', 
		'\x2', '\x2', '\x1C3E', '\x1C40', '\x3', '\x2', '\x2', '\x2', '\x1C3F', 
		'\x1C3A', '\x3', '\x2', '\x2', '\x2', '\x1C3F', '\x1C3B', '\x3', '\x2', 
		'\x2', '\x2', '\x1C40', '\x389', '\x3', '\x2', '\x2', '\x2', '\x1C41', 
		'\x1C44', '\a', '\x19B', '\x2', '\x2', '\x1C42', '\x1C45', '\x5', '\x468', 
		'\x235', '\x2', '\x1C43', '\x1C45', '\a', '\x1A9', '\x2', '\x2', '\x1C44', 
		'\x1C42', '\x3', '\x2', '\x2', '\x2', '\x1C44', '\x1C43', '\x3', '\x2', 
		'\x2', '\x2', '\x1C45', '\x1C46', '\x3', '\x2', '\x2', '\x2', '\x1C46', 
		'\x1C47', '\a', '\x19C', '\x2', '\x2', '\x1C47', '\x38B', '\x3', '\x2', 
		'\x2', '\x2', '\x1C48', '\x1C4A', '\t', 't', '\x2', '\x2', '\x1C49', '\x1C48', 
		'\x3', '\x2', '\x2', '\x2', '\x1C4A', '\x1C4B', '\x3', '\x2', '\x2', '\x2', 
		'\x1C4B', '\x1C49', '\x3', '\x2', '\x2', '\x2', '\x1C4B', '\x1C4C', '\x3', 
		'\x2', '\x2', '\x2', '\x1C4C', '\x38D', '\x3', '\x2', '\x2', '\x2', '\x1C4D', 
		'\x1C5C', '\x5', '\x390', '\x1C9', '\x2', '\x1C4E', '\x1C5C', '\x5', '\x392', 
		'\x1CA', '\x2', '\x1C4F', '\x1C5C', '\a', '\b', '\x2', '\x2', '\x1C50', 
		'\x1C51', '\x5', '\x2E2', '\x172', '\x2', '\x1C51', '\x1C53', '\x5', '\x398', 
		'\x1CD', '\x2', '\x1C52', '\x1C54', '\a', '\x1B7', '\x2', '\x2', '\x1C53', 
		'\x1C52', '\x3', '\x2', '\x2', '\x2', '\x1C53', '\x1C54', '\x3', '\x2', 
		'\x2', '\x2', '\x1C54', '\x1C5C', '\x3', '\x2', '\x2', '\x2', '\x1C55', 
		'\x1C59', '\a', '\x1B7', '\x2', '\x2', '\x1C56', '\x1C57', '\x5', '\x2E2', 
		'\x172', '\x2', '\x1C57', '\x1C58', '\x5', '\x398', '\x1CD', '\x2', '\x1C58', 
		'\x1C5A', '\x3', '\x2', '\x2', '\x2', '\x1C59', '\x1C56', '\x3', '\x2', 
		'\x2', '\x2', '\x1C59', '\x1C5A', '\x3', '\x2', '\x2', '\x2', '\x1C5A', 
		'\x1C5C', '\x3', '\x2', '\x2', '\x2', '\x1C5B', '\x1C4D', '\x3', '\x2', 
		'\x2', '\x2', '\x1C5B', '\x1C4E', '\x3', '\x2', '\x2', '\x2', '\x1C5B', 
		'\x1C4F', '\x3', '\x2', '\x2', '\x2', '\x1C5B', '\x1C50', '\x3', '\x2', 
		'\x2', '\x2', '\x1C5B', '\x1C55', '\x3', '\x2', '\x2', '\x2', '\x1C5C', 
		'\x38F', '\x3', '\x2', '\x2', '\x2', '\x1C5D', '\x1C5F', '\a', '\x4', 
		'\x2', '\x2', '\x1C5E', '\x1C60', '\a', '\x1B7', '\x2', '\x2', '\x1C5F', 
		'\x1C5E', '\x3', '\x2', '\x2', '\x2', '\x1C5F', '\x1C60', '\x3', '\x2', 
		'\x2', '\x2', '\x1C60', '\x1C64', '\x3', '\x2', '\x2', '\x2', '\x1C61', 
		'\x1C62', '\a', '\x1B7', '\x2', '\x2', '\x1C62', '\x1C64', '\a', '\x4', 
		'\x2', '\x2', '\x1C63', '\x1C5D', '\x3', '\x2', '\x2', '\x2', '\x1C63', 
		'\x1C61', '\x3', '\x2', '\x2', '\x2', '\x1C64', '\x391', '\x3', '\x2', 
		'\x2', '\x2', '\x1C65', '\x1C67', '\a', '\x35', '\x2', '\x2', '\x1C66', 
		'\x1C68', '\a', '\x1B7', '\x2', '\x2', '\x1C67', '\x1C66', '\x3', '\x2', 
		'\x2', '\x2', '\x1C67', '\x1C68', '\x3', '\x2', '\x2', '\x2', '\x1C68', 
		'\x1C6C', '\x3', '\x2', '\x2', '\x2', '\x1C69', '\x1C6A', '\a', '\x1B7', 
		'\x2', '\x2', '\x1C6A', '\x1C6C', '\a', '\x35', '\x2', '\x2', '\x1C6B', 
		'\x1C65', '\x3', '\x2', '\x2', '\x2', '\x1C6B', '\x1C69', '\x3', '\x2', 
		'\x2', '\x2', '\x1C6C', '\x393', '\x3', '\x2', '\x2', '\x2', '\x1C6D', 
		'\x1C6E', '\a', '\x19B', '\x2', '\x2', '\x1C6E', '\x1C6F', '\x5', '\x464', 
		'\x233', '\x2', '\x1C6F', '\x1C70', '\a', '\x19C', '\x2', '\x2', '\x1C70', 
		'\x395', '\x3', '\x2', '\x2', '\x2', '\x1C71', '\x1C72', '\x6', '\x1CC', 
		'\xC0', '\x2', '\x1C72', '\x1C73', '\a', '\x19B', '\x2', '\x2', '\x1C73', 
		'\x1C74', '\a', '\x17E', '\x2', '\x2', '\x1C74', '\x1C75', '\a', '\x19C', 
		'\x2', '\x2', '\x1C75', '\x397', '\x3', '\x2', '\x2', '\x2', '\x1C76', 
		'\x1C7B', '\x5', '\x48A', '\x246', '\x2', '\x1C77', '\x1C7B', '\a', '\x1B7', 
		'\x2', '\x2', '\x1C78', '\x1C79', '\x6', '\x1CD', '\xC1', '\x2', '\x1C79', 
		'\x1C7B', '\a', '\x1E0', '\x2', '\x2', '\x1C7A', '\x1C76', '\x3', '\x2', 
		'\x2', '\x2', '\x1C7A', '\x1C77', '\x3', '\x2', '\x2', '\x2', '\x1C7A', 
		'\x1C78', '\x3', '\x2', '\x2', '\x2', '\x1C7B', '\x399', '\x3', '\x2', 
		'\x2', '\x2', '\x1C7C', '\x1C80', '\x5', '\x48A', '\x246', '\x2', '\x1C7D', 
		'\x1C7E', '\x6', '\x1CE', '\xC2', '\x2', '\x1C7E', '\x1C80', '\a', '\x1E0', 
		'\x2', '\x2', '\x1C7F', '\x1C7C', '\x3', '\x2', '\x2', '\x2', '\x1C7F', 
		'\x1C7D', '\x3', '\x2', '\x2', '\x2', '\x1C80', '\x39B', '\x3', '\x2', 
		'\x2', '\x2', '\x1C81', '\x1C88', '\x5', '\x3A0', '\x1D1', '\x2', '\x1C82', 
		'\x1C84', '\a', '\x198', '\x2', '\x2', '\x1C83', '\x1C82', '\x3', '\x2', 
		'\x2', '\x2', '\x1C83', '\x1C84', '\x3', '\x2', '\x2', '\x2', '\x1C84', 
		'\x1C85', '\x3', '\x2', '\x2', '\x2', '\x1C85', '\x1C87', '\x5', '\x3A0', 
		'\x1D1', '\x2', '\x1C86', '\x1C83', '\x3', '\x2', '\x2', '\x2', '\x1C87', 
		'\x1C8A', '\x3', '\x2', '\x2', '\x2', '\x1C88', '\x1C86', '\x3', '\x2', 
		'\x2', '\x2', '\x1C88', '\x1C89', '\x3', '\x2', '\x2', '\x2', '\x1C89', 
		'\x39D', '\x3', '\x2', '\x2', '\x2', '\x1C8A', '\x1C88', '\x3', '\x2', 
		'\x2', '\x2', '\x1C8B', '\x1C8D', '\x5', '\x3A0', '\x1D1', '\x2', '\x1C8C', 
		'\x1C8B', '\x3', '\x2', '\x2', '\x2', '\x1C8D', '\x1C8E', '\x3', '\x2', 
		'\x2', '\x2', '\x1C8E', '\x1C8C', '\x3', '\x2', '\x2', '\x2', '\x1C8E', 
		'\x1C8F', '\x3', '\x2', '\x2', '\x2', '\x1C8F', '\x39F', '\x3', '\x2', 
		'\x2', '\x2', '\x1C90', '\x1C92', '\a', '\x82', '\x2', '\x2', '\x1C91', 
		'\x1C93', '\a', '\x181', '\x2', '\x2', '\x1C92', '\x1C91', '\x3', '\x2', 
		'\x2', '\x2', '\x1C92', '\x1C93', '\x3', '\x2', '\x2', '\x2', '\x1C93', 
		'\x1C94', '\x3', '\x2', '\x2', '\x2', '\x1C94', '\x1D13', '\x5', '\x434', 
		'\x21B', '\x2', '\x1C95', '\x1C96', '\x6', '\x1D1', '\xC3', '\x2', '\x1C96', 
		'\x1C98', '\a', '\x2F2', '\x2', '\x2', '\x1C97', '\x1C99', '\x5', '\x494', 
		'\x24B', '\x2', '\x1C98', '\x1C97', '\x3', '\x2', '\x2', '\x2', '\x1C98', 
		'\x1C99', '\x3', '\x2', '\x2', '\x2', '\x1C99', '\x1C9C', '\x3', '\x2', 
		'\x2', '\x2', '\x1C9A', '\x1C9D', '\a', '\x241', '\x2', '\x2', '\x1C9B', 
		'\x1C9D', '\x5', '\x48A', '\x246', '\x2', '\x1C9C', '\x1C9A', '\x3', '\x2', 
		'\x2', '\x2', '\x1C9C', '\x1C9B', '\x3', '\x2', '\x2', '\x2', '\x1C9D', 
		'\x1D13', '\x3', '\x2', '\x2', '\x2', '\x1C9E', '\x1CA0', '\a', '\xBA', 
		'\x2', '\x2', '\x1C9F', '\x1CA1', '\a', '\x181', '\x2', '\x2', '\x1CA0', 
		'\x1C9F', '\x3', '\x2', '\x2', '\x2', '\x1CA0', '\x1CA1', '\x3', '\x2', 
		'\x2', '\x2', '\x1CA1', '\x1CA2', '\x3', '\x2', '\x2', '\x2', '\x1CA2', 
		'\x1D13', '\x5', '\x466', '\x234', '\x2', '\x1CA3', '\x1CA5', '\a', '\xDE', 
		'\x2', '\x2', '\x1CA4', '\x1CA6', '\a', '\x181', '\x2', '\x2', '\x1CA5', 
		'\x1CA4', '\x3', '\x2', '\x2', '\x2', '\x1CA5', '\x1CA6', '\x3', '\x2', 
		'\x2', '\x2', '\x1CA6', '\x1CA7', '\x3', '\x2', '\x2', '\x2', '\x1CA7', 
		'\x1D13', '\x5', '\x466', '\x234', '\x2', '\x1CA8', '\x1CAA', '\a', 'G', 
		'\x2', '\x2', '\x1CA9', '\x1CAB', '\a', '\x181', '\x2', '\x2', '\x1CAA', 
		'\x1CA9', '\x3', '\x2', '\x2', '\x2', '\x1CAA', '\x1CAB', '\x3', '\x2', 
		'\x2', '\x2', '\x1CAB', '\x1CAC', '\x3', '\x2', '\x2', '\x2', '\x1CAC', 
		'\x1D13', '\x5', '\x462', '\x232', '\x2', '\x1CAD', '\x1CAF', '\a', '\xFD', 
		'\x2', '\x2', '\x1CAE', '\x1CB0', '\a', '\x181', '\x2', '\x2', '\x1CAF', 
		'\x1CAE', '\x3', '\x2', '\x2', '\x2', '\x1CAF', '\x1CB0', '\x3', '\x2', 
		'\x2', '\x2', '\x1CB0', '\x1CB1', '\x3', '\x2', '\x2', '\x2', '\x1CB1', 
		'\x1D13', '\x5', '\x470', '\x239', '\x2', '\x1CB2', '\x1CB4', '\a', '\r', 
		'\x2', '\x2', '\x1CB3', '\x1CB5', '\a', '\x181', '\x2', '\x2', '\x1CB4', 
		'\x1CB3', '\x3', '\x2', '\x2', '\x2', '\x1CB4', '\x1CB5', '\x3', '\x2', 
		'\x2', '\x2', '\x1CB5', '\x1CB6', '\x3', '\x2', '\x2', '\x2', '\x1CB6', 
		'\x1D13', '\x5', '\x470', '\x239', '\x2', '\x1CB7', '\x1CB8', '\x6', '\x1D1', 
		'\xC4', '\x2', '\x1CB8', '\x1CBA', '\a', '\x61', '\x2', '\x2', '\x1CB9', 
		'\x1CBB', '\a', '\x181', '\x2', '\x2', '\x1CBA', '\x1CB9', '\x3', '\x2', 
		'\x2', '\x2', '\x1CBA', '\x1CBB', '\x3', '\x2', '\x2', '\x2', '\x1CBB', 
		'\x1CBC', '\x3', '\x2', '\x2', '\x2', '\x1CBC', '\x1D13', '\x5', '\x472', 
		'\x23A', '\x2', '\x1CBD', '\x1CBE', '\x6', '\x1D1', '\xC5', '\x2', '\x1CBE', 
		'\x1CC0', '\a', '\x62', '\x2', '\x2', '\x1CBF', '\x1CC1', '\a', '\x181', 
		'\x2', '\x2', '\x1CC0', '\x1CBF', '\x3', '\x2', '\x2', '\x2', '\x1CC0', 
		'\x1CC1', '\x3', '\x2', '\x2', '\x2', '\x1CC1', '\x1CC2', '\x3', '\x2', 
		'\x2', '\x2', '\x1CC2', '\x1D13', '\x5', '\x472', '\x23A', '\x2', '\x1CC3', 
		'\x1CC5', '\a', '\x45', '\x2', '\x2', '\x1CC4', '\x1CC6', '\a', '\x181', 
		'\x2', '\x2', '\x1CC5', '\x1CC4', '\x3', '\x2', '\x2', '\x2', '\x1CC5', 
		'\x1CC6', '\x3', '\x2', '\x2', '\x2', '\x1CC6', '\x1CC7', '\x3', '\x2', 
		'\x2', '\x2', '\x1CC7', '\x1D13', '\x5', '\x466', '\x234', '\x2', '\x1CC8', 
		'\x1CCA', '\a', '\xF8', '\x2', '\x2', '\x1CC9', '\x1CCB', '\a', '\x181', 
		'\x2', '\x2', '\x1CCA', '\x1CC9', '\x3', '\x2', '\x2', '\x2', '\x1CCA', 
		'\x1CCB', '\x3', '\x2', '\x2', '\x2', '\x1CCB', '\x1CCC', '\x3', '\x2', 
		'\x2', '\x2', '\x1CCC', '\x1D13', '\x5', '\x3A2', '\x1D2', '\x2', '\x1CCD', 
		'\x1CCE', '\x6', '\x1D1', '\xC6', '\x2', '\x1CCE', '\x1CD0', '\t', 'u', 
		'\x2', '\x2', '\x1CCF', '\x1CD1', '\a', '\x181', '\x2', '\x2', '\x1CD0', 
		'\x1CCF', '\x3', '\x2', '\x2', '\x2', '\x1CD0', '\x1CD1', '\x3', '\x2', 
		'\x2', '\x2', '\x1CD1', '\x1CD2', '\x3', '\x2', '\x2', '\x2', '\x1CD2', 
		'\x1D13', '\x5', '\x3A2', '\x1D2', '\x2', '\x1CD3', '\x1CD5', '\t', 'v', 
		'\x2', '\x2', '\x1CD4', '\x1CD6', '\a', '\x181', '\x2', '\x2', '\x1CD5', 
		'\x1CD4', '\x3', '\x2', '\x2', '\x2', '\x1CD5', '\x1CD6', '\x3', '\x2', 
		'\x2', '\x2', '\x1CD6', '\x1CD7', '\x3', '\x2', '\x2', '\x2', '\x1CD7', 
		'\x1D13', '\x5', '\x462', '\x232', '\x2', '\x1CD8', '\x1CDA', '\a', 'v', 
		'\x2', '\x2', '\x1CD9', '\x1CDB', '\a', '\x181', '\x2', '\x2', '\x1CDA', 
		'\x1CD9', '\x3', '\x2', '\x2', '\x2', '\x1CDA', '\x1CDB', '\x3', '\x2', 
		'\x2', '\x2', '\x1CDB', '\x1CDC', '\x3', '\x2', '\x2', '\x2', '\x1CDC', 
		'\x1D13', '\x5', '\x462', '\x232', '\x2', '\x1CDD', '\x1CDF', '\a', '\x12E', 
		'\x2', '\x2', '\x1CDE', '\x1CE0', '\a', '\x181', '\x2', '\x2', '\x1CDF', 
		'\x1CDE', '\x3', '\x2', '\x2', '\x2', '\x1CDF', '\x1CE0', '\x3', '\x2', 
		'\x2', '\x2', '\x1CE0', '\x1CE1', '\x3', '\x2', '\x2', '\x2', '\x1CE1', 
		'\x1D13', '\t', 'w', '\x2', '\x2', '\x1CE2', '\x1CE4', '\a', '\x294', 
		'\x2', '\x2', '\x1CE3', '\x1CE5', '\a', '\x181', '\x2', '\x2', '\x1CE4', 
		'\x1CE3', '\x3', '\x2', '\x2', '\x2', '\x1CE4', '\x1CE5', '\x3', '\x2', 
		'\x2', '\x2', '\x1CE5', '\x1CE6', '\x3', '\x2', '\x2', '\x2', '\x1CE6', 
		'\x1CE7', '\a', '\x19B', '\x2', '\x2', '\x1CE7', '\x1CE8', '\x5', '\x43E', 
		'\x220', '\x2', '\x1CE8', '\x1CE9', '\a', '\x19C', '\x2', '\x2', '\x1CE9', 
		'\x1D13', '\x3', '\x2', '\x2', '\x2', '\x1CEA', '\x1D13', '\x5', '\x3A8', 
		'\x1D5', '\x2', '\x1CEB', '\x1D13', '\x5', '\x3A4', '\x1D3', '\x2', '\x1CEC', 
		'\x1CEE', '\a', '\xAD', '\x2', '\x2', '\x1CED', '\x1CEF', '\a', '\x181', 
		'\x2', '\x2', '\x1CEE', '\x1CED', '\x3', '\x2', '\x2', '\x2', '\x1CEE', 
		'\x1CEF', '\x3', '\x2', '\x2', '\x2', '\x1CEF', '\x1CF0', '\x3', '\x2', 
		'\x2', '\x2', '\x1CF0', '\x1D13', '\t', 'x', '\x2', '\x2', '\x1CF1', '\x1CF2', 
		'\a', 'o', '\x2', '\x2', '\x1CF2', '\x1CF4', '\a', 'y', '\x2', '\x2', 
		'\x1CF3', '\x1CF5', '\a', '\x181', '\x2', '\x2', '\x1CF4', '\x1CF3', '\x3', 
		'\x2', '\x2', '\x2', '\x1CF4', '\x1CF5', '\x3', '\x2', '\x2', '\x2', '\x1CF5', 
		'\x1CF6', '\x3', '\x2', '\x2', '\x2', '\x1CF6', '\x1D13', '\x5', '\x472', 
		'\x23A', '\x2', '\x1CF7', '\x1CF8', '\a', '\x20A', '\x2', '\x2', '\x1CF8', 
		'\x1CFA', '\a', 'y', '\x2', '\x2', '\x1CF9', '\x1CFB', '\a', '\x181', 
		'\x2', '\x2', '\x1CFA', '\x1CF9', '\x3', '\x2', '\x2', '\x2', '\x1CFA', 
		'\x1CFB', '\x3', '\x2', '\x2', '\x2', '\x1CFB', '\x1CFC', '\x3', '\x2', 
		'\x2', '\x2', '\x1CFC', '\x1D13', '\x5', '\x472', '\x23A', '\x2', '\x1CFD', 
		'\x1D03', '\a', '\x158', '\x2', '\x2', '\x1CFE', '\x1D00', '\x6', '\x1D1', 
		'\xC7', '\x2', '\x1CFF', '\x1D01', '\a', '\x181', '\x2', '\x2', '\x1D00', 
		'\x1CFF', '\x3', '\x2', '\x2', '\x2', '\x1D00', '\x1D01', '\x3', '\x2', 
		'\x2', '\x2', '\x1D01', '\x1D04', '\x3', '\x2', '\x2', '\x2', '\x1D02', 
		'\x1D04', '\x3', '\x2', '\x2', '\x2', '\x1D03', '\x1CFE', '\x3', '\x2', 
		'\x2', '\x2', '\x1D03', '\x1D02', '\x3', '\x2', '\x2', '\x2', '\x1D04', 
		'\x1D05', '\x3', '\x2', '\x2', '\x2', '\x1D05', '\x1D13', '\x5', '\x456', 
		'\x22C', '\x2', '\x1D06', '\x1D07', '\a', '\x14A', '\x2', '\x2', '\x1D07', 
		'\x1D13', '\t', 'y', '\x2', '\x2', '\x1D08', '\x1D0A', '\a', '\x64', '\x2', 
		'\x2', '\x1D09', '\x1D0B', '\a', '\x181', '\x2', '\x2', '\x1D0A', '\x1D09', 
		'\x3', '\x2', '\x2', '\x2', '\x1D0A', '\x1D0B', '\x3', '\x2', '\x2', '\x2', 
		'\x1D0B', '\x1D0C', '\x3', '\x2', '\x2', '\x2', '\x1D0C', '\x1D13', '\x5', 
		'\x472', '\x23A', '\x2', '\x1D0D', '\x1D0F', '\a', '\xAF', '\x2', '\x2', 
		'\x1D0E', '\x1D10', '\a', '\x181', '\x2', '\x2', '\x1D0F', '\x1D0E', '\x3', 
		'\x2', '\x2', '\x2', '\x1D0F', '\x1D10', '\x3', '\x2', '\x2', '\x2', '\x1D10', 
		'\x1D11', '\x3', '\x2', '\x2', '\x2', '\x1D11', '\x1D13', '\x5', '\x462', 
		'\x232', '\x2', '\x1D12', '\x1C90', '\x3', '\x2', '\x2', '\x2', '\x1D12', 
		'\x1C95', '\x3', '\x2', '\x2', '\x2', '\x1D12', '\x1C9E', '\x3', '\x2', 
		'\x2', '\x2', '\x1D12', '\x1CA3', '\x3', '\x2', '\x2', '\x2', '\x1D12', 
		'\x1CA8', '\x3', '\x2', '\x2', '\x2', '\x1D12', '\x1CAD', '\x3', '\x2', 
		'\x2', '\x2', '\x1D12', '\x1CB2', '\x3', '\x2', '\x2', '\x2', '\x1D12', 
		'\x1CB7', '\x3', '\x2', '\x2', '\x2', '\x1D12', '\x1CBD', '\x3', '\x2', 
		'\x2', '\x2', '\x1D12', '\x1CC3', '\x3', '\x2', '\x2', '\x2', '\x1D12', 
		'\x1CC8', '\x3', '\x2', '\x2', '\x2', '\x1D12', '\x1CCD', '\x3', '\x2', 
		'\x2', '\x2', '\x1D12', '\x1CD3', '\x3', '\x2', '\x2', '\x2', '\x1D12', 
		'\x1CD8', '\x3', '\x2', '\x2', '\x2', '\x1D12', '\x1CDD', '\x3', '\x2', 
		'\x2', '\x2', '\x1D12', '\x1CE2', '\x3', '\x2', '\x2', '\x2', '\x1D12', 
		'\x1CEA', '\x3', '\x2', '\x2', '\x2', '\x1D12', '\x1CEB', '\x3', '\x2', 
		'\x2', '\x2', '\x1D12', '\x1CEC', '\x3', '\x2', '\x2', '\x2', '\x1D12', 
		'\x1CF1', '\x3', '\x2', '\x2', '\x2', '\x1D12', '\x1CF7', '\x3', '\x2', 
		'\x2', '\x2', '\x1D12', '\x1CFD', '\x3', '\x2', '\x2', '\x2', '\x1D12', 
		'\x1D06', '\x3', '\x2', '\x2', '\x2', '\x1D12', '\x1D08', '\x3', '\x2', 
		'\x2', '\x2', '\x1D12', '\x1D0D', '\x3', '\x2', '\x2', '\x2', '\x1D13', 
		'\x3A1', '\x3', '\x2', '\x2', '\x2', '\x1D14', '\x1D17', '\x5', '\x462', 
		'\x232', '\x2', '\x1D15', '\x1D17', '\a', '\x1E0', '\x2', '\x2', '\x1D16', 
		'\x1D14', '\x3', '\x2', '\x2', '\x2', '\x1D16', '\x1D15', '\x3', '\x2', 
		'\x2', '\x2', '\x1D17', '\x3A3', '\x3', '\x2', '\x2', '\x2', '\x1D18', 
		'\x1D1A', '\a', '\x1E0', '\x2', '\x2', '\x1D19', '\x1D18', '\x3', '\x2', 
		'\x2', '\x2', '\x1D19', '\x1D1A', '\x3', '\x2', '\x2', '\x2', '\x1D1A', 
		'\x1D1B', '\x3', '\x2', '\x2', '\x2', '\x1D1B', '\x1D1D', '\a', '\x1C6', 
		'\x2', '\x2', '\x1D1C', '\x1D1E', '\a', '\x181', '\x2', '\x2', '\x1D1D', 
		'\x1D1C', '\x3', '\x2', '\x2', '\x2', '\x1D1D', '\x1D1E', '\x3', '\x2', 
		'\x2', '\x2', '\x1D1E', '\x1D1F', '\x3', '\x2', '\x2', '\x2', '\x1D1F', 
		'\x1D20', '\x5', '\x39A', '\x1CE', '\x2', '\x1D20', '\x3A5', '\x3', '\x2', 
		'\x2', '\x2', '\x1D21', '\x1D23', '\a', '\x1E0', '\x2', '\x2', '\x1D22', 
		'\x1D21', '\x3', '\x2', '\x2', '\x2', '\x1D22', '\x1D23', '\x3', '\x2', 
		'\x2', '\x2', '\x1D23', '\x1D24', '\x3', '\x2', '\x2', '\x2', '\x1D24', 
		'\x1D26', '\a', '\x62', '\x2', '\x2', '\x1D25', '\x1D27', '\a', '\x181', 
		'\x2', '\x2', '\x1D26', '\x1D25', '\x3', '\x2', '\x2', '\x2', '\x1D26', 
		'\x1D27', '\x3', '\x2', '\x2', '\x2', '\x1D27', '\x1D28', '\x3', '\x2', 
		'\x2', '\x2', '\x1D28', '\x1D29', '\x5', '\x470', '\x239', '\x2', '\x1D29', 
		'\x3A7', '\x3', '\x2', '\x2', '\x2', '\x1D2A', '\x1D2C', '\a', '\x1E0', 
		'\x2', '\x2', '\x1D2B', '\x1D2A', '\x3', '\x2', '\x2', '\x2', '\x1D2B', 
		'\x1D2C', '\x3', '\x2', '\x2', '\x2', '\x1D2C', '\x1D2D', '\x3', '\x2', 
		'\x2', '\x2', '\x1D2D', '\x1D2F', '\x5', '\x2E2', '\x172', '\x2', '\x1D2E', 
		'\x1D30', '\a', '\x181', '\x2', '\x2', '\x1D2F', '\x1D2E', '\x3', '\x2', 
		'\x2', '\x2', '\x1D2F', '\x1D30', '\x3', '\x2', '\x2', '\x2', '\x1D30', 
		'\x1D31', '\x3', '\x2', '\x2', '\x2', '\x1D31', '\x1D32', '\x5', '\x398', 
		'\x1CD', '\x2', '\x1D32', '\x3A9', '\x3', '\x2', '\x2', '\x2', '\x1D33', 
		'\x1D34', '\a', '\"', '\x2', '\x2', '\x1D34', '\x1D35', '\a', '\x1BE', 
		'\x2', '\x2', '\x1D35', '\x1D38', '\x5', '\x3AC', '\x1D7', '\x2', '\x1D36', 
		'\x1D37', '\a', '\xFC', '\x2', '\x2', '\x1D37', '\x1D39', '\x5', '\x464', 
		'\x233', '\x2', '\x1D38', '\x1D36', '\x3', '\x2', '\x2', '\x2', '\x1D38', 
		'\x1D39', '\x3', '\x2', '\x2', '\x2', '\x1D39', '\x1D3B', '\x3', '\x2', 
		'\x2', '\x2', '\x1D3A', '\x1D3C', '\x5', '\x3AE', '\x1D8', '\x2', '\x1D3B', 
		'\x1D3A', '\x3', '\x2', '\x2', '\x2', '\x1D3B', '\x1D3C', '\x3', '\x2', 
		'\x2', '\x2', '\x1D3C', '\x1D3E', '\x3', '\x2', '\x2', '\x2', '\x1D3D', 
		'\x1D3F', '\x5', '\x3B2', '\x1DA', '\x2', '\x1D3E', '\x1D3D', '\x3', '\x2', 
		'\x2', '\x2', '\x1D3E', '\x1D3F', '\x3', '\x2', '\x2', '\x2', '\x1D3F', 
		'\x3AB', '\x3', '\x2', '\x2', '\x2', '\x1D40', '\x1D42', '\a', '\x221', 
		'\x2', '\x2', '\x1D41', '\x1D40', '\x3', '\x2', '\x2', '\x2', '\x1D41', 
		'\x1D42', '\x3', '\x2', '\x2', '\x2', '\x1D42', '\x1D43', '\x3', '\x2', 
		'\x2', '\x2', '\x1D43', '\x1D45', '\a', '\x21A', '\x2', '\x2', '\x1D44', 
		'\x1D46', '\x5', '\x3B0', '\x1D9', '\x2', '\x1D45', '\x1D44', '\x3', '\x2', 
		'\x2', '\x2', '\x1D45', '\x1D46', '\x3', '\x2', '\x2', '\x2', '\x1D46', 
		'\x1D47', '\x3', '\x2', '\x2', '\x2', '\x1D47', '\x1D49', '\a', '\x19B', 
		'\x2', '\x2', '\x1D48', '\x1D4A', '\x5', '\x458', '\x22D', '\x2', '\x1D49', 
		'\x1D48', '\x3', '\x2', '\x2', '\x2', '\x1D49', '\x1D4A', '\x3', '\x2', 
		'\x2', '\x2', '\x1D4A', '\x1D4B', '\x3', '\x2', '\x2', '\x2', '\x1D4B', 
		'\x1D62', '\a', '\x19C', '\x2', '\x2', '\x1D4C', '\x1D4E', '\a', '\x221', 
		'\x2', '\x2', '\x1D4D', '\x1D4C', '\x3', '\x2', '\x2', '\x2', '\x1D4D', 
		'\x1D4E', '\x3', '\x2', '\x2', '\x2', '\x1D4E', '\x1D4F', '\x3', '\x2', 
		'\x2', '\x2', '\x1D4F', '\x1D50', '\a', '\x9E', '\x2', '\x2', '\x1D50', 
		'\x1D51', '\a', '\x19B', '\x2', '\x2', '\x1D51', '\x1D52', '\x5', '\x29A', 
		'\x14E', '\x2', '\x1D52', '\x1D53', '\a', '\x19C', '\x2', '\x2', '\x1D53', 
		'\x1D62', '\x3', '\x2', '\x2', '\x2', '\x1D54', '\x1D5F', '\t', 'z', '\x2', 
		'\x2', '\x1D55', '\x1D56', '\a', '\x19B', '\x2', '\x2', '\x1D56', '\x1D57', 
		'\x5', '\x29A', '\x14E', '\x2', '\x1D57', '\x1D58', '\a', '\x19C', '\x2', 
		'\x2', '\x1D58', '\x1D60', '\x3', '\x2', '\x2', '\x2', '\x1D59', '\x1D5A', 
		'\a', '\\', '\x2', '\x2', '\x1D5A', '\x1D5C', '\a', '\x19B', '\x2', '\x2', 
		'\x1D5B', '\x1D5D', '\x5', '\x458', '\x22D', '\x2', '\x1D5C', '\x1D5B', 
		'\x3', '\x2', '\x2', '\x2', '\x1D5C', '\x1D5D', '\x3', '\x2', '\x2', '\x2', 
		'\x1D5D', '\x1D5E', '\x3', '\x2', '\x2', '\x2', '\x1D5E', '\x1D60', '\a', 
		'\x19C', '\x2', '\x2', '\x1D5F', '\x1D55', '\x3', '\x2', '\x2', '\x2', 
		'\x1D5F', '\x1D59', '\x3', '\x2', '\x2', '\x2', '\x1D60', '\x1D62', '\x3', 
		'\x2', '\x2', '\x2', '\x1D61', '\x1D41', '\x3', '\x2', '\x2', '\x2', '\x1D61', 
		'\x1D4D', '\x3', '\x2', '\x2', '\x2', '\x1D61', '\x1D54', '\x3', '\x2', 
		'\x2', '\x2', '\x1D62', '\x3AD', '\x3', '\x2', '\x2', '\x2', '\x1D63', 
		'\x1D64', '\a', '\x14F', '\x2', '\x2', '\x1D64', '\x1D66', '\a', '\x1BE', 
		'\x2', '\x2', '\x1D65', '\x1D67', '\a', '\x221', '\x2', '\x2', '\x1D66', 
		'\x1D65', '\x3', '\x2', '\x2', '\x2', '\x1D66', '\x1D67', '\x3', '\x2', 
		'\x2', '\x2', '\x1D67', '\x1D72', '\x3', '\x2', '\x2', '\x2', '\x1D68', 
		'\x1D69', '\a', '\x9E', '\x2', '\x2', '\x1D69', '\x1D6A', '\a', '\x19B', 
		'\x2', '\x2', '\x1D6A', '\x1D6B', '\x5', '\x29A', '\x14E', '\x2', '\x1D6B', 
		'\x1D6C', '\a', '\x19C', '\x2', '\x2', '\x1D6C', '\x1D73', '\x3', '\x2', 
		'\x2', '\x2', '\x1D6D', '\x1D6F', '\a', '\x21A', '\x2', '\x2', '\x1D6E', 
		'\x1D70', '\x5', '\x3B0', '\x1D9', '\x2', '\x1D6F', '\x1D6E', '\x3', '\x2', 
		'\x2', '\x2', '\x1D6F', '\x1D70', '\x3', '\x2', '\x2', '\x2', '\x1D70', 
		'\x1D71', '\x3', '\x2', '\x2', '\x2', '\x1D71', '\x1D73', '\x5', '\x45A', 
		'\x22E', '\x2', '\x1D72', '\x1D68', '\x3', '\x2', '\x2', '\x2', '\x1D72', 
		'\x1D6D', '\x3', '\x2', '\x2', '\x2', '\x1D73', '\x1D76', '\x3', '\x2', 
		'\x2', '\x2', '\x1D74', '\x1D75', '\a', '\x150', '\x2', '\x2', '\x1D75', 
		'\x1D77', '\x5', '\x464', '\x233', '\x2', '\x1D76', '\x1D74', '\x3', '\x2', 
		'\x2', '\x2', '\x1D76', '\x1D77', '\x3', '\x2', '\x2', '\x2', '\x1D77', 
		'\x3AF', '\x3', '\x2', '\x2', '\x2', '\x1D78', '\x1D79', '\x6', '\x1D9', 
		'\xC8', '\x2', '\x1D79', '\x1D7A', '\a', '@', '\x2', '\x2', '\x1D7A', 
		'\x1D7B', '\a', '\x181', '\x2', '\x2', '\x1D7B', '\x1D7C', '\x5', '\x464', 
		'\x233', '\x2', '\x1D7C', '\x3B1', '\x3', '\x2', '\x2', '\x2', '\x1D7D', 
		'\x1D7E', '\a', '\x19B', '\x2', '\x2', '\x1D7E', '\x1D83', '\x5', '\x3B4', 
		'\x1DB', '\x2', '\x1D7F', '\x1D80', '\a', '\x198', '\x2', '\x2', '\x1D80', 
		'\x1D82', '\x5', '\x3B4', '\x1DB', '\x2', '\x1D81', '\x1D7F', '\x3', '\x2', 
		'\x2', '\x2', '\x1D82', '\x1D85', '\x3', '\x2', '\x2', '\x2', '\x1D83', 
		'\x1D81', '\x3', '\x2', '\x2', '\x2', '\x1D83', '\x1D84', '\x3', '\x2', 
		'\x2', '\x2', '\x1D84', '\x1D86', '\x3', '\x2', '\x2', '\x2', '\x1D85', 
		'\x1D83', '\x3', '\x2', '\x2', '\x2', '\x1D86', '\x1D87', '\a', '\x19C', 
		'\x2', '\x2', '\x1D87', '\x3B3', '\x3', '\x2', '\x2', '\x2', '\x1D88', 
		'\x1D89', '\a', '\"', '\x2', '\x2', '\x1D89', '\x1D94', '\x5', '\x456', 
		'\x22C', '\x2', '\x1D8A', '\x1D8B', '\a', '\x2A0', '\x2', '\x2', '\x1D8B', 
		'\x1D8C', '\a', '\xB2', '\x2', '\x2', '\x1D8C', '\x1D8F', '\a', '\x15C', 
		'\x2', '\x2', '\x1D8D', '\x1D90', '\x5', '\x3BC', '\x1DF', '\x2', '\x1D8E', 
		'\x1D90', '\a', '\x230', '\x2', '\x2', '\x1D8F', '\x1D8D', '\x3', '\x2', 
		'\x2', '\x2', '\x1D8F', '\x1D8E', '\x3', '\x2', '\x2', '\x2', '\x1D90', 
		'\x1D95', '\x3', '\x2', '\x2', '\x2', '\x1D91', '\x1D92', '\a', '\x2A0', 
		'\x2', '\x2', '\x1D92', '\x1D93', '\a', '\x213', '\x2', '\x2', '\x1D93', 
		'\x1D95', '\x5', '\x3B6', '\x1DC', '\x2', '\x1D94', '\x1D8A', '\x3', '\x2', 
		'\x2', '\x2', '\x1D94', '\x1D91', '\x3', '\x2', '\x2', '\x2', '\x1D94', 
		'\x1D95', '\x3', '\x2', '\x2', '\x2', '\x1D95', '\x1D99', '\x3', '\x2', 
		'\x2', '\x2', '\x1D96', '\x1D98', '\x5', '\x3B8', '\x1DD', '\x2', '\x1D97', 
		'\x1D96', '\x3', '\x2', '\x2', '\x2', '\x1D98', '\x1D9B', '\x3', '\x2', 
		'\x2', '\x2', '\x1D99', '\x1D97', '\x3', '\x2', '\x2', '\x2', '\x1D99', 
		'\x1D9A', '\x3', '\x2', '\x2', '\x2', '\x1D9A', '\x1DA7', '\x3', '\x2', 
		'\x2', '\x2', '\x1D9B', '\x1D99', '\x3', '\x2', '\x2', '\x2', '\x1D9C', 
		'\x1D9D', '\a', '\x19B', '\x2', '\x2', '\x1D9D', '\x1DA2', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x1D9E', '\x1D9F', '\a', '\x198', '\x2', '\x2', '\x1D9F', 
		'\x1DA1', '\x5', '\x3BA', '\x1DE', '\x2', '\x1DA0', '\x1D9E', '\x3', '\x2', 
		'\x2', '\x2', '\x1DA1', '\x1DA4', '\x3', '\x2', '\x2', '\x2', '\x1DA2', 
		'\x1DA0', '\x3', '\x2', '\x2', '\x2', '\x1DA2', '\x1DA3', '\x3', '\x2', 
		'\x2', '\x2', '\x1DA3', '\x1DA5', '\x3', '\x2', '\x2', '\x2', '\x1DA4', 
		'\x1DA2', '\x3', '\x2', '\x2', '\x2', '\x1DA5', '\x1DA6', '\a', '\x19C', 
		'\x2', '\x2', '\x1DA6', '\x1DA8', '\x3', '\x2', '\x2', '\x2', '\x1DA7', 
		'\x1D9C', '\x3', '\x2', '\x2', '\x2', '\x1DA7', '\x1DA8', '\x3', '\x2', 
		'\x2', '\x2', '\x1DA8', '\x3B5', '\x3', '\x2', '\x2', '\x2', '\x1DA9', 
		'\x1DB6', '\x5', '\x3BC', '\x1DF', '\x2', '\x1DAA', '\x1DAB', '\a', '\x19B', 
		'\x2', '\x2', '\x1DAB', '\x1DB0', '\x5', '\x3BC', '\x1DF', '\x2', '\x1DAC', 
		'\x1DAD', '\a', '\x198', '\x2', '\x2', '\x1DAD', '\x1DAF', '\x5', '\x3BC', 
		'\x1DF', '\x2', '\x1DAE', '\x1DAC', '\x3', '\x2', '\x2', '\x2', '\x1DAF', 
		'\x1DB2', '\x3', '\x2', '\x2', '\x2', '\x1DB0', '\x1DAE', '\x3', '\x2', 
		'\x2', '\x2', '\x1DB0', '\x1DB1', '\x3', '\x2', '\x2', '\x2', '\x1DB1', 
		'\x1DB3', '\x3', '\x2', '\x2', '\x2', '\x1DB2', '\x1DB0', '\x3', '\x2', 
		'\x2', '\x2', '\x1DB3', '\x1DB4', '\a', '\x19C', '\x2', '\x2', '\x1DB4', 
		'\x1DB6', '\x3', '\x2', '\x2', '\x2', '\x1DB5', '\x1DA9', '\x3', '\x2', 
		'\x2', '\x2', '\x1DB5', '\x1DAA', '\x3', '\x2', '\x2', '\x2', '\x1DB6', 
		'\x3B7', '\x3', '\x2', '\x2', '\x2', '\x1DB7', '\x1DB9', '\a', '\x158', 
		'\x2', '\x2', '\x1DB8', '\x1DBA', '\a', '\x181', '\x2', '\x2', '\x1DB9', 
		'\x1DB8', '\x3', '\x2', '\x2', '\x2', '\x1DB9', '\x1DBA', '\x3', '\x2', 
		'\x2', '\x2', '\x1DBA', '\x1DBB', '\x3', '\x2', '\x2', '\x2', '\x1DBB', 
		'\x1DDA', '\x5', '\x456', '\x22C', '\x2', '\x1DBC', '\x1DBE', '\a', '\x14A', 
		'\x2', '\x2', '\x1DBD', '\x1DBC', '\x3', '\x2', '\x2', '\x2', '\x1DBD', 
		'\x1DBE', '\x3', '\x2', '\x2', '\x2', '\x1DBE', '\x1DBF', '\x3', '\x2', 
		'\x2', '\x2', '\x1DBF', '\x1DC1', '\a', '\x82', '\x2', '\x2', '\x1DC0', 
		'\x1DC2', '\a', '\x181', '\x2', '\x2', '\x1DC1', '\x1DC0', '\x3', '\x2', 
		'\x2', '\x2', '\x1DC1', '\x1DC2', '\x3', '\x2', '\x2', '\x2', '\x1DC2', 
		'\x1DC3', '\x3', '\x2', '\x2', '\x2', '\x1DC3', '\x1DDA', '\x5', '\x434', 
		'\x21B', '\x2', '\x1DC4', '\x1DC6', '\a', '\xF0', '\x2', '\x2', '\x1DC5', 
		'\x1DC7', '\a', '\x181', '\x2', '\x2', '\x1DC6', '\x1DC5', '\x3', '\x2', 
		'\x2', '\x2', '\x1DC6', '\x1DC7', '\x3', '\x2', '\x2', '\x2', '\x1DC7', 
		'\x1DC8', '\x3', '\x2', '\x2', '\x2', '\x1DC8', '\x1DDA', '\x5', '\x464', 
		'\x233', '\x2', '\x1DC9', '\x1DCB', '\t', '{', '\x2', '\x2', '\x1DCA', 
		'\x1DCC', '\a', '\x181', '\x2', '\x2', '\x1DCB', '\x1DCA', '\x3', '\x2', 
		'\x2', '\x2', '\x1DCB', '\x1DCC', '\x3', '\x2', '\x2', '\x2', '\x1DCC', 
		'\x1DCD', '\x3', '\x2', '\x2', '\x2', '\x1DCD', '\x1DDA', '\x5', '\x464', 
		'\x233', '\x2', '\x1DCE', '\x1DCF', '\t', '|', '\x2', '\x2', '\x1DCF', 
		'\x1DD1', '\a', 'y', '\x2', '\x2', '\x1DD0', '\x1DD2', '\a', '\x181', 
		'\x2', '\x2', '\x1DD1', '\x1DD0', '\x3', '\x2', '\x2', '\x2', '\x1DD1', 
		'\x1DD2', '\x3', '\x2', '\x2', '\x2', '\x1DD2', '\x1DD3', '\x3', '\x2', 
		'\x2', '\x2', '\x1DD3', '\x1DDA', '\x5', '\x476', '\x23C', '\x2', '\x1DD4', 
		'\x1DD6', '\a', '\r', '\x2', '\x2', '\x1DD5', '\x1DD7', '\a', '\x181', 
		'\x2', '\x2', '\x1DD6', '\x1DD5', '\x3', '\x2', '\x2', '\x2', '\x1DD6', 
		'\x1DD7', '\x3', '\x2', '\x2', '\x2', '\x1DD7', '\x1DD8', '\x3', '\x2', 
		'\x2', '\x2', '\x1DD8', '\x1DDA', '\x5', '\x476', '\x23C', '\x2', '\x1DD9', 
		'\x1DB7', '\x3', '\x2', '\x2', '\x2', '\x1DD9', '\x1DBD', '\x3', '\x2', 
		'\x2', '\x2', '\x1DD9', '\x1DC4', '\x3', '\x2', '\x2', '\x2', '\x1DD9', 
		'\x1DC9', '\x3', '\x2', '\x2', '\x2', '\x1DD9', '\x1DCE', '\x3', '\x2', 
		'\x2', '\x2', '\x1DD9', '\x1DD4', '\x3', '\x2', '\x2', '\x2', '\x1DDA', 
		'\x3B9', '\x3', '\x2', '\x2', '\x2', '\x1DDB', '\x1DDC', '\a', '\x14F', 
		'\x2', '\x2', '\x1DDC', '\x1DE0', '\x5', '\x48A', '\x246', '\x2', '\x1DDD', 
		'\x1DDF', '\x5', '\x3B8', '\x1DD', '\x2', '\x1DDE', '\x1DDD', '\x3', '\x2', 
		'\x2', '\x2', '\x1DDF', '\x1DE2', '\x3', '\x2', '\x2', '\x2', '\x1DE0', 
		'\x1DDE', '\x3', '\x2', '\x2', '\x2', '\x1DE0', '\x1DE1', '\x3', '\x2', 
		'\x2', '\x2', '\x1DE1', '\x3BB', '\x3', '\x2', '\x2', '\x2', '\x1DE2', 
		'\x1DE0', '\x3', '\x2', '\x2', '\x2', '\x1DE3', '\x1DE4', '\a', '\x19B', 
		'\x2', '\x2', '\x1DE4', '\x1DE9', '\x5', '\x3BE', '\x1E0', '\x2', '\x1DE5', 
		'\x1DE6', '\a', '\x198', '\x2', '\x2', '\x1DE6', '\x1DE8', '\x5', '\x3BE', 
		'\x1E0', '\x2', '\x1DE7', '\x1DE5', '\x3', '\x2', '\x2', '\x2', '\x1DE8', 
		'\x1DEB', '\x3', '\x2', '\x2', '\x2', '\x1DE9', '\x1DE7', '\x3', '\x2', 
		'\x2', '\x2', '\x1DE9', '\x1DEA', '\x3', '\x2', '\x2', '\x2', '\x1DEA', 
		'\x1DEC', '\x3', '\x2', '\x2', '\x2', '\x1DEB', '\x1DE9', '\x3', '\x2', 
		'\x2', '\x2', '\x1DEC', '\x1DED', '\a', '\x19C', '\x2', '\x2', '\x1DED', 
		'\x3BD', '\x3', '\x2', '\x2', '\x2', '\x1DEE', '\x1DF1', '\x5', '\x29A', 
		'\x14E', '\x2', '\x1DEF', '\x1DF1', '\a', '\x230', '\x2', '\x2', '\x1DF0', 
		'\x1DEE', '\x3', '\x2', '\x2', '\x2', '\x1DF0', '\x1DEF', '\x3', '\x2', 
		'\x2', '\x2', '\x1DF1', '\x3BF', '\x3', '\x2', '\x2', '\x2', '\x1DF2', 
		'\x1DF3', '\a', 'u', '\x2', '\x2', '\x1DF3', '\x1DF4', '\a', '\x181', 
		'\x2', '\x2', '\x1DF4', '\x1DF5', '\x5', '\x3F0', '\x1F9', '\x2', '\x1DF5', 
		'\x3C1', '\x3', '\x2', '\x2', '\x2', '\x1DF6', '\x1DF7', '\a', '\x208', 
		'\x2', '\x2', '\x1DF7', '\x1DF8', '\a', '\x1F2', '\x2', '\x2', '\x1DF8', 
		'\x3C3', '\x3', '\x2', '\x2', '\x2', '\x1DF9', '\x1DFA', '\a', '\x208', 
		'\x2', '\x2', '\x1DFA', '\x1DFB', '\x5', '\x2E4', '\x173', '\x2', '\x1DFB', 
		'\x1DFC', '\a', '\x1F2', '\x2', '\x2', '\x1DFC', '\x3C5', '\x3', '\x2', 
		'\x2', '\x2', '\x1DFD', '\x1DFF', '\t', '}', '\x2', '\x2', '\x1DFE', '\x1DFD', 
		'\x3', '\x2', '\x2', '\x2', '\x1DFE', '\x1DFF', '\x3', '\x2', '\x2', '\x2', 
		'\x1DFF', '\x1E00', '\x3', '\x2', '\x2', '\x2', '\x1E00', '\x1E01', '\x5', 
		'\x3C8', '\x1E5', '\x2', '\x1E01', '\x3C7', '\x3', '\x2', '\x2', '\x2', 
		'\x1E02', '\x1E03', '\x5', '\x442', '\x222', '\x2', '\x1E03', '\x1E04', 
		'\x5', '\x3CC', '\x1E7', '\x2', '\x1E04', '\x3C9', '\x3', '\x2', '\x2', 
		'\x2', '\x1E05', '\x1E06', '\a', '\x1C6', '\x2', '\x2', '\x1E06', '\x1E07', 
		'\x5', '\x39A', '\x1CE', '\x2', '\x1E07', '\x3CB', '\x3', '\x2', '\x2', 
		'\x2', '\x1E08', '\x1E0A', '\x5', '\x380', '\x1C1', '\x2', '\x1E09', '\x1E0B', 
		'\x5', '\x3CA', '\x1E6', '\x2', '\x1E0A', '\x1E09', '\x3', '\x2', '\x2', 
		'\x2', '\x1E0A', '\x1E0B', '\x3', '\x2', '\x2', '\x2', '\x1E0B', '\x3CD', 
		'\x3', '\x2', '\x2', '\x2', '\x1E0C', '\x1E0D', '\a', '\x19B', '\x2', 
		'\x2', '\x1E0D', '\x1E0E', '\x5', '\x410', '\x209', '\x2', '\x1E0E', '\x1E0F', 
		'\a', '\x198', '\x2', '\x2', '\x1E0F', '\x1E10', '\x5', '\x410', '\x209', 
		'\x2', '\x1E10', '\x1E11', '\a', '\x19C', '\x2', '\x2', '\x1E11', '\x3CF', 
		'\x3', '\x2', '\x2', '\x2', '\x1E12', '\x1E17', '\x5', '\x420', '\x211', 
		'\x2', '\x1E13', '\x1E14', '\a', '\x198', '\x2', '\x2', '\x1E14', '\x1E16', 
		'\x5', '\x420', '\x211', '\x2', '\x1E15', '\x1E13', '\x3', '\x2', '\x2', 
		'\x2', '\x1E16', '\x1E19', '\x3', '\x2', '\x2', '\x2', '\x1E17', '\x1E15', 
		'\x3', '\x2', '\x2', '\x2', '\x1E17', '\x1E18', '\x3', '\x2', '\x2', '\x2', 
		'\x1E18', '\x3D1', '\x3', '\x2', '\x2', '\x2', '\x1E19', '\x1E17', '\x3', 
		'\x2', '\x2', '\x2', '\x1E1A', '\x1E1F', '\x5', '\x3D4', '\x1EB', '\x2', 
		'\x1E1B', '\x1E1C', '\a', '\x198', '\x2', '\x2', '\x1E1C', '\x1E1E', '\x5', 
		'\x3D4', '\x1EB', '\x2', '\x1E1D', '\x1E1B', '\x3', '\x2', '\x2', '\x2', 
		'\x1E1E', '\x1E21', '\x3', '\x2', '\x2', '\x2', '\x1E1F', '\x1E1D', '\x3', 
		'\x2', '\x2', '\x2', '\x1E1F', '\x1E20', '\x3', '\x2', '\x2', '\x2', '\x1E20', 
		'\x3D3', '\x3', '\x2', '\x2', '\x2', '\x1E21', '\x1E1F', '\x3', '\x2', 
		'\x2', '\x2', '\x1E22', '\x1E23', '\x5', '\x404', '\x203', '\x2', '\x1E23', 
		'\x1E26', '\a', '\x181', '\x2', '\x2', '\x1E24', '\x1E27', '\x5', '\x290', 
		'\x149', '\x2', '\x1E25', '\x1E27', '\a', '\x1E0', '\x2', '\x2', '\x1E26', 
		'\x1E24', '\x3', '\x2', '\x2', '\x2', '\x1E26', '\x1E25', '\x3', '\x2', 
		'\x2', '\x2', '\x1E27', '\x3D5', '\x3', '\x2', '\x2', '\x2', '\x1E28', 
		'\x1E29', '\x5', '\x2E2', '\x172', '\x2', '\x1E29', '\x1E2A', '\x5', '\x398', 
		'\x1CD', '\x2', '\x1E2A', '\x3D7', '\x3', '\x2', '\x2', '\x2', '\x1E2B', 
		'\x1E2D', '\a', '\\', '\x2', '\x2', '\x1E2C', '\x1E2E', '\x5', '\x3DA', 
		'\x1EE', '\x2', '\x1E2D', '\x1E2C', '\x3', '\x2', '\x2', '\x2', '\x1E2E', 
		'\x1E2F', '\x3', '\x2', '\x2', '\x2', '\x1E2F', '\x1E2D', '\x3', '\x2', 
		'\x2', '\x2', '\x1E2F', '\x1E30', '\x3', '\x2', '\x2', '\x2', '\x1E30', 
		'\x3D9', '\x3', '\x2', '\x2', '\x2', '\x1E31', '\x1E32', '\a', '\x289', 
		'\x2', '\x2', '\x1E32', '\x1E33', '\a', '\x1BE', '\x2', '\x2', '\x1E33', 
		'\x1E3E', '\x5', '\x472', '\x23A', '\x2', '\x1E34', '\x1E36', '\a', '\x24A', 
		'\x2', '\x2', '\x1E35', '\x1E34', '\x3', '\x2', '\x2', '\x2', '\x1E35', 
		'\x1E36', '\x3', '\x2', '\x2', '\x2', '\x1E36', '\x1E37', '\x3', '\x2', 
		'\x2', '\x2', '\x1E37', '\x1E38', '\a', '\x1EE', '\x2', '\x2', '\x1E38', 
		'\x1E39', '\a', '\x1BE', '\x2', '\x2', '\x1E39', '\x1E3E', '\x5', '\x472', 
		'\x23A', '\x2', '\x1E3A', '\x1E3B', '\a', '\x1F0', '\x2', '\x2', '\x1E3B', 
		'\x1E3C', '\a', '\x1BE', '\x2', '\x2', '\x1E3C', '\x1E3E', '\x5', '\x472', 
		'\x23A', '\x2', '\x1E3D', '\x1E31', '\x3', '\x2', '\x2', '\x2', '\x1E3D', 
		'\x1E35', '\x3', '\x2', '\x2', '\x2', '\x1E3D', '\x1E3A', '\x3', '\x2', 
		'\x2', '\x2', '\x1E3E', '\x3DB', '\x3', '\x2', '\x2', '\x2', '\x1E3F', 
		'\x1E41', '\a', '\x222', '\x2', '\x2', '\x1E40', '\x1E42', '\x5', '\x3DE', 
		'\x1F0', '\x2', '\x1E41', '\x1E40', '\x3', '\x2', '\x2', '\x2', '\x1E42', 
		'\x1E43', '\x3', '\x2', '\x2', '\x2', '\x1E43', '\x1E41', '\x3', '\x2', 
		'\x2', '\x2', '\x1E43', '\x1E44', '\x3', '\x2', '\x2', '\x2', '\x1E44', 
		'\x3DD', '\x3', '\x2', '\x2', '\x2', '\x1E45', '\x1E46', '\t', '~', '\x2', 
		'\x2', '\x1E46', '\x1E47', '\a', '\x1BE', '\x2', '\x2', '\x1E47', '\x1E48', 
		'\x5', '\x472', '\x23A', '\x2', '\x1E48', '\x3DF', '\x3', '\x2', '\x2', 
		'\x2', '\x1E49', '\x1E4E', '\x5', '\x3F0', '\x1F9', '\x2', '\x1E4A', '\x1E4B', 
		'\a', '\x198', '\x2', '\x2', '\x1E4B', '\x1E4D', '\x5', '\x3F0', '\x1F9', 
		'\x2', '\x1E4C', '\x1E4A', '\x3', '\x2', '\x2', '\x2', '\x1E4D', '\x1E50', 
		'\x3', '\x2', '\x2', '\x2', '\x1E4E', '\x1E4C', '\x3', '\x2', '\x2', '\x2', 
		'\x1E4E', '\x1E4F', '\x3', '\x2', '\x2', '\x2', '\x1E4F', '\x3E1', '\x3', 
		'\x2', '\x2', '\x2', '\x1E50', '\x1E4E', '\x3', '\x2', '\x2', '\x2', '\x1E51', 
		'\x1E56', '\x5', '\x3E6', '\x1F4', '\x2', '\x1E52', '\x1E53', '\a', '\x198', 
		'\x2', '\x2', '\x1E53', '\x1E55', '\x5', '\x3E6', '\x1F4', '\x2', '\x1E54', 
		'\x1E52', '\x3', '\x2', '\x2', '\x2', '\x1E55', '\x1E58', '\x3', '\x2', 
		'\x2', '\x2', '\x1E56', '\x1E54', '\x3', '\x2', '\x2', '\x2', '\x1E56', 
		'\x1E57', '\x3', '\x2', '\x2', '\x2', '\x1E57', '\x3E3', '\x3', '\x2', 
		'\x2', '\x2', '\x1E58', '\x1E56', '\x3', '\x2', '\x2', '\x2', '\x1E59', 
		'\x1E5E', '\x5', '\x3E8', '\x1F5', '\x2', '\x1E5A', '\x1E5B', '\a', '\x198', 
		'\x2', '\x2', '\x1E5B', '\x1E5D', '\x5', '\x3E8', '\x1F5', '\x2', '\x1E5C', 
		'\x1E5A', '\x3', '\x2', '\x2', '\x2', '\x1E5D', '\x1E60', '\x3', '\x2', 
		'\x2', '\x2', '\x1E5E', '\x1E5C', '\x3', '\x2', '\x2', '\x2', '\x1E5E', 
		'\x1E5F', '\x3', '\x2', '\x2', '\x2', '\x1E5F', '\x3E5', '\x3', '\x2', 
		'\x2', '\x2', '\x1E60', '\x1E5E', '\x3', '\x2', '\x2', '\x2', '\x1E61', 
		'\x1E77', '\x5', '\x3F0', '\x1F9', '\x2', '\x1E62', '\x1E75', '\a', '\xA1', 
		'\x2', '\x2', '\x1E63', '\x1E66', '\a', '\x1BE', '\x2', '\x2', '\x1E64', 
		'\x1E65', '\x6', '\x1F4', '\xC9', '\x2', '\x1E65', '\x1E67', '\a', '\xFD', 
		'\x2', '\x2', '\x1E66', '\x1E64', '\x3', '\x2', '\x2', '\x2', '\x1E66', 
		'\x1E67', '\x3', '\x2', '\x2', '\x2', '\x1E67', '\x1E68', '\x3', '\x2', 
		'\x2', '\x2', '\x1E68', '\x1E76', '\x5', '\x472', '\x23A', '\x2', '\x1E69', 
		'\x1E6A', '\x6', '\x1F4', '\xCA', '\x2', '\x1E6A', '\x1E6B', '\a', '\x2AB', 
		'\x2', '\x2', '\x1E6B', '\x1E73', '\x5', '\x48A', '\x246', '\x2', '\x1E6C', 
		'\x1E6D', '\a', '\x1B1', '\x2', '\x2', '\x1E6D', '\x1E72', '\x5', '\x474', 
		'\x23B', '\x2', '\x1E6E', '\x1E6F', '\x6', '\x1F4', '\xCB', '\x2', '\x1E6F', 
		'\x1E70', '\a', '\x1BE', '\x2', '\x2', '\x1E70', '\x1E72', '\x5', '\x472', 
		'\x23A', '\x2', '\x1E71', '\x1E6C', '\x3', '\x2', '\x2', '\x2', '\x1E71', 
		'\x1E6E', '\x3', '\x2', '\x2', '\x2', '\x1E72', '\x1E74', '\x3', '\x2', 
		'\x2', '\x2', '\x1E73', '\x1E71', '\x3', '\x2', '\x2', '\x2', '\x1E73', 
		'\x1E74', '\x3', '\x2', '\x2', '\x2', '\x1E74', '\x1E76', '\x3', '\x2', 
		'\x2', '\x2', '\x1E75', '\x1E63', '\x3', '\x2', '\x2', '\x2', '\x1E75', 
		'\x1E69', '\x3', '\x2', '\x2', '\x2', '\x1E76', '\x1E78', '\x3', '\x2', 
		'\x2', '\x2', '\x1E77', '\x1E62', '\x3', '\x2', '\x2', '\x2', '\x1E77', 
		'\x1E78', '\x3', '\x2', '\x2', '\x2', '\x1E78', '\x3E7', '\x3', '\x2', 
		'\x2', '\x2', '\x1E79', '\x1E96', '\x5', '\x3F0', '\x1F9', '\x2', '\x1E7A', 
		'\x1E91', '\a', '\xA1', '\x2', '\x2', '\x1E7B', '\x1E7C', '\a', '\x2AB', 
		'\x2', '\x2', '\x1E7C', '\x1E7E', '\x5', '\x48A', '\x246', '\x2', '\x1E7D', 
		'\x1E7B', '\x3', '\x2', '\x2', '\x2', '\x1E7D', '\x1E7E', '\x3', '\x2', 
		'\x2', '\x2', '\x1E7E', '\x1E7F', '\x3', '\x2', '\x2', '\x2', '\x1E7F', 
		'\x1E80', '\a', '\x1BE', '\x2', '\x2', '\x1E80', '\x1E83', '\x5', '\x472', 
		'\x23A', '\x2', '\x1E81', '\x1E82', '\a', '\x25F', '\x2', '\x2', '\x1E82', 
		'\x1E84', '\x5', '\x472', '\x23A', '\x2', '\x1E83', '\x1E81', '\x3', '\x2', 
		'\x2', '\x2', '\x1E83', '\x1E84', '\x3', '\x2', '\x2', '\x2', '\x1E84', 
		'\x1E86', '\x3', '\x2', '\x2', '\x2', '\x1E85', '\x1E87', '\x5', '\x3EA', 
		'\x1F6', '\x2', '\x1E86', '\x1E85', '\x3', '\x2', '\x2', '\x2', '\x1E86', 
		'\x1E87', '\x3', '\x2', '\x2', '\x2', '\x1E87', '\x1E92', '\x3', '\x2', 
		'\x2', '\x2', '\x1E88', '\x1E89', '\a', '\x2AB', '\x2', '\x2', '\x1E89', 
		'\x1E8F', '\x5', '\x48A', '\x246', '\x2', '\x1E8A', '\x1E8B', '\a', '\x1B1', 
		'\x2', '\x2', '\x1E8B', '\x1E8D', '\x5', '\x474', '\x23B', '\x2', '\x1E8C', 
		'\x1E8E', '\x5', '\x3EA', '\x1F6', '\x2', '\x1E8D', '\x1E8C', '\x3', '\x2', 
		'\x2', '\x2', '\x1E8D', '\x1E8E', '\x3', '\x2', '\x2', '\x2', '\x1E8E', 
		'\x1E90', '\x3', '\x2', '\x2', '\x2', '\x1E8F', '\x1E8A', '\x3', '\x2', 
		'\x2', '\x2', '\x1E8F', '\x1E90', '\x3', '\x2', '\x2', '\x2', '\x1E90', 
		'\x1E92', '\x3', '\x2', '\x2', '\x2', '\x1E91', '\x1E7D', '\x3', '\x2', 
		'\x2', '\x2', '\x1E91', '\x1E88', '\x3', '\x2', '\x2', '\x2', '\x1E91', 
		'\x1E92', '\x3', '\x2', '\x2', '\x2', '\x1E92', '\x1E97', '\x3', '\x2', 
		'\x2', '\x2', '\x1E93', '\x1E95', '\x5', '\x3EC', '\x1F7', '\x2', '\x1E94', 
		'\x1E93', '\x3', '\x2', '\x2', '\x2', '\x1E94', '\x1E95', '\x3', '\x2', 
		'\x2', '\x2', '\x1E95', '\x1E97', '\x3', '\x2', '\x2', '\x2', '\x1E96', 
		'\x1E7A', '\x3', '\x2', '\x2', '\x2', '\x1E96', '\x1E94', '\x3', '\x2', 
		'\x2', '\x2', '\x1E97', '\x3E9', '\x3', '\x2', '\x2', '\x2', '\x1E98', 
		'\x1E99', '\a', '\x2F8', '\x2', '\x2', '\x1E99', '\x1E9A', '\a', 'm', 
		'\x2', '\x2', '\x1E9A', '\x1E9B', '\a', '\xFD', '\x2', '\x2', '\x1E9B', 
		'\x3EB', '\x3', '\x2', '\x2', '\x2', '\x1E9C', '\x1E9D', '\a', '{', '\x2', 
		'\x2', '\x1E9D', '\x1E9E', '\a', '\x2F9', '\x2', '\x2', '\x1E9E', '\x1E9F', 
		'\a', '\xFD', '\x2', '\x2', '\x1E9F', '\x3ED', '\x3', '\x2', '\x2', '\x2', 
		'\x1EA0', '\x1EA1', '\a', '\x25F', '\x2', '\x2', '\x1EA1', '\x1EA2', '\x5', 
		'\x472', '\x23A', '\x2', '\x1EA2', '\x3EF', '\x3', '\x2', '\x2', '\x2', 
		'\x1EA3', '\x1EA7', '\x5', '\x48A', '\x246', '\x2', '\x1EA4', '\x1EA5', 
		'\a', '\x1A2', '\x2', '\x2', '\x1EA5', '\x1EA8', '\x5', '\x48A', '\x246', 
		'\x2', '\x1EA6', '\x1EA8', '\a', '\x1A3', '\x2', '\x2', '\x1EA7', '\x1EA4', 
		'\x3', '\x2', '\x2', '\x2', '\x1EA7', '\x1EA6', '\x3', '\x2', '\x2', '\x2', 
		'\x1EA7', '\x1EA8', '\x3', '\x2', '\x2', '\x2', '\x1EA8', '\x1EAE', '\x3', 
		'\x2', '\x2', '\x2', '\x1EA9', '\x1EAB', '\a', '\x1D2', '\x2', '\x2', 
		'\x1EAA', '\x1EAC', '\x5', '\x492', '\x24A', '\x2', '\x1EAB', '\x1EAA', 
		'\x3', '\x2', '\x2', '\x2', '\x1EAB', '\x1EAC', '\x3', '\x2', '\x2', '\x2', 
		'\x1EAC', '\x1EAE', '\x3', '\x2', '\x2', '\x2', '\x1EAD', '\x1EA3', '\x3', 
		'\x2', '\x2', '\x2', '\x1EAD', '\x1EA9', '\x3', '\x2', '\x2', '\x2', '\x1EAE', 
		'\x3F1', '\x3', '\x2', '\x2', '\x2', '\x1EAF', '\x1EB0', '\a', '\x21F', 
		'\x2', '\x2', '\x1EB0', '\x1EB1', '\x5', '\x470', '\x239', '\x2', '\x1EB1', 
		'\x3F3', '\x3', '\x2', '\x2', '\x2', '\x1EB2', '\x1EB5', '\x5', '\x3F2', 
		'\x1FA', '\x2', '\x1EB3', '\x1EB5', '\x5', '\x15E', '\xB0', '\x2', '\x1EB4', 
		'\x1EB2', '\x3', '\x2', '\x2', '\x2', '\x1EB4', '\x1EB3', '\x3', '\x2', 
		'\x2', '\x2', '\x1EB5', '\x3F5', '\x3', '\x2', '\x2', '\x2', '\x1EB6', 
		'\x1EB7', '\x6', '\x1FC', '\xCC', '\x2', '\x1EB7', '\x1EB8', '\t', '\x7F', 
		'\x2', '\x2', '\x1EB8', '\x3F7', '\x3', '\x2', '\x2', '\x2', '\x1EB9', 
		'\x1EBA', '\t', '\x80', '\x2', '\x2', '\x1EBA', '\x3F9', '\x3', '\x2', 
		'\x2', '\x2', '\x1EBB', '\x1EBC', '\x6', '\x1FE', '\xCD', '\x2', '\x1EBC', 
		'\x1EBD', '\a', '\"', '\x2', '\x2', '\x1EBD', '\x1EBE', '\x5', '\x45A', 
		'\x22E', '\x2', '\x1EBE', '\x3FB', '\x3', '\x2', '\x2', '\x2', '\x1EBF', 
		'\x1EC5', '\x5', '\x460', '\x231', '\x2', '\x1EC0', '\x1EC2', '\x5', '\x45C', 
		'\x22F', '\x2', '\x1EC1', '\x1EC3', '\x5', '\x460', '\x231', '\x2', '\x1EC2', 
		'\x1EC1', '\x3', '\x2', '\x2', '\x2', '\x1EC2', '\x1EC3', '\x3', '\x2', 
		'\x2', '\x2', '\x1EC3', '\x1EC5', '\x3', '\x2', '\x2', '\x2', '\x1EC4', 
		'\x1EBF', '\x3', '\x2', '\x2', '\x2', '\x1EC4', '\x1EC0', '\x3', '\x2', 
		'\x2', '\x2', '\x1EC5', '\x3FD', '\x3', '\x2', '\x2', '\x2', '\x1EC6', 
		'\x1EC7', '\x6', '\x200', '\xCE', '\x2', '\x1EC7', '\x1ECB', '\x5', '\x456', 
		'\x22C', '\x2', '\x1EC8', '\x1EC9', '\x6', '\x200', '\xCF', '\x2', '\x1EC9', 
		'\x1ECB', '\x5', '\x3FC', '\x1FF', '\x2', '\x1ECA', '\x1EC6', '\x3', '\x2', 
		'\x2', '\x2', '\x1ECA', '\x1EC8', '\x3', '\x2', '\x2', '\x2', '\x1ECB', 
		'\x3FF', '\x3', '\x2', '\x2', '\x2', '\x1ECC', '\x1ECD', '\x5', '\x456', 
		'\x22C', '\x2', '\x1ECD', '\x401', '\x3', '\x2', '\x2', '\x2', '\x1ECE', 
		'\x1ECF', '\a', '\x19B', '\x2', '\x2', '\x1ECF', '\x1ED4', '\x5', '\x400', 
		'\x201', '\x2', '\x1ED0', '\x1ED1', '\a', '\x198', '\x2', '\x2', '\x1ED1', 
		'\x1ED3', '\x5', '\x400', '\x201', '\x2', '\x1ED2', '\x1ED0', '\x3', '\x2', 
		'\x2', '\x2', '\x1ED3', '\x1ED6', '\x3', '\x2', '\x2', '\x2', '\x1ED4', 
		'\x1ED2', '\x3', '\x2', '\x2', '\x2', '\x1ED4', '\x1ED5', '\x3', '\x2', 
		'\x2', '\x2', '\x1ED5', '\x1ED7', '\x3', '\x2', '\x2', '\x2', '\x1ED6', 
		'\x1ED4', '\x3', '\x2', '\x2', '\x2', '\x1ED7', '\x1ED8', '\a', '\x19C', 
		'\x2', '\x2', '\x1ED8', '\x403', '\x3', '\x2', '\x2', '\x2', '\x1ED9', 
		'\x1EDA', '\x5', '\x3FC', '\x1FF', '\x2', '\x1EDA', '\x405', '\x3', '\x2', 
		'\x2', '\x2', '\x1EDB', '\x1EDE', '\x5', '\x404', '\x203', '\x2', '\x1EDC', 
		'\x1EDE', '\x5', '\x40C', '\x207', '\x2', '\x1EDD', '\x1EDB', '\x3', '\x2', 
		'\x2', '\x2', '\x1EDD', '\x1EDC', '\x3', '\x2', '\x2', '\x2', '\x1EDE', 
		'\x407', '\x3', '\x2', '\x2', '\x2', '\x1EDF', '\x1EE0', '\x5', '\x456', 
		'\x22C', '\x2', '\x1EE0', '\x409', '\x3', '\x2', '\x2', '\x2', '\x1EE1', 
		'\x1EE2', '\x5', '\x3FC', '\x1FF', '\x2', '\x1EE2', '\x40B', '\x3', '\x2', 
		'\x2', '\x2', '\x1EE3', '\x1EE4', '\x5', '\x456', '\x22C', '\x2', '\x1EE4', 
		'\x1EE8', '\a', '\x197', '\x2', '\x2', '\x1EE5', '\x1EE6', '\x5', '\x456', 
		'\x22C', '\x2', '\x1EE6', '\x1EE7', '\a', '\x197', '\x2', '\x2', '\x1EE7', 
		'\x1EE9', '\x3', '\x2', '\x2', '\x2', '\x1EE8', '\x1EE5', '\x3', '\x2', 
		'\x2', '\x2', '\x1EE8', '\x1EE9', '\x3', '\x2', '\x2', '\x2', '\x1EE9', 
		'\x1EEA', '\x3', '\x2', '\x2', '\x2', '\x1EEA', '\x1EEB', '\a', '\x18B', 
		'\x2', '\x2', '\x1EEB', '\x40D', '\x3', '\x2', '\x2', '\x2', '\x1EEC', 
		'\x1EED', '\x5', '\x456', '\x22C', '\x2', '\x1EED', '\x40F', '\x3', '\x2', 
		'\x2', '\x2', '\x1EEE', '\x1EEF', '\x5', '\x456', '\x22C', '\x2', '\x1EEF', 
		'\x411', '\x3', '\x2', '\x2', '\x2', '\x1EF0', '\x1EF1', '\x5', '\x45C', 
		'\x22F', '\x2', '\x1EF1', '\x413', '\x3', '\x2', '\x2', '\x2', '\x1EF2', 
		'\x1EF3', '\x5', '\x45C', '\x22F', '\x2', '\x1EF3', '\x415', '\x3', '\x2', 
		'\x2', '\x2', '\x1EF4', '\x1EF5', '\x5', '\x45C', '\x22F', '\x2', '\x1EF5', 
		'\x417', '\x3', '\x2', '\x2', '\x2', '\x1EF6', '\x1EF7', '\x5', '\x45C', 
		'\x22F', '\x2', '\x1EF7', '\x419', '\x3', '\x2', '\x2', '\x2', '\x1EF8', 
		'\x1EF9', '\x5', '\x45C', '\x22F', '\x2', '\x1EF9', '\x41B', '\x3', '\x2', 
		'\x2', '\x2', '\x1EFA', '\x1EFB', '\x5', '\x45C', '\x22F', '\x2', '\x1EFB', 
		'\x41D', '\x3', '\x2', '\x2', '\x2', '\x1EFC', '\x1EFF', '\x5', '\x45C', 
		'\x22F', '\x2', '\x1EFD', '\x1EFF', '\x5', '\x460', '\x231', '\x2', '\x1EFE', 
		'\x1EFC', '\x3', '\x2', '\x2', '\x2', '\x1EFE', '\x1EFD', '\x3', '\x2', 
		'\x2', '\x2', '\x1EFF', '\x41F', '\x3', '\x2', '\x2', '\x2', '\x1F00', 
		'\x1F03', '\x5', '\x45C', '\x22F', '\x2', '\x1F01', '\x1F03', '\x5', '\x460', 
		'\x231', '\x2', '\x1F02', '\x1F00', '\x3', '\x2', '\x2', '\x2', '\x1F02', 
		'\x1F01', '\x3', '\x2', '\x2', '\x2', '\x1F03', '\x421', '\x3', '\x2', 
		'\x2', '\x2', '\x1F04', '\x1F05', '\x5', '\x456', '\x22C', '\x2', '\x1F05', 
		'\x423', '\x3', '\x2', '\x2', '\x2', '\x1F06', '\x1F07', '\x5', '\x456', 
		'\x22C', '\x2', '\x1F07', '\x425', '\x3', '\x2', '\x2', '\x2', '\x1F08', 
		'\x1F09', '\x5', '\x456', '\x22C', '\x2', '\x1F09', '\x427', '\x3', '\x2', 
		'\x2', '\x2', '\x1F0A', '\x1F0B', '\x5', '\x456', '\x22C', '\x2', '\x1F0B', 
		'\x429', '\x3', '\x2', '\x2', '\x2', '\x1F0C', '\x1F0D', '\x5', '\x45C', 
		'\x22F', '\x2', '\x1F0D', '\x42B', '\x3', '\x2', '\x2', '\x2', '\x1F0E', 
		'\x1F0F', '\x5', '\x45C', '\x22F', '\x2', '\x1F0F', '\x42D', '\x3', '\x2', 
		'\x2', '\x2', '\x1F10', '\x1F11', '\x5', '\x456', '\x22C', '\x2', '\x1F11', 
		'\x42F', '\x3', '\x2', '\x2', '\x2', '\x1F12', '\x1F13', '\x5', '\x48A', 
		'\x246', '\x2', '\x1F13', '\x431', '\x3', '\x2', '\x2', '\x2', '\x1F14', 
		'\x1F15', '\x5', '\x48A', '\x246', '\x2', '\x1F15', '\x433', '\x3', '\x2', 
		'\x2', '\x2', '\x1F16', '\x1F17', '\x5', '\x48A', '\x246', '\x2', '\x1F17', 
		'\x435', '\x3', '\x2', '\x2', '\x2', '\x1F18', '\x1F1B', '\x5', '\x45C', 
		'\x22F', '\x2', '\x1F19', '\x1F1B', '\x5', '\x460', '\x231', '\x2', '\x1F1A', 
		'\x1F18', '\x3', '\x2', '\x2', '\x2', '\x1F1A', '\x1F19', '\x3', '\x2', 
		'\x2', '\x2', '\x1F1B', '\x437', '\x3', '\x2', '\x2', '\x2', '\x1F1C', 
		'\x1F1D', '\x5', '\x410', '\x209', '\x2', '\x1F1D', '\x1F1E', '\x5', '\x460', 
		'\x231', '\x2', '\x1F1E', '\x439', '\x3', '\x2', '\x2', '\x2', '\x1F1F', 
		'\x1F27', '\x5', '\x456', '\x22C', '\x2', '\x1F20', '\x1F21', '\a', '\x197', 
		'\x2', '\x2', '\x1F21', '\x1F28', '\a', '\x18B', '\x2', '\x2', '\x1F22', 
		'\x1F25', '\x5', '\x460', '\x231', '\x2', '\x1F23', '\x1F24', '\a', '\x197', 
		'\x2', '\x2', '\x1F24', '\x1F26', '\a', '\x18B', '\x2', '\x2', '\x1F25', 
		'\x1F23', '\x3', '\x2', '\x2', '\x2', '\x1F25', '\x1F26', '\x3', '\x2', 
		'\x2', '\x2', '\x1F26', '\x1F28', '\x3', '\x2', '\x2', '\x2', '\x1F27', 
		'\x1F20', '\x3', '\x2', '\x2', '\x2', '\x1F27', '\x1F22', '\x3', '\x2', 
		'\x2', '\x2', '\x1F27', '\x1F28', '\x3', '\x2', '\x2', '\x2', '\x1F28', 
		'\x43B', '\x3', '\x2', '\x2', '\x2', '\x1F29', '\x1F2C', '\x5', '\x45C', 
		'\x22F', '\x2', '\x1F2A', '\x1F2C', '\x5', '\x460', '\x231', '\x2', '\x1F2B', 
		'\x1F29', '\x3', '\x2', '\x2', '\x2', '\x1F2B', '\x1F2A', '\x3', '\x2', 
		'\x2', '\x2', '\x1F2C', '\x43D', '\x3', '\x2', '\x2', '\x2', '\x1F2D', 
		'\x1F32', '\x5', '\x43C', '\x21F', '\x2', '\x1F2E', '\x1F2F', '\a', '\x198', 
		'\x2', '\x2', '\x1F2F', '\x1F31', '\x5', '\x43C', '\x21F', '\x2', '\x1F30', 
		'\x1F2E', '\x3', '\x2', '\x2', '\x2', '\x1F31', '\x1F34', '\x3', '\x2', 
		'\x2', '\x2', '\x1F32', '\x1F30', '\x3', '\x2', '\x2', '\x2', '\x1F32', 
		'\x1F33', '\x3', '\x2', '\x2', '\x2', '\x1F33', '\x43F', '\x3', '\x2', 
		'\x2', '\x2', '\x1F34', '\x1F32', '\x3', '\x2', '\x2', '\x2', '\x1F35', 
		'\x1F3A', '\x5', '\x43A', '\x21E', '\x2', '\x1F36', '\x1F37', '\a', '\x198', 
		'\x2', '\x2', '\x1F37', '\x1F39', '\x5', '\x43A', '\x21E', '\x2', '\x1F38', 
		'\x1F36', '\x3', '\x2', '\x2', '\x2', '\x1F39', '\x1F3C', '\x3', '\x2', 
		'\x2', '\x2', '\x1F3A', '\x1F38', '\x3', '\x2', '\x2', '\x2', '\x1F3A', 
		'\x1F3B', '\x3', '\x2', '\x2', '\x2', '\x1F3B', '\x441', '\x3', '\x2', 
		'\x2', '\x2', '\x1F3C', '\x1F3A', '\x3', '\x2', '\x2', '\x2', '\x1F3D', 
		'\x1F3E', '\x5', '\x456', '\x22C', '\x2', '\x1F3E', '\x443', '\x3', '\x2', 
		'\x2', '\x2', '\x1F3F', '\x1F42', '\x5', '\x454', '\x22B', '\x2', '\x1F40', 
		'\x1F42', '\x5', '\x4A2', '\x252', '\x2', '\x1F41', '\x1F3F', '\x3', '\x2', 
		'\x2', '\x2', '\x1F41', '\x1F40', '\x3', '\x2', '\x2', '\x2', '\x1F42', 
		'\x445', '\x3', '\x2', '\x2', '\x2', '\x1F43', '\x1F44', '\x5', '\x444', 
		'\x223', '\x2', '\x1F44', '\x447', '\x3', '\x2', '\x2', '\x2', '\x1F45', 
		'\x1F48', '\x5', '\x454', '\x22B', '\x2', '\x1F46', '\x1F48', '\x5', '\x4A8', 
		'\x255', '\x2', '\x1F47', '\x1F45', '\x3', '\x2', '\x2', '\x2', '\x1F47', 
		'\x1F46', '\x3', '\x2', '\x2', '\x2', '\x1F48', '\x449', '\x3', '\x2', 
		'\x2', '\x2', '\x1F49', '\x1F4A', '\x5', '\x448', '\x225', '\x2', '\x1F4A', 
		'\x44B', '\x3', '\x2', '\x2', '\x2', '\x1F4B', '\x1F4C', '\x5', '\x456', 
		'\x22C', '\x2', '\x1F4C', '\x44D', '\x3', '\x2', '\x2', '\x2', '\x1F4D', 
		'\x1F4E', '\x5', '\x470', '\x239', '\x2', '\x1F4E', '\x44F', '\x3', '\x2', 
		'\x2', '\x2', '\x1F4F', '\x1F50', '\x5', '\x456', '\x22C', '\x2', '\x1F50', 
		'\x451', '\x3', '\x2', '\x2', '\x2', '\x1F51', '\x1F52', '\x5', '\x456', 
		'\x22C', '\x2', '\x1F52', '\x453', '\x3', '\x2', '\x2', '\x2', '\x1F53', 
		'\x1F57', '\t', '\x81', '\x2', '\x2', '\x1F54', '\x1F55', '\x6', '\x22B', 
		'\xD0', '\x2', '\x1F55', '\x1F57', '\a', '\x305', '\x2', '\x2', '\x1F56', 
		'\x1F53', '\x3', '\x2', '\x2', '\x2', '\x1F56', '\x1F54', '\x3', '\x2', 
		'\x2', '\x2', '\x1F57', '\x455', '\x3', '\x2', '\x2', '\x2', '\x1F58', 
		'\x1F5B', '\x5', '\x454', '\x22B', '\x2', '\x1F59', '\x1F5B', '\x5', '\x49C', 
		'\x24F', '\x2', '\x1F5A', '\x1F58', '\x3', '\x2', '\x2', '\x2', '\x1F5A', 
		'\x1F59', '\x3', '\x2', '\x2', '\x2', '\x1F5B', '\x457', '\x3', '\x2', 
		'\x2', '\x2', '\x1F5C', '\x1F61', '\x5', '\x456', '\x22C', '\x2', '\x1F5D', 
		'\x1F5E', '\a', '\x198', '\x2', '\x2', '\x1F5E', '\x1F60', '\x5', '\x456', 
		'\x22C', '\x2', '\x1F5F', '\x1F5D', '\x3', '\x2', '\x2', '\x2', '\x1F60', 
		'\x1F63', '\x3', '\x2', '\x2', '\x2', '\x1F61', '\x1F5F', '\x3', '\x2', 
		'\x2', '\x2', '\x1F61', '\x1F62', '\x3', '\x2', '\x2', '\x2', '\x1F62', 
		'\x459', '\x3', '\x2', '\x2', '\x2', '\x1F63', '\x1F61', '\x3', '\x2', 
		'\x2', '\x2', '\x1F64', '\x1F65', '\a', '\x19B', '\x2', '\x2', '\x1F65', 
		'\x1F66', '\x5', '\x458', '\x22D', '\x2', '\x1F66', '\x1F67', '\a', '\x19C', 
		'\x2', '\x2', '\x1F67', '\x45B', '\x3', '\x2', '\x2', '\x2', '\x1F68', 
		'\x1F6A', '\x5', '\x456', '\x22C', '\x2', '\x1F69', '\x1F6B', '\x5', '\x460', 
		'\x231', '\x2', '\x1F6A', '\x1F69', '\x3', '\x2', '\x2', '\x2', '\x1F6A', 
		'\x1F6B', '\x3', '\x2', '\x2', '\x2', '\x1F6B', '\x45D', '\x3', '\x2', 
		'\x2', '\x2', '\x1F6C', '\x1F71', '\x5', '\x456', '\x22C', '\x2', '\x1F6D', 
		'\x1F6F', '\x5', '\x460', '\x231', '\x2', '\x1F6E', '\x1F70', '\x5', '\x460', 
		'\x231', '\x2', '\x1F6F', '\x1F6E', '\x3', '\x2', '\x2', '\x2', '\x1F6F', 
		'\x1F70', '\x3', '\x2', '\x2', '\x2', '\x1F70', '\x1F72', '\x3', '\x2', 
		'\x2', '\x2', '\x1F71', '\x1F6D', '\x3', '\x2', '\x2', '\x2', '\x1F71', 
		'\x1F72', '\x3', '\x2', '\x2', '\x2', '\x1F72', '\x1F78', '\x3', '\x2', 
		'\x2', '\x2', '\x1F73', '\x1F74', '\x6', '\x230', '\xD1', '\x2', '\x1F74', 
		'\x1F75', '\x5', '\x460', '\x231', '\x2', '\x1F75', '\x1F76', '\x5', '\x460', 
		'\x231', '\x2', '\x1F76', '\x1F78', '\x3', '\x2', '\x2', '\x2', '\x1F77', 
		'\x1F6C', '\x3', '\x2', '\x2', '\x2', '\x1F77', '\x1F73', '\x3', '\x2', 
		'\x2', '\x2', '\x1F78', '\x45F', '\x3', '\x2', '\x2', '\x2', '\x1F79', 
		'\x1F7A', '\a', '\x197', '\x2', '\x2', '\x1F7A', '\x1F7B', '\x5', '\x456', 
		'\x22C', '\x2', '\x1F7B', '\x461', '\x3', '\x2', '\x2', '\x2', '\x1F7C', 
		'\x1F7D', '\t', '\x82', '\x2', '\x2', '\x1F7D', '\x463', '\x3', '\x2', 
		'\x2', '\x2', '\x1F7E', '\x1F7F', '\t', '\x83', '\x2', '\x2', '\x1F7F', 
		'\x465', '\x3', '\x2', '\x2', '\x2', '\x1F80', '\x1F81', '\t', '\x84', 
		'\x2', '\x2', '\x1F81', '\x467', '\x3', '\x2', '\x2', '\x2', '\x1F82', 
		'\x1F88', '\a', '\x17E', '\x2', '\x2', '\x1F83', '\x1F84', '\x6', '\x235', 
		'\xD2', '\x2', '\x1F84', '\x1F88', '\a', '\x1A7', '\x2', '\x2', '\x1F85', 
		'\x1F88', '\a', '\x180', '\x2', '\x2', '\x1F86', '\x1F88', '\a', '\x17F', 
		'\x2', '\x2', '\x1F87', '\x1F82', '\x3', '\x2', '\x2', '\x2', '\x1F87', 
		'\x1F83', '\x3', '\x2', '\x2', '\x2', '\x1F87', '\x1F85', '\x3', '\x2', 
		'\x2', '\x2', '\x1F87', '\x1F86', '\x3', '\x2', '\x2', '\x2', '\x1F88', 
		'\x469', '\x3', '\x2', '\x2', '\x2', '\x1F89', '\x1F93', '\x5', '\x476', 
		'\x23C', '\x2', '\x1F8A', '\x1F93', '\x5', '\x47C', '\x23F', '\x2', '\x1F8B', 
		'\x1F93', '\x5', '\x482', '\x242', '\x2', '\x1F8C', '\x1F93', '\x5', '\x480', 
		'\x241', '\x2', '\x1F8D', '\x1F93', '\x5', '\x47E', '\x240', '\x2', '\x1F8E', 
		'\x1F90', '\a', '\x301', '\x2', '\x2', '\x1F8F', '\x1F8E', '\x3', '\x2', 
		'\x2', '\x2', '\x1F8F', '\x1F90', '\x3', '\x2', '\x2', '\x2', '\x1F90', 
		'\x1F91', '\x3', '\x2', '\x2', '\x2', '\x1F91', '\x1F93', '\t', '\x85', 
		'\x2', '\x2', '\x1F92', '\x1F89', '\x3', '\x2', '\x2', '\x2', '\x1F92', 
		'\x1F8A', '\x3', '\x2', '\x2', '\x2', '\x1F92', '\x1F8B', '\x3', '\x2', 
		'\x2', '\x2', '\x1F92', '\x1F8C', '\x3', '\x2', '\x2', '\x2', '\x1F92', 
		'\x1F8D', '\x3', '\x2', '\x2', '\x2', '\x1F92', '\x1F8F', '\x3', '\x2', 
		'\x2', '\x2', '\x1F93', '\x46B', '\x3', '\x2', '\x2', '\x2', '\x1F94', 
		'\x1F9A', '\x5', '\x46A', '\x236', '\x2', '\x1F95', '\x1F96', '\a', '\x189', 
		'\x2', '\x2', '\x1F96', '\x1F9A', '\x5', '\x462', '\x232', '\x2', '\x1F97', 
		'\x1F98', '\a', '\x18A', '\x2', '\x2', '\x1F98', '\x1F9A', '\x5', '\x462', 
		'\x232', '\x2', '\x1F99', '\x1F94', '\x3', '\x2', '\x2', '\x2', '\x1F99', 
		'\x1F95', '\x3', '\x2', '\x2', '\x2', '\x1F99', '\x1F97', '\x3', '\x2', 
		'\x2', '\x2', '\x1F9A', '\x46D', '\x3', '\x2', '\x2', '\x2', '\x1F9B', 
		'\x1F9C', '\a', '\x19B', '\x2', '\x2', '\x1F9C', '\x1FA1', '\x5', '\x472', 
		'\x23A', '\x2', '\x1F9D', '\x1F9E', '\a', '\x198', '\x2', '\x2', '\x1F9E', 
		'\x1FA0', '\x5', '\x472', '\x23A', '\x2', '\x1F9F', '\x1F9D', '\x3', '\x2', 
		'\x2', '\x2', '\x1FA0', '\x1FA3', '\x3', '\x2', '\x2', '\x2', '\x1FA1', 
		'\x1F9F', '\x3', '\x2', '\x2', '\x2', '\x1FA1', '\x1FA2', '\x3', '\x2', 
		'\x2', '\x2', '\x1FA2', '\x1FA4', '\x3', '\x2', '\x2', '\x2', '\x1FA3', 
		'\x1FA1', '\x3', '\x2', '\x2', '\x2', '\x1FA4', '\x1FA5', '\a', '\x19C', 
		'\x2', '\x2', '\x1FA5', '\x46F', '\x3', '\x2', '\x2', '\x2', '\x1FA6', 
		'\x1FAA', '\a', '\x306', '\x2', '\x2', '\x1FA7', '\x1FA8', '\x6', '\x239', 
		'\xD3', '\x2', '\x1FA8', '\x1FAA', '\a', '\x305', '\x2', '\x2', '\x1FA9', 
		'\x1FA6', '\x3', '\x2', '\x2', '\x2', '\x1FA9', '\x1FA7', '\x3', '\x2', 
		'\x2', '\x2', '\x1FAA', '\x471', '\x3', '\x2', '\x2', '\x2', '\x1FAB', 
		'\x1FAF', '\x5', '\x470', '\x239', '\x2', '\x1FAC', '\x1FAF', '\a', '\x1A7', 
		'\x2', '\x2', '\x1FAD', '\x1FAF', '\a', '\x1A8', '\x2', '\x2', '\x1FAE', 
		'\x1FAB', '\x3', '\x2', '\x2', '\x2', '\x1FAE', '\x1FAC', '\x3', '\x2', 
		'\x2', '\x2', '\x1FAE', '\x1FAD', '\x3', '\x2', '\x2', '\x2', '\x1FAF', 
		'\x473', '\x3', '\x2', '\x2', '\x2', '\x1FB0', '\x1FB4', '\x5', '\x470', 
		'\x239', '\x2', '\x1FB1', '\x1FB2', '\x6', '\x23B', '\xD4', '\x2', '\x1FB2', 
		'\x1FB4', '\a', '\x1A7', '\x2', '\x2', '\x1FB3', '\x1FB0', '\x3', '\x2', 
		'\x2', '\x2', '\x1FB3', '\x1FB1', '\x3', '\x2', '\x2', '\x2', '\x1FB4', 
		'\x475', '\x3', '\x2', '\x2', '\x2', '\x1FB5', '\x1FB7', '\a', '\x301', 
		'\x2', '\x2', '\x1FB6', '\x1FB5', '\x3', '\x2', '\x2', '\x2', '\x1FB6', 
		'\x1FB7', '\x3', '\x2', '\x2', '\x2', '\x1FB7', '\x1FB8', '\x3', '\x2', 
		'\x2', '\x2', '\x1FB8', '\x1FBB', '\x5', '\x470', '\x239', '\x2', '\x1FB9', 
		'\x1FBB', '\a', '\x303', '\x2', '\x2', '\x1FBA', '\x1FB6', '\x3', '\x2', 
		'\x2', '\x2', '\x1FBA', '\x1FB9', '\x3', '\x2', '\x2', '\x2', '\x1FBB', 
		'\x1FBF', '\x3', '\x2', '\x2', '\x2', '\x1FBC', '\x1FBE', '\x5', '\x470', 
		'\x239', '\x2', '\x1FBD', '\x1FBC', '\x3', '\x2', '\x2', '\x2', '\x1FBE', 
		'\x1FC1', '\x3', '\x2', '\x2', '\x2', '\x1FBF', '\x1FBD', '\x3', '\x2', 
		'\x2', '\x2', '\x1FBF', '\x1FC0', '\x3', '\x2', '\x2', '\x2', '\x1FC0', 
		'\x477', '\x3', '\x2', '\x2', '\x2', '\x1FC1', '\x1FBF', '\x3', '\x2', 
		'\x2', '\x2', '\x1FC2', '\x1FC3', '\x5', '\x470', '\x239', '\x2', '\x1FC3', 
		'\x479', '\x3', '\x2', '\x2', '\x2', '\x1FC4', '\x1FC9', '\x5', '\x470', 
		'\x239', '\x2', '\x1FC5', '\x1FC6', '\a', '\x198', '\x2', '\x2', '\x1FC6', 
		'\x1FC8', '\x5', '\x470', '\x239', '\x2', '\x1FC7', '\x1FC5', '\x3', '\x2', 
		'\x2', '\x2', '\x1FC8', '\x1FCB', '\x3', '\x2', '\x2', '\x2', '\x1FC9', 
		'\x1FC7', '\x3', '\x2', '\x2', '\x2', '\x1FC9', '\x1FCA', '\x3', '\x2', 
		'\x2', '\x2', '\x1FCA', '\x47B', '\x3', '\x2', '\x2', '\x2', '\x1FCB', 
		'\x1FC9', '\x3', '\x2', '\x2', '\x2', '\x1FCC', '\x1FCD', '\t', '\x84', 
		'\x2', '\x2', '\x1FCD', '\x47D', '\x3', '\x2', '\x2', '\x2', '\x1FCE', 
		'\x1FCF', '\t', '\x86', '\x2', '\x2', '\x1FCF', '\x47F', '\x3', '\x2', 
		'\x2', '\x2', '\x1FD0', '\x1FD1', '\t', '\x87', '\x2', '\x2', '\x1FD1', 
		'\x481', '\x3', '\x2', '\x2', '\x2', '\x1FD2', '\x1FD3', '\a', 'r', '\x2', 
		'\x2', '\x1FD3', '\x1FD9', '\a', '\x306', '\x2', '\x2', '\x1FD4', '\x1FD5', 
		'\a', '\x162', '\x2', '\x2', '\x1FD5', '\x1FD9', '\a', '\x306', '\x2', 
		'\x2', '\x1FD6', '\x1FD7', '\a', '\x15F', '\x2', '\x2', '\x1FD7', '\x1FD9', 
		'\a', '\x306', '\x2', '\x2', '\x1FD8', '\x1FD2', '\x3', '\x2', '\x2', 
		'\x2', '\x1FD8', '\x1FD4', '\x3', '\x2', '\x2', '\x2', '\x1FD8', '\x1FD6', 
		'\x3', '\x2', '\x2', '\x2', '\x1FD9', '\x483', '\x3', '\x2', '\x2', '\x2', 
		'\x1FDA', '\x1FDD', '\x5', '\x38A', '\x1C6', '\x2', '\x1FDB', '\x1FDD', 
		'\x5', '\x488', '\x245', '\x2', '\x1FDC', '\x1FDA', '\x3', '\x2', '\x2', 
		'\x2', '\x1FDC', '\x1FDB', '\x3', '\x2', '\x2', '\x2', '\x1FDD', '\x485', 
		'\x3', '\x2', '\x2', '\x2', '\x1FDE', '\x1FDF', '\x5', '\x488', '\x245', 
		'\x2', '\x1FDF', '\x487', '\x3', '\x2', '\x2', '\x2', '\x1FE0', '\x1FE1', 
		'\a', '\x19B', '\x2', '\x2', '\x1FE1', '\x1FE2', '\a', '\x17E', '\x2', 
		'\x2', '\x1FE2', '\x1FE3', '\a', '\x198', '\x2', '\x2', '\x1FE3', '\x1FE4', 
		'\a', '\x17E', '\x2', '\x2', '\x1FE4', '\x1FE5', '\a', '\x19C', '\x2', 
		'\x2', '\x1FE5', '\x489', '\x3', '\x2', '\x2', '\x2', '\x1FE6', '\x1FE9', 
		'\a', '\x306', '\x2', '\x2', '\x1FE7', '\x1FE9', '\x5', '\x456', '\x22C', 
		'\x2', '\x1FE8', '\x1FE6', '\x3', '\x2', '\x2', '\x2', '\x1FE8', '\x1FE7', 
		'\x3', '\x2', '\x2', '\x2', '\x1FE9', '\x48B', '\x3', '\x2', '\x2', '\x2', 
		'\x1FEA', '\x1FED', '\x5', '\x454', '\x22B', '\x2', '\x1FEB', '\x1FED', 
		'\x5', '\x4AA', '\x256', '\x2', '\x1FEC', '\x1FEA', '\x3', '\x2', '\x2', 
		'\x2', '\x1FEC', '\x1FEB', '\x3', '\x2', '\x2', '\x2', '\x1FED', '\x48D', 
		'\x3', '\x2', '\x2', '\x2', '\x1FEE', '\x1FF1', '\x5', '\x448', '\x225', 
		'\x2', '\x1FEF', '\x1FF1', '\x5', '\x470', '\x239', '\x2', '\x1FF0', '\x1FEE', 
		'\x3', '\x2', '\x2', '\x2', '\x1FF0', '\x1FEF', '\x3', '\x2', '\x2', '\x2', 
		'\x1FF1', '\x48F', '\x3', '\x2', '\x2', '\x2', '\x1FF2', '\x1FF5', '\x5', 
		'\x468', '\x235', '\x2', '\x1FF3', '\x1FF5', '\x5', '\x454', '\x22B', 
		'\x2', '\x1FF4', '\x1FF2', '\x3', '\x2', '\x2', '\x2', '\x1FF4', '\x1FF3', 
		'\x3', '\x2', '\x2', '\x2', '\x1FF5', '\x491', '\x3', '\x2', '\x2', '\x2', 
		'\x1FF6', '\x1FF7', '\a', '\x19B', '\x2', '\x2', '\x1FF7', '\x1FF8', '\a', 
		'\x19C', '\x2', '\x2', '\x1FF8', '\x493', '\x3', '\x2', '\x2', '\x2', 
		'\x1FF9', '\x1FFA', '\t', '\x88', '\x2', '\x2', '\x1FFA', '\x495', '\x3', 
		'\x2', '\x2', '\x2', '\x1FFB', '\x1FFC', '\t', '\x89', '\x2', '\x2', '\x1FFC', 
		'\x497', '\x3', '\x2', '\x2', '\x2', '\x1FFD', '\x1FFE', '\a', '\x9D', 
		'\x2', '\x2', '\x1FFE', '\x2004', '\a', '\x197', '\x2', '\x2', '\x1FFF', 
		'\x2000', '\a', '\xB6', '\x2', '\x2', '\x2000', '\x2004', '\a', '\x197', 
		'\x2', '\x2', '\x2001', '\x2002', '\a', '\x136', '\x2', '\x2', '\x2002', 
		'\x2004', '\a', '\x197', '\x2', '\x2', '\x2003', '\x1FFD', '\x3', '\x2', 
		'\x2', '\x2', '\x2003', '\x1FFF', '\x3', '\x2', '\x2', '\x2', '\x2003', 
		'\x2001', '\x3', '\x2', '\x2', '\x2', '\x2004', '\x499', '\x3', '\x2', 
		'\x2', '\x2', '\x2005', '\x2006', '\a', '\x2B3', '\x2', '\x2', '\x2006', 
		'\x2010', '\a', '\x197', '\x2', '\x2', '\x2007', '\x2008', '\a', '\x2C2', 
		'\x2', '\x2', '\x2008', '\x2010', '\a', '\x197', '\x2', '\x2', '\x2009', 
		'\x200A', '\a', '\x9D', '\x2', '\x2', '\x200A', '\x2010', '\a', '\x197', 
		'\x2', '\x2', '\x200B', '\x200C', '\a', '\xB6', '\x2', '\x2', '\x200C', 
		'\x2010', '\a', '\x197', '\x2', '\x2', '\x200D', '\x200E', '\a', '\x136', 
		'\x2', '\x2', '\x200E', '\x2010', '\a', '\x197', '\x2', '\x2', '\x200F', 
		'\x2005', '\x3', '\x2', '\x2', '\x2', '\x200F', '\x2007', '\x3', '\x2', 
		'\x2', '\x2', '\x200F', '\x2009', '\x3', '\x2', '\x2', '\x2', '\x200F', 
		'\x200B', '\x3', '\x2', '\x2', '\x2', '\x200F', '\x200D', '\x3', '\x2', 
		'\x2', '\x2', '\x2010', '\x49B', '\x3', '\x2', '\x2', '\x2', '\x2011', 
		'\x2019', '\x6', '\x24F', '\xD5', '\x2', '\x2012', '\x201A', '\x5', '\x4A2', 
		'\x252', '\x2', '\x2013', '\x201A', '\x5', '\x4AE', '\x258', '\x2', '\x2014', 
		'\x201A', '\a', '\x13', '\x2', '\x2', '\x2015', '\x2016', '\x6', '\x24F', 
		'\xD6', '\x2', '\x2016', '\x201A', '\a', ':', '\x2', '\x2', '\x2017', 
		'\x2018', '\x6', '\x24F', '\xD7', '\x2', '\x2018', '\x201A', '\a', '\x2EB', 
		'\x2', '\x2', '\x2019', '\x2012', '\x3', '\x2', '\x2', '\x2', '\x2019', 
		'\x2013', '\x3', '\x2', '\x2', '\x2', '\x2019', '\x2014', '\x3', '\x2', 
		'\x2', '\x2', '\x2019', '\x2015', '\x3', '\x2', '\x2', '\x2', '\x2019', 
		'\x2017', '\x3', '\x2', '\x2', '\x2', '\x201A', '\x2023', '\x3', '\x2', 
		'\x2', '\x2', '\x201B', '\x2021', '\x5', '\x4A6', '\x254', '\x2', '\x201C', 
		'\x2021', '\x5', '\x49E', '\x250', '\x2', '\x201D', '\x2021', '\x5', '\x4A0', 
		'\x251', '\x2', '\x201E', '\x2021', '\x5', '\x4A4', '\x253', '\x2', '\x201F', 
		'\x2021', '\x5', '\x4AC', '\x257', '\x2', '\x2020', '\x201B', '\x3', '\x2', 
		'\x2', '\x2', '\x2020', '\x201C', '\x3', '\x2', '\x2', '\x2', '\x2020', 
		'\x201D', '\x3', '\x2', '\x2', '\x2', '\x2020', '\x201E', '\x3', '\x2', 
		'\x2', '\x2', '\x2020', '\x201F', '\x3', '\x2', '\x2', '\x2', '\x2021', 
		'\x2023', '\x3', '\x2', '\x2', '\x2', '\x2022', '\x2011', '\x3', '\x2', 
		'\x2', '\x2', '\x2022', '\x2020', '\x3', '\x2', '\x2', '\x2', '\x2023', 
		'\x49D', '\x3', '\x2', '\x2', '\x2', '\x2024', '\x2025', '\t', '\x8A', 
		'\x2', '\x2', '\x2025', '\x49F', '\x3', '\x2', '\x2', '\x2', '\x2026', 
		'\x2027', '\t', '\x8B', '\x2', '\x2', '\x2027', '\x4A1', '\x3', '\x2', 
		'\x2', '\x2', '\x2028', '\x2033', '\x6', '\x252', '\xD8', '\x2', '\x2029', 
		'\x2034', '\x5', '\x4B0', '\x259', '\x2', '\x202A', '\x2034', '\a', '\x87', 
		'\x2', '\x2', '\x202B', '\x2034', '\a', '\x93', '\x2', '\x2', '\x202C', 
		'\x2034', '\a', '\xF1', '\x2', '\x2', '\x202D', '\x2034', '\a', '\x107', 
		'\x2', '\x2', '\x202E', '\x2034', '\a', '\x10B', '\x2', '\x2', '\x202F', 
		'\x2034', '\a', '\x11A', '\x2', '\x2', '\x2030', '\x2034', '\a', '\x11D', 
		'\x2', '\x2', '\x2031', '\x2034', '\a', '\x2E6', '\x2', '\x2', '\x2032', 
		'\x2034', '\a', '\x151', '\x2', '\x2', '\x2033', '\x2029', '\x3', '\x2', 
		'\x2', '\x2', '\x2033', '\x202A', '\x3', '\x2', '\x2', '\x2', '\x2033', 
		'\x202B', '\x3', '\x2', '\x2', '\x2', '\x2033', '\x202C', '\x3', '\x2', 
		'\x2', '\x2', '\x2033', '\x202D', '\x3', '\x2', '\x2', '\x2', '\x2033', 
		'\x202E', '\x3', '\x2', '\x2', '\x2', '\x2033', '\x202F', '\x3', '\x2', 
		'\x2', '\x2', '\x2033', '\x2030', '\x3', '\x2', '\x2', '\x2', '\x2033', 
		'\x2031', '\x3', '\x2', '\x2', '\x2', '\x2033', '\x2032', '\x3', '\x2', 
		'\x2', '\x2', '\x2034', '\x203B', '\x3', '\x2', '\x2', '\x2', '\x2035', 
		'\x2039', '\x5', '\x4A6', '\x254', '\x2', '\x2036', '\x2039', '\x5', '\x4A4', 
		'\x253', '\x2', '\x2037', '\x2039', '\x5', '\x4AC', '\x257', '\x2', '\x2038', 
		'\x2035', '\x3', '\x2', '\x2', '\x2', '\x2038', '\x2036', '\x3', '\x2', 
		'\x2', '\x2', '\x2038', '\x2037', '\x3', '\x2', '\x2', '\x2', '\x2039', 
		'\x203B', '\x3', '\x2', '\x2', '\x2', '\x203A', '\x2028', '\x3', '\x2', 
		'\x2', '\x2', '\x203A', '\x2038', '\x3', '\x2', '\x2', '\x2', '\x203B', 
		'\x4A3', '\x3', '\x2', '\x2', '\x2', '\x203C', '\x203D', '\t', '\x8C', 
		'\x2', '\x2', '\x203D', '\x4A5', '\x3', '\x2', '\x2', '\x2', '\x203E', 
		'\x203F', '\t', '\x8D', '\x2', '\x2', '\x203F', '\x4A7', '\x3', '\x2', 
		'\x2', '\x2', '\x2040', '\x2043', '\x6', '\x255', '\xD9', '\x2', '\x2041', 
		'\x2044', '\x5', '\x4B0', '\x259', '\x2', '\x2042', '\x2044', '\x5', '\x4AE', 
		'\x258', '\x2', '\x2043', '\x2041', '\x3', '\x2', '\x2', '\x2', '\x2043', 
		'\x2042', '\x3', '\x2', '\x2', '\x2', '\x2044', '\x204B', '\x3', '\x2', 
		'\x2', '\x2', '\x2045', '\x2049', '\x5', '\x4A6', '\x254', '\x2', '\x2046', 
		'\x2049', '\x5', '\x4A0', '\x251', '\x2', '\x2047', '\x2049', '\x5', '\x4AC', 
		'\x257', '\x2', '\x2048', '\x2045', '\x3', '\x2', '\x2', '\x2', '\x2048', 
		'\x2046', '\x3', '\x2', '\x2', '\x2', '\x2048', '\x2047', '\x3', '\x2', 
		'\x2', '\x2', '\x2049', '\x204B', '\x3', '\x2', '\x2', '\x2', '\x204A', 
		'\x2040', '\x3', '\x2', '\x2', '\x2', '\x204A', '\x2048', '\x3', '\x2', 
		'\x2', '\x2', '\x204B', '\x4A9', '\x3', '\x2', '\x2', '\x2', '\x204C', 
		'\x2051', '\x5', '\x4A6', '\x254', '\x2', '\x204D', '\x2051', '\x5', '\x49E', 
		'\x250', '\x2', '\x204E', '\x2051', '\x5', '\x4A0', '\x251', '\x2', '\x204F', 
		'\x2051', '\x5', '\x4A4', '\x253', '\x2', '\x2050', '\x204C', '\x3', '\x2', 
		'\x2', '\x2', '\x2050', '\x204D', '\x3', '\x2', '\x2', '\x2', '\x2050', 
		'\x204E', '\x3', '\x2', '\x2', '\x2', '\x2050', '\x204F', '\x3', '\x2', 
		'\x2', '\x2', '\x2051', '\x4AB', '\x3', '\x2', '\x2', '\x2', '\x2052', 
		'\x2053', '\t', '\x89', '\x2', '\x2', '\x2053', '\x4AD', '\x3', '\x2', 
		'\x2', '\x2', '\x2054', '\x205A', '\t', '\x8E', '\x2', '\x2', '\x2055', 
		'\x2056', '\x6', '\x258', '\xDA', '\x2', '\x2056', '\x205A', '\a', ':', 
		'\x2', '\x2', '\x2057', '\x2058', '\x6', '\x258', '\xDB', '\x2', '\x2058', 
		'\x205A', '\a', '\xA4', '\x2', '\x2', '\x2059', '\x2054', '\x3', '\x2', 
		'\x2', '\x2', '\x2059', '\x2055', '\x3', '\x2', '\x2', '\x2', '\x2059', 
		'\x2057', '\x3', '\x2', '\x2', '\x2', '\x205A', '\x4AF', '\x3', '\x2', 
		'\x2', '\x2', '\x205B', '\x2065', '\t', '\x8F', '\x2', '\x2', '\x205C', 
		'\x205D', '\x6', '\x259', '\xDC', '\x2', '\x205D', '\x2065', '\a', ':', 
		'\x2', '\x2', '\x205E', '\x205F', '\x6', '\x259', '\xDD', '\x2', '\x205F', 
		'\x2065', '\t', '\x90', '\x2', '\x2', '\x2060', '\x2061', '\x6', '\x259', 
		'\xDE', '\x2', '\x2061', '\x2065', '\t', '\x91', '\x2', '\x2', '\x2062', 
		'\x2063', '\x6', '\x259', '\xDF', '\x2', '\x2063', '\x2065', '\a', '\x2B5', 
		'\x2', '\x2', '\x2064', '\x205B', '\x3', '\x2', '\x2', '\x2', '\x2064', 
		'\x205C', '\x3', '\x2', '\x2', '\x2', '\x2064', '\x205E', '\x3', '\x2', 
		'\x2', '\x2', '\x2064', '\x2060', '\x3', '\x2', '\x2', '\x2', '\x2064', 
		'\x2062', '\x3', '\x2', '\x2', '\x2', '\x2065', '\x4B1', '\x3', '\x2', 
		'\x2', '\x2', '\x45A', '\x4B5', '\x4B9', '\x4BC', '\x4BE', '\x4E2', '\x4EA', 
		'\x4EF', '\x4FF', '\x506', '\x50D', '\x510', '\x517', '\x51C', '\x51F', 
		'\x524', '\x52A', '\x52C', '\x530', '\x534', '\x53D', '\x541', '\x546', 
		'\x54C', '\x553', '\x557', '\x55C', '\x561', '\x568', '\x56B', '\x571', 
		'\x574', '\x57B', '\x585', '\x58A', '\x58F', '\x597', '\x59D', '\x5A1', 
		'\x5A6', '\x5AF', '\x5B5', '\x5BB', '\x5C1', '\x5CB', '\x5D1', '\x5DA', 
		'\x5E8', '\x5EC', '\x5F2', '\x5F6', '\x5FE', '\x602', '\x607', '\x60A', 
		'\x610', '\x616', '\x61C', '\x620', '\x625', '\x629', '\x62D', '\x635', 
		'\x637', '\x63E', '\x646', '\x64E', '\x652', '\x669', '\x679', '\x67C', 
		'\x685', '\x68A', '\x690', '\x695', '\x699', '\x69E', '\x6A2', '\x6A6', 
		'\x6AA', '\x6AF', '\x6B3', '\x6B5', '\x6C0', '\x6C5', '\x6CB', '\x6D3', 
		'\x6DC', '\x6E1', '\x6E4', '\x6E9', '\x6F0', '\x6F8', '\x6FC', '\x701', 
		'\x708', '\x70D', '\x712', '\x71A', '\x71E', '\x723', '\x726', '\x729', 
		'\x72C', '\x733', '\x73A', '\x73E', '\x756', '\x75A', '\x760', '\x767', 
		'\x76A', '\x76E', '\x775', '\x778', '\x77B', '\x77E', '\x787', '\x78E', 
		'\x793', '\x796', '\x799', '\x79F', '\x7A5', '\x7A8', '\x7AD', '\x7B7', 
		'\x7BA', '\x7C0', '\x7C6', '\x7D0', '\x7D3', '\x7DB', '\x7E1', '\x7EC', 
		'\x7EF', '\x7F4', '\x807', '\x80A', '\x80D', '\x813', '\x816', '\x818', 
		'\x81E', '\x828', '\x832', '\x835', '\x838', '\x83D', '\x843', '\x850', 
		'\x854', '\x859', '\x862', '\x873', '\x886', '\x88F', '\x892', '\x89A', 
		'\x89F', '\x8A3', '\x8AA', '\x8AF', '\x8BE', '\x8C2', '\x8C8', '\x8CE', 
		'\x8D4', '\x8DA', '\x8E0', '\x8E5', '\x8E9', '\x8F1', '\x8F7', '\x8FD', 
		'\x902', '\x905', '\x908', '\x911', '\x914', '\x91F', '\x92B', '\x934', 
		'\x938', '\x941', '\x944', '\x94A', '\x94C', '\x950', '\x957', '\x964', 
		'\x96B', '\x971', '\x974', '\x985', '\x999', '\x99D', '\x9A3', '\x9A9', 
		'\x9AF', '\x9B4', '\x9BB', '\x9C2', '\x9C7', '\x9CA', '\x9CE', '\x9D2', 
		'\x9D7', '\x9DB', '\x9DF', '\x9E5', '\x9EA', '\x9ED', '\x9F1', '\x9F7', 
		'\x9FB', '\x9FF', '\xA07', '\xA0F', '\xA18', '\xA21', '\xA2E', '\xA31', 
		'\xA35', '\xA3B', '\xA43', '\xA48', '\xA4B', '\xA4E', '\xA51', '\xA54', 
		'\xA56', '\xA5C', '\xA5E', '\xA6D', '\xA73', '\xA7A', '\xA7D', '\xA7F', 
		'\xA81', '\xA8B', '\xA8D', '\xA91', '\xA94', '\xA97', '\xA9B', '\xAA1', 
		'\xAA4', '\xAAA', '\xAAD', '\xAB6', '\xABF', '\xAC3', '\xAC7', '\xACD', 
		'\xAD2', '\xAD7', '\xADC', '\xAE0', '\xAEC', '\xAEF', '\xAF4', '\xAFA', 
		'\xAFD', '\xB00', '\xB03', '\xB06', '\xB14', '\xB17', '\xB1B', '\xB1F', 
		'\xB25', '\xB2A', '\xB2E', '\xB33', '\xB36', '\xB3A', '\xB40', '\xB45', 
		'\xB4E', '\xB52', '\xB56', '\xB59', '\xB5E', '\xB61', '\xB63', '\xB67', 
		'\xB6A', '\xB70', '\xB72', '\xB79', '\xB7D', '\xB7F', '\xB84', '\xB88', 
		'\xB8C', '\xB92', '\xB9A', '\xB9F', '\xBA2', '\xBA5', '\xBA8', '\xBAB', 
		'\xBAF', '\xBBE', '\xBC2', '\xBC8', '\xBCB', '\xBCE', '\xBD4', '\xBD9', 
		'\xBDD', '\xBE0', '\xBE8', '\xBEA', '\xBF7', '\xC03', '\xC08', '\xC0B', 
		'\xC0E', '\xC13', '\xC19', '\xC29', '\xC3D', '\xC46', '\xC4A', '\xC51', 
		'\xC56', '\xC5F', '\xC66', '\xC71', '\xC78', '\xC83', '\xC8A', '\xC8E', 
		'\xC94', '\xC99', '\xC9E', '\xCA2', '\xCA8', '\xCAE', '\xCB0', '\xCB3', 
		'\xCB7', '\xCC1', '\xCC6', '\xCCB', '\xCD2', '\xCDB', '\xCE3', '\xCE8', 
		'\xCEC', '\xCF2', '\xCF5', '\xCF8', '\xCFC', '\xD00', '\xD0A', '\xD0E', 
		'\xD11', '\xD14', '\xD19', '\xD1F', '\xD23', '\xD29', '\xD2C', '\xD2E', 
		'\xD33', '\xD3F', '\xD48', '\xD55', '\xD58', '\xD5D', '\xD64', '\xD68', 
		'\xD6C', '\xD6E', '\xD7C', '\xD83', '\xD8C', '\xD92', '\xD9B', '\xD9F', 
		'\xDA3', '\xDAD', '\xDAF', '\xDB7', '\xDBE', '\xDC3', '\xDC7', '\xDCB', 
		'\xDCE', '\xDD4', '\xDD7', '\xDDA', '\xDE0', '\xDE7', '\xDEC', '\xDF0', 
		'\xDF3', '\xDF6', '\xDF9', '\xDFB', '\xDFF', '\xE07', '\xE0F', '\xE16', 
		'\xE1C', '\xE20', '\xE25', '\xE28', '\xE2B', '\xE2E', '\xE30', '\xE35', 
		'\xE3E', '\xE4B', '\xE4D', '\xE51', '\xE57', '\xE5A', '\xE5D', '\xE63', 
		'\xE6A', '\xE6C', '\xE74', '\xE7A', '\xE7F', '\xE82', '\xE89', '\xE8B', 
		'\xE94', '\xE9D', '\xEA6', '\xEAE', '\xEB2', '\xEB9', '\xEBC', '\xEBE', 
		'\xEC6', '\xECC', '\xED6', '\xEDD', '\xF29', '\xF37', '\xF3F', '\xF42', 
		'\xF4E', '\xF53', '\xF59', '\xF60', '\xF67', '\xF6E', '\xF75', '\xF7C', 
		'\xF83', '\xF86', '\xF8D', '\xF95', '\xF9D', '\xFA7', '\xFAD', '\xFB1', 
		'\xFB5', '\xFBA', '\xFBD', '\xFBF', '\xFC8', '\xFCE', '\xFD5', '\xFDA', 
		'\xFDF', '\xFE4', '\xFE7', '\xFEE', '\xFFB', '\x1001', '\x1007', '\x100E', 
		'\x1016', '\x101C', '\x1028', '\x102A', '\x1030', '\x1034', '\x1036', 
		'\x103A', '\x1048', '\x104E', '\x1056', '\x1062', '\x1066', '\x1074', 
		'\x1076', '\x107D', '\x1085', '\x1088', '\x108D', '\x1091', '\x1097', 
		'\x109A', '\x109F', '\x10AA', '\x10AC', '\x10B8', '\x10BD', '\x10C5', 
		'\x10CB', '\x10CD', '\x10CF', '\x10D5', '\x10E1', '\x10E6', '\x10E8', 
		'\x10EC', '\x10F2', '\x10F5', '\x10F8', '\x1102', '\x1104', '\x110A', 
		'\x1111', '\x1117', '\x1121', '\x1125', '\x112A', '\x113B', '\x114B', 
		'\x1150', '\x1158', '\x1160', '\x1165', '\x116B', '\x116E', '\x1170', 
		'\x1178', '\x1187', '\x118B', '\x118F', '\x1196', '\x119C', '\x11A2', 
		'\x11A4', '\x11A8', '\x11B3', '\x11BD', '\x11C2', '\x11C7', '\x11CC', 
		'\x11D4', '\x11D8', '\x11DD', '\x11E6', '\x11F2', '\x1200', '\x1209', 
		'\x120B', '\x1212', '\x1218', '\x121C', '\x1226', '\x122D', '\x1231', 
		'\x1237', '\x123B', '\x1242', '\x1245', '\x124E', '\x1254', '\x1259', 
		'\x1270', '\x1273', '\x1277', '\x127E', '\x1280', '\x1283', '\x1288', 
		'\x128A', '\x129F', '\x12A3', '\x12A5', '\x12A9', '\x12B5', '\x12BC', 
		'\x12C5', '\x12CC', '\x12CF', '\x12D3', '\x12D6', '\x12D9', '\x12DD', 
		'\x12E0', '\x12E4', '\x12E7', '\x12EC', '\x12EF', '\x12F4', '\x12F7', 
		'\x12FD', '\x1301', '\x1307', '\x130A', '\x1313', '\x1315', '\x131B', 
		'\x131F', '\x1322', '\x1325', '\x1329', '\x132F', '\x1332', '\x1335', 
		'\x133F', '\x1343', '\x134C', '\x134F', '\x1354', '\x1357', '\x135A', 
		'\x135E', '\x1361', '\x1366', '\x136A', '\x1372', '\x137F', '\x1391', 
		'\x1396', '\x139B', '\x13A3', '\x13A9', '\x13AB', '\x13AF', '\x13B2', 
		'\x13C0', '\x13CA', '\x13CE', '\x13D6', '\x13D9', '\x13DD', '\x13E7', 
		'\x13EB', '\x13F2', '\x13F7', '\x13FF', '\x1404', '\x140A', '\x1411', 
		'\x1416', '\x141C', '\x1423', '\x142D', '\x142F', '\x1437', '\x143C', 
		'\x1440', '\x1443', '\x144A', '\x144F', '\x1453', '\x145E', '\x1466', 
		'\x146A', '\x146D', '\x1470', '\x1474', '\x1478', '\x147D', '\x1483', 
		'\x1487', '\x1492', '\x1495', '\x1498', '\x149B', '\x14A3', '\x14A7', 
		'\x14AC', '\x14B4', '\x14BC', '\x14C2', '\x14CD', '\x14D7', '\x14DD', 
		'\x14EB', '\x14EE', '\x14F2', '\x14FD', '\x14FF', '\x1508', '\x1514', 
		'\x1516', '\x151D', '\x1523', '\x1529', '\x1531', '\x153C', '\x1540', 
		'\x155D', '\x155F', '\x1566', '\x1577', '\x157E', '\x158C', '\x1598', 
		'\x159E', '\x15A5', '\x15A8', '\x15CA', '\x15D2', '\x15D4', '\x15E0', 
		'\x15E5', '\x15EB', '\x15F3', '\x15FA', '\x1600', '\x1605', '\x160B', 
		'\x1610', '\x1615', '\x161B', '\x1620', '\x1626', '\x162E', '\x1636', 
		'\x163E', '\x1646', '\x164B', '\x1651', '\x1656', '\x165A', '\x165E', 
		'\x1663', '\x1665', '\x1678', '\x167C', '\x1683', '\x168F', '\x1692', 
		'\x1696', '\x169B', '\x16A0', '\x16A4', '\x16AE', '\x16B7', '\x16B9', 
		'\x16BC', '\x16C5', '\x16CC', '\x16D9', '\x16DE', '\x16E5', '\x16EB', 
		'\x1705', '\x1724', '\x1738', '\x173E', '\x1742', '\x175D', '\x1769', 
		'\x1776', '\x177A', '\x177E', '\x179A', '\x17D2', '\x17DD', '\x17E1', 
		'\x17ED', '\x17F2', '\x17FF', '\x1813', '\x1817', '\x1828', '\x182B', 
		'\x1830', '\x1833', '\x183C', '\x1840', '\x1846', '\x184C', '\x1850', 
		'\x185B', '\x1861', '\x1863', '\x186A', '\x1871', '\x1875', '\x187C', 
		'\x1881', '\x1886', '\x1889', '\x188E', '\x1892', '\x1896', '\x189B', 
		'\x18A0', '\x18A2', '\x18A6', '\x18B3', '\x18B7', '\x18BA', '\x18BE', 
		'\x18C2', '\x18C6', '\x18CB', '\x18CF', '\x18D3', '\x18DC', '\x18DE', 
		'\x18E5', '\x18EB', '\x18F3', '\x1908', '\x190D', '\x1914', '\x192B', 
		'\x193B', '\x1945', '\x1949', '\x1950', '\x1953', '\x195E', '\x1967', 
		'\x196A', '\x1971', '\x1976', '\x1990', '\x1996', '\x199C', '\x19A0', 
		'\x19AA', '\x19AE', '\x19BB', '\x19C7', '\x19D9', '\x19E1', '\x19EB', 
		'\x19EE', '\x19F3', '\x19F7', '\x19FE', '\x1A03', '\x1A0A', '\x1A12', 
		'\x1A15', '\x1A1A', '\x1A1D', '\x1A25', '\x1A28', '\x1A36', '\x1A39', 
		'\x1A46', '\x1A4A', '\x1A4C', '\x1A51', '\x1A56', '\x1A5C', '\x1A62', 
		'\x1A68', '\x1A6D', '\x1A70', '\x1A76', '\x1A7B', '\x1A7E', '\x1A84', 
		'\x1A88', '\x1A8E', '\x1A90', '\x1A93', '\x1A99', '\x1A9F', '\x1AA7', 
		'\x1AA9', '\x1AAB', '\x1AAF', '\x1AB5', '\x1ABA', '\x1ABE', '\x1AC3', 
		'\x1AC9', '\x1AD0', '\x1AD3', '\x1AD5', '\x1AD8', '\x1AE2', '\x1AE6', 
		'\x1AEC', '\x1AF3', '\x1AF8', '\x1B06', '\x1B0B', '\x1B13', '\x1B18', 
		'\x1B1C', '\x1B1F', '\x1B24', '\x1B28', '\x1B30', '\x1B38', '\x1B3A', 
		'\x1B41', '\x1B49', '\x1B50', '\x1B53', '\x1B5B', '\x1B63', '\x1B65', 
		'\x1B6B', '\x1B71', '\x1B75', '\x1B7D', '\x1B88', '\x1B91', '\x1B94', 
		'\x1B99', '\x1B9B', '\x1B9E', '\x1BA1', '\x1BA5', '\x1BA8', '\x1BAC', 
		'\x1BB1', '\x1BB4', '\x1BB8', '\x1BBB', '\x1BBF', '\x1BC4', '\x1BC8', 
		'\x1BD4', '\x1BD8', '\x1BDE', '\x1BE1', '\x1BE6', '\x1BEA', '\x1BEE', 
		'\x1BF3', '\x1BFC', '\x1BFF', '\x1C03', '\x1C07', '\x1C0A', '\x1C0E', 
		'\x1C12', '\x1C17', '\x1C1C', '\x1C22', '\x1C27', '\x1C2C', '\x1C38', 
		'\x1C3D', '\x1C3F', '\x1C44', '\x1C4B', '\x1C53', '\x1C59', '\x1C5B', 
		'\x1C5F', '\x1C63', '\x1C67', '\x1C6B', '\x1C7A', '\x1C7F', '\x1C83', 
		'\x1C88', '\x1C8E', '\x1C92', '\x1C98', '\x1C9C', '\x1CA0', '\x1CA5', 
		'\x1CAA', '\x1CAF', '\x1CB4', '\x1CBA', '\x1CC0', '\x1CC5', '\x1CCA', 
		'\x1CD0', '\x1CD5', '\x1CDA', '\x1CDF', '\x1CE4', '\x1CEE', '\x1CF4', 
		'\x1CFA', '\x1D00', '\x1D03', '\x1D0A', '\x1D0F', '\x1D12', '\x1D16', 
		'\x1D19', '\x1D1D', '\x1D22', '\x1D26', '\x1D2B', '\x1D2F', '\x1D38', 
		'\x1D3B', '\x1D3E', '\x1D41', '\x1D45', '\x1D49', '\x1D4D', '\x1D5C', 
		'\x1D5F', '\x1D61', '\x1D66', '\x1D6F', '\x1D72', '\x1D76', '\x1D83', 
		'\x1D8F', '\x1D94', '\x1D99', '\x1DA2', '\x1DA7', '\x1DB0', '\x1DB5', 
		'\x1DB9', '\x1DBD', '\x1DC1', '\x1DC6', '\x1DCB', '\x1DD1', '\x1DD6', 
		'\x1DD9', '\x1DE0', '\x1DE9', '\x1DF0', '\x1DFE', '\x1E0A', '\x1E17', 
		'\x1E1F', '\x1E26', '\x1E2F', '\x1E35', '\x1E3D', '\x1E43', '\x1E4E', 
		'\x1E56', '\x1E5E', '\x1E66', '\x1E71', '\x1E73', '\x1E75', '\x1E77', 
		'\x1E7D', '\x1E83', '\x1E86', '\x1E8D', '\x1E8F', '\x1E91', '\x1E94', 
		'\x1E96', '\x1EA7', '\x1EAB', '\x1EAD', '\x1EB4', '\x1EC2', '\x1EC4', 
		'\x1ECA', '\x1ED4', '\x1EDD', '\x1EE8', '\x1EFE', '\x1F02', '\x1F1A', 
		'\x1F25', '\x1F27', '\x1F2B', '\x1F32', '\x1F3A', '\x1F41', '\x1F47', 
		'\x1F56', '\x1F5A', '\x1F61', '\x1F6A', '\x1F6F', '\x1F71', '\x1F77', 
		'\x1F87', '\x1F8F', '\x1F92', '\x1F99', '\x1FA1', '\x1FA9', '\x1FAE', 
		'\x1FB3', '\x1FB6', '\x1FBA', '\x1FBF', '\x1FC9', '\x1FD8', '\x1FDC', 
		'\x1FE8', '\x1FEC', '\x1FF0', '\x1FF4', '\x2003', '\x200F', '\x2019', 
		'\x2020', '\x2022', '\x2033', '\x2038', '\x203A', '\x2043', '\x2048', 
		'\x204A', '\x2050', '\x2059', '\x2064',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Workbench.Parsers
